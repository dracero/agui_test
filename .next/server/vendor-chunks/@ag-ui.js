"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ag-ui";
exports.ids = ["vendor-chunks/@ag-ui"];
exports.modules = {

/***/ "(rsc)/./node_modules/@ag-ui/client/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@ag-ui/client/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AGUIError: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError),\n/* harmony export */   AbstractAgent: () => (/* binding */ G),\n/* harmony export */   AssistantMessageSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AssistantMessageSchema),\n/* harmony export */   BaseEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.BaseEventSchema),\n/* harmony export */   BaseMessageSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.BaseMessageSchema),\n/* harmony export */   ContextSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ContextSchema),\n/* harmony export */   CustomEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.CustomEventSchema),\n/* harmony export */   DeveloperMessageSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.DeveloperMessageSchema),\n/* harmony export */   EventSchemas: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventSchemas),\n/* harmony export */   EventType: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType),\n/* harmony export */   FunctionCallSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.FunctionCallSchema),\n/* harmony export */   HttpAgent: () => (/* binding */ q),\n/* harmony export */   MessageSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.MessageSchema),\n/* harmony export */   MessagesSnapshotEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.MessagesSnapshotEventSchema),\n/* harmony export */   RawEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.RawEventSchema),\n/* harmony export */   RoleSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.RoleSchema),\n/* harmony export */   RunAgentInputSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.RunAgentInputSchema),\n/* harmony export */   RunErrorEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.RunErrorEventSchema),\n/* harmony export */   RunFinishedEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.RunFinishedEventSchema),\n/* harmony export */   RunStartedEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.RunStartedEventSchema),\n/* harmony export */   StateDeltaEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.StateDeltaEventSchema),\n/* harmony export */   StateSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.StateSchema),\n/* harmony export */   StateSnapshotEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.StateSnapshotEventSchema),\n/* harmony export */   StepFinishedEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.StepFinishedEventSchema),\n/* harmony export */   StepStartedEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.StepStartedEventSchema),\n/* harmony export */   SystemMessageSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.SystemMessageSchema),\n/* harmony export */   TextMessageChunkEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.TextMessageChunkEventSchema),\n/* harmony export */   TextMessageContentEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.TextMessageContentEventSchema),\n/* harmony export */   TextMessageEndEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.TextMessageEndEventSchema),\n/* harmony export */   TextMessageStartEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.TextMessageStartEventSchema),\n/* harmony export */   ThinkingEndEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ThinkingEndEventSchema),\n/* harmony export */   ThinkingStartEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ThinkingStartEventSchema),\n/* harmony export */   ThinkingTextMessageContentEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ThinkingTextMessageContentEventSchema),\n/* harmony export */   ThinkingTextMessageEndEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ThinkingTextMessageEndEventSchema),\n/* harmony export */   ThinkingTextMessageStartEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ThinkingTextMessageStartEventSchema),\n/* harmony export */   ToolCallArgsEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolCallArgsEventSchema),\n/* harmony export */   ToolCallChunkEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolCallChunkEventSchema),\n/* harmony export */   ToolCallEndEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolCallEndEventSchema),\n/* harmony export */   ToolCallResultEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolCallResultEventSchema),\n/* harmony export */   ToolCallSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolCallSchema),\n/* harmony export */   ToolCallStartEventSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolCallStartEventSchema),\n/* harmony export */   ToolMessageSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolMessageSchema),\n/* harmony export */   ToolSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.ToolSchema),\n/* harmony export */   UserMessageSchema: () => (/* reexport safe */ _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.UserMessageSchema),\n/* harmony export */   convertToLegacyEvents: () => (/* binding */ $),\n/* harmony export */   defaultApplyEvents: () => (/* binding */ K),\n/* harmony export */   parseProtoStream: () => (/* binding */ B),\n/* harmony export */   parseSSEStream: () => (/* binding */ z),\n/* harmony export */   runHttpRequest: () => (/* binding */ j),\n/* harmony export */   transformHttpEventStream: () => (/* binding */ J),\n/* harmony export */   verifyEvents: () => (/* binding */ U)\n/* harmony export */ });\n/* harmony import */ var _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-ui/core */ \"(rsc)/./node_modules/@ag-ui/core/dist/index.mjs\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ \"(rsc)/./node_modules/rxjs/dist/cjs/operators/index.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/observable/empty.js\");\n/* harmony import */ var fast_json_patch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-json-patch */ \"(rsc)/./node_modules/fast-json-patch/index.mjs\");\n/* harmony import */ var untruncate_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! untruncate-json */ \"(rsc)/./node_modules/untruncate-json/dist/esm/index.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/observable/throwError.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/observable/defer.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _ag_ui_proto__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ag-ui/proto */ \"(rsc)/./node_modules/@ag-ui/proto/dist/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/util/pipe.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\nvar ne=Object.defineProperty,ae=Object.defineProperties;var se=Object.getOwnPropertyDescriptors;var W=Object.getOwnPropertySymbols;var oe=Object.prototype.hasOwnProperty,re=Object.prototype.propertyIsEnumerable;var V=(u,o,n)=>o in u?ne(u,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):u[o]=n,L=(u,o)=>{for(var n in o||(o={}))oe.call(o,n)&&V(u,n,o[n]);if(W)for(var n of W(o))re.call(o,n)&&V(u,n,o[n]);return u},H=(u,o)=>ae(u,se(o));var C=u=>{if(typeof structuredClone==\"function\")return structuredClone(u);try{return JSON.parse(JSON.stringify(u))}catch(o){return L({},u)}};async function y(u,o,n,a){let e=o,s=n,l;for(let r of u)try{let i=await a(r,C(e),C(s));if(i===void 0)continue;if(i.messages!==void 0&&(e=i.messages),i.state!==void 0&&(s=i.state),l=i.stopPropagation,l===!0)break}catch(i){ false||process.env.JEST_WORKER_ID!==void 0||console.error(\"Subscriber error:\",i);continue}return L(L(L({},JSON.stringify(e)!==JSON.stringify(o)?{messages:e}:{}),JSON.stringify(s)!==JSON.stringify(n)?{state:s}:{}),l!==void 0?{stopPropagation:l}:{})}var K=(u,o,n,a)=>{let e=C(u.messages),s=C(u.state),l={},r=E=>{E.messages!==void 0&&(e=E.messages,l.messages=E.messages),E.state!==void 0&&(s=E.state,l.state=E.state)},i=()=>{let E=C(l);return l={},E.messages!==void 0||E.state!==void 0?(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(E):rxjs__WEBPACK_IMPORTED_MODULE_3__.EMPTY};return o.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.concatMap)(async E=>{var d;let h=await y(a,e,s,(g,t,S)=>{var m;return(m=g.onEvent)==null?void 0:m.call(g,{event:E,agent:n,input:u,messages:t,state:S})});if(r(h),h.stopPropagation===!0)return i();switch(E.type){case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_START:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onTextMessageStartEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});if(r(g),g.stopPropagation!==!0){let{messageId:t,role:S=\"assistant\"}=E,m={id:t,role:S,content:\"\"};e.push(m),r({messages:e})}return i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_CONTENT:{let{messageId:g,delta:t}=E,S=e.find(c=>c.id===g);if(!S)return console.warn(`TEXT_MESSAGE_CONTENT: No message found with ID '${g}'`),i();let m=await y(a,e,s,(c,T,x)=>{var O,P;return(P=c.onTextMessageContentEvent)==null?void 0:P.call(c,{event:E,messages:T,state:x,agent:n,input:u,textMessageBuffer:(O=S.content)!=null?O:\"\"})});return r(m),m.stopPropagation!==!0&&(S.content=(S.content||\"\")+t,r({messages:e})),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_END:{let{messageId:g}=E,t=e.find(m=>m.id===g);if(!t)return console.warn(`TEXT_MESSAGE_END: No message found with ID '${g}'`),i();let S=await y(a,e,s,(m,c,T)=>{var x,O;return(O=m.onTextMessageEndEvent)==null?void 0:O.call(m,{event:E,messages:c,state:T,agent:n,input:u,textMessageBuffer:(x=t.content)!=null?x:\"\"})});return r(S),await Promise.all(a.map(m=>{var c;(c=m.onNewMessage)==null||c.call(m,{message:t,messages:e,state:s,agent:n,input:u})})),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_START:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onToolCallStartEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});if(r(g),g.stopPropagation!==!0){let{toolCallId:t,toolCallName:S,parentMessageId:m}=E,c;m&&e.length>0&&e[e.length-1].id===m?c=e[e.length-1]:(c={id:m||t,role:\"assistant\",toolCalls:[]},e.push(c)),(d=c.toolCalls)!=null||(c.toolCalls=[]),c.toolCalls.push({id:t,type:\"function\",function:{name:S,arguments:\"\"}}),r({messages:e})}return i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_ARGS:{let{toolCallId:g,delta:t}=E,S=e.find(T=>{var x;return(x=T.toolCalls)==null?void 0:x.some(O=>O.id===g)});if(!S)return console.warn(`TOOL_CALL_ARGS: No message found containing tool call with ID '${g}'`),i();let m=S.toolCalls.find(T=>T.id===g);if(!m)return console.warn(`TOOL_CALL_ARGS: No tool call found with ID '${g}'`),i();let c=await y(a,e,s,(T,x,O)=>{var k;let P=m.function.arguments,F=m.function.name,D={};try{D=(0,untruncate_json__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(P)}catch(qe){}return(k=T.onToolCallArgsEvent)==null?void 0:k.call(T,{event:E,messages:x,state:O,agent:n,input:u,toolCallBuffer:P,toolCallName:F,partialToolCallArgs:D})});return r(c),c.stopPropagation!==!0&&(m.function.arguments+=t,r({messages:e})),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_END:{let{toolCallId:g}=E,t=e.find(c=>{var T;return(T=c.toolCalls)==null?void 0:T.some(x=>x.id===g)});if(!t)return console.warn(`TOOL_CALL_END: No message found containing tool call with ID '${g}'`),i();let S=t.toolCalls.find(c=>c.id===g);if(!S)return console.warn(`TOOL_CALL_END: No tool call found with ID '${g}'`),i();let m=await y(a,e,s,(c,T,x)=>{var D;let O=S.function.arguments,P=S.function.name,F={};try{F=JSON.parse(O)}catch(k){}return(D=c.onToolCallEndEvent)==null?void 0:D.call(c,{event:E,messages:T,state:x,agent:n,input:u,toolCallName:P,toolCallArgs:F})});return r(m),await Promise.all(a.map(c=>{var T;(T=c.onNewToolCall)==null||T.call(c,{toolCall:S,messages:e,state:s,agent:n,input:u})})),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_RESULT:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onToolCallResultEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});if(r(g),g.stopPropagation!==!0){let{messageId:t,toolCallId:S,content:m,role:c}=E,T={id:t,toolCallId:S,role:c||\"tool\",content:m};e.push(T),await Promise.all(a.map(x=>{var O;(O=x.onNewMessage)==null||O.call(x,{message:T,messages:e,state:s,agent:n,input:u})})),r({messages:e})}return i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_SNAPSHOT:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onStateSnapshotEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});if(r(g),g.stopPropagation!==!0){let{snapshot:t}=E;s=t,r({state:s})}return i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_DELTA:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onStateDeltaEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});if(r(g),g.stopPropagation!==!0){let{delta:t}=E;try{s=(0,fast_json_patch__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(s,t,!0,!1).newDocument,r({state:s})}catch(S){let m=S instanceof Error?S.message:String(S);console.warn(`Failed to apply state patch:\nCurrent state: ${JSON.stringify(s,null,2)}\nPatch operations: ${JSON.stringify(t,null,2)}\nError: ${m}`)}}return i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.MESSAGES_SNAPSHOT:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onMessagesSnapshotEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});if(r(g),g.stopPropagation!==!0){let{messages:t}=E;e=t,r({messages:e})}return i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RAW:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onRawEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});return r(g),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.CUSTOM:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onCustomEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});return r(g),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_STARTED:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onRunStartedEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});return r(g),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_FINISHED:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onRunFinishedEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u,result:E.result})});return r(g),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_ERROR:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onRunErrorEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});return r(g),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_STARTED:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onStepStartedEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});return r(g),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_FINISHED:{let g=await y(a,e,s,(t,S,m)=>{var c;return(c=t.onStepFinishedEvent)==null?void 0:c.call(t,{event:E,messages:S,state:m,agent:n,input:u})});return r(g),i()}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_CHUNK:throw new Error(\"TEXT_MESSAGE_CHUNK must be tranformed before being applied\");case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_CHUNK:throw new Error(\"TOOL_CALL_CHUNK must be tranformed before being applied\");case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_START:return i();case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_END:return i();case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_START:return i();case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_CONTENT:return i();case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_END:return i()}let w=E.type;return i()}),(0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.mergeAll)(),a.length>0?(0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.defaultIfEmpty)({}):E=>E)};var U=u=>o=>{let n=new Map,a=new Map,e=!1,s=!1,l=!1,r=new Map,i=!1,E=!1,h=!1,w=()=>{n.clear(),a.clear(),r.clear(),i=!1,E=!1,e=!1,s=!1,h=!0};return o.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.mergeMap)(d=>{let g=d.type;if(u&&console.debug(\"[VERIFY]:\",JSON.stringify(d)),s)return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send event type '${g}': The run has already errored with 'RUN_ERROR'. No further events can be sent.`));if(e&&g!==_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_ERROR&&g!==_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_STARTED)return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send event type '${g}': The run has already finished with 'RUN_FINISHED'. Start a new run with 'RUN_STARTED'.`));if(l){if(g===_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_STARTED){if(h&&!e)return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"Cannot send 'RUN_STARTED' while a run is still active. The previous run must be finished with 'RUN_FINISHED' before starting a new run.\"));e&&w()}}else if(l=!0,g!==_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_STARTED&&g!==_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_ERROR)return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"First event must be 'RUN_STARTED'\"));switch(g){case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_START:{let t=d.messageId;return n.has(t)?(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'TEXT_MESSAGE_START' event: A text message with ID '${t}' is already in progress. Complete it with 'TEXT_MESSAGE_END' first.`)):(n.set(t,!0),(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_CONTENT:{let t=d.messageId;return n.has(t)?(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'TEXT_MESSAGE_CONTENT' event: No active text message found with ID '${t}'. Start a text message with 'TEXT_MESSAGE_START' first.`))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_END:{let t=d.messageId;return n.has(t)?(n.delete(t),(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'TEXT_MESSAGE_END' event: No active text message found with ID '${t}'. A 'TEXT_MESSAGE_START' event must be sent first.`))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_START:{let t=d.toolCallId;return a.has(t)?(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'TOOL_CALL_START' event: A tool call with ID '${t}' is already in progress. Complete it with 'TOOL_CALL_END' first.`)):(a.set(t,!0),(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_ARGS:{let t=d.toolCallId;return a.has(t)?(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'TOOL_CALL_ARGS' event: No active tool call found with ID '${t}'. Start a tool call with 'TOOL_CALL_START' first.`))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_END:{let t=d.toolCallId;return a.has(t)?(a.delete(t),(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'TOOL_CALL_END' event: No active tool call found with ID '${t}'. A 'TOOL_CALL_START' event must be sent first.`))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_STARTED:{let t=d.stepName;return r.has(t)?(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Step \"${t}\" is already active for 'STEP_STARTED'`)):(r.set(t,!0),(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_FINISHED:{let t=d.stepName;return r.has(t)?(r.delete(t),(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'STEP_FINISHED' for step \"${t}\" that was not started`))}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_STARTED:return h=!0,(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d);case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_FINISHED:{if(r.size>0){let t=Array.from(r.keys()).join(\", \");return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'RUN_FINISHED' while steps are still active: ${t}`))}if(n.size>0){let t=Array.from(n.keys()).join(\", \");return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'RUN_FINISHED' while text messages are still active: ${t}`))}if(a.size>0){let t=Array.from(a.keys()).join(\", \");return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(`Cannot send 'RUN_FINISHED' while tool calls are still active: ${t}`))}return e=!0,(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_ERROR:return s=!0,(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d);case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.CUSTOM:return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d);case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_START:return i?E?(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"Cannot send 'THINKING_TEXT_MESSAGE_START' event: A thinking message is already in progress. Complete it with 'THINKING_TEXT_MESSAGE_END' first.\")):(E=!0,(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"Cannot send 'THINKING_TEXT_MESSAGE_START' event: A thinking step is not in progress. Create one with 'THINKING_START' first.\"));case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_CONTENT:return E?(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"Cannot send 'THINKING_TEXT_MESSAGE_CONTENT' event: No active thinking message found. Start a message with 'THINKING_TEXT_MESSAGE_START' first.\"));case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_END:return E?(E=!1,(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"Cannot send 'THINKING_TEXT_MESSAGE_END' event: No active thinking message found. A 'THINKING_TEXT_MESSAGE_START' event must be sent first.\"));case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_START:return i?(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"Cannot send 'THINKING_START' event: A thinking step is already in progress. End it with 'THINKING_END' first.\")):(i=!0,(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d));case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_END:return i?(i=!1,(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.AGUIError(\"Cannot send 'THINKING_END' event: No active thinking step found. A 'THINKING_START' event must be sent first.\"));default:return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(d)}}))};var j=(u,o)=>(0,rxjs__WEBPACK_IMPORTED_MODULE_7__.defer)(()=>(0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(fetch(u,o))).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.switchMap)(n=>{var s;if(!n.ok){let l=n.headers.get(\"content-type\")||\"\";return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(n.text()).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.mergeMap)(r=>{let i=r;if(l.includes(\"application/json\"))try{i=JSON.parse(r)}catch(h){}let E=new Error(`HTTP ${n.status}: ${typeof i==\"string\"?i:JSON.stringify(i)}`);return E.status=n.status,E.payload=i,(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>E)}))}let a={type:\"headers\",status:n.status,headers:n.headers},e=(s=n.body)==null?void 0:s.getReader();return e?new rxjs__WEBPACK_IMPORTED_MODULE_9__.Observable(l=>(l.next(a),(async()=>{try{for(;;){let{done:r,value:i}=await e.read();if(r)break;let E={type:\"data\",data:i};l.next(E)}l.complete()}catch(r){l.error(r)}})(),()=>{e.cancel()})):(0,rxjs__WEBPACK_IMPORTED_MODULE_6__.throwError)(()=>new Error(\"Failed to getReader() from response\"))}));var z=u=>{let o=new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subject,n=new TextDecoder(\"utf-8\",{fatal:!1}),a=\"\";u.subscribe({next:s=>{if(s.type!==\"headers\"&&s.type===\"data\"&&s.data){let l=n.decode(s.data,{stream:!0});a+=l;let r=a.split(/\\n\\n/);a=r.pop()||\"\";for(let i of r)e(i)}},error:s=>o.error(s),complete:()=>{a&&(a+=n.decode(),e(a)),o.complete()}});function e(s){let l=s.split(`\n`),r=[];for(let i of l)i.startsWith(\"data: \")&&r.push(i.slice(6));if(r.length>0)try{let i=r.join(`\n`),E=JSON.parse(i);o.next(E)}catch(i){o.error(i)}}return o.asObservable()};var B=u=>{let o=new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subject,n=new Uint8Array(0);u.subscribe({next:e=>{if(e.type!==\"headers\"&&e.type===\"data\"&&e.data){let s=new Uint8Array(n.length+e.data.length);s.set(n,0),s.set(e.data,n.length),n=s,a()}},error:e=>o.error(e),complete:()=>{if(n.length>0)try{a()}catch(e){console.warn(\"Incomplete or invalid protocol buffer data at stream end\")}o.complete()}});function a(){for(;n.length>=4;){let l=4+new DataView(n.buffer,n.byteOffset,4).getUint32(0,!1);if(n.length<l)break;try{let r=n.slice(4,l),i=_ag_ui_proto__WEBPACK_IMPORTED_MODULE_11__.decode(r);o.next(i),n=n.slice(l)}catch(r){let i=r instanceof Error?r.message:String(r);o.error(new Error(`Failed to decode protocol buffer message: ${i}`));return}}}return o.asObservable()};var J=u=>{let o=new rxjs__WEBPACK_IMPORTED_MODULE_10__.Subject,n=new rxjs__WEBPACK_IMPORTED_MODULE_12__.ReplaySubject,a=!1;return u.subscribe({next:e=>{n.next(e),e.type===\"headers\"&&!a?(a=!0,e.headers.get(\"content-type\")===_ag_ui_proto__WEBPACK_IMPORTED_MODULE_11__.AGUI_MEDIA_TYPE?B(n).subscribe({next:l=>o.next(l),error:l=>o.error(l),complete:()=>o.complete()}):z(n).subscribe({next:l=>{try{let r=_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventSchemas.parse(l);o.next(r)}catch(r){o.error(r)}},error:l=>o.error(l),complete:()=>o.complete()})):a||o.error(new Error(\"No headers event received before data events\"))},error:e=>{n.error(e),o.error(e)},complete:()=>{n.complete()}}),o.asObservable()};var A=zod__WEBPACK_IMPORTED_MODULE_13__[\"enum\"]([\"TextMessageStart\",\"TextMessageContent\",\"TextMessageEnd\",\"ActionExecutionStart\",\"ActionExecutionArgs\",\"ActionExecutionEnd\",\"ActionExecutionResult\",\"AgentStateMessage\",\"MetaEvent\",\"RunStarted\",\"RunFinished\",\"RunError\",\"NodeStarted\",\"NodeFinished\"]),Ce=zod__WEBPACK_IMPORTED_MODULE_13__[\"enum\"]([\"LangGraphInterruptEvent\",\"PredictState\",\"Exit\"]),Re=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.TextMessageStart),messageId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),parentMessageId:zod__WEBPACK_IMPORTED_MODULE_13__.string().optional(),role:zod__WEBPACK_IMPORTED_MODULE_13__.string().optional()}),_e=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.TextMessageContent),messageId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),content:zod__WEBPACK_IMPORTED_MODULE_13__.string()}),Ne=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.TextMessageEnd),messageId:zod__WEBPACK_IMPORTED_MODULE_13__.string()}),xe=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.ActionExecutionStart),actionExecutionId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),actionName:zod__WEBPACK_IMPORTED_MODULE_13__.string(),parentMessageId:zod__WEBPACK_IMPORTED_MODULE_13__.string().optional()}),Ie=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.ActionExecutionArgs),actionExecutionId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),args:zod__WEBPACK_IMPORTED_MODULE_13__.string()}),Le=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.ActionExecutionEnd),actionExecutionId:zod__WEBPACK_IMPORTED_MODULE_13__.string()}),Oe=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.ActionExecutionResult),actionName:zod__WEBPACK_IMPORTED_MODULE_13__.string(),actionExecutionId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),result:zod__WEBPACK_IMPORTED_MODULE_13__.string()}),we=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.AgentStateMessage),threadId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),agentName:zod__WEBPACK_IMPORTED_MODULE_13__.string(),nodeName:zod__WEBPACK_IMPORTED_MODULE_13__.string(),runId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),active:zod__WEBPACK_IMPORTED_MODULE_13__.boolean(),role:zod__WEBPACK_IMPORTED_MODULE_13__.string(),state:zod__WEBPACK_IMPORTED_MODULE_13__.string(),running:zod__WEBPACK_IMPORTED_MODULE_13__.boolean()}),Pe=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.MetaEvent),name:Ce,value:zod__WEBPACK_IMPORTED_MODULE_13__.any()}),De=zod__WEBPACK_IMPORTED_MODULE_13__.object({type:zod__WEBPACK_IMPORTED_MODULE_13__.literal(A.enum.RunError),message:zod__WEBPACK_IMPORTED_MODULE_13__.string(),code:zod__WEBPACK_IMPORTED_MODULE_13__.string().optional()}),fn=zod__WEBPACK_IMPORTED_MODULE_13__.discriminatedUnion(\"type\",[Re,_e,Ne,xe,Ie,Le,Oe,we,Pe,De]),Tn=zod__WEBPACK_IMPORTED_MODULE_13__.object({id:zod__WEBPACK_IMPORTED_MODULE_13__.string(),role:zod__WEBPACK_IMPORTED_MODULE_13__.string(),content:zod__WEBPACK_IMPORTED_MODULE_13__.string(),parentMessageId:zod__WEBPACK_IMPORTED_MODULE_13__.string().optional()}),An=zod__WEBPACK_IMPORTED_MODULE_13__.object({id:zod__WEBPACK_IMPORTED_MODULE_13__.string(),name:zod__WEBPACK_IMPORTED_MODULE_13__.string(),arguments:zod__WEBPACK_IMPORTED_MODULE_13__.any(),parentMessageId:zod__WEBPACK_IMPORTED_MODULE_13__.string().optional()}),vn=zod__WEBPACK_IMPORTED_MODULE_13__.object({id:zod__WEBPACK_IMPORTED_MODULE_13__.string(),result:zod__WEBPACK_IMPORTED_MODULE_13__.any(),actionExecutionId:zod__WEBPACK_IMPORTED_MODULE_13__.string(),actionName:zod__WEBPACK_IMPORTED_MODULE_13__.string()});var $=(u,o,n)=>a=>{let e={},s=!0,l=!0,r=\"\",i=null,E=null,h=[],w={},d=g=>{typeof g==\"object\"&&g!==null&&(\"messages\"in g&&delete g.messages,e=g)};return a.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.mergeMap)(g=>{switch(g.type){case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_START:{let t=g;return[{type:A.enum.TextMessageStart,messageId:t.messageId,role:t.role}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_CONTENT:{let t=g;return[{type:A.enum.TextMessageContent,messageId:t.messageId,content:t.delta}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_END:{let t=g;return[{type:A.enum.TextMessageEnd,messageId:t.messageId}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_START:{let t=g;return h.push({id:t.toolCallId,type:\"function\",function:{name:t.toolCallName,arguments:\"\"}}),l=!0,w[t.toolCallId]=t.toolCallName,[{type:A.enum.ActionExecutionStart,actionExecutionId:t.toolCallId,actionName:t.toolCallName,parentMessageId:t.parentMessageId}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_ARGS:{let t=g,S=h.find(c=>c.id===t.toolCallId);if(!S)return console.warn(`TOOL_CALL_ARGS: No tool call found with ID '${t.toolCallId}'`),[];S.function.arguments+=t.delta;let m=!1;if(E){let c=E.find(T=>T.tool==S.function.name);if(c)try{let T=JSON.parse((0,untruncate_json__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(S.function.arguments));c.tool_argument&&c.tool_argument in T?(d(H(L({},e),{[c.state_key]:T[c.tool_argument]})),m=!0):c.tool_argument||(d(H(L({},e),{[c.state_key]:T})),m=!0)}catch(T){}}return[{type:A.enum.ActionExecutionArgs,actionExecutionId:t.toolCallId,args:t.delta},...m?[{type:A.enum.AgentStateMessage,threadId:u,agentName:n,nodeName:r,runId:o,running:s,role:\"assistant\",state:JSON.stringify(e),active:l}]:[]]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_END:{let t=g;return[{type:A.enum.ActionExecutionEnd,actionExecutionId:t.toolCallId}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_RESULT:{let t=g;return[{type:A.enum.ActionExecutionResult,actionExecutionId:t.toolCallId,result:t.content,actionName:w[t.toolCallId]||\"unknown\"}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RAW:return[];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.CUSTOM:{let t=g;switch(t.name){case\"Exit\":s=!1;break;case\"PredictState\":E=t.value;break}return[{type:A.enum.MetaEvent,name:t.name,value:t.value}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_SNAPSHOT:return d(g.snapshot),[{type:A.enum.AgentStateMessage,threadId:u,agentName:n,nodeName:r,runId:o,running:s,role:\"assistant\",state:JSON.stringify(e),active:l}];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_DELTA:{let S=(0,fast_json_patch__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(e,g.delta,!0,!1);return S?(d(S.newDocument),[{type:A.enum.AgentStateMessage,threadId:u,agentName:n,nodeName:r,runId:o,running:s,role:\"assistant\",state:JSON.stringify(e),active:l}]):[]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.MESSAGES_SNAPSHOT:return i=g.messages,[{type:A.enum.AgentStateMessage,threadId:u,agentName:n,nodeName:r,runId:o,running:s,role:\"assistant\",state:JSON.stringify(L(L({},e),i?{messages:i}:{})),active:!0}];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_STARTED:return[];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_FINISHED:return i&&(e.messages=i),Object.keys(e).length===0?[]:[{type:A.enum.AgentStateMessage,threadId:u,agentName:n,nodeName:r,runId:o,running:s,role:\"assistant\",state:JSON.stringify(L(L({},e),i?{messages:Ue(i)}:{})),active:!1}];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_ERROR:{let t=g;return[{type:A.enum.RunError,message:t.message,code:t.code}]}case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_STARTED:return r=g.stepName,h=[],E=null,[{type:A.enum.AgentStateMessage,threadId:u,agentName:n,nodeName:r,runId:o,running:s,role:\"assistant\",state:JSON.stringify(e),active:!0}];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_FINISHED:return h=[],E=null,[{type:A.enum.AgentStateMessage,threadId:u,agentName:n,nodeName:r,runId:o,running:s,role:\"assistant\",state:JSON.stringify(e),active:!1}];default:return[]}}))};function Ue(u){var n;let o=[];for(let a of u)if(a.role===\"assistant\"||a.role===\"user\"||a.role===\"system\"){if(a.content){let e={id:a.id,role:a.role,content:a.content};o.push(e)}if(a.role===\"assistant\"&&a.toolCalls&&a.toolCalls.length>0)for(let e of a.toolCalls){let s={id:e.id,name:e.function.name,arguments:JSON.parse(e.function.arguments),parentMessageId:a.id};o.push(s)}}else if(a.role===\"tool\"){let e=\"unknown\";for(let l of u)if(l.role===\"assistant\"&&((n=l.toolCalls)!=null&&n.length)){for(let r of l.toolCalls)if(r.id===a.toolCallId){e=r.function.name;break}}let s={id:a.id,result:a.content,actionExecutionId:a.toolCallId,actionName:e};o.push(s)}return o}var b=u=>o=>{let n,a,e,s=()=>{if(!n||e!==\"text\")throw new Error(\"No text message to close\");let i={type:_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_END,messageId:n.messageId};return e=void 0,n=void 0,u&&console.debug(\"[TRANSFORM]: TEXT_MESSAGE_END\",JSON.stringify(i)),i},l=()=>{if(!a||e!==\"tool\")throw new Error(\"No tool call to close\");let i={type:_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_END,toolCallId:a.toolCallId};return e=void 0,a=void 0,u&&console.debug(\"[TRANSFORM]: TOOL_CALL_END\",JSON.stringify(i)),i},r=()=>e===\"text\"?[s()]:e===\"tool\"?[l()]:[];return o.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_14__.mergeMap)(i=>{switch(i.type){case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_START:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_CONTENT:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_END:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_START:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_ARGS:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_END:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_RESULT:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_SNAPSHOT:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_DELTA:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.MESSAGES_SNAPSHOT:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.CUSTOM:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_STARTED:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_FINISHED:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RUN_ERROR:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_STARTED:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STEP_FINISHED:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_START:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_END:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_START:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_CONTENT:case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.THINKING_TEXT_MESSAGE_END:return[...r(),i];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.RAW:return[i];case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_CHUNK:let h=i,w=[];if((e!==\"text\"||h.messageId!==void 0&&h.messageId!==(n==null?void 0:n.messageId))&&w.push(...r()),e!==\"text\"){if(h.messageId===void 0)throw new Error(\"First TEXT_MESSAGE_CHUNK must have a messageId\");n={messageId:h.messageId},e=\"text\";let t={type:_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_START,messageId:h.messageId,role:h.role||\"assistant\"};w.push(t),u&&console.debug(\"[TRANSFORM]: TEXT_MESSAGE_START\",JSON.stringify(t))}if(h.delta!==void 0){let t={type:_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TEXT_MESSAGE_CONTENT,messageId:n.messageId,delta:h.delta};w.push(t),u&&console.debug(\"[TRANSFORM]: TEXT_MESSAGE_CONTENT\",JSON.stringify(t))}return w;case _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_CHUNK:let d=i,g=[];if((e!==\"tool\"||d.toolCallId!==void 0&&d.toolCallId!==(a==null?void 0:a.toolCallId))&&g.push(...r()),e!==\"tool\"){if(d.toolCallId===void 0)throw new Error(\"First TOOL_CALL_CHUNK must have a toolCallId\");if(d.toolCallName===void 0)throw new Error(\"First TOOL_CALL_CHUNK must have a toolCallName\");a={toolCallId:d.toolCallId,toolCallName:d.toolCallName,parentMessageId:d.parentMessageId},e=\"tool\";let t={type:_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_START,toolCallId:d.toolCallId,toolCallName:d.toolCallName,parentMessageId:d.parentMessageId};g.push(t),u&&console.debug(\"[TRANSFORM]: TOOL_CALL_START\",JSON.stringify(t))}if(d.delta!==void 0){let t={type:_ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.TOOL_CALL_ARGS,toolCallId:a.toolCallId,delta:d.delta};g.push(t),u&&console.debug(\"[TRANSFORM]: TOOL_CALL_ARGS\",JSON.stringify(t))}return g}let E=i.type}),(0,rxjs__WEBPACK_IMPORTED_MODULE_15__.finalize)(()=>r()))};var G=class{constructor({agentId:o,description:n,threadId:a,initialMessages:e,initialState:s,debug:l}={}){this.debug=!1;this.subscribers=[];this.agentId=o,this.description=n!=null?n:\"\",this.threadId=a!=null?a:(0,uuid__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(),this.messages=C(e!=null?e:[]),this.state=C(s!=null?s:{}),this.debug=l!=null?l:!1}subscribe(o){return this.subscribers.push(o),{unsubscribe:()=>{this.subscribers=this.subscribers.filter(n=>n!==o)}}}async runAgent(o,n){var i;this.agentId=(i=this.agentId)!=null?i:(0,uuid__WEBPACK_IMPORTED_MODULE_16__[\"default\"])();let a=this.prepareRunAgentInput(o),e,s=new Set(this.messages.map(E=>E.id)),l=[{onRunFinishedEvent:E=>{e=E.result}},...this.subscribers,n!=null?n:{}];await this.onInitialize(a,l);let r=(0,rxjs__WEBPACK_IMPORTED_MODULE_17__.pipe)(()=>this.run(a),b(this.debug),U(this.debug),E=>this.apply(a,E,l),E=>this.processApplyEvents(a,E,l),(0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.catchError)(E=>this.onError(a,E,l)),(0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.finalize)(()=>{this.onFinalize(a,l)}));return (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.lastValueFrom)(r((0,rxjs__WEBPACK_IMPORTED_MODULE_2__.of)(null))).then(()=>{let E=C(this.messages).filter(h=>!s.has(h.id));return{result:e,newMessages:E}})}abortRun(){}apply(o,n,a){return K(o,n,this,a)}processApplyEvents(o,n,a){return n.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.tap)(e=>{e.messages&&(this.messages=e.messages,a.forEach(s=>{var l;(l=s.onMessagesChanged)==null||l.call(s,{messages:this.messages,state:this.state,agent:this,input:o})})),e.state&&(this.state=e.state,a.forEach(s=>{var l;(l=s.onStateChanged)==null||l.call(s,{state:this.state,messages:this.messages,agent:this,input:o})}))}))}prepareRunAgentInput(o){var n,a,e;return{threadId:this.threadId,runId:(o==null?void 0:o.runId)||(0,uuid__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(),tools:C((n=o==null?void 0:o.tools)!=null?n:[]),context:C((a=o==null?void 0:o.context)!=null?a:[]),forwardedProps:C((e=o==null?void 0:o.forwardedProps)!=null?e:{}),state:C(this.state),messages:C(this.messages)}}async onInitialize(o,n){let a=await y(n,this.messages,this.state,(e,s,l)=>{var r;return(r=e.onRunInitialized)==null?void 0:r.call(e,{messages:s,state:l,agent:this,input:o})});(a.messages!==void 0||a.state!==void 0)&&(a.messages&&(this.messages=a.messages,o.messages=a.messages,n.forEach(e=>{var s;(s=e.onMessagesChanged)==null||s.call(e,{messages:this.messages,state:this.state,agent:this,input:o})})),a.state&&(this.state=a.state,o.state=a.state,n.forEach(e=>{var s;(s=e.onStateChanged)==null||s.call(e,{state:this.state,messages:this.messages,agent:this,input:o})})))}onError(o,n,a){return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(y(a,this.messages,this.state,(e,s,l)=>{var r;return(r=e.onRunFailed)==null?void 0:r.call(e,{error:n,messages:s,state:l,agent:this,input:o})})).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(e=>{let s=e;if((s.messages!==void 0||s.state!==void 0)&&(s.messages!==void 0&&(this.messages=s.messages,a.forEach(l=>{var r;(r=l.onMessagesChanged)==null||r.call(l,{messages:this.messages,state:this.state,agent:this,input:o})})),s.state!==void 0&&(this.state=s.state,a.forEach(l=>{var r;(r=l.onStateChanged)==null||r.call(l,{state:this.state,messages:this.messages,agent:this,input:o})}))),s.stopPropagation!==!0)throw console.error(\"Agent execution failed:\",n),n;return{}}))}async onFinalize(o,n){let a=await y(n,this.messages,this.state,(e,s,l)=>{var r;return(r=e.onRunFinalized)==null?void 0:r.call(e,{messages:s,state:l,agent:this,input:o})});(a.messages!==void 0||a.state!==void 0)&&(a.messages!==void 0&&(this.messages=a.messages,n.forEach(e=>{var s;(s=e.onMessagesChanged)==null||s.call(e,{messages:this.messages,state:this.state,agent:this,input:o})})),a.state!==void 0&&(this.state=a.state,n.forEach(e=>{var s;(s=e.onStateChanged)==null||s.call(e,{state:this.state,messages:this.messages,agent:this,input:o})})))}clone(){let o=Object.create(Object.getPrototypeOf(this));for(let n of Object.getOwnPropertyNames(this)){let a=this[n];typeof a!=\"function\"&&(o[n]=C(a))}return o}addMessage(o){this.messages.push(o),(async()=>{var n,a,e;for(let s of this.subscribers)await((n=s.onNewMessage)==null?void 0:n.call(s,{message:o,messages:this.messages,state:this.state,agent:this}));if(o.role===\"assistant\"&&o.toolCalls)for(let s of o.toolCalls)for(let l of this.subscribers)await((a=l.onNewToolCall)==null?void 0:a.call(l,{toolCall:s,messages:this.messages,state:this.state,agent:this}));for(let s of this.subscribers)await((e=s.onMessagesChanged)==null?void 0:e.call(s,{messages:this.messages,state:this.state,agent:this}))})()}addMessages(o){this.messages.push(...o),(async()=>{var n,a,e;for(let s of o){for(let l of this.subscribers)await((n=l.onNewMessage)==null?void 0:n.call(l,{message:s,messages:this.messages,state:this.state,agent:this}));if(s.role===\"assistant\"&&s.toolCalls)for(let l of s.toolCalls)for(let r of this.subscribers)await((a=r.onNewToolCall)==null?void 0:a.call(r,{toolCall:l,messages:this.messages,state:this.state,agent:this}))}for(let s of this.subscribers)await((e=s.onMessagesChanged)==null?void 0:e.call(s,{messages:this.messages,state:this.state,agent:this}))})()}setMessages(o){this.messages=C(o),(async()=>{var n;for(let a of this.subscribers)await((n=a.onMessagesChanged)==null?void 0:n.call(a,{messages:this.messages,state:this.state,agent:this}))})()}setState(o){this.state=C(o),(async()=>{var n;for(let a of this.subscribers)await((n=a.onStateChanged)==null?void 0:n.call(a,{messages:this.messages,state:this.state,agent:this}))})()}legacy_to_be_removed_runAgentBridged(o){var a;this.agentId=(a=this.agentId)!=null?a:(0,uuid__WEBPACK_IMPORTED_MODULE_16__[\"default\"])();let n=this.prepareRunAgentInput(o);return this.run(n).pipe(b(this.debug),U(this.debug),$(this.threadId,n.runId,this.agentId),e=>e.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.map)(s=>(this.debug&&console.debug(\"[LEGACY]:\",JSON.stringify(s)),s))))}};var q=class extends G{constructor(n){var a;super(n);this.abortController=new AbortController;this.url=n.url,this.headers=C((a=n.headers)!=null?a:{})}requestInit(n){return{method:\"POST\",headers:H(L({},this.headers),{\"Content-Type\":\"application/json\",Accept:\"text/event-stream\"}),body:JSON.stringify(n),signal:this.abortController.signal}}runAgent(n,a){var e;return this.abortController=(e=n==null?void 0:n.abortController)!=null?e:new AbortController,super.runAgent(n,a)}abortRun(){this.abortController.abort(),super.abortRun()}run(n){let a=j(this.url,this.requestInit(n));return J(a)}};\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/client/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/core/dist/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/@ag-ui/core/dist/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AGUIError: () => (/* binding */ AGUIError),\n/* harmony export */   AssistantMessageSchema: () => (/* binding */ AssistantMessageSchema),\n/* harmony export */   BaseEventSchema: () => (/* binding */ BaseEventSchema),\n/* harmony export */   BaseMessageSchema: () => (/* binding */ BaseMessageSchema),\n/* harmony export */   ContextSchema: () => (/* binding */ ContextSchema),\n/* harmony export */   CustomEventSchema: () => (/* binding */ CustomEventSchema),\n/* harmony export */   DeveloperMessageSchema: () => (/* binding */ DeveloperMessageSchema),\n/* harmony export */   EventSchemas: () => (/* binding */ EventSchemas),\n/* harmony export */   EventType: () => (/* binding */ EventType),\n/* harmony export */   FunctionCallSchema: () => (/* binding */ FunctionCallSchema),\n/* harmony export */   MessageSchema: () => (/* binding */ MessageSchema),\n/* harmony export */   MessagesSnapshotEventSchema: () => (/* binding */ MessagesSnapshotEventSchema),\n/* harmony export */   RawEventSchema: () => (/* binding */ RawEventSchema),\n/* harmony export */   RoleSchema: () => (/* binding */ RoleSchema),\n/* harmony export */   RunAgentInputSchema: () => (/* binding */ RunAgentInputSchema),\n/* harmony export */   RunErrorEventSchema: () => (/* binding */ RunErrorEventSchema),\n/* harmony export */   RunFinishedEventSchema: () => (/* binding */ RunFinishedEventSchema),\n/* harmony export */   RunStartedEventSchema: () => (/* binding */ RunStartedEventSchema),\n/* harmony export */   StateDeltaEventSchema: () => (/* binding */ StateDeltaEventSchema),\n/* harmony export */   StateSchema: () => (/* binding */ StateSchema),\n/* harmony export */   StateSnapshotEventSchema: () => (/* binding */ StateSnapshotEventSchema),\n/* harmony export */   StepFinishedEventSchema: () => (/* binding */ StepFinishedEventSchema),\n/* harmony export */   StepStartedEventSchema: () => (/* binding */ StepStartedEventSchema),\n/* harmony export */   SystemMessageSchema: () => (/* binding */ SystemMessageSchema),\n/* harmony export */   TextMessageChunkEventSchema: () => (/* binding */ TextMessageChunkEventSchema),\n/* harmony export */   TextMessageContentEventSchema: () => (/* binding */ TextMessageContentEventSchema),\n/* harmony export */   TextMessageEndEventSchema: () => (/* binding */ TextMessageEndEventSchema),\n/* harmony export */   TextMessageStartEventSchema: () => (/* binding */ TextMessageStartEventSchema),\n/* harmony export */   ThinkingEndEventSchema: () => (/* binding */ ThinkingEndEventSchema),\n/* harmony export */   ThinkingStartEventSchema: () => (/* binding */ ThinkingStartEventSchema),\n/* harmony export */   ThinkingTextMessageContentEventSchema: () => (/* binding */ ThinkingTextMessageContentEventSchema),\n/* harmony export */   ThinkingTextMessageEndEventSchema: () => (/* binding */ ThinkingTextMessageEndEventSchema),\n/* harmony export */   ThinkingTextMessageStartEventSchema: () => (/* binding */ ThinkingTextMessageStartEventSchema),\n/* harmony export */   ToolCallArgsEventSchema: () => (/* binding */ ToolCallArgsEventSchema),\n/* harmony export */   ToolCallChunkEventSchema: () => (/* binding */ ToolCallChunkEventSchema),\n/* harmony export */   ToolCallEndEventSchema: () => (/* binding */ ToolCallEndEventSchema),\n/* harmony export */   ToolCallResultEventSchema: () => (/* binding */ ToolCallResultEventSchema),\n/* harmony export */   ToolCallSchema: () => (/* binding */ ToolCallSchema),\n/* harmony export */   ToolCallStartEventSchema: () => (/* binding */ ToolCallStartEventSchema),\n/* harmony export */   ToolMessageSchema: () => (/* binding */ ToolMessageSchema),\n/* harmony export */   ToolSchema: () => (/* binding */ ToolSchema),\n/* harmony export */   UserMessageSchema: () => (/* binding */ UserMessageSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n// src/types.ts\n\nvar FunctionCallSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  arguments: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar ToolCallSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n  function: FunctionCallSchema\n});\nvar BaseMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  role: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  content: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  name: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar DeveloperMessageSchema = BaseMessageSchema.extend({\n  role: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"developer\"),\n  content: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar SystemMessageSchema = BaseMessageSchema.extend({\n  role: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"system\"),\n  content: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar AssistantMessageSchema = BaseMessageSchema.extend({\n  role: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n  content: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  toolCalls: zod__WEBPACK_IMPORTED_MODULE_0__.array(ToolCallSchema).optional()\n});\nvar UserMessageSchema = BaseMessageSchema.extend({\n  role: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"user\"),\n  content: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar ToolMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  content: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  role: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool\"),\n  toolCallId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  error: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar MessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"role\", [\n  DeveloperMessageSchema,\n  SystemMessageSchema,\n  AssistantMessageSchema,\n  UserMessageSchema,\n  ToolMessageSchema\n]);\nvar RoleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"developer\"),\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"system\"),\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"user\"),\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool\")\n]);\nvar ContextSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  description: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  value: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar ToolSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  description: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  parameters: zod__WEBPACK_IMPORTED_MODULE_0__.any()\n  // JSON Schema for the tool parameters\n});\nvar RunAgentInputSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  threadId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  runId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  state: zod__WEBPACK_IMPORTED_MODULE_0__.any(),\n  messages: zod__WEBPACK_IMPORTED_MODULE_0__.array(MessageSchema),\n  tools: zod__WEBPACK_IMPORTED_MODULE_0__.array(ToolSchema),\n  context: zod__WEBPACK_IMPORTED_MODULE_0__.array(ContextSchema),\n  forwardedProps: zod__WEBPACK_IMPORTED_MODULE_0__.any()\n});\nvar StateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.any();\nvar AGUIError = class extends Error {\n  constructor(message) {\n    super(message);\n  }\n};\n\n// src/events.ts\n\nvar TextMessageRoleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"developer\"),\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"system\"),\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n  zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"user\")\n]);\nvar EventType = /* @__PURE__ */ ((EventType2) => {\n  EventType2[\"TEXT_MESSAGE_START\"] = \"TEXT_MESSAGE_START\";\n  EventType2[\"TEXT_MESSAGE_CONTENT\"] = \"TEXT_MESSAGE_CONTENT\";\n  EventType2[\"TEXT_MESSAGE_END\"] = \"TEXT_MESSAGE_END\";\n  EventType2[\"TEXT_MESSAGE_CHUNK\"] = \"TEXT_MESSAGE_CHUNK\";\n  EventType2[\"THINKING_TEXT_MESSAGE_START\"] = \"THINKING_TEXT_MESSAGE_START\";\n  EventType2[\"THINKING_TEXT_MESSAGE_CONTENT\"] = \"THINKING_TEXT_MESSAGE_CONTENT\";\n  EventType2[\"THINKING_TEXT_MESSAGE_END\"] = \"THINKING_TEXT_MESSAGE_END\";\n  EventType2[\"TOOL_CALL_START\"] = \"TOOL_CALL_START\";\n  EventType2[\"TOOL_CALL_ARGS\"] = \"TOOL_CALL_ARGS\";\n  EventType2[\"TOOL_CALL_END\"] = \"TOOL_CALL_END\";\n  EventType2[\"TOOL_CALL_CHUNK\"] = \"TOOL_CALL_CHUNK\";\n  EventType2[\"TOOL_CALL_RESULT\"] = \"TOOL_CALL_RESULT\";\n  EventType2[\"THINKING_START\"] = \"THINKING_START\";\n  EventType2[\"THINKING_END\"] = \"THINKING_END\";\n  EventType2[\"STATE_SNAPSHOT\"] = \"STATE_SNAPSHOT\";\n  EventType2[\"STATE_DELTA\"] = \"STATE_DELTA\";\n  EventType2[\"MESSAGES_SNAPSHOT\"] = \"MESSAGES_SNAPSHOT\";\n  EventType2[\"RAW\"] = \"RAW\";\n  EventType2[\"CUSTOM\"] = \"CUSTOM\";\n  EventType2[\"RUN_STARTED\"] = \"RUN_STARTED\";\n  EventType2[\"RUN_FINISHED\"] = \"RUN_FINISHED\";\n  EventType2[\"RUN_ERROR\"] = \"RUN_ERROR\";\n  EventType2[\"STEP_STARTED\"] = \"STEP_STARTED\";\n  EventType2[\"STEP_FINISHED\"] = \"STEP_FINISHED\";\n  return EventType2;\n})(EventType || {});\nvar BaseEventSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.nativeEnum(EventType),\n  timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  rawEvent: zod__WEBPACK_IMPORTED_MODULE_0__.any().optional()\n});\nvar TextMessageStartEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TEXT_MESSAGE_START\" /* TEXT_MESSAGE_START */),\n  messageId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  role: TextMessageRoleSchema.default(\"assistant\")\n});\nvar TextMessageContentEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TEXT_MESSAGE_CONTENT\" /* TEXT_MESSAGE_CONTENT */),\n  messageId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  delta: zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((s) => s.length > 0, \"Delta must not be an empty string\")\n});\nvar TextMessageEndEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TEXT_MESSAGE_END\" /* TEXT_MESSAGE_END */),\n  messageId: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar TextMessageChunkEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TEXT_MESSAGE_CHUNK\" /* TEXT_MESSAGE_CHUNK */),\n  messageId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  role: TextMessageRoleSchema.optional(),\n  delta: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar ThinkingTextMessageStartEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"THINKING_TEXT_MESSAGE_START\" /* THINKING_TEXT_MESSAGE_START */)\n});\nvar ThinkingTextMessageContentEventSchema = TextMessageContentEventSchema.omit({\n  messageId: true,\n  type: true\n}).extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"THINKING_TEXT_MESSAGE_CONTENT\" /* THINKING_TEXT_MESSAGE_CONTENT */)\n});\nvar ThinkingTextMessageEndEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"THINKING_TEXT_MESSAGE_END\" /* THINKING_TEXT_MESSAGE_END */)\n});\nvar ToolCallStartEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TOOL_CALL_START\" /* TOOL_CALL_START */),\n  toolCallId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  toolCallName: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  parentMessageId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar ToolCallArgsEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TOOL_CALL_ARGS\" /* TOOL_CALL_ARGS */),\n  toolCallId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  delta: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar ToolCallEndEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TOOL_CALL_END\" /* TOOL_CALL_END */),\n  toolCallId: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar ToolCallResultEventSchema = BaseEventSchema.extend({\n  messageId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TOOL_CALL_RESULT\" /* TOOL_CALL_RESULT */),\n  toolCallId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  content: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  role: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool\").optional()\n});\nvar ToolCallChunkEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"TOOL_CALL_CHUNK\" /* TOOL_CALL_CHUNK */),\n  toolCallId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  toolCallName: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  parentMessageId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  delta: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar ThinkingStartEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"THINKING_START\" /* THINKING_START */),\n  title: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar ThinkingEndEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"THINKING_END\" /* THINKING_END */)\n});\nvar StateSnapshotEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"STATE_SNAPSHOT\" /* STATE_SNAPSHOT */),\n  snapshot: StateSchema\n});\nvar StateDeltaEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"STATE_DELTA\" /* STATE_DELTA */),\n  delta: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.any())\n  // JSON Patch (RFC 6902)\n});\nvar MessagesSnapshotEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"MESSAGES_SNAPSHOT\" /* MESSAGES_SNAPSHOT */),\n  messages: zod__WEBPACK_IMPORTED_MODULE_0__.array(MessageSchema)\n});\nvar RawEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"RAW\" /* RAW */),\n  event: zod__WEBPACK_IMPORTED_MODULE_0__.any(),\n  source: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar CustomEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"CUSTOM\" /* CUSTOM */),\n  name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  value: zod__WEBPACK_IMPORTED_MODULE_0__.any()\n});\nvar RunStartedEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"RUN_STARTED\" /* RUN_STARTED */),\n  threadId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  runId: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar RunFinishedEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"RUN_FINISHED\" /* RUN_FINISHED */),\n  threadId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  runId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  result: zod__WEBPACK_IMPORTED_MODULE_0__.any().optional()\n});\nvar RunErrorEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"RUN_ERROR\" /* RUN_ERROR */),\n  message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n  code: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar StepStartedEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"STEP_STARTED\" /* STEP_STARTED */),\n  stepName: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar StepFinishedEventSchema = BaseEventSchema.extend({\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"STEP_FINISHED\" /* STEP_FINISHED */),\n  stepName: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar EventSchemas = zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  TextMessageStartEventSchema,\n  TextMessageContentEventSchema,\n  TextMessageEndEventSchema,\n  TextMessageChunkEventSchema,\n  ThinkingStartEventSchema,\n  ThinkingEndEventSchema,\n  ThinkingTextMessageStartEventSchema,\n  ThinkingTextMessageContentEventSchema,\n  ThinkingTextMessageEndEventSchema,\n  ToolCallStartEventSchema,\n  ToolCallArgsEventSchema,\n  ToolCallEndEventSchema,\n  ToolCallChunkEventSchema,\n  ToolCallResultEventSchema,\n  StateSnapshotEventSchema,\n  StateDeltaEventSchema,\n  MessagesSnapshotEventSchema,\n  RawEventSchema,\n  CustomEventSchema,\n  RunStartedEventSchema,\n  RunFinishedEventSchema,\n  RunErrorEventSchema,\n  StepStartedEventSchema,\n  StepFinishedEventSchema\n]);\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/core/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomEventNames: () => (/* binding */ pt),\n/* harmony export */   LangGraphAgent: () => (/* binding */ rt),\n/* harmony export */   LangGraphEventTypes: () => (/* binding */ ut),\n/* harmony export */   LangGraphHttpAgent: () => (/* binding */ ot)\n/* harmony export */ });\n/* harmony import */ var _ag_ui_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ag-ui/client */ \"(rsc)/./node_modules/@ag-ui/client/dist/index.mjs\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _langchain_langgraph_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/langgraph-sdk */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _ag_ui_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ag-ui/client */ \"(rsc)/./node_modules/@ag-ui/core/dist/index.mjs\");\nvar dt=Object.defineProperty,ct=Object.defineProperties;var gt=Object.getOwnPropertyDescriptors;var J=Object.getOwnPropertySymbols;var Q=Object.prototype.hasOwnProperty,Z=Object.prototype.propertyIsEnumerable;var q=(n,a)=>(a=Symbol[n])?a:Symbol.for(\"Symbol.\"+n);var z=(n,a,t)=>a in n?dt(n,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[a]=t,p=(n,a)=>{for(var t in a||(a={}))Q.call(a,t)&&z(n,t,a[t]);if(J)for(var t of J(a))Z.call(a,t)&&z(n,t,a[t]);return n},f=(n,a)=>ct(n,gt(a));var tt=(n,a)=>{var t={};for(var e in n)Q.call(n,e)&&a.indexOf(e)<0&&(t[e]=n[e]);if(n!=null&&J)for(var e of J(n))a.indexOf(e)<0&&Z.call(n,e)&&(t[e]=n[e]);return t};var et=(n,a,t)=>(a=n[q(\"asyncIterator\")])?a.call(n):(n=n[q(\"iterator\")](),a={},t=(e,s)=>(s=n[e])&&(a[e]=i=>new Promise((l,o,g)=>(i=s.call(n,i),g=i.done,Promise.resolve(i.value).then(d=>l({value:d,done:g}),o)))),t(\"next\"),t(\"return\"),a);var ut=(c=>(c.OnChainStart=\"on_chain_start\",c.OnChainStream=\"on_chain_stream\",c.OnChainEnd=\"on_chain_end\",c.OnChatModelStart=\"on_chat_model_start\",c.OnChatModelStream=\"on_chat_model_stream\",c.OnChatModelEnd=\"on_chat_model_end\",c.OnToolStart=\"on_tool_start\",c.OnToolEnd=\"on_tool_end\",c.OnCustomEvent=\"on_custom_event\",c.OnInterrupt=\"on_interrupt\",c))(ut||{}),pt=(s=>(s.ManuallyEmitMessage=\"manually_emit_message\",s.ManuallyEmitToolCall=\"manually_emit_tool_call\",s.ManuallyEmitState=\"manually_emit_state\",s.Exit=\"exit\",s))(pt||{});var j=[\"messages\",\"tools\"];function F(n,a){return Object.fromEntries(Object.entries(n).filter(([t])=>a.includes(t)))}function st({mode:n,state:a,schemaKeys:t}){let e=n===\"start\"?a:null;return e&&(t!=null&&t.input)&&(e=F(e,[...j,...t.input])),e}function at(n){return n.map(a=>{var t;switch(a.type){case\"human\":return{id:a.id,role:\"user\",content:X(O(a.content))};case\"ai\":let e=O(a.content);return{id:a.id,role:\"assistant\",content:e?X(e):\"\",toolCalls:(t=a.tool_calls)==null?void 0:t.map(s=>({id:s.id,type:\"function\",function:{name:s.name,arguments:JSON.stringify(s.args)}}))};case\"system\":return{id:a.id,role:\"system\",content:X(O(a.content))};case\"tool\":return{id:a.id,role:\"tool\",content:X(O(a.content)),toolCallId:a.tool_call_id};default:throw new Error(\"message type returned from LangGraph is not supported.\")}})}function $(n){return n.map((a,t)=>{var e,s;switch(a.role){case\"user\":return{id:a.id,role:a.role,content:a.content,type:\"human\"};case\"assistant\":return{id:a.id,type:\"ai\",role:a.role,content:(e=a.content)!=null?e:\"\",tool_calls:((s=a.toolCalls)!=null?s:[]).map(i=>({id:i.id,name:i.function.name,args:JSON.parse(i.function.arguments),type:\"tool_call\"}))};case\"system\":return{id:a.id,role:a.role,content:a.content,type:\"system\"};case\"tool\":return{content:a.content,role:a.role,type:a.role,tool_call_id:a.toolCallId,id:a.id};default:throw console.error(`Message role ${a.role} is not implemented`),new Error(\"message role is not supported.\")}})}function X(n){return typeof n==\"string\"?n:JSON.stringify(n)}function nt(n){var t,e,s,i,l;let a=(t=n.chunk)==null?void 0:t.content;if(a&&Array.isArray(a)&&a.length&&a[0])return a[0].thinking?{text:a[0].thinking,type:\"text\",index:a[0].index}:null;if((i=(s=(e=n.chunk.additional_kwargs)==null?void 0:e.reasoning)==null?void 0:s.summary)!=null&&i[0]){let o=(l=n.chunk.additional_kwargs)==null?void 0:l.reasoning.summary[0];return!o||!o.text?null:{type:\"text\",text:o.text,index:o.index}}return null}function O(n){var a;if(!n)return null;if(typeof n==\"string\")return n;if(Array.isArray(n)&&n.length){let t=(a=n.find(e=>e.type===\"text\"))==null?void 0:a.text;return t!=null?t:null}return null}var rt=class n extends _ag_ui_client__WEBPACK_IMPORTED_MODULE_2__.AbstractAgent{constructor(t){var e,s;super(t);this.constantSchemaKeys=j;this.config=t,this.messagesInProcess={},this.agentName=t.agentName,this.graphId=t.graphId,this.assistantConfig=t.assistantConfig,this.thinkingProcess=null,this.client=(s=t==null?void 0:t.client)!=null?s:new _langchain_langgraph_sdk__WEBPACK_IMPORTED_MODULE_0__.Client({apiUrl:t.deploymentUrl,apiKey:t.langsmithApiKey,defaultHeaders:p({},(e=t.propertyHeaders)!=null?e:{})})}clone(){return new n(this.config)}dispatchEvent(t){return this.subscriber.next(t),!0}run(t){return new rxjs__WEBPACK_IMPORTED_MODULE_3__.Observable(e=>(this.runAgentStream(t,e),()=>{}))}async runAgentStream(t,e){var o,g,d;this.activeRun={id:t.runId,threadId:t.threadId},this.subscriber=e,this.assistant||(this.assistant=await this.getAssistant());let s=(o=t.threadId)!=null?o:(0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)(),i=(d=(g=t.forwardedProps)==null?void 0:g.streamMode)!=null?d:[\"events\",\"values\",\"updates\"],l=await this.prepareStream(f(p({},t),{threadId:s}),i);if(!l)return e.error(\"No stream to regenerate\");await this.handleStreamEvents(l,s,e,t,i)}async prepareRegenerateStream(t,e){var c,r,S;let{threadId:s,messageCheckpoint:i,tools:l}=t,o=await this.getCheckpointByMessage(i.id,s);if(this.assistant||(this.assistant=await this.getAssistant()),!o)return this.subscriber.error(\"No checkpoint found for message\");let g=await this.client.threads.updateState(s,{values:this.langGraphDefaultMergeState(o.values,[],l),checkpointId:o.checkpoint.checkpoint_id,asNode:(r=(c=o.next)==null?void 0:c[0])!=null?r:\"__start__\"}),d=f(p({},(S=t.forwardedProps)!=null?S:{}),{input:this.langGraphDefaultMergeState(o.values,[i],l),checkpointId:g.checkpoint.checkpoint_id,streamMode:e});return{streamResponse:this.client.runs.stream(s,this.assistant.assistant_id,d),state:o,streamMode:e}}async prepareStream(t,e){var w,b,G,L,C,k,U,B;let{threadId:s,state:i,messages:l,tools:o,context:g,forwardedProps:d}=t;this.activeRun.manuallyEmittedState=null;let c=d==null?void 0:d.nodeName;this.activeRun.nodeName=c,this.activeRun.nodeName===\"__end__\"&&(this.activeRun.nodeName=void 0);let r=s!=null?s:(0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)();this.assistant||(this.assistant=await this.getAssistant());let S=await this.getOrCreateThread(r,d==null?void 0:d.threadMetadata);this.activeRun.threadId=S.thread_id;let u=(w=await this.client.threads.getState(S.thread_id))!=null?w:{values:{}},T=(b=u.values.messages)!=null?b:[],M=$(l),y=this.langGraphDefaultMergeState(f(p({},i),{messages:T}),M,o),_=f(p({},u),{values:f(p({},y),{messages:[...T,...y.messages]})}),v=_.values;if(this.activeRun.schemaKeys=await this.getSchemaKeys(),((G=u.values.messages)!=null?G:[]).length>l.filter(E=>E.role!==\"system\").length){let E=null;for(let m=l.length-1;m>=0;m--)if(l[m].role===\"user\"){E=$([l[m]])[0];break}return E?this.prepareRegenerateStream(f(p({},t),{messageCheckpoint:E}),e):this.subscriber.error(\"No user message found in messages to regenerate\")}this.activeRun.graphInfo=await this.client.assistants.getGraph(this.assistant.assistant_id);let R=!((L=d==null?void 0:d.command)!=null&&L.resume)&&r&&this.activeRun.nodeName!=\"__end__\"&&this.activeRun.nodeName?\"continue\":\"start\";if(R===\"continue\"){let E=this.activeRun.graphInfo.edges.find(m=>m.target===this.activeRun.nodeName);await this.client.threads.updateState(r,{values:i,asNode:E==null?void 0:E.source})}let N=st({mode:R,state:v,schemaKeys:this.activeRun.schemaKeys}),A,I=[this.assistantConfig,d==null?void 0:d.config].filter(Boolean);I.length&&(A=await this.mergeConfigs({configs:I,assistant:this.assistant,schemaKeys:this.activeRun.schemaKeys}));let H=f(p({},d),{streamMode:e,input:N,config:A}),x=(U=(k=(C=u.tasks)==null?void 0:C[0])==null?void 0:k.interrupts)!=null?U:[];return x!=null&&x.length&&!((B=d==null?void 0:d.command)!=null&&B.resume)?(this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.RUN_STARTED,threadId:r,runId:t.runId}),x.forEach(E=>{this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.CUSTOM,name:\"on_interrupt\",value:typeof E.value==\"string\"?E.value:JSON.stringify(E.value),rawEvent:E})}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.RUN_FINISHED,threadId:r,runId:t.runId}),this.subscriber.complete()):{streamResponse:this.client.runs.stream(r,this.assistant.assistant_id,H),state:_}}async handleStreamEvents(t,e,s,i,l){var T,M,y,_,v,H,x,w,b,G,L;let{forwardedProps:o}=i,g=o==null?void 0:o.nodeName;this.subscriber=s;let d=!1;if(!t)return;let{streamResponse:c,state:r}=t;this.activeRun.prevNodeName=null;let S={},u=r;try{this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.RUN_STARTED,threadId:e,runId:this.activeRun.id}),(T=o==null?void 0:o.command)!=null&&T.resume&&this.activeRun.nodeName&&this.startStep(this.activeRun.nodeName);try{for(var R=et(c),N,A,I;N=!(A=await R.next()).done;N=!1){let m=A.value;let W=(M=i.forwardedProps)==null?void 0:M.streamSubgraphs,lt=W&&(m.event.startsWith(\"events\")||m.event.startsWith(\"values\"));if(!l.includes(m.event)&&!lt)continue;let D=m;if(m.event===\"error\"){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.RUN_ERROR,message:m.data.message,rawEvent:m});break}if(m.event===\"updates\")continue;if(m.event===\"values\"){S=D.data;continue}else if(W&&D.event.startsWith(\"values|\")){S=p(p({},S),D.data);continue}let K=D.data,V=(y=K.metadata)!=null?y:{},P=V.langgraph_node,Y=K.event;if(this.activeRun.id=V.run_id,P&&P!==this.activeRun.nodeName&&(this.activeRun.nodeName&&this.activeRun.nodeName!==g&&this.endStep(),this.startStep(P)),d=d||Y===\"on_custom_event\"&&K.name===\"exit\",this.activeRun.exitingNode=this.activeRun.nodeName===P&&Y===\"on_chain_end\",this.activeRun.exitingNode&&(this.activeRun.manuallyEmittedState=null),(_=this.activeRun.graphInfo)!=null&&_.nodes.some(ht=>ht.id===P)&&(this.activeRun.nodeName=P),u.values=(v=this.activeRun.manuallyEmittedState)!=null?v:S,!this.activeRun.nodeName)continue;(JSON.stringify(u)!==JSON.stringify(r)||this.activeRun.prevNodeName!=this.activeRun.nodeName||this.activeRun.exitingNode)&&!this.getMessageInProgress(this.activeRun.id)&&(r=u,this.activeRun.prevNodeName=this.activeRun.nodeName,this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.STATE_SNAPSHOT,snapshot:this.getStateSnapshot(r),rawEvent:D})),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.RAW,event:K}),this.handleSingleEvent(K)}}catch(A){I=[A]}finally{try{N&&(A=R.return)&&await A.call(R)}finally{if(I)throw I[0]}}r=await this.client.threads.getState(e);let C=r.tasks,k=(x=(H=C==null?void 0:C[0])==null?void 0:H.interrupts)!=null?x:[],U=r.next.length===0,B=(b=(w=r.metadata)==null?void 0:w.writes)!=null?b:{},E=this.activeRun.nodeName;return k!=null&&k.length||(E=U?\"__end__\":(G=r.next[0])!=null?G:Object.keys(B)[0]),k.forEach(m=>{this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.CUSTOM,name:\"on_interrupt\",value:typeof m.value==\"string\"?m.value:JSON.stringify(m.value),rawEvent:m})}),this.activeRun.nodeName!=E&&(this.endStep(),this.startStep(E)),this.endStep(),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.STATE_SNAPSHOT,snapshot:this.getStateSnapshot(r)}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.MESSAGES_SNAPSHOT,messages:at((L=r.values.messages)!=null?L:[])}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.RUN_FINISHED,threadId:e,runId:this.activeRun.id}),this.activeRun=void 0,s.complete()}catch(C){return s.error(C)}}handleSingleEvent(t){var e,s,i,l,o,g;switch(t.event){case\"on_chat_model_stream\":let d=(e=t.metadata[\"emit-messages\"])!=null?e:!0,c=(s=t.metadata[\"emit-tool-calls\"])!=null?s:!0;if(t.data.chunk.response_metadata.finish_reason)return;let r=this.getMessageInProgress(this.activeRun.id),S=!!(r!=null&&r.id),u=(i=t.data.chunk.tool_call_chunks)==null?void 0:i[0],T=(l=t.metadata.predict_state)==null?void 0:l.some(I=>I.tool===(u==null?void 0:u.name)),M=!S&&(u==null?void 0:u.name),y=S&&(r==null?void 0:r.toolCallId)&&(u==null?void 0:u.args),_=S&&(r==null?void 0:r.toolCallId)&&!u,v=nt(t.data),R=O(t.data.chunk.content),N=!!(!u&&R),A=S&&!(r!=null&&r.toolCallId)&&!N;if(v){this.handleThinkingEvent(v);break}if(!v&&this.thinkingProcess&&(this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.THINKING_TEXT_MESSAGE_END}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.THINKING_END}),this.thinkingProcess=null),T&&this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.CUSTOM,name:\"PredictState\",value:t.metadata.predict_state}),_){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TOOL_CALL_END,toolCallId:r==null?void 0:r.toolCallId,rawEvent:t})&&(this.messagesInProcess[this.activeRun.id]=null);break}if(A){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TEXT_MESSAGE_END,messageId:r.id,rawEvent:t})&&(this.messagesInProcess[this.activeRun.id]=null);break}if(M&&c){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TOOL_CALL_START,toolCallId:u.id,toolCallName:u.name,parentMessageId:t.data.chunk.id,rawEvent:t})&&this.setMessageInProgress(this.activeRun.id,{id:t.data.chunk.id,toolCallId:u.id,toolCallName:u.name});break}if(y&&c){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TOOL_CALL_ARGS,toolCallId:r==null?void 0:r.toolCallId,delta:u.args,rawEvent:t});break}if(N&&d){r||(this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TEXT_MESSAGE_START,role:\"assistant\",messageId:t.data.chunk.id,rawEvent:t}),this.setMessageInProgress(this.activeRun.id,{id:t.data.chunk.id,toolCallId:null,toolCallName:null}),r=this.getMessageInProgress(this.activeRun.id)),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TEXT_MESSAGE_CONTENT,messageId:r.id,delta:R,rawEvent:t});break}break;case\"on_chat_model_end\":if((o=this.getMessageInProgress(this.activeRun.id))!=null&&o.toolCallId){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TOOL_CALL_END,toolCallId:this.getMessageInProgress(this.activeRun.id).toolCallId,rawEvent:t})&&(this.messagesInProcess[this.activeRun.id]=null);break}if((g=this.getMessageInProgress(this.activeRun.id))!=null&&g.id){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TEXT_MESSAGE_END,messageId:this.getMessageInProgress(this.activeRun.id).id,rawEvent:t})&&(this.messagesInProcess[this.activeRun.id]=null);break}break;case\"on_custom_event\":if(t.name===\"manually_emit_message\"){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TEXT_MESSAGE_START,role:\"assistant\",messageId:t.data.message_id,rawEvent:t}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TEXT_MESSAGE_CONTENT,messageId:t.data.message_id,delta:t.data.message,rawEvent:t}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TEXT_MESSAGE_END,messageId:t.data.message_id,rawEvent:t});break}if(t.name===\"manually_emit_tool_call\"){this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TOOL_CALL_START,toolCallId:t.data.id,toolCallName:t.data.name,parentMessageId:t.data.id,rawEvent:t}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TOOL_CALL_ARGS,toolCallId:t.data.id,delta:t.data.args,rawEvent:t}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.TOOL_CALL_END,toolCallId:t.data.id,rawEvent:t});break}t.name===\"manually_emit_state\"&&(this.activeRun.manuallyEmittedState=t.data,this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.STATE_SNAPSHOT,snapshot:this.getStateSnapshot({values:this.activeRun.manuallyEmittedState}),rawEvent:t})),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.CUSTOM,name:t.name,value:t.data,rawEvent:t});break}}handleThinkingEvent(t){var s;if(!t||!t.type||!t.text)return;let e=t.index;(s=this.thinkingProcess)!=null&&s.index&&this.thinkingProcess.index!==e&&(this.thinkingProcess.type&&this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.THINKING_TEXT_MESSAGE_END}),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.THINKING_END}),this.thinkingProcess=null),this.thinkingProcess||(this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.THINKING_START}),this.thinkingProcess={index:e}),this.thinkingProcess.type!==t.type&&(this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.THINKING_TEXT_MESSAGE_START}),this.thinkingProcess.type=t.type),this.thinkingProcess.type&&this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.THINKING_TEXT_MESSAGE_CONTENT,delta:t.text})}getStateSnapshot(t){let e=t.values,s=this.activeRun.schemaKeys;return s!=null&&s.output&&(e=F(e,[...this.constantSchemaKeys,...s.output])),e}async getOrCreateThread(t,e){let s;try{try{s=await this.getThread(t)}catch(i){s=await this.createThread({threadId:t,metadata:e})}}catch(i){throw new Error(`Failed to create thread: ${i.message}`)}return s}async getThread(t){return this.client.threads.get(t)}async createThread(t){return this.client.threads.create(t)}async mergeConfigs({configs:t,assistant:e,schemaKeys:s}){return t.reduce((i,l)=>{var S;let o=i.configurable;l.configurable&&(o=s!=null&&s.config?F(l==null?void 0:l.configurable,[...this.constantSchemaKeys,...(S=s==null?void 0:s.config)!=null?S:[]]):l==null?void 0:l.configurable);let g=f(p(p({},i),l),{configurable:o}),d=i.recursion_limit==null&&l.recursion_limit===25,c=JSON.stringify(g)!==JSON.stringify(i),r=d&&JSON.stringify(f(p({},g),{recursion_limit:null}))===JSON.stringify(f(p({},i),{recursion_limit:null}));return c&&!r?p(p({},i),g):i},e.config)}getMessageInProgress(t){return this.messagesInProcess[t]}setMessageInProgress(t,e){this.messagesInProcess=f(p({},this.messagesInProcess),{[t]:p(p({},this.messagesInProcess[t]),e)})}async getAssistant(){let t=await this.client.assistants.search(),e=t.find(s=>s.graph_id===this.graphId);if(!e)throw console.error(`\n      No agent found with graph ID ${this.graphId} found..\n\n      \n      These are the available agents: [${t.map(s=>`${s.graph_id} (ID: ${s.assistant_id})`).join(\", \")}]\n      `),new Error(\"No agent id found\");return e}async getSchemaKeys(){var t,e,s;try{let i=await this.client.assistants.getSchemas(this.assistant.assistant_id),l=null;if((t=i.config_schema)!=null&&t.properties&&(l=Object.keys(i.config_schema.properties)),!((e=i.input_schema)!=null&&e.properties)||!((s=i.output_schema)!=null&&s.properties))return{config:[],input:null,output:null};let o=Object.keys(i.input_schema.properties),g=Object.keys(i.output_schema.properties);return{input:o&&o.length?[...o,...this.constantSchemaKeys]:null,output:g&&g.length?[...g,...this.constantSchemaKeys]:null,config:l}}catch(i){return{config:[],input:this.constantSchemaKeys,output:this.constantSchemaKeys}}}langGraphDefaultMergeState(t,e,s){var d;e.length>0&&\"role\"in e[0]&&e[0].role===\"system\"&&(e=e.slice(1));let i=t.messages||[],l=new Set(i.map(c=>c.id)),o=e.filter(c=>!l.has(c.id)),g=[...(d=t.tools)!=null?d:[],...s!=null?s:[]].map(c=>c.type?c:{type:\"function\",function:{name:c.name,description:c.description,parameters:c.parameters}});return f(p({},t),{messages:o,tools:g})}startStep(t){this.activeStep&&this.endStep(),this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.STEP_STARTED,stepName:t}),this.activeRun.nodeName=t,this.activeStep=t}endStep(){var t;if(!this.activeStep)throw new Error(\"No active step to end\");this.dispatchEvent({type:_ag_ui_client__WEBPACK_IMPORTED_MODULE_4__.EventType.STEP_FINISHED,stepName:(t=this.activeRun.nodeName)!=null?t:this.activeStep}),this.activeRun.nodeName=void 0,this.activeStep=void 0}async getCheckpointByMessage(t,e,s){var y,v;let i=s!=null&&s.checkpoint_id?{checkpoint:{checkpoint_id:s.checkpoint_id}}:void 0,o=[...await this.client.threads.getHistory(e,i)].reverse(),g=o.find(R=>{var N;return(N=R.values.messages)==null?void 0:N.some(A=>A.id===t)});if(!g)throw new Error(\"Message not found\");let d=(y=g.values.messages)!=null?y:[],c=d.findIndex(R=>R.id===t);if(d.slice(c+1).length)return this.getCheckpointByMessage(t,e,g.parent_checkpoint);let S=o.indexOf(g),_=g.values,{messages:u}=_,T=tt(_,[\"messages\"]),M=(v=o[S-1])!=null?v:f(p({},g),{values:{}});return f(p({},M),{values:p(p({},M.values),T)})}};var ot=class extends _ag_ui_client__WEBPACK_IMPORTED_MODULE_2__.HttpAgent{};\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/client.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/client.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantsClient: () => (/* binding */ AssistantsClient),\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   CronsClient: () => (/* binding */ CronsClient),\n/* harmony export */   RunsClient: () => (/* binding */ RunsClient),\n/* harmony export */   StoreClient: () => (/* binding */ StoreClient),\n/* harmony export */   ThreadsClient: () => (/* binding */ ThreadsClient),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getClientConfigHash: () => (/* binding */ getClientConfigHash)\n/* harmony export */ });\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/async_caller.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/env.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/env.js\");\n/* harmony import */ var _utils_signals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/signals.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/signals.js\");\n/* harmony import */ var _utils_sse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/sse.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/sse.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/stream.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/stream.js\");\n\n\n\n\n\nfunction* iterateHeaders(headers) {\n    let iter;\n    let shouldClear = false;\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (headers instanceof Headers) {\n        const entries = [];\n        headers.forEach((value, name) => {\n            entries.push([name, value]);\n        });\n        iter = entries;\n    }\n    else if (Array.isArray(headers)) {\n        iter = headers;\n    }\n    else {\n        shouldClear = true;\n        iter = Object.entries(headers ?? {});\n    }\n    for (const item of iter) {\n        const name = item[0];\n        if (typeof name !== \"string\")\n            throw new TypeError(`Expected header name to be a string, got ${typeof name}`);\n        const values = Array.isArray(item[1]) ? item[1] : [item[1]];\n        let didClear = false;\n        for (const value of values) {\n            if (value === undefined)\n                continue;\n            // New object keys should always overwrite older headers\n            // Yield a null to clear the header in the headers object\n            // before adding the new value\n            if (shouldClear && !didClear) {\n                didClear = true;\n                yield [name, null];\n            }\n            yield [name, value];\n        }\n    }\n}\nfunction mergeHeaders(...headerObjects) {\n    const outputHeaders = new Headers();\n    for (const headers of headerObjects) {\n        if (!headers)\n            continue;\n        for (const [name, value] of iterateHeaders(headers)) {\n            if (value === null)\n                outputHeaders.delete(name);\n            else\n                outputHeaders.append(name, value);\n        }\n    }\n    const headerEntries = [];\n    outputHeaders.forEach((value, name) => {\n        headerEntries.push([name, value]);\n    });\n    return Object.fromEntries(headerEntries);\n}\n/**\n * Get the API key from the environment.\n * Precedence:\n *   1. explicit argument\n *   2. LANGGRAPH_API_KEY\n *   3. LANGSMITH_API_KEY\n *   4. LANGCHAIN_API_KEY\n *\n * @param apiKey - Optional API key provided as an argument\n * @returns The API key if found, otherwise undefined\n */\nfunction getApiKey(apiKey) {\n    if (apiKey) {\n        return apiKey;\n    }\n    const prefixes = [\"LANGGRAPH\", \"LANGSMITH\", \"LANGCHAIN\"];\n    for (const prefix of prefixes) {\n        const envKey = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(`${prefix}_API_KEY`);\n        if (envKey) {\n            // Remove surrounding quotes\n            return envKey.trim().replace(/^[\"']|[\"']$/g, \"\");\n        }\n    }\n    return undefined;\n}\nconst REGEX_RUN_METADATA = /(\\/threads\\/(?<thread_id>.+))?\\/runs\\/(?<run_id>.+)/;\nfunction getRunMetadataFromResponse(response) {\n    const contentLocation = response.headers.get(\"Content-Location\");\n    if (!contentLocation)\n        return undefined;\n    const match = REGEX_RUN_METADATA.exec(contentLocation);\n    if (!match?.groups?.run_id)\n        return undefined;\n    return {\n        run_id: match.groups.run_id,\n        thread_id: match.groups.thread_id || undefined,\n    };\n}\nclass BaseClient {\n    constructor(config) {\n        Object.defineProperty(this, \"asyncCaller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeoutMs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"defaultHeaders\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onRequest\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const callerOptions = {\n            maxRetries: 4,\n            maxConcurrency: 4,\n            ...config?.callerOptions,\n        };\n        let defaultApiUrl = \"http://localhost:8123\";\n        if (!config?.apiUrl &&\n            typeof globalThis === \"object\" &&\n            globalThis != null) {\n            const fetchSmb = Symbol.for(\"langgraph_api:fetch\");\n            const urlSmb = Symbol.for(\"langgraph_api:url\");\n            const global = globalThis;\n            if (global[fetchSmb])\n                callerOptions.fetch ??= global[fetchSmb];\n            if (global[urlSmb])\n                defaultApiUrl = global[urlSmb];\n        }\n        this.asyncCaller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__.AsyncCaller(callerOptions);\n        this.timeoutMs = config?.timeoutMs;\n        // default limit being capped by Chrome\n        // https://github.com/nodejs/undici/issues/1373\n        // Regex to remove trailing slash, if present\n        this.apiUrl = config?.apiUrl?.replace(/\\/$/, \"\") || defaultApiUrl;\n        this.defaultHeaders = config?.defaultHeaders || {};\n        this.onRequest = config?.onRequest;\n        const apiKey = getApiKey(config?.apiKey);\n        if (apiKey) {\n            this.defaultHeaders[\"x-api-key\"] = apiKey;\n        }\n    }\n    prepareFetchOptions(path, options) {\n        const mutatedOptions = {\n            ...options,\n            headers: mergeHeaders(this.defaultHeaders, options?.headers),\n        };\n        if (mutatedOptions.json) {\n            mutatedOptions.body = JSON.stringify(mutatedOptions.json);\n            mutatedOptions.headers = mergeHeaders(mutatedOptions.headers, {\n                \"content-type\": \"application/json\",\n            });\n            delete mutatedOptions.json;\n        }\n        if (mutatedOptions.withResponse) {\n            delete mutatedOptions.withResponse;\n        }\n        let timeoutSignal = null;\n        if (typeof options?.timeoutMs !== \"undefined\") {\n            if (options.timeoutMs != null) {\n                timeoutSignal = AbortSignal.timeout(options.timeoutMs);\n            }\n        }\n        else if (this.timeoutMs != null) {\n            timeoutSignal = AbortSignal.timeout(this.timeoutMs);\n        }\n        mutatedOptions.signal = (0,_utils_signals_js__WEBPACK_IMPORTED_MODULE_2__.mergeSignals)(timeoutSignal, mutatedOptions.signal);\n        const targetUrl = new URL(`${this.apiUrl}${path}`);\n        if (mutatedOptions.params) {\n            for (const [key, value] of Object.entries(mutatedOptions.params)) {\n                if (value == null)\n                    continue;\n                const strValue = typeof value === \"string\" || typeof value === \"number\"\n                    ? value.toString()\n                    : JSON.stringify(value);\n                targetUrl.searchParams.append(key, strValue);\n            }\n            delete mutatedOptions.params;\n        }\n        return [targetUrl, mutatedOptions];\n    }\n    async fetch(path, options) {\n        const [url, init] = this.prepareFetchOptions(path, options);\n        let finalInit = init;\n        if (this.onRequest) {\n            finalInit = await this.onRequest(url, init);\n        }\n        const response = await this.asyncCaller.fetch(url, finalInit);\n        const body = (() => {\n            if (response.status === 202 || response.status === 204) {\n                return undefined;\n            }\n            return response.json();\n        })();\n        if (options?.withResponse) {\n            return [await body, response];\n        }\n        return body;\n    }\n}\nclass CronsClient extends BaseClient {\n    /**\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this cron job.\n     * @param payload Payload for creating a cron job.\n     * @returns The created background run.\n     */\n    async createForThread(threadId, assistantId, payload) {\n        const json = {\n            schedule: payload?.schedule,\n            input: payload?.input,\n            config: payload?.config,\n            context: payload?.context,\n            metadata: payload?.metadata,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            if_not_exists: payload?.ifNotExists,\n            checkpoint_during: payload?.checkpointDuring,\n        };\n        return this.fetch(`/threads/${threadId}/runs/crons`, {\n            method: \"POST\",\n            json,\n        });\n    }\n    /**\n     *\n     * @param assistantId Assistant ID to use for this cron job.\n     * @param payload Payload for creating a cron job.\n     * @returns\n     */\n    async create(assistantId, payload) {\n        const json = {\n            schedule: payload?.schedule,\n            input: payload?.input,\n            config: payload?.config,\n            context: payload?.context,\n            metadata: payload?.metadata,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            if_not_exists: payload?.ifNotExists,\n            checkpoint_during: payload?.checkpointDuring,\n        };\n        return this.fetch(`/runs/crons`, {\n            method: \"POST\",\n            json,\n        });\n    }\n    /**\n     *\n     * @param cronId Cron ID of Cron job to delete.\n     */\n    async delete(cronId) {\n        await this.fetch(`/runs/crons/${cronId}`, {\n            method: \"DELETE\",\n        });\n    }\n    /**\n     *\n     * @param query Query options.\n     * @returns List of crons.\n     */\n    async search(query) {\n        return this.fetch(\"/runs/crons/search\", {\n            method: \"POST\",\n            json: {\n                assistant_id: query?.assistantId ?? undefined,\n                thread_id: query?.threadId ?? undefined,\n                limit: query?.limit ?? 10,\n                offset: query?.offset ?? 0,\n                sort_by: query?.sortBy ?? undefined,\n                sort_order: query?.sortOrder ?? undefined,\n            },\n        });\n    }\n}\nclass AssistantsClient extends BaseClient {\n    /**\n     * Get an assistant by ID.\n     *\n     * @param assistantId The ID of the assistant.\n     * @returns Assistant\n     */\n    async get(assistantId) {\n        return this.fetch(`/assistants/${assistantId}`);\n    }\n    /**\n     * Get the JSON representation of the graph assigned to a runnable\n     * @param assistantId The ID of the assistant.\n     * @param options.xray Whether to include subgraphs in the serialized graph representation. If an integer value is provided, only subgraphs with a depth less than or equal to the value will be included.\n     * @returns Serialized graph\n     */\n    async getGraph(assistantId, options) {\n        return this.fetch(`/assistants/${assistantId}/graph`, {\n            params: { xray: options?.xray },\n        });\n    }\n    /**\n     * Get the state and config schema of the graph assigned to a runnable\n     * @param assistantId The ID of the assistant.\n     * @returns Graph schema\n     */\n    async getSchemas(assistantId) {\n        return this.fetch(`/assistants/${assistantId}/schemas`);\n    }\n    /**\n     * Get the schemas of an assistant by ID.\n     *\n     * @param assistantId The ID of the assistant to get the schema of.\n     * @param options Additional options for getting subgraphs, such as namespace or recursion extraction.\n     * @returns The subgraphs of the assistant.\n     */\n    async getSubgraphs(assistantId, options) {\n        if (options?.namespace) {\n            return this.fetch(`/assistants/${assistantId}/subgraphs/${options.namespace}`, { params: { recurse: options?.recurse } });\n        }\n        return this.fetch(`/assistants/${assistantId}/subgraphs`, {\n            params: { recurse: options?.recurse },\n        });\n    }\n    /**\n     * Create a new assistant.\n     * @param payload Payload for creating an assistant.\n     * @returns The created assistant.\n     */\n    async create(payload) {\n        return this.fetch(\"/assistants\", {\n            method: \"POST\",\n            json: {\n                graph_id: payload.graphId,\n                config: payload.config,\n                context: payload.context,\n                metadata: payload.metadata,\n                assistant_id: payload.assistantId,\n                if_exists: payload.ifExists,\n                name: payload.name,\n                description: payload.description,\n            },\n        });\n    }\n    /**\n     * Update an assistant.\n     * @param assistantId ID of the assistant.\n     * @param payload Payload for updating the assistant.\n     * @returns The updated assistant.\n     */\n    async update(assistantId, payload) {\n        return this.fetch(`/assistants/${assistantId}`, {\n            method: \"PATCH\",\n            json: {\n                graph_id: payload.graphId,\n                config: payload.config,\n                context: payload.context,\n                metadata: payload.metadata,\n                name: payload.name,\n                description: payload.description,\n            },\n        });\n    }\n    /**\n     * Delete an assistant.\n     *\n     * @param assistantId ID of the assistant.\n     */\n    async delete(assistantId) {\n        return this.fetch(`/assistants/${assistantId}`, {\n            method: \"DELETE\",\n        });\n    }\n    /**\n     * List assistants.\n     * @param query Query options.\n     * @returns List of assistants.\n     */\n    async search(query) {\n        return this.fetch(\"/assistants/search\", {\n            method: \"POST\",\n            json: {\n                graph_id: query?.graphId ?? undefined,\n                metadata: query?.metadata ?? undefined,\n                limit: query?.limit ?? 10,\n                offset: query?.offset ?? 0,\n                sort_by: query?.sortBy ?? undefined,\n                sort_order: query?.sortOrder ?? undefined,\n            },\n        });\n    }\n    /**\n     * List all versions of an assistant.\n     *\n     * @param assistantId ID of the assistant.\n     * @returns List of assistant versions.\n     */\n    async getVersions(assistantId, payload) {\n        return this.fetch(`/assistants/${assistantId}/versions`, {\n            method: \"POST\",\n            json: {\n                metadata: payload?.metadata ?? undefined,\n                limit: payload?.limit ?? 10,\n                offset: payload?.offset ?? 0,\n            },\n        });\n    }\n    /**\n     * Change the version of an assistant.\n     *\n     * @param assistantId ID of the assistant.\n     * @param version The version to change to.\n     * @returns The updated assistant.\n     */\n    async setLatest(assistantId, version) {\n        return this.fetch(`/assistants/${assistantId}/latest`, {\n            method: \"POST\",\n            json: { version },\n        });\n    }\n}\nclass ThreadsClient extends BaseClient {\n    /**\n     * Get a thread by ID.\n     *\n     * @param threadId ID of the thread.\n     * @returns The thread.\n     */\n    async get(threadId) {\n        return this.fetch(`/threads/${threadId}`);\n    }\n    /**\n     * Create a new thread.\n     *\n     * @param payload Payload for creating a thread.\n     * @returns The created thread.\n     */\n    async create(payload) {\n        return this.fetch(`/threads`, {\n            method: \"POST\",\n            json: {\n                metadata: {\n                    ...payload?.metadata,\n                    graph_id: payload?.graphId,\n                },\n                thread_id: payload?.threadId,\n                if_exists: payload?.ifExists,\n                supersteps: payload?.supersteps?.map((s) => ({\n                    updates: s.updates.map((u) => ({\n                        values: u.values,\n                        command: u.command,\n                        as_node: u.asNode,\n                    })),\n                })),\n            },\n        });\n    }\n    /**\n     * Copy an existing thread\n     * @param threadId ID of the thread to be copied\n     * @returns Newly copied thread\n     */\n    async copy(threadId) {\n        return this.fetch(`/threads/${threadId}/copy`, {\n            method: \"POST\",\n        });\n    }\n    /**\n     * Update a thread.\n     *\n     * @param threadId ID of the thread.\n     * @param payload Payload for updating the thread.\n     * @returns The updated thread.\n     */\n    async update(threadId, payload) {\n        return this.fetch(`/threads/${threadId}`, {\n            method: \"PATCH\",\n            json: { metadata: payload?.metadata },\n        });\n    }\n    /**\n     * Delete a thread.\n     *\n     * @param threadId ID of the thread.\n     */\n    async delete(threadId) {\n        return this.fetch(`/threads/${threadId}`, {\n            method: \"DELETE\",\n        });\n    }\n    /**\n     * List threads\n     *\n     * @param query Query options\n     * @returns List of threads\n     */\n    async search(query) {\n        return this.fetch(\"/threads/search\", {\n            method: \"POST\",\n            json: {\n                metadata: query?.metadata ?? undefined,\n                limit: query?.limit ?? 10,\n                offset: query?.offset ?? 0,\n                status: query?.status,\n                sort_by: query?.sortBy,\n                sort_order: query?.sortOrder,\n            },\n        });\n    }\n    /**\n     * Get state for a thread.\n     *\n     * @param threadId ID of the thread.\n     * @returns Thread state.\n     */\n    async getState(threadId, checkpoint, options) {\n        if (checkpoint != null) {\n            if (typeof checkpoint !== \"string\") {\n                return this.fetch(`/threads/${threadId}/state/checkpoint`, {\n                    method: \"POST\",\n                    json: { checkpoint, subgraphs: options?.subgraphs },\n                });\n            }\n            // deprecated\n            return this.fetch(`/threads/${threadId}/state/${checkpoint}`, { params: { subgraphs: options?.subgraphs } });\n        }\n        return this.fetch(`/threads/${threadId}/state`, {\n            params: { subgraphs: options?.subgraphs },\n        });\n    }\n    /**\n     * Add state to a thread.\n     *\n     * @param threadId The ID of the thread.\n     * @returns\n     */\n    async updateState(threadId, options) {\n        return this.fetch(`/threads/${threadId}/state`, {\n            method: \"POST\",\n            json: {\n                values: options.values,\n                checkpoint_id: options.checkpointId,\n                checkpoint: options.checkpoint,\n                as_node: options?.asNode,\n            },\n        });\n    }\n    /**\n     * Patch the metadata of a thread.\n     *\n     * @param threadIdOrConfig Thread ID or config to patch the state of.\n     * @param metadata Metadata to patch the state with.\n     */\n    async patchState(threadIdOrConfig, metadata) {\n        let threadId;\n        if (typeof threadIdOrConfig !== \"string\") {\n            if (typeof threadIdOrConfig.configurable?.thread_id !== \"string\") {\n                throw new Error(\"Thread ID is required when updating state with a config.\");\n            }\n            threadId = threadIdOrConfig.configurable.thread_id;\n        }\n        else {\n            threadId = threadIdOrConfig;\n        }\n        return this.fetch(`/threads/${threadId}/state`, {\n            method: \"PATCH\",\n            json: { metadata },\n        });\n    }\n    /**\n     * Get all past states for a thread.\n     *\n     * @param threadId ID of the thread.\n     * @param options Additional options.\n     * @returns List of thread states.\n     */\n    async getHistory(threadId, options) {\n        return this.fetch(`/threads/${threadId}/history`, {\n            method: \"POST\",\n            json: {\n                limit: options?.limit ?? 10,\n                before: options?.before,\n                metadata: options?.metadata,\n                checkpoint: options?.checkpoint,\n            },\n        });\n    }\n}\nclass RunsClient extends BaseClient {\n    /**\n     * Create a run and stream the results.\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this run.\n     * @param payload Payload for creating a run.\n     */\n    async *stream(threadId, assistantId, payload) {\n        const json = {\n            input: payload?.input,\n            command: payload?.command,\n            config: payload?.config,\n            context: payload?.context,\n            metadata: payload?.metadata,\n            stream_mode: payload?.streamMode,\n            stream_subgraphs: payload?.streamSubgraphs,\n            stream_resumable: payload?.streamResumable,\n            feedback_keys: payload?.feedbackKeys,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            checkpoint: payload?.checkpoint,\n            checkpoint_id: payload?.checkpointId,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            on_completion: payload?.onCompletion,\n            on_disconnect: payload?.onDisconnect,\n            after_seconds: payload?.afterSeconds,\n            if_not_exists: payload?.ifNotExists,\n            checkpoint_during: payload?.checkpointDuring,\n        };\n        const endpoint = threadId == null ? `/runs/stream` : `/threads/${threadId}/runs/stream`;\n        const response = await this.asyncCaller.fetch(...this.prepareFetchOptions(endpoint, {\n            method: \"POST\",\n            json,\n            timeoutMs: null,\n            signal: payload?.signal,\n        }));\n        const runMetadata = getRunMetadataFromResponse(response);\n        if (runMetadata)\n            payload?.onRunCreated?.(runMetadata);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const stream = (response.body || new ReadableStream({ start: (ctrl) => ctrl.close() }))\n            .pipeThrough((0,_utils_sse_js__WEBPACK_IMPORTED_MODULE_3__.BytesLineDecoder)())\n            .pipeThrough((0,_utils_sse_js__WEBPACK_IMPORTED_MODULE_3__.SSEDecoder)());\n        yield* _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromReadableStream(stream);\n    }\n    /**\n     * Create a run.\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this run.\n     * @param payload Payload for creating a run.\n     * @returns The created run.\n     */\n    async create(threadId, assistantId, payload) {\n        const json = {\n            input: payload?.input,\n            command: payload?.command,\n            config: payload?.config,\n            context: payload?.context,\n            metadata: payload?.metadata,\n            stream_mode: payload?.streamMode,\n            stream_subgraphs: payload?.streamSubgraphs,\n            stream_resumable: payload?.streamResumable,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            webhook: payload?.webhook,\n            checkpoint: payload?.checkpoint,\n            checkpoint_id: payload?.checkpointId,\n            multitask_strategy: payload?.multitaskStrategy,\n            after_seconds: payload?.afterSeconds,\n            if_not_exists: payload?.ifNotExists,\n            checkpoint_during: payload?.checkpointDuring,\n            langsmith_tracer: payload?._langsmithTracer\n                ? {\n                    project_name: payload?._langsmithTracer?.projectName,\n                    example_id: payload?._langsmithTracer?.exampleId,\n                }\n                : undefined,\n        };\n        const [run, response] = await this.fetch(`/threads/${threadId}/runs`, {\n            method: \"POST\",\n            json,\n            signal: payload?.signal,\n            withResponse: true,\n        });\n        const runMetadata = getRunMetadataFromResponse(response);\n        if (runMetadata)\n            payload?.onRunCreated?.(runMetadata);\n        return run;\n    }\n    /**\n     * Create a batch of stateless background runs.\n     *\n     * @param payloads An array of payloads for creating runs.\n     * @returns An array of created runs.\n     */\n    async createBatch(payloads) {\n        const filteredPayloads = payloads\n            .map((payload) => ({ ...payload, assistant_id: payload.assistantId }))\n            .map((payload) => {\n            return Object.fromEntries(Object.entries(payload).filter(([_, v]) => v !== undefined));\n        });\n        return this.fetch(\"/runs/batch\", {\n            method: \"POST\",\n            json: filteredPayloads,\n        });\n    }\n    /**\n     * Create a run and wait for it to complete.\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this run.\n     * @param payload Payload for creating a run.\n     * @returns The last values chunk of the thread.\n     */\n    async wait(threadId, assistantId, payload) {\n        const json = {\n            input: payload?.input,\n            command: payload?.command,\n            config: payload?.config,\n            context: payload?.context,\n            metadata: payload?.metadata,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            checkpoint: payload?.checkpoint,\n            checkpoint_id: payload?.checkpointId,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            on_completion: payload?.onCompletion,\n            on_disconnect: payload?.onDisconnect,\n            after_seconds: payload?.afterSeconds,\n            if_not_exists: payload?.ifNotExists,\n            checkpoint_during: payload?.checkpointDuring,\n            langsmith_tracer: payload?._langsmithTracer\n                ? {\n                    project_name: payload?._langsmithTracer?.projectName,\n                    example_id: payload?._langsmithTracer?.exampleId,\n                }\n                : undefined,\n        };\n        const endpoint = threadId == null ? `/runs/wait` : `/threads/${threadId}/runs/wait`;\n        const [run, response] = await this.fetch(endpoint, {\n            method: \"POST\",\n            json,\n            timeoutMs: null,\n            signal: payload?.signal,\n            withResponse: true,\n        });\n        const runMetadata = getRunMetadataFromResponse(response);\n        if (runMetadata)\n            payload?.onRunCreated?.(runMetadata);\n        const raiseError = payload?.raiseError !== undefined ? payload.raiseError : true;\n        if (raiseError &&\n            \"__error__\" in run &&\n            typeof run.__error__ === \"object\" &&\n            run.__error__ &&\n            \"error\" in run.__error__ &&\n            \"message\" in run.__error__) {\n            throw new Error(`${run.__error__?.error}: ${run.__error__?.message}`);\n        }\n        return run;\n    }\n    /**\n     * List all runs for a thread.\n     *\n     * @param threadId The ID of the thread.\n     * @param options Filtering and pagination options.\n     * @returns List of runs.\n     */\n    async list(threadId, options) {\n        return this.fetch(`/threads/${threadId}/runs`, {\n            params: {\n                limit: options?.limit ?? 10,\n                offset: options?.offset ?? 0,\n                status: options?.status ?? undefined,\n            },\n        });\n    }\n    /**\n     * Get a run by ID.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @returns The run.\n     */\n    async get(threadId, runId) {\n        return this.fetch(`/threads/${threadId}/runs/${runId}`);\n    }\n    /**\n     * Cancel a run.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @param wait Whether to block when canceling\n     * @param action Action to take when cancelling the run. Possible values are `interrupt` or `rollback`. Default is `interrupt`.\n     * @returns\n     */\n    async cancel(threadId, runId, wait = false, action = \"interrupt\") {\n        return this.fetch(`/threads/${threadId}/runs/${runId}/cancel`, {\n            method: \"POST\",\n            params: {\n                wait: wait ? \"1\" : \"0\",\n                action,\n            },\n        });\n    }\n    /**\n     * Block until a run is done.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @returns\n     */\n    async join(threadId, runId, options) {\n        return this.fetch(`/threads/${threadId}/runs/${runId}/join`, {\n            timeoutMs: null,\n            signal: options?.signal,\n        });\n    }\n    /**\n     * Stream output from a run in real-time, until the run is done.\n     *\n     * @param threadId The ID of the thread. Can be set to `null` | `undefined` for stateless runs.\n     * @param runId The ID of the run.\n     * @param options Additional options for controlling the stream behavior:\n     *   - signal: An AbortSignal that can be used to cancel the stream request\n     *   - lastEventId: The ID of the last event received. Can be used to reconnect to a stream without losing events.\n     *   - cancelOnDisconnect: When true, automatically cancels the run if the client disconnects from the stream\n     *   - streamMode: Controls what types of events to receive from the stream (can be a single mode or array of modes)\n     *        Must be a subset of the stream modes passed when creating the run. Background runs default to having the union of all\n     *        stream modes enabled.\n     * @returns An async generator yielding stream parts.\n     */\n    async *joinStream(threadId, runId, options\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) {\n        const opts = typeof options === \"object\" &&\n            options != null &&\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            options instanceof AbortSignal\n            ? { signal: options }\n            : options;\n        const response = await this.asyncCaller.fetch(...this.prepareFetchOptions(threadId != null\n            ? `/threads/${threadId}/runs/${runId}/stream`\n            : `/runs/${runId}/stream`, {\n            method: \"GET\",\n            timeoutMs: null,\n            signal: opts?.signal,\n            headers: opts?.lastEventId\n                ? { \"Last-Event-ID\": opts.lastEventId }\n                : undefined,\n            params: {\n                cancel_on_disconnect: opts?.cancelOnDisconnect ? \"1\" : \"0\",\n                stream_mode: opts?.streamMode,\n            },\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const stream = (response.body || new ReadableStream({ start: (ctrl) => ctrl.close() }))\n            .pipeThrough((0,_utils_sse_js__WEBPACK_IMPORTED_MODULE_3__.BytesLineDecoder)())\n            .pipeThrough((0,_utils_sse_js__WEBPACK_IMPORTED_MODULE_3__.SSEDecoder)());\n        yield* _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.IterableReadableStream.fromReadableStream(stream);\n    }\n    /**\n     * Delete a run.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @returns\n     */\n    async delete(threadId, runId) {\n        return this.fetch(`/threads/${threadId}/runs/${runId}`, {\n            method: \"DELETE\",\n        });\n    }\n}\nclass StoreClient extends BaseClient {\n    /**\n     * Store or update an item.\n     *\n     * @param namespace A list of strings representing the namespace path.\n     * @param key The unique identifier for the item within the namespace.\n     * @param value A dictionary containing the item's data.\n     * @param options.index Controls search indexing - null (use defaults), false (disable), or list of field paths to index.\n     * @param options.ttl Optional time-to-live in minutes for the item, or null for no expiration.\n     * @returns Promise<void>\n     *\n     * @example\n     * ```typescript\n     * await client.store.putItem(\n     *   [\"documents\", \"user123\"],\n     *   \"item456\",\n     *   { title: \"My Document\", content: \"Hello World\" },\n     *   { ttl: 60 } // expires in 60 minutes\n     * );\n     * ```\n     */\n    async putItem(namespace, key, value, options) {\n        namespace.forEach((label) => {\n            if (label.includes(\".\")) {\n                throw new Error(`Invalid namespace label '${label}'. Namespace labels cannot contain periods ('.')`);\n            }\n        });\n        const payload = {\n            namespace,\n            key,\n            value,\n            index: options?.index,\n            ttl: options?.ttl,\n        };\n        return this.fetch(\"/store/items\", {\n            method: \"PUT\",\n            json: payload,\n        });\n    }\n    /**\n     * Retrieve a single item.\n     *\n     * @param namespace A list of strings representing the namespace path.\n     * @param key The unique identifier for the item.\n     * @param options.refreshTtl Whether to refresh the TTL on this read operation. If null, uses the store's default behavior.\n     * @returns Promise<Item>\n     *\n     * @example\n     * ```typescript\n     * const item = await client.store.getItem(\n     *   [\"documents\", \"user123\"],\n     *   \"item456\",\n     *   { refreshTtl: true }\n     * );\n     * console.log(item);\n     * // {\n     * //   namespace: [\"documents\", \"user123\"],\n     * //   key: \"item456\",\n     * //   value: { title: \"My Document\", content: \"Hello World\" },\n     * //   createdAt: \"2024-07-30T12:00:00Z\",\n     * //   updatedAt: \"2024-07-30T12:00:00Z\"\n     * // }\n     * ```\n     */\n    async getItem(namespace, key, options) {\n        namespace.forEach((label) => {\n            if (label.includes(\".\")) {\n                throw new Error(`Invalid namespace label '${label}'. Namespace labels cannot contain periods ('.')`);\n            }\n        });\n        const params = {\n            namespace: namespace.join(\".\"),\n            key,\n        };\n        if (options?.refreshTtl !== undefined) {\n            params.refresh_ttl = options.refreshTtl;\n        }\n        const response = await this.fetch(\"/store/items\", {\n            params,\n        });\n        return response\n            ? {\n                ...response,\n                createdAt: response.created_at,\n                updatedAt: response.updated_at,\n            }\n            : null;\n    }\n    /**\n     * Delete an item.\n     *\n     * @param namespace A list of strings representing the namespace path.\n     * @param key The unique identifier for the item.\n     * @returns Promise<void>\n     */\n    async deleteItem(namespace, key) {\n        namespace.forEach((label) => {\n            if (label.includes(\".\")) {\n                throw new Error(`Invalid namespace label '${label}'. Namespace labels cannot contain periods ('.')`);\n            }\n        });\n        return this.fetch(\"/store/items\", {\n            method: \"DELETE\",\n            json: { namespace, key },\n        });\n    }\n    /**\n     * Search for items within a namespace prefix.\n     *\n     * @param namespacePrefix List of strings representing the namespace prefix.\n     * @param options.filter Optional dictionary of key-value pairs to filter results.\n     * @param options.limit Maximum number of items to return (default is 10).\n     * @param options.offset Number of items to skip before returning results (default is 0).\n     * @param options.query Optional search query.\n     * @param options.refreshTtl Whether to refresh the TTL on items returned by this search. If null, uses the store's default behavior.\n     * @returns Promise<SearchItemsResponse>\n     *\n     * @example\n     * ```typescript\n     * const results = await client.store.searchItems(\n     *   [\"documents\"],\n     *   {\n     *     filter: { author: \"John Doe\" },\n     *     limit: 5,\n     *     refreshTtl: true\n     *   }\n     * );\n     * console.log(results);\n     * // {\n     * //   items: [\n     * //     {\n     * //       namespace: [\"documents\", \"user123\"],\n     * //       key: \"item789\",\n     * //       value: { title: \"Another Document\", author: \"John Doe\" },\n     * //       createdAt: \"2024-07-30T12:00:00Z\",\n     * //       updatedAt: \"2024-07-30T12:00:00Z\"\n     * //     },\n     * //     // ... additional items ...\n     * //   ]\n     * // }\n     * ```\n     */\n    async searchItems(namespacePrefix, options) {\n        const payload = {\n            namespace_prefix: namespacePrefix,\n            filter: options?.filter,\n            limit: options?.limit ?? 10,\n            offset: options?.offset ?? 0,\n            query: options?.query,\n            refresh_ttl: options?.refreshTtl,\n        };\n        const response = await this.fetch(\"/store/items/search\", {\n            method: \"POST\",\n            json: payload,\n        });\n        return {\n            items: response.items.map((item) => ({\n                ...item,\n                createdAt: item.created_at,\n                updatedAt: item.updated_at,\n            })),\n        };\n    }\n    /**\n     * List namespaces with optional match conditions.\n     *\n     * @param options.prefix Optional list of strings representing the prefix to filter namespaces.\n     * @param options.suffix Optional list of strings representing the suffix to filter namespaces.\n     * @param options.maxDepth Optional integer specifying the maximum depth of namespaces to return.\n     * @param options.limit Maximum number of namespaces to return (default is 100).\n     * @param options.offset Number of namespaces to skip before returning results (default is 0).\n     * @returns Promise<ListNamespaceResponse>\n     */\n    async listNamespaces(options) {\n        const payload = {\n            prefix: options?.prefix,\n            suffix: options?.suffix,\n            max_depth: options?.maxDepth,\n            limit: options?.limit ?? 100,\n            offset: options?.offset ?? 0,\n        };\n        return this.fetch(\"/store/namespaces\", {\n            method: \"POST\",\n            json: payload,\n        });\n    }\n}\nclass UiClient extends BaseClient {\n    static getOrCached(key, fn) {\n        if (UiClient.promiseCache[key] != null) {\n            return UiClient.promiseCache[key];\n        }\n        const promise = fn();\n        UiClient.promiseCache[key] = promise;\n        return promise;\n    }\n    async getComponent(assistantId, agentName) {\n        return UiClient.getOrCached(`${this.apiUrl}-${assistantId}-${agentName}`, async () => {\n            const response = await this.asyncCaller.fetch(...this.prepareFetchOptions(`/ui/${assistantId}`, {\n                headers: {\n                    Accept: \"text/html\",\n                    \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n                json: { name: agentName },\n            }));\n            return response.text();\n        });\n    }\n}\nObject.defineProperty(UiClient, \"promiseCache\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {}\n});\nclass Client {\n    constructor(config) {\n        /**\n         * The client for interacting with assistants.\n         */\n        Object.defineProperty(this, \"assistants\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with threads.\n         */\n        Object.defineProperty(this, \"threads\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with runs.\n         */\n        Object.defineProperty(this, \"runs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with cron runs.\n         */\n        Object.defineProperty(this, \"crons\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with the KV store.\n         */\n        Object.defineProperty(this, \"store\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with the UI.\n         * @internal Used by LoadExternalComponent and the API might change in the future.\n         */\n        Object.defineProperty(this, \"~ui\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * @internal Used to obtain a stable key representing the client.\n         */\n        Object.defineProperty(this, \"~configHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this[\"~configHash\"] = (() => JSON.stringify({\n            apiUrl: config?.apiUrl,\n            apiKey: config?.apiKey,\n            timeoutMs: config?.timeoutMs,\n            defaultHeaders: config?.defaultHeaders,\n            maxConcurrency: config?.callerOptions?.maxConcurrency,\n            maxRetries: config?.callerOptions?.maxRetries,\n            callbacks: {\n                onFailedResponseHook: config?.callerOptions?.onFailedResponseHook != null,\n                onRequest: config?.onRequest != null,\n                fetch: config?.callerOptions?.fetch != null,\n            },\n        }))();\n        this.assistants = new AssistantsClient(config);\n        this.threads = new ThreadsClient(config);\n        this.runs = new RunsClient(config);\n        this.crons = new CronsClient(config);\n        this.store = new StoreClient(config);\n        this[\"~ui\"] = new UiClient(config);\n    }\n}\n/**\n * @internal Used to obtain a stable key representing the client.\n */\nfunction getClientConfigHash(client) {\n    return client[\"~configHash\"];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_0__.Client),\n/* harmony export */   getApiKey: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_0__.getApiKey),\n/* harmony export */   overrideFetchImplementation: () => (/* reexport safe */ _singletons_fetch_js__WEBPACK_IMPORTED_MODULE_1__.overrideFetchImplementation)\n/* harmony export */ });\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/client.js\");\n/* harmony import */ var _singletons_fetch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./singletons/fetch.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFnLXVpL2xhbmdncmFwaC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0Q7QUFDb0IiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BhZy11aS9sYW5nZ3JhcGgvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbGFuZ2dyYXBoLXNkay9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IENsaWVudCwgZ2V0QXBpS2V5IH0gZnJvbSBcIi4vY2xpZW50LmpzXCI7XG5leHBvcnQgeyBvdmVycmlkZUZldGNoSW1wbGVtZW50YXRpb24gfSBmcm9tIFwiLi9zaW5nbGV0b25zL2ZldGNoLmpzXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _getFetchImplementation: () => (/* binding */ _getFetchImplementation),\n/* harmony export */   overrideFetchImplementation: () => (/* binding */ overrideFetchImplementation)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// Wrap the default fetch call due to issues with illegal invocations\n// in some environments:\n// https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n// @ts-expect-error Broad typing to support a range of fetch implementations\nconst DEFAULT_FETCH_IMPLEMENTATION = (...args) => fetch(...args);\nconst LANGSMITH_FETCH_IMPLEMENTATION_KEY = Symbol.for(\"lg:fetch_implementation\");\n/**\n * Overrides the fetch implementation used for LangSmith calls.\n * You should use this if you need to use an implementation of fetch\n * other than the default global (e.g. for dealing with proxies).\n * @param fetch The new fetch function to use.\n */\nconst overrideFetchImplementation = (fetch) => {\n    globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] = fetch;\n};\n/**\n * @internal\n */\nconst _getFetchImplementation = () => {\n    return (globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] ??\n        DEFAULT_FETCH_IMPLEMENTATION);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFnLXVpL2xhbmdncmFwaC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3Qvc2luZ2xldG9ucy9mZXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BhZy11aS9sYW5nZ3JhcGgvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbGFuZ2dyYXBoLXNkay9kaXN0L3NpbmdsZXRvbnMvZmV0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLy8gV3JhcCB0aGUgZGVmYXVsdCBmZXRjaCBjYWxsIGR1ZSB0byBpc3N1ZXMgd2l0aCBpbGxlZ2FsIGludm9jYXRpb25zXG4vLyBpbiBzb21lIGVudmlyb25tZW50czpcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY5ODc2ODU5L3doeS1kb2VzLWJpbmQtZml4LWZhaWxlZC10by1leGVjdXRlLWZldGNoLW9uLXdpbmRvdy1pbGxlZ2FsLWludm9jYXRpb24tZXJyXG4vLyBAdHMtZXhwZWN0LWVycm9yIEJyb2FkIHR5cGluZyB0byBzdXBwb3J0IGEgcmFuZ2Ugb2YgZmV0Y2ggaW1wbGVtZW50YXRpb25zXG5jb25zdCBERUZBVUxUX0ZFVENIX0lNUExFTUVOVEFUSU9OID0gKC4uLmFyZ3MpID0+IGZldGNoKC4uLmFyZ3MpO1xuY29uc3QgTEFOR1NNSVRIX0ZFVENIX0lNUExFTUVOVEFUSU9OX0tFWSA9IFN5bWJvbC5mb3IoXCJsZzpmZXRjaF9pbXBsZW1lbnRhdGlvblwiKTtcbi8qKlxuICogT3ZlcnJpZGVzIHRoZSBmZXRjaCBpbXBsZW1lbnRhdGlvbiB1c2VkIGZvciBMYW5nU21pdGggY2FsbHMuXG4gKiBZb3Ugc2hvdWxkIHVzZSB0aGlzIGlmIHlvdSBuZWVkIHRvIHVzZSBhbiBpbXBsZW1lbnRhdGlvbiBvZiBmZXRjaFxuICogb3RoZXIgdGhhbiB0aGUgZGVmYXVsdCBnbG9iYWwgKGUuZy4gZm9yIGRlYWxpbmcgd2l0aCBwcm94aWVzKS5cbiAqIEBwYXJhbSBmZXRjaCBUaGUgbmV3IGZldGNoIGZ1bmN0aW9uIHRvIHVzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG92ZXJyaWRlRmV0Y2hJbXBsZW1lbnRhdGlvbiA9IChmZXRjaCkgPT4ge1xuICAgIGdsb2JhbFRoaXNbTEFOR1NNSVRIX0ZFVENIX0lNUExFTUVOVEFUSU9OX0tFWV0gPSBmZXRjaDtcbn07XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgX2dldEZldGNoSW1wbGVtZW50YXRpb24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIChnbG9iYWxUaGlzW0xBTkdTTUlUSF9GRVRDSF9JTVBMRU1FTlRBVElPTl9LRVldID8/XG4gICAgICAgIERFRkFVTFRfRkVUQ0hfSU1QTEVNRU5UQVRJT04pO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var _singletons_fetch_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../singletons/fetch.js */ \"(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.js\");\n\n\n\nconst STATUS_NO_RETRY = [\n    400, // Bad Request\n    401, // Unauthorized\n    402, // Payment required\n    403, // Forbidden\n    404, // Not Found\n    405, // Method Not Allowed\n    406, // Not Acceptable\n    407, // Proxy Authentication Required\n    408, // Request Timeout\n    409, // Conflict\n    422, // Unprocessable Entity\n];\n/**\n * Do not rely on globalThis.Response, rather just\n * do duck typing\n */\nfunction isResponse(x) {\n    if (x == null || typeof x !== \"object\")\n        return false;\n    return \"status\" in x && \"statusText\" in x && \"text\" in x;\n}\n/**\n * Utility error to properly handle failed requests\n */\nclass HTTPError extends Error {\n    constructor(status, message, response) {\n        super(`HTTP ${status}: ${message}`);\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.status = status;\n        this.text = message;\n        this.response = response;\n    }\n    static async fromResponse(response, options) {\n        try {\n            return new HTTPError(response.status, await response.text(), options?.includeResponse ? response : undefined);\n        }\n        catch {\n            return new HTTPError(response.status, response.statusText, options?.includeResponse ? response : undefined);\n        }\n    }\n}\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 5. This\n * means that by default, each call will be retried up to 5 times, with an\n * exponential backoff between each attempt.\n */\nclass AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedResponseHook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"customFetch\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 4;\n        if ( true) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                concurrency: this.maxConcurrency,\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new p_queue__WEBPACK_IMPORTED_MODULE_1__({ concurrency: this.maxConcurrency });\n        }\n        this.onFailedResponseHook = params?.onFailedResponseHook;\n        this.customFetch = params.fetch;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        const { onFailedResponseHook } = this;\n        return this.queue.add(() => p_retry__WEBPACK_IMPORTED_MODULE_0__(() => callable(...args).catch(async (error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else if (isResponse(error)) {\n                throw await HTTPError.fromResponse(error, {\n                    includeResponse: !!onFailedResponseHook,\n                });\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            async onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.message.startsWith(\"AbortError\")) {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (error instanceof HTTPError) {\n                    if (STATUS_NO_RETRY.includes(error.status)) {\n                        throw error;\n                    }\n                    if (onFailedResponseHook && error.response) {\n                        await onFailedResponseHook(error.response);\n                    }\n                }\n            },\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n            retries: this.maxRetries,\n            randomize: true,\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        const fetchFn = this.customFetch ?? (0,_singletons_fetch_js__WEBPACK_IMPORTED_MODULE_2__._getFetchImplementation)();\n        return this.call(() => fetchFn(...args).then((res) => (res.ok ? res : Promise.reject(res))));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/env.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/env.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable)\n/* harmony export */ });\nfunction getEnvironmentVariable(name) {\n    // Certain setups (Deno, frontend) will throw an error if you try to access environment variables\n    try {\n        return typeof process !== \"undefined\"\n            ? // eslint-disable-next-line no-process-env\n                process.env?.[name]\n            : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFnLXVpL2xhbmdncmFwaC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvdXRpbHMvZW52LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BhZy11aS9sYW5nZ3JhcGgvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbGFuZ2dyYXBoLXNkay9kaXN0L3V0aWxzL2Vudi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShuYW1lKSB7XG4gICAgLy8gQ2VydGFpbiBzZXR1cHMgKERlbm8sIGZyb250ZW5kKSB3aWxsIHRocm93IGFuIGVycm9yIGlmIHlvdSB0cnkgdG8gYWNjZXNzIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1lbnZcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudj8uW25hbWVdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/signals.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/signals.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeSignals: () => (/* binding */ mergeSignals)\n/* harmony export */ });\nfunction mergeSignals(...signals) {\n    const nonZeroSignals = signals.filter((signal) => signal != null);\n    if (nonZeroSignals.length === 0)\n        return undefined;\n    if (nonZeroSignals.length === 1)\n        return nonZeroSignals[0];\n    const controller = new AbortController();\n    for (const signal of signals) {\n        if (signal?.aborted) {\n            controller.abort(signal.reason);\n            return controller.signal;\n        }\n        signal?.addEventListener(\"abort\", () => controller.abort(signal.reason), {\n            once: true,\n        });\n    }\n    return controller.signal;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFnLXVpL2xhbmdncmFwaC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvdXRpbHMvc2lnbmFscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BhZy11aS9sYW5nZ3JhcGgvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbGFuZ2dyYXBoLXNkay9kaXN0L3V0aWxzL3NpZ25hbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU2lnbmFscyguLi5zaWduYWxzKSB7XG4gICAgY29uc3Qgbm9uWmVyb1NpZ25hbHMgPSBzaWduYWxzLmZpbHRlcigoc2lnbmFsKSA9PiBzaWduYWwgIT0gbnVsbCk7XG4gICAgaWYgKG5vblplcm9TaWduYWxzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAobm9uWmVyb1NpZ25hbHMubGVuZ3RoID09PSAxKVxuICAgICAgICByZXR1cm4gbm9uWmVyb1NpZ25hbHNbMF07XG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBmb3IgKGNvbnN0IHNpZ25hbCBvZiBzaWduYWxzKSB7XG4gICAgICAgIGlmIChzaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoc2lnbmFsLnJlYXNvbik7XG4gICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci5zaWduYWw7XG4gICAgICAgIH1cbiAgICAgICAgc2lnbmFsPy5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgKCkgPT4gY29udHJvbGxlci5hYm9ydChzaWduYWwucmVhc29uKSwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb250cm9sbGVyLnNpZ25hbDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/signals.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/sse.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/sse.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesLineDecoder: () => (/* binding */ BytesLineDecoder),\n/* harmony export */   SSEDecoder: () => (/* binding */ SSEDecoder)\n/* harmony export */ });\nconst CR = \"\\r\".charCodeAt(0);\nconst LF = \"\\n\".charCodeAt(0);\nconst NULL = \"\\0\".charCodeAt(0);\nconst COLON = \":\".charCodeAt(0);\nconst SPACE = \" \".charCodeAt(0);\nconst TRAILING_NEWLINE = [CR, LF];\nfunction BytesLineDecoder() {\n    let buffer = [];\n    let trailingCr = false;\n    return new TransformStream({\n        start() {\n            buffer = [];\n            trailingCr = false;\n        },\n        transform(chunk, controller) {\n            // See https://docs.python.org/3/glossary.html#term-universal-newlines\n            let text = chunk;\n            // Handle trailing CR from previous chunk\n            if (trailingCr) {\n                text = joinArrays([[CR], text]);\n                trailingCr = false;\n            }\n            // Check for trailing CR in current chunk\n            if (text.length > 0 && text.at(-1) === CR) {\n                trailingCr = true;\n                text = text.subarray(0, -1);\n            }\n            if (!text.length)\n                return;\n            const trailingNewline = TRAILING_NEWLINE.includes(text.at(-1));\n            const lastIdx = text.length - 1;\n            const { lines } = text.reduce((acc, cur, idx) => {\n                if (acc.from > idx)\n                    return acc;\n                if (cur === CR || cur === LF) {\n                    acc.lines.push(text.subarray(acc.from, idx));\n                    if (cur === CR && text[idx + 1] === LF) {\n                        acc.from = idx + 2;\n                    }\n                    else {\n                        acc.from = idx + 1;\n                    }\n                }\n                if (idx === lastIdx && acc.from <= lastIdx) {\n                    acc.lines.push(text.subarray(acc.from));\n                }\n                return acc;\n            }, { lines: [], from: 0 });\n            if (lines.length === 1 && !trailingNewline) {\n                buffer.push(lines[0]);\n                return;\n            }\n            if (buffer.length) {\n                // Include existing buffer in first line\n                buffer.push(lines[0]);\n                lines[0] = joinArrays(buffer);\n                buffer = [];\n            }\n            if (!trailingNewline) {\n                // If the last segment is not newline terminated,\n                // buffer it for the next chunk\n                if (lines.length)\n                    buffer = [lines.pop()];\n            }\n            // Enqueue complete lines\n            for (const line of lines) {\n                controller.enqueue(line);\n            }\n        },\n        flush(controller) {\n            if (buffer.length) {\n                controller.enqueue(joinArrays(buffer));\n            }\n        },\n    });\n}\nfunction SSEDecoder() {\n    let event = \"\";\n    let data = [];\n    let lastEventId = \"\";\n    let retry = null;\n    const decoder = new TextDecoder();\n    return new TransformStream({\n        transform(chunk, controller) {\n            // Handle empty line case\n            if (!chunk.length) {\n                if (!event && !data.length && !lastEventId && retry == null)\n                    return;\n                const sse = {\n                    id: lastEventId || undefined,\n                    event,\n                    data: data.length ? decodeArraysToJson(decoder, data) : null,\n                };\n                // NOTE: as per the SSE spec, do not reset lastEventId\n                event = \"\";\n                data = [];\n                retry = null;\n                controller.enqueue(sse);\n                return;\n            }\n            // Ignore comments\n            if (chunk[0] === COLON)\n                return;\n            const sepIdx = chunk.indexOf(COLON);\n            if (sepIdx === -1)\n                return;\n            const fieldName = decoder.decode(chunk.subarray(0, sepIdx));\n            let value = chunk.subarray(sepIdx + 1);\n            if (value[0] === SPACE)\n                value = value.subarray(1);\n            if (fieldName === \"event\") {\n                event = decoder.decode(value);\n            }\n            else if (fieldName === \"data\") {\n                data.push(value);\n            }\n            else if (fieldName === \"id\") {\n                if (value.indexOf(NULL) === -1)\n                    lastEventId = decoder.decode(value);\n            }\n            else if (fieldName === \"retry\") {\n                const retryNum = Number.parseInt(decoder.decode(value), 10);\n                if (!Number.isNaN(retryNum))\n                    retry = retryNum;\n            }\n        },\n        flush(controller) {\n            if (event) {\n                controller.enqueue({\n                    id: lastEventId || undefined,\n                    event,\n                    data: data.length ? decodeArraysToJson(decoder, data) : null,\n                });\n            }\n        },\n    });\n}\nfunction joinArrays(data) {\n    const totalLength = data.reduce((acc, curr) => acc + curr.length, 0);\n    const merged = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const c of data) {\n        merged.set(c, offset);\n        offset += c.length;\n    }\n    return merged;\n}\nfunction decodeArraysToJson(decoder, data) {\n    return JSON.parse(decoder.decode(joinArrays(data)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/sse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/stream.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/stream.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream)\n/* harmony export */ });\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nclass IterableReadableStream extends ReadableStream {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined,\n                };\n            }\n            else {\n                return {\n                    done: false,\n                    value: result.value,\n                };\n            }\n        }\n        catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return { done: true, value: undefined };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start(controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value }) => {\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel() {\n                reader.releaseLock();\n            },\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull(controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel(reason) {\n                await generator.return(reason);\n            },\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFnLXVpL2xhbmdncmFwaC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvdXRpbHMvc3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RCx1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQsdUNBQXVDO0FBQ3ZDLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsYUFBYTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BhZy11aS9sYW5nZ3JhcGgvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbGFuZ2dyYXBoLXNkay9kaXN0L3V0aWxzL3N0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU3VwcG9ydCBhc3luYyBpdGVyYXRvciBzeW50YXggZm9yIFJlYWRhYmxlU3RyZWFtcyBpbiBhbGwgZW52aXJvbm1lbnRzLlxuICogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vTWF0dGlhc0J1ZWxlbnMvd2ViLXN0cmVhbXMtcG9seWZpbGwvcHVsbC8xMjIjaXNzdWVjb21tZW50LTE2MjczNTQ0OTBcbiAqL1xuZXhwb3J0IGNsYXNzIEl0ZXJhYmxlUmVhZGFibGVTdHJlYW0gZXh0ZW5kcyBSZWFkYWJsZVN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlYWRlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbnN1cmVSZWFkZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5yZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZGVyID0gdGhpcy5nZXRSZWFkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBuZXh0KCkge1xuICAgICAgICB0aGlzLmVuc3VyZVJlYWRlcigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5yZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgY2xvc2VkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgZXJyb3JlZFxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZXR1cm4oKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlUmVhZGVyKCk7XG4gICAgICAgIC8vIElmIHdyYXBwZWQgaW4gYSBOb2RlIHN0cmVhbSwgY2FuY2VsIGlzIGFscmVhZHkgY2FsbGVkLlxuICAgICAgICBpZiAodGhpcy5sb2NrZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSB0aGlzLnJlYWRlci5jYW5jZWwoKTsgLy8gY2FuY2VsIGZpcnN0LCBidXQgZG9uJ3QgYXdhaXQgeWV0XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgZmlyc3RcbiAgICAgICAgICAgIGF3YWl0IGNhbmNlbFByb21pc2U7IC8vIG5vdyBhd2FpdCBpdFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhc3luYyB0aHJvdyhlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlUmVhZGVyKCk7XG4gICAgICAgIGlmICh0aGlzLmxvY2tlZCkge1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IHRoaXMucmVhZGVyLmNhbmNlbCgpOyAvLyBjYW5jZWwgZmlyc3QsIGJ1dCBkb24ndCBhd2FpdCB5ZXRcbiAgICAgICAgICAgIHRoaXMucmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayBmaXJzdFxuICAgICAgICAgICAgYXdhaXQgY2FuY2VsUHJvbWlzZTsgLy8gbm93IGF3YWl0IGl0XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmUgTm90IHByZXNlbnQgaW4gTm9kZSAxOCB0eXBlcywgcmVxdWlyZWQgaW4gbGF0ZXN0IE5vZGUgMjJcbiAgICBhc3luYyBbU3ltYm9sLmFzeW5jRGlzcG9zZV0oKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmV0dXJuKCk7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgICAvLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TdHJlYW1zX0FQSS9Vc2luZ19yZWFkYWJsZV9zdHJlYW1zI3JlYWRpbmdfdGhlX3N0cmVhbVxuICAgICAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmFibGVSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHB1bXAoKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwdW1wKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWQoKS50aGVuKCh7IGRvbmUsIHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gbm8gbW9yZSBkYXRhIG5lZWRzIHRvIGJlIGNvbnN1bWVkLCBjbG9zZSB0aGUgc3RyZWFtXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnF1ZXVlIHRoZSBuZXh0IGRhdGEgY2h1bmsgaW50byBvdXIgdGFyZ2V0IHN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwdW1wKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWwoKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Bc3luY0dlbmVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYWJsZVJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IGdlbmVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBubyBtb3JlIGRhdGEgbmVlZHMgdG8gYmUgY29uc3VtZWQsIGNsb3NlIHRoZSBzdHJlYW1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEZpeDogYGVsc2UgaWYgKHZhbHVlKWAgd2lsbCBoYW5nIHRoZSBzdHJlYW1pbmcgd2hlbiBudWxsaXNoIHZhbHVlIChlLmcuIGVtcHR5IHN0cmluZykgaXMgcHVsbGVkXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZ2VuZXJhdG9yLnJldHVybihyZWFzb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/utils/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Client: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Client),
/* harmony export */   getApiKey: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.getApiKey),
/* harmony export */   overrideFetchImplementation: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.overrideFetchImplementation)
/* harmony export */ });
/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ "(rsc)/./node_modules/@ag-ui/langgraph/node_modules/@langchain/langgraph-sdk/dist/index.js");


/***/ }),

/***/ "(rsc)/./node_modules/@ag-ui/proto/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/@ag-ui/proto/dist/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AGUI_MEDIA_TYPE: () => (/* binding */ AGUI_MEDIA_TYPE),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ag-ui/core */ \"(rsc)/./node_modules/@ag-ui/core/dist/index.mjs\");\n/* harmony import */ var _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bufbuild/protobuf/wire */ \"(rsc)/./node_modules/@bufbuild/protobuf/dist/esm/wire/binary-encoding.js\");\n// src/proto.ts\n\n\n// src/generated/events.ts\n\n\n// src/generated/google/protobuf/struct.ts\n\nfunction createBaseStruct() {\n  return { fields: {} };\n}\nvar Struct = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    Object.entries(message.fields).forEach(([key, value]) => {\n      if (value !== void 0) {\n        Struct_FieldsEntry.encode({ key, value }, writer.uint32(10).fork()).join();\n      }\n    });\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseStruct();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          const entry1 = Struct_FieldsEntry.decode(reader, reader.uint32());\n          if (entry1.value !== void 0) {\n            message.fields[entry1.key] = entry1.value;\n          }\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return Struct.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseStruct();\n    message.fields = Object.entries((_a = object.fields) != null ? _a : {}).reduce(\n      (acc, [key, value]) => {\n        if (value !== void 0) {\n          acc[key] = value;\n        }\n        return acc;\n      },\n      {}\n    );\n    return message;\n  },\n  wrap(object) {\n    const struct = createBaseStruct();\n    if (object !== void 0) {\n      for (const key of Object.keys(object)) {\n        struct.fields[key] = object[key];\n      }\n    }\n    return struct;\n  },\n  unwrap(message) {\n    const object = {};\n    if (message.fields) {\n      for (const key of Object.keys(message.fields)) {\n        object[key] = message.fields[key];\n      }\n    }\n    return object;\n  }\n};\nfunction createBaseStruct_FieldsEntry() {\n  return { key: \"\", value: void 0 };\n}\nvar Struct_FieldsEntry = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n    if (message.value !== void 0) {\n      Value.encode(Value.wrap(message.value), writer.uint32(18).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseStruct_FieldsEntry();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.key = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return Struct_FieldsEntry.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseStruct_FieldsEntry();\n    message.key = (_a = object.key) != null ? _a : \"\";\n    message.value = (_b = object.value) != null ? _b : void 0;\n    return message;\n  }\n};\nfunction createBaseValue() {\n  return {\n    nullValue: void 0,\n    numberValue: void 0,\n    stringValue: void 0,\n    boolValue: void 0,\n    structValue: void 0,\n    listValue: void 0\n  };\n}\nvar Value = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.nullValue !== void 0) {\n      writer.uint32(8).int32(message.nullValue);\n    }\n    if (message.numberValue !== void 0) {\n      writer.uint32(17).double(message.numberValue);\n    }\n    if (message.stringValue !== void 0) {\n      writer.uint32(26).string(message.stringValue);\n    }\n    if (message.boolValue !== void 0) {\n      writer.uint32(32).bool(message.boolValue);\n    }\n    if (message.structValue !== void 0) {\n      Struct.encode(Struct.wrap(message.structValue), writer.uint32(42).fork()).join();\n    }\n    if (message.listValue !== void 0) {\n      ListValue.encode(ListValue.wrap(message.listValue), writer.uint32(50).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseValue();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 8) {\n            break;\n          }\n          message.nullValue = reader.int32();\n          continue;\n        }\n        case 2: {\n          if (tag !== 17) {\n            break;\n          }\n          message.numberValue = reader.double();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.stringValue = reader.string();\n          continue;\n        }\n        case 4: {\n          if (tag !== 32) {\n            break;\n          }\n          message.boolValue = reader.bool();\n          continue;\n        }\n        case 5: {\n          if (tag !== 42) {\n            break;\n          }\n          message.structValue = Struct.unwrap(Struct.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 6: {\n          if (tag !== 50) {\n            break;\n          }\n          message.listValue = ListValue.unwrap(ListValue.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return Value.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c, _d, _e, _f;\n    const message = createBaseValue();\n    message.nullValue = (_a = object.nullValue) != null ? _a : void 0;\n    message.numberValue = (_b = object.numberValue) != null ? _b : void 0;\n    message.stringValue = (_c = object.stringValue) != null ? _c : void 0;\n    message.boolValue = (_d = object.boolValue) != null ? _d : void 0;\n    message.structValue = (_e = object.structValue) != null ? _e : void 0;\n    message.listValue = (_f = object.listValue) != null ? _f : void 0;\n    return message;\n  },\n  wrap(value) {\n    const result = createBaseValue();\n    if (value === null) {\n      result.nullValue = 0 /* NULL_VALUE */;\n    } else if (typeof value === \"boolean\") {\n      result.boolValue = value;\n    } else if (typeof value === \"number\") {\n      result.numberValue = value;\n    } else if (typeof value === \"string\") {\n      result.stringValue = value;\n    } else if (globalThis.Array.isArray(value)) {\n      result.listValue = value;\n    } else if (typeof value === \"object\") {\n      result.structValue = value;\n    } else if (typeof value !== \"undefined\") {\n      throw new globalThis.Error(\"Unsupported any value type: \" + typeof value);\n    }\n    return result;\n  },\n  unwrap(message) {\n    if (message.stringValue !== void 0) {\n      return message.stringValue;\n    } else if ((message == null ? void 0 : message.numberValue) !== void 0) {\n      return message.numberValue;\n    } else if ((message == null ? void 0 : message.boolValue) !== void 0) {\n      return message.boolValue;\n    } else if ((message == null ? void 0 : message.structValue) !== void 0) {\n      return message.structValue;\n    } else if ((message == null ? void 0 : message.listValue) !== void 0) {\n      return message.listValue;\n    } else if ((message == null ? void 0 : message.nullValue) !== void 0) {\n      return null;\n    }\n    return void 0;\n  }\n};\nfunction createBaseListValue() {\n  return { values: [] };\n}\nvar ListValue = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    for (const v of message.values) {\n      Value.encode(Value.wrap(v), writer.uint32(10).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseListValue();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.values.push(Value.unwrap(Value.decode(reader, reader.uint32())));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return ListValue.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseListValue();\n    message.values = ((_a = object.values) == null ? void 0 : _a.map((e) => e)) || [];\n    return message;\n  },\n  wrap(array) {\n    const result = createBaseListValue();\n    result.values = array != null ? array : [];\n    return result;\n  },\n  unwrap(message) {\n    if ((message == null ? void 0 : message.hasOwnProperty(\"values\")) && globalThis.Array.isArray(message.values)) {\n      return message.values;\n    } else {\n      return message;\n    }\n  }\n};\n\n// src/generated/patch.ts\n\nvar JsonPatchOperationType = /* @__PURE__ */ ((JsonPatchOperationType2) => {\n  JsonPatchOperationType2[JsonPatchOperationType2[\"ADD\"] = 0] = \"ADD\";\n  JsonPatchOperationType2[JsonPatchOperationType2[\"REMOVE\"] = 1] = \"REMOVE\";\n  JsonPatchOperationType2[JsonPatchOperationType2[\"REPLACE\"] = 2] = \"REPLACE\";\n  JsonPatchOperationType2[JsonPatchOperationType2[\"MOVE\"] = 3] = \"MOVE\";\n  JsonPatchOperationType2[JsonPatchOperationType2[\"COPY\"] = 4] = \"COPY\";\n  JsonPatchOperationType2[JsonPatchOperationType2[\"TEST\"] = 5] = \"TEST\";\n  JsonPatchOperationType2[JsonPatchOperationType2[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n  return JsonPatchOperationType2;\n})(JsonPatchOperationType || {});\nfunction createBaseJsonPatchOperation() {\n  return { op: 0, path: \"\", from: void 0, value: void 0 };\n}\nvar JsonPatchOperation = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.op !== 0) {\n      writer.uint32(8).int32(message.op);\n    }\n    if (message.path !== \"\") {\n      writer.uint32(18).string(message.path);\n    }\n    if (message.from !== void 0) {\n      writer.uint32(26).string(message.from);\n    }\n    if (message.value !== void 0) {\n      Value.encode(Value.wrap(message.value), writer.uint32(34).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseJsonPatchOperation();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 8) {\n            break;\n          }\n          message.op = reader.int32();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.path = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.from = reader.string();\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return JsonPatchOperation.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c, _d;\n    const message = createBaseJsonPatchOperation();\n    message.op = (_a = object.op) != null ? _a : 0;\n    message.path = (_b = object.path) != null ? _b : \"\";\n    message.from = (_c = object.from) != null ? _c : void 0;\n    message.value = (_d = object.value) != null ? _d : void 0;\n    return message;\n  }\n};\n\n// src/generated/types.ts\n\nfunction createBaseToolCall() {\n  return { id: \"\", type: \"\", function: void 0 };\n}\nvar ToolCall = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n    if (message.type !== \"\") {\n      writer.uint32(18).string(message.type);\n    }\n    if (message.function !== void 0) {\n      ToolCall_Function.encode(message.function, writer.uint32(26).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseToolCall();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.id = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.type = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.function = ToolCall_Function.decode(reader, reader.uint32());\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return ToolCall.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseToolCall();\n    message.id = (_a = object.id) != null ? _a : \"\";\n    message.type = (_b = object.type) != null ? _b : \"\";\n    message.function = object.function !== void 0 && object.function !== null ? ToolCall_Function.fromPartial(object.function) : void 0;\n    return message;\n  }\n};\nfunction createBaseToolCall_Function() {\n  return { name: \"\", arguments: \"\" };\n}\nvar ToolCall_Function = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.name !== \"\") {\n      writer.uint32(10).string(message.name);\n    }\n    if (message.arguments !== \"\") {\n      writer.uint32(18).string(message.arguments);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseToolCall_Function();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.name = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.arguments = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return ToolCall_Function.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseToolCall_Function();\n    message.name = (_a = object.name) != null ? _a : \"\";\n    message.arguments = (_b = object.arguments) != null ? _b : \"\";\n    return message;\n  }\n};\nfunction createBaseMessage() {\n  return {\n    id: \"\",\n    role: \"\",\n    content: void 0,\n    name: void 0,\n    toolCalls: [],\n    toolCallId: void 0,\n    error: void 0\n  };\n}\nvar Message = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n    if (message.role !== \"\") {\n      writer.uint32(18).string(message.role);\n    }\n    if (message.content !== void 0) {\n      writer.uint32(26).string(message.content);\n    }\n    if (message.name !== void 0) {\n      writer.uint32(34).string(message.name);\n    }\n    for (const v of message.toolCalls) {\n      ToolCall.encode(v, writer.uint32(42).fork()).join();\n    }\n    if (message.toolCallId !== void 0) {\n      writer.uint32(50).string(message.toolCallId);\n    }\n    if (message.error !== void 0) {\n      writer.uint32(58).string(message.error);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseMessage();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.id = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.role = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.content = reader.string();\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n          message.name = reader.string();\n          continue;\n        }\n        case 5: {\n          if (tag !== 42) {\n            break;\n          }\n          message.toolCalls.push(ToolCall.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 6: {\n          if (tag !== 50) {\n            break;\n          }\n          message.toolCallId = reader.string();\n          continue;\n        }\n        case 7: {\n          if (tag !== 58) {\n            break;\n          }\n          message.error = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return Message.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const message = createBaseMessage();\n    message.id = (_a = object.id) != null ? _a : \"\";\n    message.role = (_b = object.role) != null ? _b : \"\";\n    message.content = (_c = object.content) != null ? _c : void 0;\n    message.name = (_d = object.name) != null ? _d : void 0;\n    message.toolCalls = ((_e = object.toolCalls) == null ? void 0 : _e.map((e) => ToolCall.fromPartial(e))) || [];\n    message.toolCallId = (_f = object.toolCallId) != null ? _f : void 0;\n    message.error = (_g = object.error) != null ? _g : void 0;\n    return message;\n  }\n};\n\n// src/generated/events.ts\nvar EventType = /* @__PURE__ */ ((EventType3) => {\n  EventType3[EventType3[\"TEXT_MESSAGE_START\"] = 0] = \"TEXT_MESSAGE_START\";\n  EventType3[EventType3[\"TEXT_MESSAGE_CONTENT\"] = 1] = \"TEXT_MESSAGE_CONTENT\";\n  EventType3[EventType3[\"TEXT_MESSAGE_END\"] = 2] = \"TEXT_MESSAGE_END\";\n  EventType3[EventType3[\"TOOL_CALL_START\"] = 3] = \"TOOL_CALL_START\";\n  EventType3[EventType3[\"TOOL_CALL_ARGS\"] = 4] = \"TOOL_CALL_ARGS\";\n  EventType3[EventType3[\"TOOL_CALL_END\"] = 5] = \"TOOL_CALL_END\";\n  EventType3[EventType3[\"STATE_SNAPSHOT\"] = 6] = \"STATE_SNAPSHOT\";\n  EventType3[EventType3[\"STATE_DELTA\"] = 7] = \"STATE_DELTA\";\n  EventType3[EventType3[\"MESSAGES_SNAPSHOT\"] = 8] = \"MESSAGES_SNAPSHOT\";\n  EventType3[EventType3[\"RAW\"] = 9] = \"RAW\";\n  EventType3[EventType3[\"CUSTOM\"] = 10] = \"CUSTOM\";\n  EventType3[EventType3[\"RUN_STARTED\"] = 11] = \"RUN_STARTED\";\n  EventType3[EventType3[\"RUN_FINISHED\"] = 12] = \"RUN_FINISHED\";\n  EventType3[EventType3[\"RUN_ERROR\"] = 13] = \"RUN_ERROR\";\n  EventType3[EventType3[\"STEP_STARTED\"] = 14] = \"STEP_STARTED\";\n  EventType3[EventType3[\"STEP_FINISHED\"] = 15] = \"STEP_FINISHED\";\n  EventType3[EventType3[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n  return EventType3;\n})(EventType || {});\nfunction createBaseBaseEvent() {\n  return { type: 0, timestamp: void 0, rawEvent: void 0 };\n}\nvar BaseEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.type !== 0) {\n      writer.uint32(8).int32(message.type);\n    }\n    if (message.timestamp !== void 0) {\n      writer.uint32(16).int64(message.timestamp);\n    }\n    if (message.rawEvent !== void 0) {\n      Value.encode(Value.wrap(message.rawEvent), writer.uint32(26).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseBaseEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 8) {\n            break;\n          }\n          message.type = reader.int32();\n          continue;\n        }\n        case 2: {\n          if (tag !== 16) {\n            break;\n          }\n          message.timestamp = longToNumber(reader.int64());\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.rawEvent = Value.unwrap(Value.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return BaseEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = createBaseBaseEvent();\n    message.type = (_a = object.type) != null ? _a : 0;\n    message.timestamp = (_b = object.timestamp) != null ? _b : void 0;\n    message.rawEvent = (_c = object.rawEvent) != null ? _c : void 0;\n    return message;\n  }\n};\nfunction createBaseTextMessageStartEvent() {\n  return { baseEvent: void 0, messageId: \"\", role: void 0 };\n}\nvar TextMessageStartEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.messageId !== \"\") {\n      writer.uint32(18).string(message.messageId);\n    }\n    if (message.role !== void 0) {\n      writer.uint32(26).string(message.role);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseTextMessageStartEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.messageId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.role = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return TextMessageStartEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseTextMessageStartEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.messageId = (_a = object.messageId) != null ? _a : \"\";\n    message.role = (_b = object.role) != null ? _b : void 0;\n    return message;\n  }\n};\nfunction createBaseTextMessageContentEvent() {\n  return { baseEvent: void 0, messageId: \"\", delta: \"\" };\n}\nvar TextMessageContentEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.messageId !== \"\") {\n      writer.uint32(18).string(message.messageId);\n    }\n    if (message.delta !== \"\") {\n      writer.uint32(26).string(message.delta);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseTextMessageContentEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.messageId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.delta = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return TextMessageContentEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseTextMessageContentEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.messageId = (_a = object.messageId) != null ? _a : \"\";\n    message.delta = (_b = object.delta) != null ? _b : \"\";\n    return message;\n  }\n};\nfunction createBaseTextMessageEndEvent() {\n  return { baseEvent: void 0, messageId: \"\" };\n}\nvar TextMessageEndEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.messageId !== \"\") {\n      writer.uint32(18).string(message.messageId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseTextMessageEndEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.messageId = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return TextMessageEndEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseTextMessageEndEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.messageId = (_a = object.messageId) != null ? _a : \"\";\n    return message;\n  }\n};\nfunction createBaseToolCallStartEvent() {\n  return { baseEvent: void 0, toolCallId: \"\", toolCallName: \"\", parentMessageId: void 0 };\n}\nvar ToolCallStartEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.toolCallId !== \"\") {\n      writer.uint32(18).string(message.toolCallId);\n    }\n    if (message.toolCallName !== \"\") {\n      writer.uint32(26).string(message.toolCallName);\n    }\n    if (message.parentMessageId !== void 0) {\n      writer.uint32(34).string(message.parentMessageId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseToolCallStartEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.toolCallId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.toolCallName = reader.string();\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n          message.parentMessageId = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return ToolCallStartEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = createBaseToolCallStartEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.toolCallId = (_a = object.toolCallId) != null ? _a : \"\";\n    message.toolCallName = (_b = object.toolCallName) != null ? _b : \"\";\n    message.parentMessageId = (_c = object.parentMessageId) != null ? _c : void 0;\n    return message;\n  }\n};\nfunction createBaseToolCallArgsEvent() {\n  return { baseEvent: void 0, toolCallId: \"\", delta: \"\" };\n}\nvar ToolCallArgsEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.toolCallId !== \"\") {\n      writer.uint32(18).string(message.toolCallId);\n    }\n    if (message.delta !== \"\") {\n      writer.uint32(26).string(message.delta);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseToolCallArgsEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.toolCallId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.delta = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return ToolCallArgsEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseToolCallArgsEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.toolCallId = (_a = object.toolCallId) != null ? _a : \"\";\n    message.delta = (_b = object.delta) != null ? _b : \"\";\n    return message;\n  }\n};\nfunction createBaseToolCallEndEvent() {\n  return { baseEvent: void 0, toolCallId: \"\" };\n}\nvar ToolCallEndEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.toolCallId !== \"\") {\n      writer.uint32(18).string(message.toolCallId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseToolCallEndEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.toolCallId = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return ToolCallEndEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseToolCallEndEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.toolCallId = (_a = object.toolCallId) != null ? _a : \"\";\n    return message;\n  }\n};\nfunction createBaseStateSnapshotEvent() {\n  return { baseEvent: void 0, snapshot: void 0 };\n}\nvar StateSnapshotEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.snapshot !== void 0) {\n      Value.encode(Value.wrap(message.snapshot), writer.uint32(18).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseStateSnapshotEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.snapshot = Value.unwrap(Value.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return StateSnapshotEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseStateSnapshotEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.snapshot = (_a = object.snapshot) != null ? _a : void 0;\n    return message;\n  }\n};\nfunction createBaseStateDeltaEvent() {\n  return { baseEvent: void 0, delta: [] };\n}\nvar StateDeltaEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    for (const v of message.delta) {\n      JsonPatchOperation.encode(v, writer.uint32(18).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseStateDeltaEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.delta.push(JsonPatchOperation.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return StateDeltaEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseStateDeltaEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.delta = ((_a = object.delta) == null ? void 0 : _a.map((e) => JsonPatchOperation.fromPartial(e))) || [];\n    return message;\n  }\n};\nfunction createBaseMessagesSnapshotEvent() {\n  return { baseEvent: void 0, messages: [] };\n}\nvar MessagesSnapshotEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    for (const v of message.messages) {\n      Message.encode(v, writer.uint32(18).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseMessagesSnapshotEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.messages.push(Message.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return MessagesSnapshotEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseMessagesSnapshotEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.messages = ((_a = object.messages) == null ? void 0 : _a.map((e) => Message.fromPartial(e))) || [];\n    return message;\n  }\n};\nfunction createBaseRawEvent() {\n  return { baseEvent: void 0, event: void 0, source: void 0 };\n}\nvar RawEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.event !== void 0) {\n      Value.encode(Value.wrap(message.event), writer.uint32(18).fork()).join();\n    }\n    if (message.source !== void 0) {\n      writer.uint32(26).string(message.source);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseRawEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.event = Value.unwrap(Value.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.source = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return RawEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseRawEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.event = (_a = object.event) != null ? _a : void 0;\n    message.source = (_b = object.source) != null ? _b : void 0;\n    return message;\n  }\n};\nfunction createBaseCustomEvent() {\n  return { baseEvent: void 0, name: \"\", value: void 0 };\n}\nvar CustomEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.name !== \"\") {\n      writer.uint32(18).string(message.name);\n    }\n    if (message.value !== void 0) {\n      Value.encode(Value.wrap(message.value), writer.uint32(26).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseCustomEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.name = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.value = Value.unwrap(Value.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return CustomEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseCustomEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.name = (_a = object.name) != null ? _a : \"\";\n    message.value = (_b = object.value) != null ? _b : void 0;\n    return message;\n  }\n};\nfunction createBaseRunStartedEvent() {\n  return { baseEvent: void 0, threadId: \"\", runId: \"\" };\n}\nvar RunStartedEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.threadId !== \"\") {\n      writer.uint32(18).string(message.threadId);\n    }\n    if (message.runId !== \"\") {\n      writer.uint32(26).string(message.runId);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseRunStartedEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.threadId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.runId = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return RunStartedEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseRunStartedEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.threadId = (_a = object.threadId) != null ? _a : \"\";\n    message.runId = (_b = object.runId) != null ? _b : \"\";\n    return message;\n  }\n};\nfunction createBaseRunFinishedEvent() {\n  return { baseEvent: void 0, threadId: \"\", runId: \"\", result: void 0 };\n}\nvar RunFinishedEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.threadId !== \"\") {\n      writer.uint32(18).string(message.threadId);\n    }\n    if (message.runId !== \"\") {\n      writer.uint32(26).string(message.runId);\n    }\n    if (message.result !== void 0) {\n      Value.encode(Value.wrap(message.result), writer.uint32(34).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseRunFinishedEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.threadId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.runId = reader.string();\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n          message.result = Value.unwrap(Value.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return RunFinishedEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = createBaseRunFinishedEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.threadId = (_a = object.threadId) != null ? _a : \"\";\n    message.runId = (_b = object.runId) != null ? _b : \"\";\n    message.result = (_c = object.result) != null ? _c : void 0;\n    return message;\n  }\n};\nfunction createBaseRunErrorEvent() {\n  return { baseEvent: void 0, code: void 0, message: \"\" };\n}\nvar RunErrorEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.code !== void 0) {\n      writer.uint32(18).string(message.code);\n    }\n    if (message.message !== \"\") {\n      writer.uint32(26).string(message.message);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseRunErrorEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.code = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.message = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return RunErrorEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = createBaseRunErrorEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.code = (_a = object.code) != null ? _a : void 0;\n    message.message = (_b = object.message) != null ? _b : \"\";\n    return message;\n  }\n};\nfunction createBaseStepStartedEvent() {\n  return { baseEvent: void 0, stepName: \"\" };\n}\nvar StepStartedEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.stepName !== \"\") {\n      writer.uint32(18).string(message.stepName);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseStepStartedEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.stepName = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return StepStartedEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseStepStartedEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.stepName = (_a = object.stepName) != null ? _a : \"\";\n    return message;\n  }\n};\nfunction createBaseStepFinishedEvent() {\n  return { baseEvent: void 0, stepName: \"\" };\n}\nvar StepFinishedEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.stepName !== \"\") {\n      writer.uint32(18).string(message.stepName);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseStepFinishedEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.stepName = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return StepFinishedEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a;\n    const message = createBaseStepFinishedEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.stepName = (_a = object.stepName) != null ? _a : \"\";\n    return message;\n  }\n};\nfunction createBaseTextMessageChunkEvent() {\n  return { baseEvent: void 0, messageId: void 0, role: void 0, delta: void 0 };\n}\nvar TextMessageChunkEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.messageId !== void 0) {\n      writer.uint32(18).string(message.messageId);\n    }\n    if (message.role !== void 0) {\n      writer.uint32(26).string(message.role);\n    }\n    if (message.delta !== void 0) {\n      writer.uint32(34).string(message.delta);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseTextMessageChunkEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.messageId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.role = reader.string();\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n          message.delta = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return TextMessageChunkEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = createBaseTextMessageChunkEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.messageId = (_a = object.messageId) != null ? _a : void 0;\n    message.role = (_b = object.role) != null ? _b : void 0;\n    message.delta = (_c = object.delta) != null ? _c : void 0;\n    return message;\n  }\n};\nfunction createBaseToolCallChunkEvent() {\n  return {\n    baseEvent: void 0,\n    toolCallId: void 0,\n    toolCallName: void 0,\n    parentMessageId: void 0,\n    delta: void 0\n  };\n}\nvar ToolCallChunkEvent = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.baseEvent !== void 0) {\n      BaseEvent.encode(message.baseEvent, writer.uint32(10).fork()).join();\n    }\n    if (message.toolCallId !== void 0) {\n      writer.uint32(18).string(message.toolCallId);\n    }\n    if (message.toolCallName !== void 0) {\n      writer.uint32(26).string(message.toolCallName);\n    }\n    if (message.parentMessageId !== void 0) {\n      writer.uint32(34).string(message.parentMessageId);\n    }\n    if (message.delta !== void 0) {\n      writer.uint32(42).string(message.delta);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseToolCallChunkEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.baseEvent = BaseEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.toolCallId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.toolCallName = reader.string();\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n          message.parentMessageId = reader.string();\n          continue;\n        }\n        case 5: {\n          if (tag !== 42) {\n            break;\n          }\n          message.delta = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return ToolCallChunkEvent.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    var _a, _b, _c, _d;\n    const message = createBaseToolCallChunkEvent();\n    message.baseEvent = object.baseEvent !== void 0 && object.baseEvent !== null ? BaseEvent.fromPartial(object.baseEvent) : void 0;\n    message.toolCallId = (_a = object.toolCallId) != null ? _a : void 0;\n    message.toolCallName = (_b = object.toolCallName) != null ? _b : void 0;\n    message.parentMessageId = (_c = object.parentMessageId) != null ? _c : void 0;\n    message.delta = (_d = object.delta) != null ? _d : void 0;\n    return message;\n  }\n};\nfunction createBaseEvent() {\n  return {\n    textMessageStart: void 0,\n    textMessageContent: void 0,\n    textMessageEnd: void 0,\n    toolCallStart: void 0,\n    toolCallArgs: void 0,\n    toolCallEnd: void 0,\n    stateSnapshot: void 0,\n    stateDelta: void 0,\n    messagesSnapshot: void 0,\n    raw: void 0,\n    custom: void 0,\n    runStarted: void 0,\n    runFinished: void 0,\n    runError: void 0,\n    stepStarted: void 0,\n    stepFinished: void 0,\n    textMessageChunk: void 0,\n    toolCallChunk: void 0\n  };\n}\nvar Event = {\n  encode(message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryWriter()) {\n    if (message.textMessageStart !== void 0) {\n      TextMessageStartEvent.encode(message.textMessageStart, writer.uint32(10).fork()).join();\n    }\n    if (message.textMessageContent !== void 0) {\n      TextMessageContentEvent.encode(message.textMessageContent, writer.uint32(18).fork()).join();\n    }\n    if (message.textMessageEnd !== void 0) {\n      TextMessageEndEvent.encode(message.textMessageEnd, writer.uint32(26).fork()).join();\n    }\n    if (message.toolCallStart !== void 0) {\n      ToolCallStartEvent.encode(message.toolCallStart, writer.uint32(34).fork()).join();\n    }\n    if (message.toolCallArgs !== void 0) {\n      ToolCallArgsEvent.encode(message.toolCallArgs, writer.uint32(42).fork()).join();\n    }\n    if (message.toolCallEnd !== void 0) {\n      ToolCallEndEvent.encode(message.toolCallEnd, writer.uint32(50).fork()).join();\n    }\n    if (message.stateSnapshot !== void 0) {\n      StateSnapshotEvent.encode(message.stateSnapshot, writer.uint32(58).fork()).join();\n    }\n    if (message.stateDelta !== void 0) {\n      StateDeltaEvent.encode(message.stateDelta, writer.uint32(66).fork()).join();\n    }\n    if (message.messagesSnapshot !== void 0) {\n      MessagesSnapshotEvent.encode(message.messagesSnapshot, writer.uint32(74).fork()).join();\n    }\n    if (message.raw !== void 0) {\n      RawEvent.encode(message.raw, writer.uint32(82).fork()).join();\n    }\n    if (message.custom !== void 0) {\n      CustomEvent.encode(message.custom, writer.uint32(90).fork()).join();\n    }\n    if (message.runStarted !== void 0) {\n      RunStartedEvent.encode(message.runStarted, writer.uint32(98).fork()).join();\n    }\n    if (message.runFinished !== void 0) {\n      RunFinishedEvent.encode(message.runFinished, writer.uint32(106).fork()).join();\n    }\n    if (message.runError !== void 0) {\n      RunErrorEvent.encode(message.runError, writer.uint32(114).fork()).join();\n    }\n    if (message.stepStarted !== void 0) {\n      StepStartedEvent.encode(message.stepStarted, writer.uint32(122).fork()).join();\n    }\n    if (message.stepFinished !== void 0) {\n      StepFinishedEvent.encode(message.stepFinished, writer.uint32(130).fork()).join();\n    }\n    if (message.textMessageChunk !== void 0) {\n      TextMessageChunkEvent.encode(message.textMessageChunk, writer.uint32(138).fork()).join();\n    }\n    if (message.toolCallChunk !== void 0) {\n      ToolCallChunkEvent.encode(message.toolCallChunk, writer.uint32(146).fork()).join();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_1__.BinaryReader(input);\n    let end = length === void 0 ? reader.len : reader.pos + length;\n    const message = createBaseEvent();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n          message.textMessageStart = TextMessageStartEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n          message.textMessageContent = TextMessageContentEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n          message.textMessageEnd = TextMessageEndEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n          message.toolCallStart = ToolCallStartEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 5: {\n          if (tag !== 42) {\n            break;\n          }\n          message.toolCallArgs = ToolCallArgsEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 6: {\n          if (tag !== 50) {\n            break;\n          }\n          message.toolCallEnd = ToolCallEndEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 7: {\n          if (tag !== 58) {\n            break;\n          }\n          message.stateSnapshot = StateSnapshotEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 8: {\n          if (tag !== 66) {\n            break;\n          }\n          message.stateDelta = StateDeltaEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 9: {\n          if (tag !== 74) {\n            break;\n          }\n          message.messagesSnapshot = MessagesSnapshotEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 10: {\n          if (tag !== 82) {\n            break;\n          }\n          message.raw = RawEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 11: {\n          if (tag !== 90) {\n            break;\n          }\n          message.custom = CustomEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 12: {\n          if (tag !== 98) {\n            break;\n          }\n          message.runStarted = RunStartedEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 13: {\n          if (tag !== 106) {\n            break;\n          }\n          message.runFinished = RunFinishedEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 14: {\n          if (tag !== 114) {\n            break;\n          }\n          message.runError = RunErrorEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 15: {\n          if (tag !== 122) {\n            break;\n          }\n          message.stepStarted = StepStartedEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 16: {\n          if (tag !== 130) {\n            break;\n          }\n          message.stepFinished = StepFinishedEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 17: {\n          if (tag !== 138) {\n            break;\n          }\n          message.textMessageChunk = TextMessageChunkEvent.decode(reader, reader.uint32());\n          continue;\n        }\n        case 18: {\n          if (tag !== 146) {\n            break;\n          }\n          message.toolCallChunk = ToolCallChunkEvent.decode(reader, reader.uint32());\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n  create(base) {\n    return Event.fromPartial(base != null ? base : {});\n  },\n  fromPartial(object) {\n    const message = createBaseEvent();\n    message.textMessageStart = object.textMessageStart !== void 0 && object.textMessageStart !== null ? TextMessageStartEvent.fromPartial(object.textMessageStart) : void 0;\n    message.textMessageContent = object.textMessageContent !== void 0 && object.textMessageContent !== null ? TextMessageContentEvent.fromPartial(object.textMessageContent) : void 0;\n    message.textMessageEnd = object.textMessageEnd !== void 0 && object.textMessageEnd !== null ? TextMessageEndEvent.fromPartial(object.textMessageEnd) : void 0;\n    message.toolCallStart = object.toolCallStart !== void 0 && object.toolCallStart !== null ? ToolCallStartEvent.fromPartial(object.toolCallStart) : void 0;\n    message.toolCallArgs = object.toolCallArgs !== void 0 && object.toolCallArgs !== null ? ToolCallArgsEvent.fromPartial(object.toolCallArgs) : void 0;\n    message.toolCallEnd = object.toolCallEnd !== void 0 && object.toolCallEnd !== null ? ToolCallEndEvent.fromPartial(object.toolCallEnd) : void 0;\n    message.stateSnapshot = object.stateSnapshot !== void 0 && object.stateSnapshot !== null ? StateSnapshotEvent.fromPartial(object.stateSnapshot) : void 0;\n    message.stateDelta = object.stateDelta !== void 0 && object.stateDelta !== null ? StateDeltaEvent.fromPartial(object.stateDelta) : void 0;\n    message.messagesSnapshot = object.messagesSnapshot !== void 0 && object.messagesSnapshot !== null ? MessagesSnapshotEvent.fromPartial(object.messagesSnapshot) : void 0;\n    message.raw = object.raw !== void 0 && object.raw !== null ? RawEvent.fromPartial(object.raw) : void 0;\n    message.custom = object.custom !== void 0 && object.custom !== null ? CustomEvent.fromPartial(object.custom) : void 0;\n    message.runStarted = object.runStarted !== void 0 && object.runStarted !== null ? RunStartedEvent.fromPartial(object.runStarted) : void 0;\n    message.runFinished = object.runFinished !== void 0 && object.runFinished !== null ? RunFinishedEvent.fromPartial(object.runFinished) : void 0;\n    message.runError = object.runError !== void 0 && object.runError !== null ? RunErrorEvent.fromPartial(object.runError) : void 0;\n    message.stepStarted = object.stepStarted !== void 0 && object.stepStarted !== null ? StepStartedEvent.fromPartial(object.stepStarted) : void 0;\n    message.stepFinished = object.stepFinished !== void 0 && object.stepFinished !== null ? StepFinishedEvent.fromPartial(object.stepFinished) : void 0;\n    message.textMessageChunk = object.textMessageChunk !== void 0 && object.textMessageChunk !== null ? TextMessageChunkEvent.fromPartial(object.textMessageChunk) : void 0;\n    message.toolCallChunk = object.toolCallChunk !== void 0 && object.toolCallChunk !== null ? ToolCallChunkEvent.fromPartial(object.toolCallChunk) : void 0;\n    return message;\n  }\n};\nfunction longToNumber(int64) {\n  const num = globalThis.Number(int64.toString());\n  if (num > globalThis.Number.MAX_SAFE_INTEGER) {\n    throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n  }\n  if (num < globalThis.Number.MIN_SAFE_INTEGER) {\n    throw new globalThis.Error(\"Value is smaller than Number.MIN_SAFE_INTEGER\");\n  }\n  return num;\n}\n\n// src/proto.ts\nfunction toCamelCase(str) {\n  return str.toLowerCase().replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());\n}\nfunction encode(event) {\n  const oneofField = toCamelCase(event.type);\n  const { type, timestamp, rawEvent, ...rest } = event;\n  if (type === _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.MESSAGES_SNAPSHOT) {\n    rest.messages = rest.messages.map((message) => {\n      const untypedMessage = message;\n      if (untypedMessage.toolCalls === void 0) {\n        return { ...message, toolCalls: [] };\n      }\n      return message;\n    });\n  }\n  if (type === _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_DELTA) {\n    rest.delta = rest.delta.map((operation) => ({\n      ...operation,\n      op: JsonPatchOperationType[operation.op.toUpperCase()]\n    }));\n  }\n  const eventMessage = {\n    [oneofField]: {\n      baseEvent: {\n        type: EventType[event.type],\n        timestamp,\n        rawEvent\n      },\n      ...rest\n    }\n  };\n  return Event.encode(eventMessage).finish();\n}\nfunction decode(data) {\n  var _a;\n  const event = Event.decode(data);\n  const decoded = Object.values(event).find((value) => value !== void 0);\n  if (!decoded) {\n    throw new Error(\"Invalid event\");\n  }\n  decoded.type = EventType[decoded.baseEvent.type];\n  decoded.timestamp = decoded.baseEvent.timestamp;\n  decoded.rawEvent = decoded.baseEvent.rawEvent;\n  if (decoded.type === _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.MESSAGES_SNAPSHOT) {\n    for (const message of decoded.messages) {\n      const untypedMessage = message;\n      if (((_a = untypedMessage.toolCalls) == null ? void 0 : _a.length) === 0) {\n        untypedMessage.toolCalls = void 0;\n      }\n    }\n  }\n  if (decoded.type === _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventType.STATE_DELTA) {\n    for (const operation of decoded.delta) {\n      operation.op = JsonPatchOperationType[operation.op].toLowerCase();\n      Object.keys(operation).forEach((key) => {\n        if (operation[key] === void 0) {\n          delete operation[key];\n        }\n      });\n    }\n  }\n  Object.keys(decoded).forEach((key) => {\n    if (decoded[key] === void 0) {\n      delete decoded[key];\n    }\n  });\n  return _ag_ui_core__WEBPACK_IMPORTED_MODULE_0__.EventSchemas.parse(decoded);\n}\n\n// src/index.ts\nvar AGUI_MEDIA_TYPE = \"application/vnd.ag-ui.event+proto\";\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@ag-ui/proto/dist/index.mjs\n");

/***/ })

};
;