/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain";
exports.ids = ["vendor-chunks/@langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/@langchain/aws/dist/chat_models.cjs":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/chat_models.cjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatBedrockConverse = void 0;\nconst messages_1 = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.cjs\");\nconst chat_models_1 = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/@langchain/core/language_models/chat_models.cjs\");\nconst client_bedrock_runtime_1 = __webpack_require__(/*! @aws-sdk/client-bedrock-runtime */ \"(rsc)/./node_modules/@aws-sdk/client-bedrock-runtime/dist-es/index.js\");\nconst outputs_1 = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.cjs\");\nconst env_1 = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.cjs\");\nconst credential_provider_node_1 = __webpack_require__(/*! @aws-sdk/credential-provider-node */ \"(rsc)/./node_modules/@aws-sdk/credential-provider-node/dist-es/index.js\");\nconst runnables_1 = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.cjs\");\nconst types_1 = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/@langchain/core/utils/types.cjs\");\nconst json_schema_1 = __webpack_require__(/*! @langchain/core/utils/json_schema */ \"(rsc)/./node_modules/@langchain/core/utils/json_schema.cjs\");\nconst common_js_1 = __webpack_require__(/*! ./common.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/common.cjs\");\n/**\n * AWS Bedrock Converse chat model integration.\n *\n * Setup:\n * Install `@langchain/aws` and set the following environment variables:\n *\n * ```bash\n * npm install @langchain/aws\n * export BEDROCK_AWS_REGION=\"your-aws-region\"\n * export BEDROCK_AWS_SECRET_ACCESS_KEY=\"your-aws-secret-access-key\"\n * export BEDROCK_AWS_ACCESS_KEY_ID=\"your-aws-access-key-id\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/langchain_aws.ChatBedrockConverse.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_aws.ChatBedrockConverseCallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.withConfig`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.withConfig({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     stop: [\"\\n\"],\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { ChatBedrockConverse } from '@langchain/aws';\n *\n * const llm = new ChatBedrockConverse({\n *   model: \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n *   temperature: 0,\n *   maxTokens: undefined,\n *   timeout: undefined,\n *   maxRetries: 2,\n *   region: process.env.BEDROCK_AWS_REGION,\n *   credentials: {\n *     secretAccessKey: process.env.BEDROCK_AWS_SECRET_ACCESS_KEY!,\n *     accessKeyId: process.env.BEDROCK_AWS_ACCESS_KEY_ID!,\n *   },\n *   // Configure client options (e.g., custom request handler)\n *   // clientOptions: {\n *   //   requestHandler: myCustomRequestHandler,\n *   // },\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"id\": \"81a27f7a-550c-473d-8307-c2fbb9c74956\",\n *   \"content\": \"Here's the translation to French:\\n\\nJ'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"$metadata\": {\n *       \"httpStatusCode\": 200,\n *       \"requestId\": \"81a27f7a-550c-473d-8307-c2fbb9c74956\",\n *       \"attempts\": 1,\n *       \"totalRetryDelay\": 0\n *     },\n *     \"metrics\": {\n *       \"latencyMs\": 1109\n *     },\n *     \"stopReason\": \"end_turn\",\n *     \"usage\": {\n *       \"inputTokens\": 25,\n *       \"outputTokens\": 19,\n *       \"totalTokens\": 44\n *     }\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 25,\n *     \"output_tokens\": 19,\n *     \"total_tokens\": 44\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"content\": \"\"\n *   \"response_metadata\": {\n *     \"messageStart\": {\n *       \"p\": \"abcdefghijk\",\n *       \"role\": \"assistant\"\n *     }\n *   }\n * }\n * AIMessageChunk {\n *   \"content\": \"Here\"\n * }\n * AIMessageChunk {\n *   \"content\": \"'s\"\n * }\n * AIMessageChunk {\n *   \"content\": \" the translation\"\n * }\n * AIMessageChunk {\n *   \"content\": \" to\"\n * }\n * AIMessageChunk {\n *   \"content\": \" French:\\n\\nJ\"\n * }\n * AIMessageChunk {\n *   \"content\": \"'adore la\"\n * }\n * AIMessageChunk {\n *   \"content\": \" programmation.\"\n * }\n * AIMessageChunk {\n *   \"content\": \"\"\n *   \"response_metadata\": {\n *     \"contentBlockStop\": {\n *       \"contentBlockIndex\": 0,\n *       \"p\": \"abcdefghijk\"\n *     }\n *   }\n * }\n * AIMessageChunk {\n *   \"content\": \"\"\n *   \"response_metadata\": {\n *     \"messageStop\": {\n *       \"stopReason\": \"end_turn\"\n *     }\n *   }\n * }\n * AIMessageChunk {\n *   \"content\": \"\"\n *   \"response_metadata\": {\n *     \"metadata\": {\n *       \"metrics\": {\n *         \"latencyMs\": 838\n *       },\n *       \"p\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123\",\n *       \"usage\": {\n *         \"inputTokens\": 25,\n *         \"outputTokens\": 19,\n *         \"totalTokens\": 44\n *       }\n *     }\n *   }\n *   \"usage_metadata\": {\n *     \"input_tokens\": 25,\n *     \"output_tokens\": 19,\n *     \"total_tokens\": 44\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"content\": \"Here's the translation to French:\\n\\nJ'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"messageStart\": {\n *       \"p\": \"ab\",\n *       \"role\": \"assistant\"\n *     },\n *     \"contentBlockStop\": {\n *       \"contentBlockIndex\": 0,\n *       \"p\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJK\"\n *     },\n *     \"messageStop\": {\n *       \"stopReason\": \"end_turn\"\n *     },\n *     \"metadata\": {\n *       \"metrics\": {\n *         \"latencyMs\": 838\n *       },\n *       \"p\": \"abcdefghijklmnopqrstuvwxyz\",\n *       \"usage\": {\n *         \"inputTokens\": 25,\n *         \"outputTokens\": 19,\n *         \"totalTokens\": 44\n *       }\n *     }\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 25,\n *     \"output_tokens\": 19,\n *     \"total_tokens\": 44\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools(\n *   [GetWeather, GetPopulation],\n *   {\n *     // strict: true  // enforce tool args schema is respected\n *   }\n * );\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     id: 'tooluse_hIaiqfweRtSiJyi6J4naJA',\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call'\n *   },\n *   {\n *     id: 'tooluse_nOS8B0UlTd2FdpH4MSHw9w',\n *     name: 'GetWeather',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call'\n *   },\n *   {\n *     id: 'tooluse_XxMpZiETQ5aVS5opVDyIaw',\n *     name: 'GetPopulation',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call'\n *   },\n *   {\n *     id: 'tooluse_GpYvAfldT2aR8VQfH-p4PQ',\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: \"Why don't cats play poker in the jungle?\",\n *   punchline: 'Too many cheetahs!',\n *   rating: 7\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Multimodal</strong></summary>\n *\n * ```typescript\n * import { HumanMessage } from '@langchain/core/messages';\n *\n * const imageUrl = \"https://example.com/image.jpg\";\n * const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n * const base64Image = Buffer.from(imageData).toString('base64');\n *\n * const message = new HumanMessage({\n *   content: [\n *     { type: \"text\", text: \"describe the weather in this image\" },\n *     {\n *       type: \"image_url\",\n *       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n *     },\n *   ]\n * });\n *\n * const imageDescriptionAiMsg = await llm.invoke([message]);\n * console.log(imageDescriptionAiMsg.content);\n * ```\n *\n * ```txt\n * The weather in this image appears to be clear and pleasant. The sky is a vibrant blue with scattered white clouds, suggesting a sunny day with good visibility. The clouds are light and wispy, indicating fair weather conditions. There's no sign of rain, storm, or any adverse weather patterns. The lush green grass on the rolling hills looks well-watered and healthy, which could indicate recent rainfall or generally favorable weather conditions. Overall, the image depicts a beautiful, calm day with blue skies and sunshine - perfect weather for enjoying the outdoors.\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 25, output_tokens: 19, total_tokens: 44 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Stream Usage Metadata</strong></summary>\n *\n * ```typescript\n * const streamForMetadata = await llm.stream(input);\n * let fullForMetadata: AIMessageChunk | undefined;\n * for await (const chunk of streamForMetadata) {\n *   fullForMetadata = !fullForMetadata ? chunk : concat(fullForMetadata, chunk);\n * }\n * console.log(fullForMetadata?.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 25, output_tokens: 19, total_tokens: 44 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   '$metadata': {\n *     httpStatusCode: 200,\n *     requestId: '5de2a2e5-d1dc-4dff-bb02-31361f4107bc',\n *     extendedRequestId: undefined,\n *     cfId: undefined,\n *     attempts: 1,\n *     totalRetryDelay: 0\n *   },\n *   metrics: { latencyMs: 1163 },\n *   stopReason: 'end_turn',\n *   usage: { inputTokens: 25, outputTokens: 19, totalTokens: 44 }\n * }\n * ```\n * </details>\n *\n * <br />\n */\nclass ChatBedrockConverse extends chat_models_1.BaseChatModel {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"ChatBedrockConverse\";\n    }\n    /**\n     * Replace with any secrets this class passes to `super`.\n     * See {@link ../../langchain-cohere/src/chat_model.ts} for\n     * an example.\n     */\n    get lc_secrets() {\n        return {\n            apiKey: \"API_KEY_NAME\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            apiKey: \"API_KEY_NAME\",\n        };\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"anthropic.claude-3-haiku-20240307-v1:0\"\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"region\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        Object.defineProperty(this, \"endpointHost\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"additionalModelRequestFields\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streamUsage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"guardrailConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"performanceConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Which types of `tool_choice` values the model supports.\n         *\n         * Inferred if not specified. Inferred as ['auto', 'any', 'tool'] if a 'claude-3'\n         * model is used, ['auto', 'any'] if a 'mistral-large' model is used, empty otherwise.\n         */\n        Object.defineProperty(this, \"supportsToolChoiceValues\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { profile, filepath, configFilepath, ignoreCache, mfaCodeProvider, roleAssumer, roleArn, webIdentityTokenFile, roleAssumerWithWebIdentity, ...rest } = fields ?? {};\n        const credentials = rest?.credentials ??\n            (0, credential_provider_node_1.defaultProvider)({\n                profile,\n                filepath,\n                configFilepath,\n                ignoreCache,\n                mfaCodeProvider,\n                roleAssumer,\n                roleArn,\n                webIdentityTokenFile,\n                roleAssumerWithWebIdentity,\n            });\n        const region = rest?.region ?? (0, env_1.getEnvironmentVariable)(\"AWS_DEFAULT_REGION\");\n        if (!region) {\n            throw new Error(\"Please set the AWS_DEFAULT_REGION environment variable or pass it to the constructor as the region field.\");\n        }\n        this.client =\n            fields?.client ??\n                new client_bedrock_runtime_1.BedrockRuntimeClient({\n                    ...fields?.clientOptions,\n                    region,\n                    credentials,\n                    endpoint: rest.endpointHost\n                        ? `https://${rest.endpointHost}`\n                        : undefined,\n                });\n        this.region = region;\n        this.model = rest?.model ?? this.model;\n        this.streaming = rest?.streaming ?? this.streaming;\n        this.temperature = rest?.temperature;\n        this.maxTokens = rest?.maxTokens;\n        this.endpointHost = rest?.endpointHost;\n        this.topP = rest?.topP;\n        this.additionalModelRequestFields = rest?.additionalModelRequestFields;\n        this.streamUsage = rest?.streamUsage ?? this.streamUsage;\n        this.guardrailConfig = rest?.guardrailConfig;\n        this.performanceConfig = rest?.performanceConfig;\n        this.clientOptions = rest?.clientOptions;\n        if (rest?.supportsToolChoiceValues === undefined) {\n            this.supportsToolChoiceValues = (0, common_js_1.supportedToolChoiceValuesForModel)(this.model);\n        }\n        else {\n            this.supportsToolChoiceValues = rest.supportsToolChoiceValues;\n        }\n    }\n    getLsParams(options) {\n        const params = this.invocationParams(options);\n        return {\n            ls_provider: \"amazon_bedrock\",\n            ls_model_name: this.model,\n            ls_model_type: \"chat\",\n            ls_temperature: params.inferenceConfig?.temperature ?? this.temperature,\n            ls_max_tokens: params.inferenceConfig?.maxTokens ?? undefined,\n            ls_stop: options.stop,\n        };\n    }\n    bindTools(tools, kwargs) {\n        return this.withConfig({\n            tools: (0, common_js_1.convertToConverseTools)(tools),\n            ...kwargs,\n        });\n    }\n    // Replace\n    _llmType() {\n        return \"chat_bedrock_converse\";\n    }\n    invocationParams(options) {\n        let toolConfig;\n        if (options?.tools && options.tools.length) {\n            const tools = (0, common_js_1.convertToConverseTools)(options.tools);\n            toolConfig = {\n                tools,\n                toolChoice: options.tool_choice\n                    ? (0, common_js_1.convertToBedrockToolChoice)(options.tool_choice, tools, {\n                        model: this.model,\n                        supportsToolChoiceValues: this.supportsToolChoiceValues,\n                    })\n                    : undefined,\n            };\n        }\n        return {\n            inferenceConfig: {\n                maxTokens: this.maxTokens,\n                temperature: this.temperature,\n                topP: this.topP,\n                stopSequences: options?.stop,\n            },\n            toolConfig,\n            additionalModelRequestFields: this.additionalModelRequestFields ??\n                options?.additionalModelRequestFields,\n            guardrailConfig: this.guardrailConfig ?? options?.guardrailConfig,\n            performanceConfig: options?.performanceConfig,\n        };\n    }\n    async _generate(messages, options, runManager) {\n        if (this.streaming) {\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            let finalResult;\n            for await (const chunk of stream) {\n                if (finalResult === undefined) {\n                    finalResult = chunk;\n                }\n                else {\n                    finalResult = finalResult.concat(chunk);\n                }\n            }\n            if (finalResult === undefined) {\n                throw new Error(\"Could not parse final output from Bedrock streaming call.\");\n            }\n            return {\n                generations: [finalResult],\n                llmOutput: finalResult.generationInfo,\n            };\n        }\n        return this._generateNonStreaming(messages, options, runManager);\n    }\n    async _generateNonStreaming(messages, options, _runManager) {\n        const { converseMessages, converseSystem } = (0, common_js_1.convertToConverseMessages)(messages);\n        const params = this.invocationParams(options);\n        const command = new client_bedrock_runtime_1.ConverseCommand({\n            modelId: this.model,\n            messages: converseMessages,\n            system: converseSystem,\n            requestMetadata: options.requestMetadata,\n            ...params,\n        });\n        const response = await this.client.send(command, {\n            abortSignal: options.signal,\n        });\n        const { output, ...responseMetadata } = response;\n        if (!output?.message) {\n            throw new Error(\"No message found in Bedrock response.\");\n        }\n        const message = (0, common_js_1.convertConverseMessageToLangChainMessage)(output.message, responseMetadata);\n        return {\n            generations: [\n                {\n                    text: typeof message.content === \"string\" ? message.content : \"\",\n                    message,\n                },\n            ],\n        };\n    }\n    async *_streamResponseChunks(messages, options, runManager) {\n        const { converseMessages, converseSystem } = (0, common_js_1.convertToConverseMessages)(messages);\n        const params = this.invocationParams(options);\n        let { streamUsage } = this;\n        if (options.streamUsage !== undefined) {\n            streamUsage = options.streamUsage;\n        }\n        const command = new client_bedrock_runtime_1.ConverseStreamCommand({\n            modelId: this.model,\n            messages: converseMessages,\n            system: converseSystem,\n            requestMetadata: options.requestMetadata,\n            ...params,\n        });\n        const response = await this.client.send(command, {\n            abortSignal: options.signal,\n        });\n        if (response.stream) {\n            for await (const chunk of response.stream) {\n                if (chunk.contentBlockStart) {\n                    yield (0, common_js_1.handleConverseStreamContentBlockStart)(chunk.contentBlockStart);\n                }\n                else if (chunk.contentBlockDelta) {\n                    const textChatGeneration = (0, common_js_1.handleConverseStreamContentBlockDelta)(chunk.contentBlockDelta);\n                    yield textChatGeneration;\n                    await runManager?.handleLLMNewToken(textChatGeneration.text, undefined, undefined, undefined, undefined, {\n                        chunk: textChatGeneration,\n                    });\n                }\n                else if (chunk.metadata) {\n                    yield (0, common_js_1.handleConverseStreamMetadata)(chunk.metadata, {\n                        streamUsage,\n                    });\n                }\n                else {\n                    yield new outputs_1.ChatGenerationChunk({\n                        text: \"\",\n                        message: new messages_1.AIMessageChunk({\n                            content: \"\",\n                            response_metadata: chunk,\n                        }),\n                    });\n                }\n            }\n        }\n    }\n    withStructuredOutput(outputSchema, config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const schema = outputSchema;\n        const name = config?.name;\n        const description = (0, types_1.getSchemaDescription)(schema) ?? \"A function available to call.\";\n        const method = config?.method;\n        const includeRaw = config?.includeRaw;\n        if (method === \"jsonMode\") {\n            throw new Error(`ChatBedrockConverse does not support 'jsonMode'.`);\n        }\n        let functionName = name ?? \"extract\";\n        let tools;\n        if ((0, types_1.isInteropZodSchema)(schema)) {\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: (0, json_schema_1.toJsonSchema)(schema),\n                    },\n                },\n            ];\n        }\n        else {\n            if (\"name\" in schema) {\n                functionName = schema.name;\n            }\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: schema,\n                    },\n                },\n            ];\n        }\n        const supportsToolChoiceValues = this.supportsToolChoiceValues ?? [];\n        let toolChoiceObj;\n        if (supportsToolChoiceValues.includes(\"tool\")) {\n            toolChoiceObj = {\n                tool_choice: tools[0].function.name,\n            };\n        }\n        else if (supportsToolChoiceValues.includes(\"any\")) {\n            toolChoiceObj = {\n                tool_choice: \"any\",\n            };\n        }\n        const llm = this.bindTools(tools, toolChoiceObj);\n        const outputParser = runnables_1.RunnableLambda.from((input) => {\n            if (!input.tool_calls || input.tool_calls.length === 0) {\n                throw new Error(\"No tool calls found in the response.\");\n            }\n            const toolCall = input.tool_calls.find((tc) => tc.name === functionName);\n            if (!toolCall) {\n                throw new Error(`No tool call found with name ${functionName}.`);\n            }\n            return toolCall.args;\n        });\n        if (!includeRaw) {\n            return llm.pipe(outputParser).withConfig({\n                runName: \"StructuredOutput\",\n            });\n        }\n        const parserAssign = runnables_1.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config) => outputParser.invoke(input.raw, config),\n        });\n        const parserNone = runnables_1.RunnablePassthrough.assign({\n            parsed: () => null,\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [parserNone],\n        });\n        return runnables_1.RunnableSequence.from([\n            {\n                raw: llm,\n            },\n            parsedWithFallback,\n        ]).withConfig({\n            runName: \"StructuredOutputRunnable\",\n        });\n    }\n}\nexports.ChatBedrockConverse = ChatBedrockConverse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/chat_models.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/dist/common.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/common.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extractImageInfo = extractImageInfo;\nexports.convertToConverseMessages = convertToConverseMessages;\nexports.isBedrockTool = isBedrockTool;\nexports.convertToConverseTools = convertToConverseTools;\nexports.convertToBedrockToolChoice = convertToBedrockToolChoice;\nexports.convertConverseMessageToLangChainMessage = convertConverseMessageToLangChainMessage;\nexports.handleConverseStreamContentBlockDelta = handleConverseStreamContentBlockDelta;\nexports.handleConverseStreamContentBlockStart = handleConverseStreamContentBlockStart;\nexports.handleConverseStreamMetadata = handleConverseStreamMetadata;\nexports.bedrockReasoningDeltaToLangchainPartialReasoningBlock = bedrockReasoningDeltaToLangchainPartialReasoningBlock;\nexports.bedrockReasoningBlockToLangchainReasoningBlock = bedrockReasoningBlockToLangchainReasoningBlock;\nexports.langchainReasoningBlockToBedrockReasoningBlock = langchainReasoningBlockToBedrockReasoningBlock;\nexports.concatenateLangchainReasoningBlocks = concatenateLangchainReasoningBlocks;\nexports.supportedToolChoiceValuesForModel = supportedToolChoiceValuesForModel;\nconst messages_1 = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.cjs\");\nconst base_1 = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.cjs\");\nconst function_calling_1 = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.cjs\");\nconst outputs_1 = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.cjs\");\nconst types_1 = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/@langchain/core/utils/types.cjs\");\nconst json_schema_1 = __webpack_require__(/*! @langchain/core/utils/json_schema */ \"(rsc)/./node_modules/@langchain/core/utils/json_schema.cjs\");\nfunction isDefaultCachePoint(block) {\n    return Boolean(typeof block === \"object\" &&\n        block !== null &&\n        \"cachePoint\" in block &&\n        block.cachePoint &&\n        typeof block.cachePoint === \"object\" &&\n        block.cachePoint !== null &&\n        \"type\" in block.cachePoint &&\n        block.cachePoint.type === \"default\");\n}\nconst standardContentBlockConverter = {\n    providerName: \"ChatBedrockConverse\",\n    fromStandardTextBlock(block) {\n        return {\n            text: block.text,\n        };\n    },\n    fromStandardImageBlock(block) {\n        let format;\n        if (block.source_type === \"url\") {\n            const parsedData = (0, messages_1.parseBase64DataUrl)({\n                dataUrl: block.url,\n                asTypedArray: true,\n            });\n            if (parsedData) {\n                const parsedMimeType = (0, messages_1.parseMimeType)(parsedData.mime_type);\n                format = parsedMimeType.type;\n                return {\n                    image: {\n                        format,\n                        source: {\n                            bytes: parsedData.data,\n                        },\n                    },\n                };\n            }\n            else {\n                throw new Error(\"Only base64 data URLs are supported for image blocks with source type 'url' with ChatBedrockConverse.\");\n            }\n        }\n        else if (block.source_type === \"base64\") {\n            if (block.mime_type) {\n                const parsedMimeType = (0, messages_1.parseMimeType)(block.mime_type);\n                format = parsedMimeType.subtype;\n            }\n            if (format && ![\"gif\", \"jpeg\", \"png\", \"webp\"].includes(format)) {\n                throw new Error(`Unsupported image mime type: \"${block.mime_type}\" ChatBedrockConverse only supports \"image/gif\", \"image/jpeg\", \"image/png\", and \"image/webp\" formats.`);\n            }\n            return {\n                image: {\n                    format,\n                    source: {\n                        bytes: Uint8Array.from(atob(block.data), (c) => c.charCodeAt(0)),\n                    },\n                },\n            };\n        }\n        else if (block.source_type === \"id\") {\n            throw new Error(\"Image source type 'id' not supported with ChatBedrockConverse.\");\n        }\n        else {\n            throw new Error(`Unsupported image source type: \"${block.source_type}\" with ChatBedrockConverse.`);\n        }\n    },\n    fromStandardFileBlock(block) {\n        const mimeTypeToDocumentFormat = {\n            \"text/csv\": \"csv\",\n            \"application/msword\": \"doc\",\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": \"docx\",\n            \"text/html\": \"html\",\n            \"text/markdown\": \"md\",\n            \"application/pdf\": \"pdf\",\n            \"text/plain\": \"txt\",\n            \"application/vnd.ms-excel\": \"xls\",\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": \"xlsx\",\n        };\n        const name = (block.metadata?.name ??\n            block.metadata?.filename ??\n            block.metadata?.title);\n        if (block.source_type === \"text\") {\n            return {\n                document: {\n                    name,\n                    format: \"txt\",\n                    source: {\n                        bytes: new TextEncoder().encode(block.text),\n                    },\n                },\n            };\n        }\n        if (block.source_type === \"url\") {\n            const parsedData = (0, messages_1.parseBase64DataUrl)({\n                dataUrl: block.url,\n                asTypedArray: true,\n            });\n            if (parsedData) {\n                const parsedMimeType = (0, messages_1.parseMimeType)(parsedData.mime_type ?? block.mime_type);\n                const mimeType = `${parsedMimeType.type}/${parsedMimeType.subtype}`;\n                const format = mimeTypeToDocumentFormat[mimeType];\n                return {\n                    document: {\n                        name,\n                        format,\n                        source: {\n                            bytes: parsedData.data,\n                        },\n                    },\n                };\n            }\n            throw new Error(\"Only base64 data URLs are supported for file blocks with source type 'url' with ChatBedrockConverse.\");\n        }\n        if (block.source_type === \"base64\") {\n            let format;\n            if (block.mime_type) {\n                const parsedMimeType = (0, messages_1.parseMimeType)(block.mime_type);\n                const mimeType = `${parsedMimeType.type}/${parsedMimeType.subtype}`;\n                format = mimeTypeToDocumentFormat[mimeType];\n                if (format === undefined) {\n                    throw new Error(`Unsupported file mime type: \"${block.mime_type}\" ChatBedrockConverse only supports ${Object.keys(mimeTypeToDocumentFormat).join(\", \")} formats.`);\n                }\n            }\n            return {\n                document: {\n                    name,\n                    format,\n                    source: {\n                        bytes: Uint8Array.from(atob(block.data), (c) => c.charCodeAt(0)),\n                    },\n                },\n            };\n        }\n        if (block.source_type === \"id\") {\n            throw new Error(\"File source type 'id' not supported with ChatBedrockConverse.\");\n        }\n        throw new Error(`Unsupported file source type: \"${block.source_type}\" with ChatBedrockConverse.`);\n    },\n};\nfunction extractImageInfo(base64) {\n    // Extract the format from the base64 string\n    const formatMatch = base64.match(/^data:image\\/(\\w+);base64,/);\n    let format;\n    if (formatMatch) {\n        const extractedFormat = formatMatch[1].toLowerCase();\n        if ([\"gif\", \"jpeg\", \"png\", \"webp\"].includes(extractedFormat)) {\n            format = extractedFormat;\n        }\n    }\n    // Remove the data URL prefix if present\n    const base64Data = base64.replace(/^data:image\\/\\w+;base64,/, \"\");\n    // Convert base64 to Uint8Array\n    const binaryString = atob(base64Data);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i += 1) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return {\n        image: {\n            format,\n            source: {\n                bytes,\n            },\n        },\n    };\n}\nfunction convertLangChainContentBlockToConverseContentBlock({ block, onUnknown = \"throw\", }) {\n    if (typeof block === \"string\") {\n        return { text: block };\n    }\n    if ((0, messages_1.isDataContentBlock)(block)) {\n        return (0, messages_1.convertToProviderContentBlock)(block, standardContentBlockConverter);\n    }\n    if (block.type === \"text\") {\n        return { text: block.text };\n    }\n    if (block.type === \"image_url\") {\n        return extractImageInfo(typeof block.image_url === \"string\"\n            ? block.image_url\n            : block.image_url.url);\n    }\n    if (block.type === \"document\" && block.document !== undefined) {\n        return {\n            document: block.document,\n        };\n    }\n    if (block.type === \"image\" && block.image !== undefined) {\n        return {\n            image: block.image,\n        };\n    }\n    if (isDefaultCachePoint(block)) {\n        return {\n            cachePoint: {\n                type: \"default\",\n            },\n        };\n    }\n    if (onUnknown === \"throw\") {\n        throw new Error(`Unsupported content block type: ${block.type}`);\n    }\n    else {\n        return block;\n    }\n}\nfunction convertSystemMessageToConverseMessage(msg) {\n    if (typeof msg.content === \"string\") {\n        return [{ text: msg.content }];\n    }\n    else if (Array.isArray(msg.content) && msg.content.length > 0) {\n        const contentBlocks = [];\n        for (const block of msg.content) {\n            if (block.type === \"text\" && typeof block.text === \"string\") {\n                contentBlocks.push({\n                    text: block.text,\n                });\n            }\n            else if (isDefaultCachePoint(block)) {\n                contentBlocks.push({\n                    cachePoint: {\n                        type: \"default\",\n                    },\n                });\n            }\n            else\n                break;\n        }\n        if (msg.content.length === contentBlocks.length)\n            return contentBlocks;\n    }\n    throw new Error(\"System message content must be either a string, or an array of text blocks, optionally including a cache point.\");\n}\nfunction convertAIMessageToConverseMessage(msg) {\n    const assistantMsg = {\n        role: \"assistant\",\n        content: [],\n    };\n    if (typeof msg.content === \"string\" && msg.content !== \"\") {\n        assistantMsg.content?.push({\n            text: msg.content,\n        });\n    }\n    else if (Array.isArray(msg.content)) {\n        const concatenatedBlocks = concatenateLangchainReasoningBlocks(msg.content);\n        const contentBlocks = [];\n        concatenatedBlocks.forEach((block) => {\n            if (block.type === \"text\" && block.text !== \"\") {\n                // Merge whitespace/newlines with previous text blocks to avoid validation errors.\n                const cleanedText = block.text?.replace(/\\n/g, \"\").trim();\n                if (cleanedText === \"\") {\n                    if (contentBlocks.length > 0) {\n                        const mergedTextContent = `${contentBlocks[contentBlocks.length - 1].text}${block.text}`;\n                        contentBlocks[contentBlocks.length - 1].text = mergedTextContent;\n                    }\n                }\n                else {\n                    contentBlocks.push({\n                        text: block.text,\n                    });\n                }\n            }\n            else if (block.type === \"reasoning_content\") {\n                contentBlocks.push({\n                    reasoningContent: langchainReasoningBlockToBedrockReasoningBlock(block),\n                });\n            }\n            else if (isDefaultCachePoint(block)) {\n                contentBlocks.push({\n                    cachePoint: {\n                        type: \"default\",\n                    },\n                });\n            }\n            else {\n                const blockValues = Object.fromEntries(Object.entries(block).filter(([key]) => key !== \"type\"));\n                throw new Error(`Unsupported content block type: ${block.type} with content of ${JSON.stringify(blockValues, null, 2)}`);\n            }\n        });\n        assistantMsg.content = [\n            ...(assistantMsg.content ? assistantMsg.content : []),\n            ...contentBlocks,\n        ];\n    }\n    // Important: this must be placed after any reasoning content blocks, else claude models will return an error.\n    if (msg.tool_calls && msg.tool_calls.length) {\n        assistantMsg.content = [\n            ...(assistantMsg.content ? assistantMsg.content : []),\n            ...msg.tool_calls.map((tc) => ({\n                toolUse: {\n                    toolUseId: tc.id,\n                    name: tc.name,\n                    input: tc.args,\n                },\n            })),\n        ];\n    }\n    return assistantMsg;\n}\nfunction convertHumanMessageToConverseMessage(msg) {\n    if (msg.content === \"\") {\n        throw new Error(`Invalid message content: empty string. '${msg.getType()}' must contain non-empty content.`);\n    }\n    const content = Array.isArray(msg.content)\n        ? msg.content.map((c) => convertLangChainContentBlockToConverseContentBlock({\n            block: c,\n            onUnknown: \"throw\",\n        }))\n        : [\n            convertLangChainContentBlockToConverseContentBlock({\n                block: msg.content,\n                onUnknown: \"throw\",\n            }),\n        ];\n    return {\n        role: \"user\",\n        content,\n    };\n}\nfunction convertToolMessageToConverseMessage(msg) {\n    const castMsg = msg;\n    if (typeof castMsg.content === \"string\") {\n        return {\n            // Tool use messages are always from the user\n            role: \"user\",\n            content: [\n                {\n                    toolResult: {\n                        toolUseId: castMsg.tool_call_id,\n                        content: [\n                            {\n                                text: castMsg.content,\n                            },\n                        ],\n                    },\n                },\n            ],\n        };\n    }\n    else {\n        return {\n            // Tool use messages are always from the user\n            role: \"user\",\n            content: [\n                {\n                    toolResult: {\n                        toolUseId: castMsg.tool_call_id,\n                        content: msg.content.map((c) => {\n                            const converted = convertLangChainContentBlockToConverseContentBlock({\n                                block: c,\n                                onUnknown: \"returnUnmodified\",\n                            });\n                            if (converted !== c) {\n                                return converted;\n                            }\n                            return { json: c };\n                        }),\n                    },\n                },\n            ],\n        };\n    }\n}\nfunction convertToConverseMessages(messages) {\n    const converseSystem = messages\n        .filter((msg) => msg.getType() === \"system\")\n        .flatMap((msg) => convertSystemMessageToConverseMessage(msg));\n    const converseMessages = messages\n        .filter((msg) => msg.getType() !== \"system\")\n        .map((msg) => {\n        if (msg.getType() === \"ai\") {\n            return convertAIMessageToConverseMessage(msg);\n        }\n        else if (msg.getType() === \"human\" || msg.getType() === \"generic\") {\n            return convertHumanMessageToConverseMessage(msg);\n        }\n        else if (msg.getType() === \"tool\") {\n            return convertToolMessageToConverseMessage(msg);\n        }\n        else {\n            throw new Error(`Unsupported message type: ${msg.getType()}`);\n        }\n    });\n    // Combine consecutive user tool result messages into a single message\n    const combinedConverseMessages = converseMessages.reduce((acc, curr) => {\n        const lastMessage = acc[acc.length - 1];\n        if (lastMessage &&\n            lastMessage.role === \"user\" &&\n            lastMessage.content?.some((c) => \"toolResult\" in c) &&\n            curr.role === \"user\" &&\n            curr.content?.some((c) => \"toolResult\" in c)) {\n            lastMessage.content = lastMessage.content.concat(curr.content);\n        }\n        else {\n            acc.push(curr);\n        }\n        return acc;\n    }, []);\n    return { converseMessages: combinedConverseMessages, converseSystem };\n}\nfunction isBedrockTool(tool) {\n    if (typeof tool === \"object\" && tool && \"toolSpec\" in tool) {\n        return true;\n    }\n    return false;\n}\nfunction convertToConverseTools(tools) {\n    if (tools.every(base_1.isOpenAITool)) {\n        return tools.map((tool) => ({\n            toolSpec: {\n                name: tool.function.name,\n                description: tool.function.description,\n                inputSchema: {\n                    json: tool.function.parameters,\n                },\n            },\n        }));\n    }\n    else if (tools.every(function_calling_1.isLangChainTool)) {\n        return tools.map((tool) => ({\n            toolSpec: {\n                name: tool.name,\n                description: tool.description,\n                inputSchema: {\n                    json: ((0, types_1.isInteropZodSchema)(tool.schema)\n                        ? (0, json_schema_1.toJsonSchema)(tool.schema)\n                        : tool.schema),\n                },\n            },\n        }));\n    }\n    else if (tools.every(isBedrockTool)) {\n        return tools;\n    }\n    throw new Error(\"Invalid tools passed. Must be an array of StructuredToolInterface, ToolDefinition, or BedrockTool.\");\n}\nfunction convertToBedrockToolChoice(toolChoice, tools, fields) {\n    const supportsToolChoiceValues = fields.supportsToolChoiceValues ?? [];\n    let bedrockToolChoice;\n    if (typeof toolChoice === \"string\") {\n        switch (toolChoice) {\n            case \"any\":\n                bedrockToolChoice = {\n                    any: {},\n                };\n                break;\n            case \"auto\":\n                bedrockToolChoice = {\n                    auto: {},\n                };\n                break;\n            default: {\n                const foundTool = tools.find((tool) => tool.toolSpec?.name === toolChoice);\n                if (!foundTool) {\n                    throw new Error(`Tool with name ${toolChoice} not found in tools list.`);\n                }\n                bedrockToolChoice = {\n                    tool: {\n                        name: toolChoice,\n                    },\n                };\n            }\n        }\n    }\n    else {\n        bedrockToolChoice = toolChoice;\n    }\n    const toolChoiceType = Object.keys(bedrockToolChoice)[0];\n    if (!supportsToolChoiceValues.includes(toolChoiceType)) {\n        let supportedTxt = \"\";\n        if (supportsToolChoiceValues.length) {\n            supportedTxt =\n                `Model ${fields.model} does not currently support 'tool_choice' ` +\n                    `of type ${toolChoiceType}. The following 'tool_choice' types ` +\n                    `are supported: ${supportsToolChoiceValues.join(\", \")}.`;\n        }\n        else {\n            supportedTxt = `Model ${fields.model} does not currently support 'tool_choice'.`;\n        }\n        throw new Error(`${supportedTxt} Please see` +\n            \"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_ToolChoice.html\" +\n            \"for the latest documentation on models that support tool choice.\");\n    }\n    return bedrockToolChoice;\n}\nfunction convertConverseMessageToLangChainMessage(message, responseMetadata) {\n    if (!message.content) {\n        throw new Error(\"No message content found in response.\");\n    }\n    if (message.role !== \"assistant\") {\n        throw new Error(`Unsupported message role received in ChatBedrockConverse response: ${message.role}`);\n    }\n    let requestId;\n    if (\"$metadata\" in responseMetadata &&\n        responseMetadata.$metadata &&\n        typeof responseMetadata.$metadata === \"object\" &&\n        \"requestId\" in responseMetadata.$metadata) {\n        requestId = responseMetadata.$metadata.requestId;\n    }\n    let tokenUsage;\n    if (responseMetadata.usage) {\n        const input_tokens = responseMetadata.usage.inputTokens ?? 0;\n        const output_tokens = responseMetadata.usage.outputTokens ?? 0;\n        tokenUsage = {\n            input_tokens,\n            output_tokens,\n            total_tokens: responseMetadata.usage.totalTokens ?? input_tokens + output_tokens,\n        };\n    }\n    if (message.content?.length === 1 &&\n        \"text\" in message.content[0] &&\n        typeof message.content[0].text === \"string\") {\n        return new messages_1.AIMessage({\n            content: message.content[0].text,\n            response_metadata: responseMetadata,\n            usage_metadata: tokenUsage,\n            id: requestId,\n        });\n    }\n    else {\n        const toolCalls = [];\n        const content = [];\n        message.content.forEach((c) => {\n            if (\"toolUse\" in c &&\n                c.toolUse &&\n                c.toolUse.name &&\n                c.toolUse.input &&\n                typeof c.toolUse.input === \"object\") {\n                toolCalls.push({\n                    id: c.toolUse.toolUseId,\n                    name: c.toolUse.name,\n                    args: c.toolUse.input,\n                    type: \"tool_call\",\n                });\n            }\n            else if (\"text\" in c && typeof c.text === \"string\") {\n                content.push({ type: \"text\", text: c.text });\n            }\n            else if (\"reasoningContent\" in c) {\n                content.push(bedrockReasoningBlockToLangchainReasoningBlock(c.reasoningContent));\n            }\n            else {\n                content.push(c);\n            }\n        });\n        return new messages_1.AIMessage({\n            content: content.length ? content : \"\",\n            tool_calls: toolCalls.length ? toolCalls : undefined,\n            response_metadata: responseMetadata,\n            usage_metadata: tokenUsage,\n            id: requestId,\n        });\n    }\n}\nfunction handleConverseStreamContentBlockDelta(contentBlockDelta) {\n    if (!contentBlockDelta.delta) {\n        throw new Error(\"No delta found in content block.\");\n    }\n    if (typeof contentBlockDelta.delta.text === \"string\") {\n        return new outputs_1.ChatGenerationChunk({\n            text: contentBlockDelta.delta.text,\n            message: new messages_1.AIMessageChunk({\n                content: contentBlockDelta.delta.text,\n            }),\n        });\n    }\n    else if (contentBlockDelta.delta.toolUse) {\n        const index = contentBlockDelta.contentBlockIndex;\n        return new outputs_1.ChatGenerationChunk({\n            text: \"\",\n            message: new messages_1.AIMessageChunk({\n                content: \"\",\n                tool_call_chunks: [\n                    {\n                        args: contentBlockDelta.delta.toolUse.input,\n                        index,\n                        type: \"tool_call_chunk\",\n                    },\n                ],\n            }),\n        });\n    }\n    else if (contentBlockDelta.delta.reasoningContent) {\n        return new outputs_1.ChatGenerationChunk({\n            text: \"\",\n            message: new messages_1.AIMessageChunk({\n                content: [\n                    bedrockReasoningDeltaToLangchainPartialReasoningBlock(contentBlockDelta.delta.reasoningContent),\n                ],\n            }),\n        });\n    }\n    else {\n        throw new Error(`Unsupported content block type(s): ${JSON.stringify(contentBlockDelta.delta, null, 2)}`);\n    }\n}\nfunction handleConverseStreamContentBlockStart(contentBlockStart) {\n    const index = contentBlockStart.contentBlockIndex;\n    if (contentBlockStart.start?.toolUse) {\n        return new outputs_1.ChatGenerationChunk({\n            text: \"\",\n            message: new messages_1.AIMessageChunk({\n                content: \"\",\n                tool_call_chunks: [\n                    {\n                        name: contentBlockStart.start.toolUse.name,\n                        id: contentBlockStart.start.toolUse.toolUseId,\n                        index,\n                        type: \"tool_call_chunk\",\n                    },\n                ],\n            }),\n        });\n    }\n    throw new Error(\"Unsupported content block start event.\");\n}\nfunction handleConverseStreamMetadata(metadata, extra) {\n    const inputTokens = metadata.usage?.inputTokens ?? 0;\n    const outputTokens = metadata.usage?.outputTokens ?? 0;\n    const usage_metadata = {\n        input_tokens: inputTokens,\n        output_tokens: outputTokens,\n        total_tokens: metadata.usage?.totalTokens ?? inputTokens + outputTokens,\n    };\n    return new outputs_1.ChatGenerationChunk({\n        text: \"\",\n        message: new messages_1.AIMessageChunk({\n            content: \"\",\n            usage_metadata: extra.streamUsage ? usage_metadata : undefined,\n            response_metadata: {\n                // Use the same key as returned from the Converse API\n                metadata,\n            },\n        }),\n    });\n}\nfunction bedrockReasoningDeltaToLangchainPartialReasoningBlock(reasoningContent) {\n    const { text, redactedContent, signature } = reasoningContent;\n    if (typeof text === \"string\") {\n        return {\n            type: \"reasoning_content\",\n            reasoningText: { text },\n        };\n    }\n    if (signature) {\n        return {\n            type: \"reasoning_content\",\n            reasoningText: { signature },\n        };\n    }\n    if (redactedContent) {\n        return {\n            type: \"reasoning_content\",\n            redactedContent: Buffer.from(redactedContent).toString(\"base64\"),\n        };\n    }\n    throw new Error(\"Invalid reasoning content\");\n}\nfunction bedrockReasoningBlockToLangchainReasoningBlock(reasoningContent) {\n    const { reasoningText, redactedContent } = reasoningContent;\n    if (reasoningText) {\n        return {\n            type: \"reasoning_content\",\n            reasoningText: reasoningText,\n        };\n    }\n    if (redactedContent) {\n        return {\n            type: \"reasoning_content\",\n            redactedContent: Buffer.from(redactedContent).toString(\"base64\"),\n        };\n    }\n    throw new Error(\"Invalid reasoning content\");\n}\nfunction langchainReasoningBlockToBedrockReasoningBlock(content) {\n    if (content.type !== \"reasoning_content\") {\n        throw new Error(\"Invalid reasoning content\");\n    }\n    if (\"reasoningText\" in content) {\n        return {\n            reasoningText: content.reasoningText,\n        };\n    }\n    if (\"redactedContent\" in content) {\n        return {\n            redactedContent: Buffer.from(content.redactedContent, \"base64\"),\n        };\n    }\n    throw new Error(\"Invalid reasoning content\");\n}\nfunction concatenateLangchainReasoningBlocks(content) {\n    const concatenatedBlocks = [];\n    let concatenatedBlock = {};\n    for (const block of content) {\n        if (block.type !== \"reasoning_content\") {\n            // if it's some other block type, end the current block, but keep it so we preserve order\n            if (Object.keys(concatenatedBlock).length > 0) {\n                concatenatedBlocks.push(concatenatedBlock);\n                concatenatedBlock = {};\n            }\n            concatenatedBlocks.push(block);\n            continue;\n        }\n        // non-redacted block\n        if (\"reasoningText\" in block && typeof block.reasoningText === \"object\") {\n            if (\"redactedContent\" in concatenatedBlock) {\n                // new type of block, so end the previous one\n                concatenatedBlocks.push(concatenatedBlock);\n                concatenatedBlock = {};\n            }\n            const { text, signature } = block.reasoningText;\n            const { text: prevText, signature: prevSignature } = (\"reasoningText\" in concatenatedBlock\n                ? concatenatedBlock.reasoningText\n                : {});\n            concatenatedBlock = {\n                type: \"reasoning_content\",\n                reasoningText: {\n                    ...(concatenatedBlock\n                        .reasoningText ?? {}),\n                    ...(prevText !== undefined || text !== undefined\n                        ? { text: (prevText ?? \"\") + (text ?? \"\") }\n                        : {}),\n                    ...(prevSignature !== undefined || signature !== undefined\n                        ? { signature: (prevSignature ?? \"\") + (signature ?? \"\") }\n                        : {}),\n                },\n            };\n            // if a partial block chunk has a signature, the next one will begin a new reasoning block.\n            // full blocks always have signatures, so we start one now, anyway\n            if (\"signature\" in block.reasoningText) {\n                concatenatedBlocks.push(concatenatedBlock);\n                concatenatedBlock = {};\n            }\n        }\n        if (\"redactedContent\" in block) {\n            if (\"reasoningText\" in concatenatedBlock) {\n                // New type of block, so end the previous one. We should't really hit\n                // this, as we'll have created a new block upon encountering the\n                // signature above, but better safe than sorry.\n                concatenatedBlocks.push(concatenatedBlock);\n                concatenatedBlock = {};\n            }\n            const { redactedContent } = block;\n            const prevRedactedContent = (\"redactedContent\" in concatenatedBlock\n                ? concatenatedBlock.redactedContent\n                : \"\");\n            concatenatedBlock = {\n                type: \"reasoning_content\",\n                redactedContent: prevRedactedContent + redactedContent,\n            };\n        }\n    }\n    if (Object.keys(concatenatedBlock).length > 0) {\n        concatenatedBlocks.push(concatenatedBlock);\n    }\n    return concatenatedBlocks;\n}\nfunction supportedToolChoiceValuesForModel(model) {\n    if (model.includes(\"claude-3\") ||\n        model.includes(\"claude-4\") ||\n        model.includes(\"claude-opus-4\") ||\n        model.includes(\"claude-sonnet-4\")) {\n        return [\"auto\", \"any\", \"tool\"];\n    }\n    if (model.includes(\"mistral-large\")) {\n        return [\"auto\", \"any\"];\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/common.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/dist/embeddings.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/embeddings.cjs ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BedrockEmbeddings = void 0;\nconst client_bedrock_runtime_1 = __webpack_require__(/*! @aws-sdk/client-bedrock-runtime */ \"(rsc)/./node_modules/@aws-sdk/client-bedrock-runtime/dist-es/index.js\");\nconst embeddings_1 = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/@langchain/core/embeddings.cjs\");\n/**\n * Class that extends the Embeddings class and provides methods for\n * generating embeddings using the Bedrock API.\n * @example\n * ```typescript\n * const embeddings = new BedrockEmbeddings({\n *   region: \"your-aws-region\",\n *   credentials: {\n *     accessKeyId: \"your-access-key-id\",\n *     secretAccessKey: \"your-secret-access-key\",\n *   },\n *   model: \"amazon.titan-embed-text-v1\",\n *   // Configure client options (e.g., custom request handler)\n *   // clientOptions: {\n *   //   requestHandler: myCustomRequestHandler,\n *   // },\n * });\n *\n * // Embed a query and log the result\n * const res = await embeddings.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\"\n * );\n * console.log({ res });\n * ```\n */\nclass BedrockEmbeddings extends embeddings_1.Embeddings {\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        this.model = fields?.model ?? \"amazon.titan-embed-text-v1\";\n        this.clientOptions = fields?.clientOptions;\n        this.client =\n            fields?.client ??\n                new client_bedrock_runtime_1.BedrockRuntimeClient({\n                    ...fields?.clientOptions,\n                    region: fields?.region,\n                    credentials: fields?.credentials,\n                });\n    }\n    /**\n     * Protected method to make a request to the Bedrock API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param request Request to send to the Bedrock API.\n     * @returns Promise that resolves to the response from the API.\n     */\n    async _embedText(text) {\n        return this.caller.call(async () => {\n            try {\n                // replace newlines, which can negatively affect performance.\n                const cleanedText = text.replace(/\\n/g, \" \");\n                const res = await this.client.send(new client_bedrock_runtime_1.InvokeModelCommand({\n                    modelId: this.model,\n                    body: JSON.stringify({\n                        inputText: cleanedText,\n                    }),\n                    contentType: \"application/json\",\n                    accept: \"application/json\",\n                }));\n                const body = new TextDecoder().decode(res.body);\n                return JSON.parse(body).embedding;\n            }\n            catch (e) {\n                console.error({\n                    error: e,\n                });\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (e instanceof Error) {\n                    throw new Error(`An error occurred while embedding documents with Bedrock: ${e.message}`);\n                }\n                throw new Error(\"An error occurred while embedding documents with Bedrock\");\n            }\n        });\n    }\n    /**\n     * Method that takes a document as input and returns a promise that\n     * resolves to an embedding for the document. It calls the _embedText\n     * method with the document as the input.\n     * @param document Document for which to generate an embedding.\n     * @returns Promise that resolves to an embedding for the input document.\n     */\n    embedQuery(document) {\n        return this.caller.callWithOptions({}, this._embedText.bind(this), document);\n    }\n    /**\n     * Method to generate embeddings for an array of texts. Calls _embedText\n     * method which batches and handles retry logic when calling the AWS Bedrock API.\n     * @param documents Array of texts for which to generate embeddings.\n     * @returns Promise that resolves to a 2D array of embeddings for each input document.\n     */\n    async embedDocuments(documents) {\n        return Promise.all(documents.map((document) => this._embedText(document)));\n    }\n}\nexports.BedrockEmbeddings = BedrockEmbeddings;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9hd3MvZGlzdC9lbWJlZGRpbmdzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsaUNBQWlDLG1CQUFPLENBQUMsOEdBQWlDO0FBQzFFLHFCQUFxQixtQkFBTyxDQUFDLHVGQUE0QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixLQUFLO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpR0FBaUcsVUFBVTtBQUMzRztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vYXdzL2Rpc3QvZW1iZWRkaW5ncy5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJlZHJvY2tFbWJlZGRpbmdzID0gdm9pZCAwO1xuY29uc3QgY2xpZW50X2JlZHJvY2tfcnVudGltZV8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1iZWRyb2NrLXJ1bnRpbWVcIik7XG5jb25zdCBlbWJlZGRpbmdzXzEgPSByZXF1aXJlKFwiQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3NcIik7XG4vKipcbiAqIENsYXNzIHRoYXQgZXh0ZW5kcyB0aGUgRW1iZWRkaW5ncyBjbGFzcyBhbmQgcHJvdmlkZXMgbWV0aG9kcyBmb3JcbiAqIGdlbmVyYXRpbmcgZW1iZWRkaW5ncyB1c2luZyB0aGUgQmVkcm9jayBBUEkuXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgZW1iZWRkaW5ncyA9IG5ldyBCZWRyb2NrRW1iZWRkaW5ncyh7XG4gKiAgIHJlZ2lvbjogXCJ5b3VyLWF3cy1yZWdpb25cIixcbiAqICAgY3JlZGVudGlhbHM6IHtcbiAqICAgICBhY2Nlc3NLZXlJZDogXCJ5b3VyLWFjY2Vzcy1rZXktaWRcIixcbiAqICAgICBzZWNyZXRBY2Nlc3NLZXk6IFwieW91ci1zZWNyZXQtYWNjZXNzLWtleVwiLFxuICogICB9LFxuICogICBtb2RlbDogXCJhbWF6b24udGl0YW4tZW1iZWQtdGV4dC12MVwiLFxuICogICAvLyBDb25maWd1cmUgY2xpZW50IG9wdGlvbnMgKGUuZy4sIGN1c3RvbSByZXF1ZXN0IGhhbmRsZXIpXG4gKiAgIC8vIGNsaWVudE9wdGlvbnM6IHtcbiAqICAgLy8gICByZXF1ZXN0SGFuZGxlcjogbXlDdXN0b21SZXF1ZXN0SGFuZGxlcixcbiAqICAgLy8gfSxcbiAqIH0pO1xuICpcbiAqIC8vIEVtYmVkIGEgcXVlcnkgYW5kIGxvZyB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXMgPSBhd2FpdCBlbWJlZGRpbmdzLmVtYmVkUXVlcnkoXG4gKiAgIFwiV2hhdCB3b3VsZCBiZSBhIGdvb2QgY29tcGFueSBuYW1lIGZvciBhIGNvbXBhbnkgdGhhdCBtYWtlcyBjb2xvcmZ1bCBzb2Nrcz9cIlxuICogKTtcbiAqIGNvbnNvbGUubG9nKHsgcmVzIH0pO1xuICogYGBgXG4gKi9cbmNsYXNzIEJlZHJvY2tFbWJlZGRpbmdzIGV4dGVuZHMgZW1iZWRkaW5nc18xLkVtYmVkZGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMgPz8ge30pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtb2RlbFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjbGllbnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2xpZW50T3B0aW9uc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJiYXRjaFNpemVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDUxMlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IGZpZWxkcz8ubW9kZWwgPz8gXCJhbWF6b24udGl0YW4tZW1iZWQtdGV4dC12MVwiO1xuICAgICAgICB0aGlzLmNsaWVudE9wdGlvbnMgPSBmaWVsZHM/LmNsaWVudE9wdGlvbnM7XG4gICAgICAgIHRoaXMuY2xpZW50ID1cbiAgICAgICAgICAgIGZpZWxkcz8uY2xpZW50ID8/XG4gICAgICAgICAgICAgICAgbmV3IGNsaWVudF9iZWRyb2NrX3J1bnRpbWVfMS5CZWRyb2NrUnVudGltZUNsaWVudCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLmZpZWxkcz8uY2xpZW50T3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiBmaWVsZHM/LnJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IGZpZWxkcz8uY3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb3RlY3RlZCBtZXRob2QgdG8gbWFrZSBhIHJlcXVlc3QgdG8gdGhlIEJlZHJvY2sgQVBJIHRvIGdlbmVyYXRlXG4gICAgICogZW1iZWRkaW5ncy4gSGFuZGxlcyB0aGUgcmV0cnkgbG9naWMgYW5kIHJldHVybnMgdGhlIHJlc3BvbnNlIGZyb20gdGhlXG4gICAgICogQVBJLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0IFJlcXVlc3QgdG8gc2VuZCB0byB0aGUgQmVkcm9jayBBUEkuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXNwb25zZSBmcm9tIHRoZSBBUEkuXG4gICAgICovXG4gICAgYXN5bmMgX2VtYmVkVGV4dCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxlci5jYWxsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBuZXdsaW5lcywgd2hpY2ggY2FuIG5lZ2F0aXZlbHkgYWZmZWN0IHBlcmZvcm1hbmNlLlxuICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFuZWRUZXh0ID0gdGV4dC5yZXBsYWNlKC9cXG4vZywgXCIgXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LnNlbmQobmV3IGNsaWVudF9iZWRyb2NrX3J1bnRpbWVfMS5JbnZva2VNb2RlbENvbW1hbmQoe1xuICAgICAgICAgICAgICAgICAgICBtb2RlbElkOiB0aGlzLm1vZGVsLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFRleHQ6IGNsZWFuZWRUZXh0LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgICAgICBhY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHJlcy5ib2R5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShib2R5KS5lbWJlZGRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5zdGFuY2VvZi9uby1pbnN0YW5jZW9mXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGVtYmVkZGluZyBkb2N1bWVudHMgd2l0aCBCZWRyb2NrOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgZW1iZWRkaW5nIGRvY3VtZW50cyB3aXRoIEJlZHJvY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdGhhdCB0YWtlcyBhIGRvY3VtZW50IGFzIGlucHV0IGFuZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0XG4gICAgICogcmVzb2x2ZXMgdG8gYW4gZW1iZWRkaW5nIGZvciB0aGUgZG9jdW1lbnQuIEl0IGNhbGxzIHRoZSBfZW1iZWRUZXh0XG4gICAgICogbWV0aG9kIHdpdGggdGhlIGRvY3VtZW50IGFzIHRoZSBpbnB1dC5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnQgRG9jdW1lbnQgZm9yIHdoaWNoIHRvIGdlbmVyYXRlIGFuIGVtYmVkZGluZy5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gZW1iZWRkaW5nIGZvciB0aGUgaW5wdXQgZG9jdW1lbnQuXG4gICAgICovXG4gICAgZW1iZWRRdWVyeShkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsZXIuY2FsbFdpdGhPcHRpb25zKHt9LCB0aGlzLl9lbWJlZFRleHQuYmluZCh0aGlzKSwgZG9jdW1lbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gZ2VuZXJhdGUgZW1iZWRkaW5ncyBmb3IgYW4gYXJyYXkgb2YgdGV4dHMuIENhbGxzIF9lbWJlZFRleHRcbiAgICAgKiBtZXRob2Qgd2hpY2ggYmF0Y2hlcyBhbmQgaGFuZGxlcyByZXRyeSBsb2dpYyB3aGVuIGNhbGxpbmcgdGhlIEFXUyBCZWRyb2NrIEFQSS5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRzIEFycmF5IG9mIHRleHRzIGZvciB3aGljaCB0byBnZW5lcmF0ZSBlbWJlZGRpbmdzLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIDJEIGFycmF5IG9mIGVtYmVkZGluZ3MgZm9yIGVhY2ggaW5wdXQgZG9jdW1lbnQuXG4gICAgICovXG4gICAgYXN5bmMgZW1iZWREb2N1bWVudHMoZG9jdW1lbnRzKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChkb2N1bWVudHMubWFwKChkb2N1bWVudCkgPT4gdGhpcy5fZW1iZWRUZXh0KGRvY3VtZW50KSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQmVkcm9ja0VtYmVkZGluZ3MgPSBCZWRyb2NrRW1iZWRkaW5ncztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/embeddings.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/dist/index.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/index.cjs ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./chat_models.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/chat_models.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./types.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/types.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./retrievers/index.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/retrievers/index.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./embeddings.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/embeddings.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9hd3MvZGlzdC9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG1GQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMsdUVBQWE7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLDZGQUF3QjtBQUM3QyxhQUFhLG1CQUFPLENBQUMsaUZBQWtCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2F3cy9kaXN0L2luZGV4LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NoYXRfbW9kZWxzLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXMuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9yZXRyaWV2ZXJzL2luZGV4LmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW1iZWRkaW5ncy5janNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/dist/retrievers/bedrock.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/retrievers/bedrock.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AmazonKnowledgeBaseRetriever = void 0;\nconst client_bedrock_agent_runtime_1 = __webpack_require__(/*! @aws-sdk/client-bedrock-agent-runtime */ \"(rsc)/./node_modules/@aws-sdk/client-bedrock-agent-runtime/dist-es/index.js\");\nconst retrievers_1 = __webpack_require__(/*! @langchain/core/retrievers */ \"(rsc)/./node_modules/@langchain/core/retrievers.cjs\");\n/**\n * Class for interacting with Amazon Bedrock Knowledge Bases, a RAG workflow oriented service\n * provided by AWS. Extends the BaseRetriever class.\n * @example\n * ```typescript\n * const retriever = new AmazonKnowledgeBaseRetriever({\n *   topK: 10,\n *   knowledgeBaseId: \"YOUR_KNOWLEDGE_BASE_ID\",\n *   region: \"us-east-2\",\n *   clientOptions: {\n *     credentials: {\n *       accessKeyId: \"YOUR_ACCESS_KEY_ID\",\n *       secretAccessKey: \"YOUR_SECRET_ACCESS_KEY\",\n *     },\n *   },\n * });\n *\n * const docs = await retriever.getRelevantDocuments(\"How are clouds formed?\");\n * ```\n */\nclass AmazonKnowledgeBaseRetriever extends retrievers_1.BaseRetriever {\n    static lc_name() {\n        return \"AmazonKnowledgeBaseRetriever\";\n    }\n    constructor({ knowledgeBaseId, topK = 10, clientOptions, region, filter, overrideSearchType, }) {\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"retrievers\", \"amazon_bedrock_knowledge_base\"]\n        });\n        Object.defineProperty(this, \"knowledgeBaseId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"bedrockAgentRuntimeClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"overrideSearchType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.topK = topK;\n        this.filter = filter;\n        this.overrideSearchType = overrideSearchType;\n        this.bedrockAgentRuntimeClient = new client_bedrock_agent_runtime_1.BedrockAgentRuntimeClient({\n            region,\n            ...clientOptions,\n        });\n        this.knowledgeBaseId = knowledgeBaseId;\n    }\n    /**\n     * Cleans the result text by replacing sequences of whitespace with a\n     * single space and removing ellipses.\n     * @param resText The result text to clean.\n     * @returns The cleaned result text.\n     */\n    cleanResult(resText) {\n        const res = resText.replace(/\\s+/g, \" \").replace(/\\.\\.\\./g, \"\");\n        return res;\n    }\n    async queryKnowledgeBase(query, topK, filter, overrideSearchType) {\n        const retrieveCommand = new client_bedrock_agent_runtime_1.RetrieveCommand({\n            knowledgeBaseId: this.knowledgeBaseId,\n            retrievalQuery: {\n                text: query,\n            },\n            retrievalConfiguration: {\n                vectorSearchConfiguration: {\n                    numberOfResults: topK,\n                    overrideSearchType,\n                    filter,\n                },\n            },\n        });\n        const retrieveResponse = await this.bedrockAgentRuntimeClient.send(retrieveCommand);\n        return (retrieveResponse.retrievalResults?.map((result) => {\n            let source;\n            switch (result.location?.type) {\n                case \"CONFLUENCE\":\n                    source = result.location?.confluenceLocation?.url;\n                    break;\n                case \"S3\":\n                    source = result.location?.s3Location?.uri;\n                    break;\n                case \"SALESFORCE\":\n                    source = result.location?.salesforceLocation?.url;\n                    break;\n                case \"SHAREPOINT\":\n                    source = result.location?.sharePointLocation?.url;\n                    break;\n                case \"WEB\":\n                    source = result.location?.webLocation?.url;\n                    break;\n                default:\n                    source = result.location?.s3Location?.uri;\n                    break;\n            }\n            return {\n                pageContent: this.cleanResult(result.content?.text || \"\"),\n                metadata: {\n                    source,\n                    score: result.score,\n                    ...result.metadata,\n                },\n            };\n        }) ?? []);\n    }\n    async _getRelevantDocuments(query) {\n        const docs = await this.queryKnowledgeBase(query, this.topK, this.filter, this.overrideSearchType);\n        return docs;\n    }\n}\nexports.AmazonKnowledgeBaseRetriever = AmazonKnowledgeBaseRetriever;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/retrievers/bedrock.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/dist/retrievers/index.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/retrievers/index.cjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./bedrock.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/retrievers/bedrock.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./kendra.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/retrievers/kendra.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9hd3MvZGlzdC9yZXRyaWV2ZXJzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsc0ZBQWU7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLG9GQUFjIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2F3cy9kaXN0L3JldHJpZXZlcnMvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmVkcm9jay5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2tlbmRyYS5janNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/retrievers/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/dist/retrievers/kendra.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/retrievers/kendra.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AmazonKendraRetriever = void 0;\nconst client_kendra_1 = __webpack_require__(/*! @aws-sdk/client-kendra */ \"(rsc)/./node_modules/@aws-sdk/client-kendra/dist-es/index.js\");\nconst retrievers_1 = __webpack_require__(/*! @langchain/core/retrievers */ \"(rsc)/./node_modules/@langchain/core/retrievers.cjs\");\nconst documents_1 = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.cjs\");\n/**\n * Class for interacting with Amazon Kendra, an intelligent search service\n * provided by AWS. Extends the BaseRetriever class.\n * @example\n * ```typescript\n * const retriever = new AmazonKendraRetriever({\n *   topK: 10,\n *   indexId: \"YOUR_INDEX_ID\",\n *   region: \"us-east-2\",\n *   clientOptions: {\n *     credentials: {\n *       accessKeyId: \"YOUR_ACCESS_KEY_ID\",\n *       secretAccessKey: \"YOUR_SECRET_ACCESS_KEY\",\n *     },\n *   },\n * });\n *\n * const docs = await retriever.getRelevantDocuments(\"How are clouds formed?\");\n * ```\n */\nclass AmazonKendraRetriever extends retrievers_1.BaseRetriever {\n    static lc_name() {\n        return \"AmazonKendraRetriever\";\n    }\n    constructor({ indexId, topK = 10, clientOptions, attributeFilter, region, }) {\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"retrievers\", \"amazon_kendra\"]\n        });\n        Object.defineProperty(this, \"indexId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kendraClient\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"attributeFilter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (!region) {\n            throw new Error(\"Please pass regionName field to the constructor!\");\n        }\n        if (!indexId) {\n            throw new Error(\"Please pass Kendra Index Id to the constructor\");\n        }\n        this.topK = topK;\n        this.kendraClient = new client_kendra_1.KendraClient({\n            region,\n            ...clientOptions,\n        });\n        this.attributeFilter = attributeFilter;\n        this.indexId = indexId;\n    }\n    // A method to combine title and excerpt into a single string.\n    /**\n     * Combines title and excerpt into a single string.\n     * @param title The title of the document.\n     * @param excerpt An excerpt from the document.\n     * @returns A single string combining the title and excerpt.\n     */\n    combineText(title, excerpt) {\n        let text = \"\";\n        if (title) {\n            text += `Document Title: ${title}\\n`;\n        }\n        if (excerpt) {\n            text += `Document Excerpt: \\n${excerpt}\\n`;\n        }\n        return text;\n    }\n    // A method to clean the result text by replacing sequences of whitespace with a single space and removing ellipses.\n    /**\n     * Cleans the result text by replacing sequences of whitespace with a\n     * single space and removing ellipses.\n     * @param resText The result text to clean.\n     * @returns The cleaned result text.\n     */\n    cleanResult(resText) {\n        const res = resText.replace(/\\s+/g, \" \").replace(/\\.\\.\\./g, \"\");\n        return res;\n    }\n    // A method to extract the attribute value from a DocumentAttributeValue object.\n    /**\n     * Extracts the attribute value from a DocumentAttributeValue object.\n     * @param value The DocumentAttributeValue object to extract the value from.\n     * @returns The extracted attribute value.\n     */\n    getDocAttributeValue(value) {\n        if (value.DateValue) {\n            return value.DateValue;\n        }\n        if (value.LongValue) {\n            return value.LongValue;\n        }\n        if (value.StringListValue) {\n            return value.StringListValue;\n        }\n        if (value.StringValue) {\n            return value.StringValue;\n        }\n        return \"\";\n    }\n    // A method to extract the attribute key-value pairs from an array of DocumentAttribute objects.\n    /**\n     * Extracts the attribute key-value pairs from an array of\n     * DocumentAttribute objects.\n     * @param documentAttributes The array of DocumentAttribute objects to extract the key-value pairs from.\n     * @returns An object containing the extracted attribute key-value pairs.\n     */\n    getDocAttributes(documentAttributes) {\n        const attributes = {};\n        if (documentAttributes) {\n            for (const attr of documentAttributes) {\n                if (attr.Key && attr.Value) {\n                    attributes[attr.Key] = this.getDocAttributeValue(attr.Value);\n                }\n            }\n        }\n        return attributes;\n    }\n    // A method to convert a RetrieveResultItem object into a Document object.\n    /**\n     * Converts a RetrieveResultItem object into a Document object.\n     * @param item The RetrieveResultItem object to convert.\n     * @returns A Document object.\n     */\n    convertRetrieverItem(item) {\n        const title = item.DocumentTitle || \"\";\n        const excerpt = item.Content ? this.cleanResult(item.Content) : \"\";\n        const pageContent = this.combineText(title, excerpt);\n        const source = item.DocumentURI;\n        const attributes = this.getDocAttributes(item.DocumentAttributes);\n        const metadata = {\n            source,\n            title,\n            excerpt,\n            document_attributes: attributes,\n        };\n        return new documents_1.Document({ pageContent, metadata });\n    }\n    // A method to extract the top-k documents from a RetrieveCommandOutput object.\n    /**\n     * Extracts the top-k documents from a RetrieveCommandOutput object.\n     * @param response The RetrieveCommandOutput object to extract the documents from.\n     * @param pageSize The number of documents to extract.\n     * @returns An array of Document objects.\n     */\n    getRetrieverDocs(response, pageSize) {\n        if (!response.ResultItems)\n            return [];\n        const { length } = response.ResultItems;\n        const count = length < pageSize ? length : pageSize;\n        return response.ResultItems.slice(0, count).map((item) => this.convertRetrieverItem(item));\n    }\n    // A method to extract the excerpt text from a QueryResultItem object.\n    /**\n     * Extracts the excerpt text from a QueryResultItem object.\n     * @param item The QueryResultItem object to extract the excerpt text from.\n     * @returns The extracted excerpt text.\n     */\n    getQueryItemExcerpt(item) {\n        if (item.AdditionalAttributes &&\n            item.AdditionalAttributes.length &&\n            item.AdditionalAttributes[0].Key === \"AnswerText\") {\n            if (!item.AdditionalAttributes) {\n                return \"\";\n            }\n            if (!item.AdditionalAttributes[0]) {\n                return \"\";\n            }\n            return this.cleanResult(item.AdditionalAttributes[0].Value?.TextWithHighlightsValue?.Text || \"\");\n        }\n        else if (item.DocumentExcerpt) {\n            return this.cleanResult(item.DocumentExcerpt.Text || \"\");\n        }\n        else {\n            return \"\";\n        }\n    }\n    // A method to convert a QueryResultItem object into a Document object.\n    /**\n     * Converts a QueryResultItem object into a Document object.\n     * @param item The QueryResultItem object to convert.\n     * @returns A Document object.\n     */\n    convertQueryItem(item) {\n        const title = item.DocumentTitle?.Text || \"\";\n        const excerpt = this.getQueryItemExcerpt(item);\n        const pageContent = this.combineText(title, excerpt);\n        const source = item.DocumentURI;\n        const attributes = this.getDocAttributes(item.DocumentAttributes);\n        const metadata = {\n            source,\n            title,\n            excerpt,\n            document_attributes: attributes,\n        };\n        return new documents_1.Document({ pageContent, metadata });\n    }\n    // A method to extract the top-k documents from a QueryCommandOutput object.\n    /**\n     * Extracts the top-k documents from a QueryCommandOutput object.\n     * @param response The QueryCommandOutput object to extract the documents from.\n     * @param pageSize The number of documents to extract.\n     * @returns An array of Document objects.\n     */\n    getQueryDocs(response, pageSize) {\n        if (!response.ResultItems)\n            return [];\n        const { length } = response.ResultItems;\n        const count = length < pageSize ? length : pageSize;\n        return response.ResultItems.slice(0, count).map((item) => this.convertQueryItem(item));\n    }\n    // A method to send a retrieve or query request to Kendra and return the top-k documents.\n    /**\n     * Sends a retrieve or query request to Kendra and returns the top-k\n     * documents.\n     * @param query The query to send to Kendra.\n     * @param topK The number of top documents to return.\n     * @param attributeFilter Optional filter to apply when retrieving documents.\n     * @returns A Promise that resolves to an array of Document objects.\n     */\n    async queryKendra(query, topK, attributeFilter) {\n        const retrieveCommand = new client_kendra_1.RetrieveCommand({\n            IndexId: this.indexId,\n            QueryText: query,\n            PageSize: topK,\n            AttributeFilter: attributeFilter,\n        });\n        const retrieveResponse = await this.kendraClient.send(retrieveCommand);\n        const retriveLength = retrieveResponse.ResultItems?.length;\n        if (retriveLength === 0) {\n            // Retrieve API returned 0 results, call query API\n            const queryCommand = new client_kendra_1.QueryCommand({\n                IndexId: this.indexId,\n                QueryText: query,\n                PageSize: topK,\n                AttributeFilter: attributeFilter,\n            });\n            const queryResponse = await this.kendraClient.send(queryCommand);\n            return this.getQueryDocs(queryResponse, this.topK);\n        }\n        else {\n            return this.getRetrieverDocs(retrieveResponse, this.topK);\n        }\n    }\n    async _getRelevantDocuments(query) {\n        const docs = await this.queryKendra(query, this.topK, this.attributeFilter);\n        return docs;\n    }\n}\nexports.AmazonKendraRetriever = AmazonKendraRetriever;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/retrievers/kendra.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/dist/types.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/aws/dist/types.cjs ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9hd3MvZGlzdC90eXBlcy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vYXdzL2Rpc3QvdHlwZXMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/dist/types.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/aws/index.cjs":
/*!***********************************************!*\
  !*** ./node_modules/@langchain/aws/index.cjs ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/index.cjs */ \"(rsc)/./node_modules/@langchain/aws/dist/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9hd3MvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFBLGtIQUE0QyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9hd3MvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2luZGV4LmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/aws/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/community/dist/llms/ollama.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/community/dist/llms/ollama.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Ollama = void 0;\nconst outputs_1 = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.cjs\");\nconst llms_1 = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.cjs\");\nconst ollama_js_1 = __webpack_require__(/*! ../utils/ollama.cjs */ \"(rsc)/./node_modules/@langchain/community/dist/utils/ollama.cjs\");\n/**\n * @deprecated Ollama LLM has moved to the `@langchain/ollama` package. Please install it using `npm install @langchain/ollama` and import it from there.\n *\n * Class that represents the Ollama language model. It extends the base\n * LLM class and implements the OllamaInput interface.\n * @example\n * ```typescript\n * const ollama = new Ollama({\n *   baseUrl: \"http://api.example.com\",\n *   model: \"llama2\",\n * });\n *\n * // Streaming translation from English to German\n * const stream = await ollama.stream(\n *   `Translate \"I love programming\" into German.`\n * );\n *\n * const chunks = [];\n * for await (const chunk of stream) {\n *   chunks.push(chunk);\n * }\n *\n * console.log(chunks.join(\"\"));\n * ```\n */\nclass Ollama extends llms_1.LLM {\n    static lc_name() {\n        return \"Ollama\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"llama2\"\n        });\n        Object.defineProperty(this, \"baseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"http://localhost:11434\"\n        });\n        Object.defineProperty(this, \"keepAlive\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"5m\"\n        });\n        Object.defineProperty(this, \"embeddingOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"f16KV\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitsAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lowVram\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mainGpu\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostatEta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostatTau\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numBatch\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numCtx\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numGpu\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numGqa\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numKeep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numPredict\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numThread\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"penalizeNewline\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"repeatLastN\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"repeatPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ropeFrequencyBase\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ropeFrequencyScale\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tfsZ\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"typicalP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"useMLock\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"useMMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"vocabOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"format\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.model = fields.model ?? this.model;\n        this.baseUrl = fields.baseUrl?.endsWith(\"/\")\n            ? fields.baseUrl.slice(0, -1)\n            : fields.baseUrl ?? this.baseUrl;\n        this.keepAlive = fields.keepAlive ?? this.keepAlive;\n        this.headers = fields.headers ?? this.headers;\n        this.embeddingOnly = fields.embeddingOnly;\n        this.f16KV = fields.f16KV;\n        this.frequencyPenalty = fields.frequencyPenalty;\n        this.logitsAll = fields.logitsAll;\n        this.lowVram = fields.lowVram;\n        this.mainGpu = fields.mainGpu;\n        this.mirostat = fields.mirostat;\n        this.mirostatEta = fields.mirostatEta;\n        this.mirostatTau = fields.mirostatTau;\n        this.numBatch = fields.numBatch;\n        this.numCtx = fields.numCtx;\n        this.numGpu = fields.numGpu;\n        this.numGqa = fields.numGqa;\n        this.numKeep = fields.numKeep;\n        this.numPredict = fields.numPredict;\n        this.numThread = fields.numThread;\n        this.penalizeNewline = fields.penalizeNewline;\n        this.presencePenalty = fields.presencePenalty;\n        this.repeatLastN = fields.repeatLastN;\n        this.repeatPenalty = fields.repeatPenalty;\n        this.ropeFrequencyBase = fields.ropeFrequencyBase;\n        this.ropeFrequencyScale = fields.ropeFrequencyScale;\n        this.temperature = fields.temperature;\n        this.stop = fields.stop;\n        this.tfsZ = fields.tfsZ;\n        this.topK = fields.topK;\n        this.topP = fields.topP;\n        this.typicalP = fields.typicalP;\n        this.useMLock = fields.useMLock;\n        this.useMMap = fields.useMMap;\n        this.vocabOnly = fields.vocabOnly;\n        this.format = fields.format;\n    }\n    _llmType() {\n        return \"ollama\";\n    }\n    invocationParams(options) {\n        return {\n            model: this.model,\n            format: this.format,\n            keep_alive: this.keepAlive,\n            images: options?.images,\n            options: {\n                embedding_only: this.embeddingOnly,\n                f16_kv: this.f16KV,\n                frequency_penalty: this.frequencyPenalty,\n                logits_all: this.logitsAll,\n                low_vram: this.lowVram,\n                main_gpu: this.mainGpu,\n                mirostat: this.mirostat,\n                mirostat_eta: this.mirostatEta,\n                mirostat_tau: this.mirostatTau,\n                num_batch: this.numBatch,\n                num_ctx: this.numCtx,\n                num_gpu: this.numGpu,\n                num_gqa: this.numGqa,\n                num_keep: this.numKeep,\n                num_predict: this.numPredict,\n                num_thread: this.numThread,\n                penalize_newline: this.penalizeNewline,\n                presence_penalty: this.presencePenalty,\n                repeat_last_n: this.repeatLastN,\n                repeat_penalty: this.repeatPenalty,\n                rope_frequency_base: this.ropeFrequencyBase,\n                rope_frequency_scale: this.ropeFrequencyScale,\n                temperature: this.temperature,\n                stop: options?.stop ?? this.stop,\n                tfs_z: this.tfsZ,\n                top_k: this.topK,\n                top_p: this.topP,\n                typical_p: this.typicalP,\n                use_mlock: this.useMLock,\n                use_mmap: this.useMMap,\n                vocab_only: this.vocabOnly,\n            },\n        };\n    }\n    async *_streamResponseChunks(prompt, options, runManager) {\n        const stream = await this.caller.call(async () => (0, ollama_js_1.createOllamaGenerateStream)(this.baseUrl, { ...this.invocationParams(options), prompt }, {\n            ...options,\n            headers: this.headers,\n        }));\n        for await (const chunk of stream) {\n            if (!chunk.done) {\n                yield new outputs_1.GenerationChunk({\n                    text: chunk.response,\n                    generationInfo: {\n                        ...chunk,\n                        response: undefined,\n                    },\n                });\n                await runManager?.handleLLMNewToken(chunk.response ?? \"\");\n            }\n            else {\n                yield new outputs_1.GenerationChunk({\n                    text: \"\",\n                    generationInfo: {\n                        model: chunk.model,\n                        total_duration: chunk.total_duration,\n                        load_duration: chunk.load_duration,\n                        prompt_eval_count: chunk.prompt_eval_count,\n                        prompt_eval_duration: chunk.prompt_eval_duration,\n                        eval_count: chunk.eval_count,\n                        eval_duration: chunk.eval_duration,\n                    },\n                });\n            }\n        }\n    }\n    /** @ignore */\n    async _call(prompt, options, runManager) {\n        const chunks = [];\n        for await (const chunk of this._streamResponseChunks(prompt, options, runManager)) {\n            chunks.push(chunk.text);\n        }\n        return chunks.join(\"\");\n    }\n}\nexports.Ollama = Ollama;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/community/dist/llms/ollama.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/community/dist/utils/ollama.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/community/dist/utils/ollama.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createOllamaGenerateStream = createOllamaGenerateStream;\nexports.createOllamaChatStream = createOllamaChatStream;\nconst stream_1 = __webpack_require__(/*! @langchain/core/utils/stream */ \"(rsc)/./node_modules/@langchain/core/utils/stream.cjs\");\nasync function* createOllamaStream(url, params, options) {\n    let formattedUrl = url;\n    if (formattedUrl.startsWith(\"http://localhost:\")) {\n        // Node 18 has issues with resolving \"localhost\"\n        // See https://github.com/node-fetch/node-fetch/issues/1624\n        formattedUrl = formattedUrl.replace(\"http://localhost:\", \"http://127.0.0.1:\");\n    }\n    const response = await fetch(formattedUrl, {\n        method: \"POST\",\n        body: JSON.stringify(params),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...options.headers,\n        },\n        signal: options.signal,\n    });\n    if (!response.ok) {\n        let error;\n        const responseText = await response.text();\n        try {\n            const json = JSON.parse(responseText);\n            error = new Error(`Ollama call failed with status code ${response.status}: ${json.error}`);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            error = new Error(`Ollama call failed with status code ${response.status}: ${responseText}`);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.response = response;\n        throw error;\n    }\n    if (!response.body) {\n        throw new Error(\"Could not begin Ollama stream. Please check the given URL and try again.\");\n    }\n    const stream = stream_1.IterableReadableStream.fromReadableStream(response.body);\n    const decoder = new TextDecoder();\n    let extra = \"\";\n    for await (const chunk of stream) {\n        const decoded = extra + decoder.decode(chunk);\n        const lines = decoded.split(\"\\n\");\n        extra = lines.pop() || \"\";\n        for (const line of lines) {\n            try {\n                yield JSON.parse(line);\n            }\n            catch (e) {\n                console.warn(`Received a non-JSON parseable chunk: ${line}`);\n            }\n        }\n    }\n}\nasync function* createOllamaGenerateStream(baseUrl, params, options) {\n    yield* createOllamaStream(`${baseUrl}/api/generate`, params, options);\n}\nasync function* createOllamaChatStream(baseUrl, params, options) {\n    yield* createOllamaStream(`${baseUrl}/api/chat`, params, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb21tdW5pdHkvZGlzdC91dGlscy9vbGxhbWEuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyw4QkFBOEI7QUFDOUIsaUJBQWlCLG1CQUFPLENBQUMsMkZBQThCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsZ0JBQWdCLElBQUksV0FBVztBQUNwRztBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsZ0JBQWdCLElBQUksYUFBYTtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLEtBQUs7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQSxpQ0FBaUMsUUFBUTtBQUN6QyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb21tdW5pdHkvZGlzdC91dGlscy9vbGxhbWEuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVPbGxhbWFHZW5lcmF0ZVN0cmVhbSA9IGNyZWF0ZU9sbGFtYUdlbmVyYXRlU3RyZWFtO1xuZXhwb3J0cy5jcmVhdGVPbGxhbWFDaGF0U3RyZWFtID0gY3JlYXRlT2xsYW1hQ2hhdFN0cmVhbTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcIkBsYW5nY2hhaW4vY29yZS91dGlscy9zdHJlYW1cIik7XG5hc3luYyBmdW5jdGlvbiogY3JlYXRlT2xsYW1hU3RyZWFtKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgbGV0IGZvcm1hdHRlZFVybCA9IHVybDtcbiAgICBpZiAoZm9ybWF0dGVkVXJsLnN0YXJ0c1dpdGgoXCJodHRwOi8vbG9jYWxob3N0OlwiKSkge1xuICAgICAgICAvLyBOb2RlIDE4IGhhcyBpc3N1ZXMgd2l0aCByZXNvbHZpbmcgXCJsb2NhbGhvc3RcIlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMTYyNFxuICAgICAgICBmb3JtYXR0ZWRVcmwgPSBmb3JtYXR0ZWRVcmwucmVwbGFjZShcImh0dHA6Ly9sb2NhbGhvc3Q6XCIsIFwiaHR0cDovLzEyNy4wLjAuMTpcIik7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZm9ybWF0dGVkVXJsLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBzaWduYWw6IG9wdGlvbnMuc2lnbmFsLFxuICAgIH0pO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoYE9sbGFtYSBjYWxsIGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtqc29uLmVycm9yfWApO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoYE9sbGFtYSBjYWxsIGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZVRleHR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmICghcmVzcG9uc2UuYm9keSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgYmVnaW4gT2xsYW1hIHN0cmVhbS4gUGxlYXNlIGNoZWNrIHRoZSBnaXZlbiBVUkwgYW5kIHRyeSBhZ2Fpbi5cIik7XG4gICAgfVxuICAgIGNvbnN0IHN0cmVhbSA9IHN0cmVhbV8xLkl0ZXJhYmxlUmVhZGFibGVTdHJlYW0uZnJvbVJlYWRhYmxlU3RyZWFtKHJlc3BvbnNlLmJvZHkpO1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgICBsZXQgZXh0cmEgPSBcIlwiO1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBleHRyYSArIGRlY29kZXIuZGVjb2RlKGNodW5rKTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBkZWNvZGVkLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBleHRyYSA9IGxpbmVzLnBvcCgpIHx8IFwiXCI7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFJlY2VpdmVkIGEgbm9uLUpTT04gcGFyc2VhYmxlIGNodW5rOiAke2xpbmV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiogY3JlYXRlT2xsYW1hR2VuZXJhdGVTdHJlYW0oYmFzZVVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgeWllbGQqIGNyZWF0ZU9sbGFtYVN0cmVhbShgJHtiYXNlVXJsfS9hcGkvZ2VuZXJhdGVgLCBwYXJhbXMsIG9wdGlvbnMpO1xufVxuYXN5bmMgZnVuY3Rpb24qIGNyZWF0ZU9sbGFtYUNoYXRTdHJlYW0oYmFzZVVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgeWllbGQqIGNyZWF0ZU9sbGFtYVN0cmVhbShgJHtiYXNlVXJsfS9hcGkvY2hhdGAsIHBhcmFtcywgb3B0aW9ucyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/community/dist/utils/ollama.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/community/llms/ollama.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/community/llms/ollama.cjs ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/llms/ollama.cjs */ \"(rsc)/./node_modules/@langchain/community/dist/llms/ollama.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb21tdW5pdHkvbGxtcy9vbGxhbWEuY2pzIiwibWFwcGluZ3MiOiJBQUFBLHFJQUFtRCIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb21tdW5pdHkvbGxtcy9vbGxhbWEuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vZGlzdC9sbG1zL29sbGFtYS5janMnKTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/community/llms/ollama.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/callbacks/base.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/callbacks/base.cjs ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/callbacks/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2NhbGxiYWNrcy9iYXNlLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxzSUFBc0QiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9jYWxsYmFja3MvYmFzZS5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L2NhbGxiYWNrcy9iYXNlLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/callbacks/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/callbacks/manager.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/callbacks/manager.cjs ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/callbacks/manager.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2NhbGxiYWNrcy9tYW5hZ2VyLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSw0SUFBeUQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9jYWxsYmFja3MvbWFuYWdlci5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L2NhbGxiYWNrcy9tYW5hZ2VyLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/callbacks/manager.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/callbacks/promises.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/callbacks/promises.cjs ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/callbacks/promises.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2NhbGxiYWNrcy9wcm9taXNlcy5janMiLCJtYXBwaW5ncyI6IkFBQUEsOElBQTBEIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvY2FsbGJhY2tzL3Byb21pc2VzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/callbacks/promises.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/caches/base.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/caches/base.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InMemoryCache = exports.BaseCache = exports.getCacheKey = void 0;\nexports.deserializeStoredGeneration = deserializeStoredGeneration;\nexports.serializeGeneration = serializeGeneration;\nconst hash_js_1 = __webpack_require__(/*! ../utils/hash.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/hash.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ../messages/utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\");\n/**\n * This cache key should be consistent across all versions of LangChain.\n * It is currently NOT consistent across versions of LangChain.\n *\n * A huge benefit of having a remote cache (like redis) is that you can\n * access the cache from different processes/machines. The allows you to\n * separate concerns and scale horizontally.\n *\n * TODO: Make cache key consistent across versions of LangChain.\n *\n * @deprecated Use `makeDefaultKeyEncoder()` to create a custom key encoder.\n * This function will be removed in a future version.\n */\nconst getCacheKey = (...strings) => (0, hash_js_1.insecureHash)(strings.join(\"_\"));\nexports.getCacheKey = getCacheKey;\nfunction deserializeStoredGeneration(storedGeneration) {\n    if (storedGeneration.message !== undefined) {\n        return {\n            text: storedGeneration.text,\n            message: (0, utils_js_1.mapStoredMessageToChatMessage)(storedGeneration.message),\n        };\n    }\n    else {\n        return { text: storedGeneration.text };\n    }\n}\nfunction serializeGeneration(generation) {\n    const serializedValue = {\n        text: generation.text,\n    };\n    if (generation.message !== undefined) {\n        serializedValue.message = generation.message.toDict();\n    }\n    return serializedValue;\n}\n/**\n * Base class for all caches. All caches should extend this class.\n */\nclass BaseCache {\n    constructor() {\n        // For backwards compatibility, we use a default key encoder\n        // that uses SHA-1 to hash the prompt and LLM key. This will also print a warning\n        // about the security implications of using SHA-1 as a cache key.\n        Object.defineProperty(this, \"keyEncoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: exports.getCacheKey\n        });\n    }\n    /**\n     * Sets a custom key encoder function for the cache.\n     * This function should take a prompt and an LLM key and return a string\n     * that will be used as the cache key.\n     * @param keyEncoderFn The custom key encoder function.\n     */\n    makeDefaultKeyEncoder(keyEncoderFn) {\n        this.keyEncoder = keyEncoderFn;\n    }\n}\nexports.BaseCache = BaseCache;\nconst GLOBAL_MAP = new Map();\n/**\n * A cache for storing LLM generations that stores data in memory.\n */\nclass InMemoryCache extends BaseCache {\n    constructor(map) {\n        super();\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cache = map ?? new Map();\n    }\n    /**\n     * Retrieves data from the cache using a prompt and an LLM key. If the\n     * data is not found, it returns null.\n     * @param prompt The prompt used to find the data.\n     * @param llmKey The LLM key used to find the data.\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\n     */\n    lookup(prompt, llmKey) {\n        return Promise.resolve(this.cache.get(this.keyEncoder(prompt, llmKey)) ?? null);\n    }\n    /**\n     * Updates the cache with new data using a prompt and an LLM key.\n     * @param prompt The prompt used to store the data.\n     * @param llmKey The LLM key used to store the data.\n     * @param value The data to be stored.\n     */\n    async update(prompt, llmKey, value) {\n        this.cache.set(this.keyEncoder(prompt, llmKey), value);\n    }\n    /**\n     * Returns a global instance of InMemoryCache using a predefined global\n     * map as the initial cache.\n     * @returns A global instance of InMemoryCache.\n     */\n    static global() {\n        return new InMemoryCache(GLOBAL_MAP);\n    }\n}\nexports.InMemoryCache = InMemoryCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FjaGVzL2Jhc2UuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLGlCQUFpQixHQUFHLG1CQUFtQjtBQUMvRCxtQ0FBbUM7QUFDbkMsMkJBQTJCO0FBQzNCLGtCQUFrQixtQkFBTyxDQUFDLG1GQUFtQjtBQUM3QyxtQkFBbUIsbUJBQU8sQ0FBQywyRkFBdUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhY2hlcy9iYXNlLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW5NZW1vcnlDYWNoZSA9IGV4cG9ydHMuQmFzZUNhY2hlID0gZXhwb3J0cy5nZXRDYWNoZUtleSA9IHZvaWQgMDtcbmV4cG9ydHMuZGVzZXJpYWxpemVTdG9yZWRHZW5lcmF0aW9uID0gZGVzZXJpYWxpemVTdG9yZWRHZW5lcmF0aW9uO1xuZXhwb3J0cy5zZXJpYWxpemVHZW5lcmF0aW9uID0gc2VyaWFsaXplR2VuZXJhdGlvbjtcbmNvbnN0IGhhc2hfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9oYXNoLmNqc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbWVzc2FnZXMvdXRpbHMuY2pzXCIpO1xuLyoqXG4gKiBUaGlzIGNhY2hlIGtleSBzaG91bGQgYmUgY29uc2lzdGVudCBhY3Jvc3MgYWxsIHZlcnNpb25zIG9mIExhbmdDaGFpbi5cbiAqIEl0IGlzIGN1cnJlbnRseSBOT1QgY29uc2lzdGVudCBhY3Jvc3MgdmVyc2lvbnMgb2YgTGFuZ0NoYWluLlxuICpcbiAqIEEgaHVnZSBiZW5lZml0IG9mIGhhdmluZyBhIHJlbW90ZSBjYWNoZSAobGlrZSByZWRpcykgaXMgdGhhdCB5b3UgY2FuXG4gKiBhY2Nlc3MgdGhlIGNhY2hlIGZyb20gZGlmZmVyZW50IHByb2Nlc3Nlcy9tYWNoaW5lcy4gVGhlIGFsbG93cyB5b3UgdG9cbiAqIHNlcGFyYXRlIGNvbmNlcm5zIGFuZCBzY2FsZSBob3Jpem9udGFsbHkuXG4gKlxuICogVE9ETzogTWFrZSBjYWNoZSBrZXkgY29uc2lzdGVudCBhY3Jvc3MgdmVyc2lvbnMgb2YgTGFuZ0NoYWluLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgbWFrZURlZmF1bHRLZXlFbmNvZGVyKClgIHRvIGNyZWF0ZSBhIGN1c3RvbSBrZXkgZW5jb2Rlci5cbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uXG4gKi9cbmNvbnN0IGdldENhY2hlS2V5ID0gKC4uLnN0cmluZ3MpID0+ICgwLCBoYXNoX2pzXzEuaW5zZWN1cmVIYXNoKShzdHJpbmdzLmpvaW4oXCJfXCIpKTtcbmV4cG9ydHMuZ2V0Q2FjaGVLZXkgPSBnZXRDYWNoZUtleTtcbmZ1bmN0aW9uIGRlc2VyaWFsaXplU3RvcmVkR2VuZXJhdGlvbihzdG9yZWRHZW5lcmF0aW9uKSB7XG4gICAgaWYgKHN0b3JlZEdlbmVyYXRpb24ubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiBzdG9yZWRHZW5lcmF0aW9uLnRleHQsXG4gICAgICAgICAgICBtZXNzYWdlOiAoMCwgdXRpbHNfanNfMS5tYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZSkoc3RvcmVkR2VuZXJhdGlvbi5tZXNzYWdlKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHRleHQ6IHN0b3JlZEdlbmVyYXRpb24udGV4dCB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUdlbmVyYXRpb24oZ2VuZXJhdGlvbikge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRWYWx1ZSA9IHtcbiAgICAgICAgdGV4dDogZ2VuZXJhdGlvbi50ZXh0LFxuICAgIH07XG4gICAgaWYgKGdlbmVyYXRpb24ubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlcmlhbGl6ZWRWYWx1ZS5tZXNzYWdlID0gZ2VuZXJhdGlvbi5tZXNzYWdlLnRvRGljdCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZFZhbHVlO1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgY2FjaGVzLiBBbGwgY2FjaGVzIHNob3VsZCBleHRlbmQgdGhpcyBjbGFzcy5cbiAqL1xuY2xhc3MgQmFzZUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3ZSB1c2UgYSBkZWZhdWx0IGtleSBlbmNvZGVyXG4gICAgICAgIC8vIHRoYXQgdXNlcyBTSEEtMSB0byBoYXNoIHRoZSBwcm9tcHQgYW5kIExMTSBrZXkuIFRoaXMgd2lsbCBhbHNvIHByaW50IGEgd2FybmluZ1xuICAgICAgICAvLyBhYm91dCB0aGUgc2VjdXJpdHkgaW1wbGljYXRpb25zIG9mIHVzaW5nIFNIQS0xIGFzIGEgY2FjaGUga2V5LlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJrZXlFbmNvZGVyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBleHBvcnRzLmdldENhY2hlS2V5XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgY3VzdG9tIGtleSBlbmNvZGVyIGZ1bmN0aW9uIGZvciB0aGUgY2FjaGUuXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgdGFrZSBhIHByb21wdCBhbmQgYW4gTExNIGtleSBhbmQgcmV0dXJuIGEgc3RyaW5nXG4gICAgICogdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcGFyYW0ga2V5RW5jb2RlckZuIFRoZSBjdXN0b20ga2V5IGVuY29kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgbWFrZURlZmF1bHRLZXlFbmNvZGVyKGtleUVuY29kZXJGbikge1xuICAgICAgICB0aGlzLmtleUVuY29kZXIgPSBrZXlFbmNvZGVyRm47XG4gICAgfVxufVxuZXhwb3J0cy5CYXNlQ2FjaGUgPSBCYXNlQ2FjaGU7XG5jb25zdCBHTE9CQUxfTUFQID0gbmV3IE1hcCgpO1xuLyoqXG4gKiBBIGNhY2hlIGZvciBzdG9yaW5nIExMTSBnZW5lcmF0aW9ucyB0aGF0IHN0b3JlcyBkYXRhIGluIG1lbW9yeS5cbiAqL1xuY2xhc3MgSW5NZW1vcnlDYWNoZSBleHRlbmRzIEJhc2VDYWNoZSB7XG4gICAgY29uc3RydWN0b3IobWFwKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNhY2hlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBtYXAgPz8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgZGF0YSBmcm9tIHRoZSBjYWNoZSB1c2luZyBhIHByb21wdCBhbmQgYW4gTExNIGtleS4gSWYgdGhlXG4gICAgICogZGF0YSBpcyBub3QgZm91bmQsIGl0IHJldHVybnMgbnVsbC5cbiAgICAgKiBAcGFyYW0gcHJvbXB0IFRoZSBwcm9tcHQgdXNlZCB0byBmaW5kIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSBsbG1LZXkgVGhlIExMTSBrZXkgdXNlZCB0byBmaW5kIHRoZSBkYXRhLlxuICAgICAqIEByZXR1cm5zIFRoZSBkYXRhIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb21wdCBhbmQgTExNIGtleSwgb3IgbnVsbCBpZiBub3QgZm91bmQuXG4gICAgICovXG4gICAgbG9va3VwKHByb21wdCwgbGxtS2V5KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jYWNoZS5nZXQodGhpcy5rZXlFbmNvZGVyKHByb21wdCwgbGxtS2V5KSkgPz8gbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGNhY2hlIHdpdGggbmV3IGRhdGEgdXNpbmcgYSBwcm9tcHQgYW5kIGFuIExMTSBrZXkuXG4gICAgICogQHBhcmFtIHByb21wdCBUaGUgcHJvbXB0IHVzZWQgdG8gc3RvcmUgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGxsbUtleSBUaGUgTExNIGtleSB1c2VkIHRvIHN0b3JlIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgZGF0YSB0byBiZSBzdG9yZWQuXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlKHByb21wdCwgbGxtS2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmNhY2hlLnNldCh0aGlzLmtleUVuY29kZXIocHJvbXB0LCBsbG1LZXkpLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBnbG9iYWwgaW5zdGFuY2Ugb2YgSW5NZW1vcnlDYWNoZSB1c2luZyBhIHByZWRlZmluZWQgZ2xvYmFsXG4gICAgICogbWFwIGFzIHRoZSBpbml0aWFsIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIEEgZ2xvYmFsIGluc3RhbmNlIG9mIEluTWVtb3J5Q2FjaGUuXG4gICAgICovXG4gICAgc3RhdGljIGdsb2JhbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbk1lbW9yeUNhY2hlKEdMT0JBTF9NQVApO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5NZW1vcnlDYWNoZSA9IEluTWVtb3J5Q2FjaGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/caches/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/base.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/base.cjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isBaseCallbackHandler = exports.BaseCallbackHandler = void 0;\nexports.callbackHandlerPrefersStreaming = callbackHandlerPrefersStreaming;\nconst uuid = __importStar(__webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/index.js\"));\nconst serializable_js_1 = __webpack_require__(/*! ../load/serializable.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs\");\nconst env_js_1 = __webpack_require__(/*! ../utils/env.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs\");\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */\nclass BaseCallbackHandlerMethodsClass {\n}\nfunction callbackHandlerPrefersStreaming(x) {\n    return \"lc_prefer_streaming\" in x && x.lc_prefer_streaming;\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */\nclass BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\"langchain_core\", \"callbacks\", this.name];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    get lc_serializable_keys() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0, serializable_js_1.get_lc_unique_name)(this.constructor),\n        ];\n    }\n    constructor(input) {\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreCustomEvent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"raiseError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0, env_js_1.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") === \"false\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.ignoreCustomEvent =\n                input.ignoreCustomEvent ?? this.ignoreCustomEvent;\n            this.raiseError = input.raiseError ?? this.raiseError;\n            this.awaitHandlers =\n                this.raiseError || (input._awaitHandler ?? this.awaitHandlers);\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return serializable_js_1.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return serializable_js_1.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor() {\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid.v4()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\nexports.BaseCallbackHandler = BaseCallbackHandler;\nconst isBaseCallbackHandler = (x) => {\n    const callbackHandler = x;\n    return (callbackHandler !== undefined &&\n        typeof callbackHandler.copy === \"function\" &&\n        typeof callbackHandler.name === \"string\" &&\n        typeof callbackHandler.awaitHandlers === \"boolean\");\n};\nexports.isBaseCallbackHandler = isBaseCallbackHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/manager.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TraceGroup = exports.CallbackManager = exports.CallbackManagerForToolRun = exports.CallbackManagerForChainRun = exports.CallbackManagerForLLMRun = exports.CallbackManagerForRetrieverRun = exports.BaseRunManager = exports.BaseCallbackManager = void 0;\nexports.parseCallbackConfigArg = parseCallbackConfigArg;\nexports.ensureHandler = ensureHandler;\nexports.traceAsGroup = traceAsGroup;\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/index.js\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.cjs\");\nconst console_js_1 = __webpack_require__(/*! ../tracers/console.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/console.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ../messages/utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\");\nconst env_js_1 = __webpack_require__(/*! ../utils/env.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs\");\nconst tracer_langchain_js_1 = __webpack_require__(/*! ../tracers/tracer_langchain.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.cjs\");\nconst promises_js_1 = __webpack_require__(/*! ./promises.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.cjs\");\nconst callbacks_js_1 = __webpack_require__(/*! ../utils/callbacks.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.cjs\");\nconst base_js_2 = __webpack_require__(/*! ../tracers/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs\");\nconst context_js_1 = __webpack_require__(/*! ../singletons/async_local_storage/context.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.cjs\");\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    }\n    else if (Array.isArray(arg) || \"name\" in arg) {\n        return { callbacks: arg };\n    }\n    else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */\nclass BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([handler]);\n    }\n}\nexports.BaseCallbackManager = BaseCallbackManager;\n/**\n * Base class for run manager in LangChain.\n */\nclass BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId) {\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    get parentRunId() {\n        return this._parentRunId;\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            try {\n                await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n            }\n            catch (err) {\n                const logFunction = handler.raiseError\n                    ? console.error\n                    : console.warn;\n                logFunction(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                if (handler.raiseError) {\n                    throw err;\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    async handleCustomEvent(eventName, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, _runId, _tags, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _metadata) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            try {\n                await handler.handleCustomEvent?.(eventName, data, this.runId, this.tags, this.metadata);\n            }\n            catch (err) {\n                const logFunction = handler.raiseError\n                    ? console.error\n                    : console.warn;\n                logFunction(`Error in handler ${handler.constructor.name}, handleCustomEvent: ${err}`);\n                if (handler.raiseError) {\n                    throw err;\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n}\nexports.BaseRunManager = BaseRunManager;\n/**\n * Manages callbacks for retriever runs.\n */\nclass CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([tag], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreRetriever) {\n                try {\n                    await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreRetriever) {\n                try {\n                    await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                }\n                catch (error) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n}\nexports.CallbackManagerForRetrieverRun = CallbackManagerForRetrieverRun;\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreLLM) {\n                try {\n                    await handler.handleLLMNewToken?.(token, idx ?? { prompt: 0, completion: 0 }, this.runId, this._parentRunId, this.tags, fields);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err, _runId, _parentRunId, _tags, extraParams) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreLLM) {\n                try {\n                    await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags, extraParams);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output, _runId, _parentRunId, _tags, extraParams) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreLLM) {\n                try {\n                    await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags, extraParams);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n}\nexports.CallbackManagerForLLMRun = CallbackManagerForLLMRun;\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([tag], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreChain) {\n                try {\n                    await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreChain) {\n                try {\n                    await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreAgent) {\n                try {\n                    await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreAgent) {\n                try {\n                    await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n}\nexports.CallbackManagerForChainRun = CallbackManagerForChainRun;\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([tag], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreAgent) {\n                try {\n                    await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreAgent) {\n                try {\n                    await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n}\nexports.CallbackManagerForToolRun = CallbackManagerForToolRun;\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(\"What is the answer to {question}?\");\n *\n * // Example of using LLMChain with OpenAI and a simple prompt\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ model: \"gpt-4o-mini\", temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Running the chain with a single question\n * const result = await chain.call({\n *   question: \"What is the airspeed velocity of an unladen swallow?\",\n * });\n * console.log(\"The answer is:\", result);\n * ```\n */\nclass CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId, options) {\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = options?.handlers ?? this.handlers;\n        this.inheritableHandlers =\n            options?.inheritableHandlers ?? this.inheritableHandlers;\n        this.tags = options?.tags ?? this.tags;\n        this.inheritableTags = options?.inheritableTags ?? this.inheritableTags;\n        this.metadata = options?.metadata ?? this.metadata;\n        this.inheritableMetadata =\n            options?.inheritableMetadata ?? this.inheritableMetadata;\n        this._parentRunId = parentRunId;\n    }\n    /**\n     * Gets the parent run ID, if any.\n     *\n     * @returns The parent run ID.\n     */\n    getParentRunId() {\n        return this._parentRunId;\n    }\n    async handleLLMStart(llm, prompts, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(prompts.map(async (prompt, idx) => {\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0, uuid_1.v4)();\n            await Promise.all(this.handlers.map((handler) => {\n                if (handler.ignoreLLM) {\n                    return;\n                }\n                if ((0, base_js_2.isBaseTracer)(handler)) {\n                    // Create and add run to the run map.\n                    // We do this synchronously to avoid race conditions\n                    // when callbacks are backgrounded.\n                    handler._createRunForLLMStart(llm, [prompt], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                }\n                return (0, promises_js_1.consumeCallback)(async () => {\n                    try {\n                        await handler.handleLLMStart?.(llm, [prompt], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                    }\n                    catch (err) {\n                        const logFunction = handler.raiseError\n                            ? console.error\n                            : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }, handler.awaitHandlers);\n            }));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(messages.map(async (messageGroup, idx) => {\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0, uuid_1.v4)();\n            await Promise.all(this.handlers.map((handler) => {\n                if (handler.ignoreLLM) {\n                    return;\n                }\n                if ((0, base_js_2.isBaseTracer)(handler)) {\n                    // Create and add run to the run map.\n                    // We do this synchronously to avoid race conditions\n                    // when callbacks are backgrounded.\n                    handler._createRunForChatModelStart(llm, [messageGroup], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                }\n                return (0, promises_js_1.consumeCallback)(async () => {\n                    try {\n                        if (handler.handleChatModelStart) {\n                            await handler.handleChatModelStart?.(llm, [messageGroup], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        }\n                        else if (handler.handleLLMStart) {\n                            const messageString = (0, utils_js_1.getBufferString)(messageGroup);\n                            await handler.handleLLMStart?.(llm, [messageString], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        }\n                    }\n                    catch (err) {\n                        const logFunction = handler.raiseError\n                            ? console.error\n                            : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }, handler.awaitHandlers);\n            }));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0, uuid_1.v4)(), runType = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler) => {\n            if (handler.ignoreChain) {\n                return;\n            }\n            if ((0, base_js_2.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForChainStart(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n            }\n            return (0, promises_js_1.consumeCallback)(async () => {\n                try {\n                    await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0, uuid_1.v4)(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler) => {\n            if (handler.ignoreAgent) {\n                return;\n            }\n            if ((0, base_js_2.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForToolStart(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n            }\n            return (0, promises_js_1.consumeCallback)(async () => {\n                try {\n                    await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0, uuid_1.v4)(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler) => {\n            if (handler.ignoreRetriever) {\n                return;\n            }\n            if ((0, base_js_2.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForRetrieverStart(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n            }\n            return (0, promises_js_1.consumeCallback)(async () => {\n                try {\n                    await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleCustomEvent(eventName, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, runId, _tags, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _metadata) {\n        await Promise.all(this.handlers.map((handler) => (0, promises_js_1.consumeCallback)(async () => {\n            if (!handler.ignoreCustomEvent) {\n                try {\n                    await handler.handleCustomEvent?.(eventName, data, runId, this.tags, this.metadata);\n                }\n                catch (err) {\n                    const logFunction = handler.raiseError\n                        ? console.error\n                        : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleCustomEvent: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }\n        }, handler.awaitHandlers)));\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler) => _handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler) => _handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers) {\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag) => !tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag) => !tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = { ...this.metadata, ...metadata };\n        if (inherit) {\n            this.inheritableMetadata = { ...this.inheritableMetadata, ...metadata };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)) {\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers) {\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags) {\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([tag], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)) {\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({ [key]: this.metadata[key] }, inheritable);\n        }\n        for (const handler of additionalHandlers) {\n            if (\n            // Prevent multiple copies of console_callback_handler\n            manager.handlers\n                .filter((h) => h.name === \"console_callback_handler\")\n                .some((h) => h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends base_js_1.BaseCallbackHandler {\n            constructor() {\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0, uuid_1.v4)()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        return this._configureSync(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options);\n    }\n    // TODO: Deprecate async method in favor of this one.\n    static _configureSync(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            }\n            else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers)\n                ? localHandlers.map(ensureHandler)\n                : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0, env_js_1.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") === \"true\" ||\n            options?.verbose;\n        const tracingV2Enabled = tracer_langchain_js_1.LangChainTracer.getTraceableRunTree()?.tracingEnabled ||\n            (0, callbacks_js_1.isTracingEnabled)();\n        const tracingEnabled = tracingV2Enabled ||\n            ((0, env_js_1.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled &&\n                !callbackManager.handlers.some((handler) => handler.name === console_js_1.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new console_js_1.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled &&\n                !callbackManager.handlers.some((handler) => handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    const tracerV2 = new tracer_langchain_js_1.LangChainTracer();\n                    callbackManager.addHandler(tracerV2, true);\n                }\n            }\n            if (tracingV2Enabled) {\n                // handoff between langchain and langsmith/traceable\n                // override the parent run ID\n                const implicitRunTree = tracer_langchain_js_1.LangChainTracer.getTraceableRunTree();\n                if (implicitRunTree && callbackManager._parentRunId === undefined) {\n                    callbackManager._parentRunId = implicitRunTree.id;\n                    const tracerV2 = callbackManager.handlers.find((handler) => handler.name === \"langchain_tracer\");\n                    tracerV2?.updateFromRunTree(implicitRunTree);\n                }\n            }\n        }\n        for (const { contextVar, inheritable = true, handlerClass, envVar, } of (0, context_js_1._getConfigureHooks)()) {\n            const createIfNotInContext = envVar && (0, env_js_1.getEnvironmentVariable)(envVar) === \"true\" && handlerClass;\n            let handler;\n            const contextVarValue = contextVar !== undefined ? (0, context_js_1.getContextVariable)(contextVar) : undefined;\n            if (contextVarValue && (0, base_js_1.isBaseCallbackHandler)(contextVarValue)) {\n                handler = contextVarValue;\n            }\n            else if (createIfNotInContext) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                handler = new handlerClass({});\n            }\n            if (handler !== undefined) {\n                if (!callbackManager) {\n                    callbackManager = new CallbackManager();\n                }\n                if (!callbackManager.handlers.some((h) => h.name === handler.name)) {\n                    callbackManager.addHandler(handler, inheritable);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nexports.CallbackManager = CallbackManager;\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return base_js_1.BaseCallbackHandler.fromMethods(handler);\n}\n/**\n * @deprecated Use [`traceable`](https://docs.smith.langchain.com/observability/how_to_guides/tracing/annotate_code)\n * from \"langsmith\" instead.\n */\nclass TraceGroup {\n    constructor(groupName, options) {\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new tracer_langchain_js_1.LangChainTracer(options);\n        const cm = await CallbackManager.configure([cb]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\"langchain\", \"callbacks\", \"groups\", group_name],\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\nexports.TraceGroup = TraceGroup;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\"\n        ? value\n        : { [defaultKey]: value };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({ ...args });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    }\n    catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/promises.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.consumeCallback = exports.awaitAllCallbacks = void 0;\nconst callbacks_js_1 = __webpack_require__(/*! ../singletons/callbacks.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.cjs\");\nObject.defineProperty(exports, \"awaitAllCallbacks\", ({ enumerable: true, get: function () { return callbacks_js_1.awaitAllCallbacks; } }));\nObject.defineProperty(exports, \"consumeCallback\", ({ enumerable: true, get: function () { return callbacks_js_1.consumeCallback; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx5QkFBeUI7QUFDbkQsdUJBQXVCLG1CQUFPLENBQUMsdUdBQTZCO0FBQzVELHFEQUFvRCxFQUFFLHFDQUFxQyw0Q0FBNEMsRUFBQztBQUN4SSxtREFBa0QsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhbGxiYWNrcy9wcm9taXNlcy5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbnN1bWVDYWxsYmFjayA9IGV4cG9ydHMuYXdhaXRBbGxDYWxsYmFja3MgPSB2b2lkIDA7XG5jb25zdCBjYWxsYmFja3NfanNfMSA9IHJlcXVpcmUoXCIuLi9zaW5nbGV0b25zL2NhbGxiYWNrcy5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhd2FpdEFsbENhbGxiYWNrc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2tzX2pzXzEuYXdhaXRBbGxDYWxsYmFja3M7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25zdW1lQ2FsbGJhY2tcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrc19qc18xLmNvbnN1bWVDYWxsYmFjazsgfSB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/document.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/document.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Document = void 0;\n/**\n * Interface for interacting with a document.\n */\nclass Document {\n    constructor(fields) {\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // The ID field is optional at the moment.\n        // It will likely become required in a future major release after\n        // it has been adopted by enough vectorstore implementations.\n        /**\n         * An optional identifier for the document.\n         *\n         * Ideally this should be unique across the document collection and formatted\n         * as a UUID, but this will not be enforced.\n         */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent =\n            fields.pageContent !== undefined ? fields.pageContent.toString() : \"\";\n        this.metadata = fields.metadata ?? {};\n        this.id = fields.id;\n    }\n}\nexports.Document = Document;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2RvY3VtZW50LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2RvY3VtZW50LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRG9jdW1lbnQgPSB2b2lkIDA7XG4vKipcbiAqIEludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIGRvY3VtZW50LlxuICovXG5jbGFzcyBEb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhZ2VDb250ZW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1ldGFkYXRhXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRoZSBJRCBmaWVsZCBpcyBvcHRpb25hbCBhdCB0aGUgbW9tZW50LlxuICAgICAgICAvLyBJdCB3aWxsIGxpa2VseSBiZWNvbWUgcmVxdWlyZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZSBhZnRlclxuICAgICAgICAvLyBpdCBoYXMgYmVlbiBhZG9wdGVkIGJ5IGVub3VnaCB2ZWN0b3JzdG9yZSBpbXBsZW1lbnRhdGlvbnMuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvcHRpb25hbCBpZGVudGlmaWVyIGZvciB0aGUgZG9jdW1lbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIElkZWFsbHkgdGhpcyBzaG91bGQgYmUgdW5pcXVlIGFjcm9zcyB0aGUgZG9jdW1lbnQgY29sbGVjdGlvbiBhbmQgZm9ybWF0dGVkXG4gICAgICAgICAqIGFzIGEgVVVJRCwgYnV0IHRoaXMgd2lsbCBub3QgYmUgZW5mb3JjZWQuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhZ2VDb250ZW50ID1cbiAgICAgICAgICAgIGZpZWxkcy5wYWdlQ29udGVudCAhPT0gdW5kZWZpbmVkID8gZmllbGRzLnBhZ2VDb250ZW50LnRvU3RyaW5nKCkgOiBcIlwiO1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gZmllbGRzLm1ldGFkYXRhID8/IHt9O1xuICAgICAgICB0aGlzLmlkID0gZmllbGRzLmlkO1xuICAgIH1cbn1cbmV4cG9ydHMuRG9jdW1lbnQgPSBEb2N1bWVudDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/document.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/index.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/index.cjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./document.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/documents/document.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./transformers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/documents/transformers.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsd0ZBQWdCO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyxnR0FBb0IiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2RvY3VtZW50cy9pbmRleC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9kb2N1bWVudC5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RyYW5zZm9ybWVycy5janNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/documents/transformers.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/transformers.cjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MappingDocumentTransformer = exports.BaseDocumentTransformer = void 0;\nconst base_js_1 = __webpack_require__(/*! ../runnables/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\n/**\n * Abstract base class for document transformation systems.\n *\n * A document transformation system takes an array of Documents and returns an\n * array of transformed Documents. These arrays do not necessarily have to have\n * the same length.\n *\n * One example of this is a text splitter that splits a large document into\n * many smaller documents.\n */\nclass BaseDocumentTransformer extends base_js_1.Runnable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"documents\", \"transformers\"]\n        });\n    }\n    /**\n     * Method to invoke the document transformation. This method calls the\n     * transformDocuments method with the provided input.\n     * @param input The input documents to be transformed.\n     * @param _options Optional configuration object to customize the behavior of callbacks.\n     * @returns A Promise that resolves to the transformed documents.\n     */\n    invoke(input, _options) {\n        return this.transformDocuments(input);\n    }\n}\nexports.BaseDocumentTransformer = BaseDocumentTransformer;\n/**\n * Class for document transformers that return exactly one transformed document\n * for each input document.\n */\nclass MappingDocumentTransformer extends BaseDocumentTransformer {\n    async transformDocuments(documents) {\n        const newDocuments = [];\n        for (const document of documents) {\n            const transformedDocument = await this._transformDocument(document);\n            newDocuments.push(transformedDocument);\n        }\n        return newDocuments;\n    }\n}\nexports.MappingDocumentTransformer = MappingDocumentTransformer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZG9jdW1lbnRzL3RyYW5zZm9ybWVycy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDLEdBQUcsK0JBQStCO0FBQ3BFLGtCQUFrQixtQkFBTyxDQUFDLDJGQUF1QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2RvY3VtZW50cy90cmFuc2Zvcm1lcnMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXBwaW5nRG9jdW1lbnRUcmFuc2Zvcm1lciA9IGV4cG9ydHMuQmFzZURvY3VtZW50VHJhbnNmb3JtZXIgPSB2b2lkIDA7XG5jb25zdCBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVubmFibGVzL2Jhc2UuY2pzXCIpO1xuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbiBzeXN0ZW1zLlxuICpcbiAqIEEgZG9jdW1lbnQgdHJhbnNmb3JtYXRpb24gc3lzdGVtIHRha2VzIGFuIGFycmF5IG9mIERvY3VtZW50cyBhbmQgcmV0dXJucyBhblxuICogYXJyYXkgb2YgdHJhbnNmb3JtZWQgRG9jdW1lbnRzLiBUaGVzZSBhcnJheXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaGF2ZVxuICogdGhlIHNhbWUgbGVuZ3RoLlxuICpcbiAqIE9uZSBleGFtcGxlIG9mIHRoaXMgaXMgYSB0ZXh0IHNwbGl0dGVyIHRoYXQgc3BsaXRzIGEgbGFyZ2UgZG9jdW1lbnQgaW50b1xuICogbWFueSBzbWFsbGVyIGRvY3VtZW50cy5cbiAqL1xuY2xhc3MgQmFzZURvY3VtZW50VHJhbnNmb3JtZXIgZXh0ZW5kcyBiYXNlX2pzXzEuUnVubmFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwiZG9jdW1lbnRzXCIsIFwidHJhbnNmb3JtZXJzXCJdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gaW52b2tlIHRoZSBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbi4gVGhpcyBtZXRob2QgY2FsbHMgdGhlXG4gICAgICogdHJhbnNmb3JtRG9jdW1lbnRzIG1ldGhvZCB3aXRoIHRoZSBwcm92aWRlZCBpbnB1dC5cbiAgICAgKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IGRvY3VtZW50cyB0byBiZSB0cmFuc2Zvcm1lZC5cbiAgICAgKiBAcGFyYW0gX29wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gY3VzdG9taXplIHRoZSBiZWhhdmlvciBvZiBjYWxsYmFja3MuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zZm9ybWVkIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICBpbnZva2UoaW5wdXQsIF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybURvY3VtZW50cyhpbnB1dCk7XG4gICAgfVxufVxuZXhwb3J0cy5CYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciA9IEJhc2VEb2N1bWVudFRyYW5zZm9ybWVyO1xuLyoqXG4gKiBDbGFzcyBmb3IgZG9jdW1lbnQgdHJhbnNmb3JtZXJzIHRoYXQgcmV0dXJuIGV4YWN0bHkgb25lIHRyYW5zZm9ybWVkIGRvY3VtZW50XG4gKiBmb3IgZWFjaCBpbnB1dCBkb2N1bWVudC5cbiAqL1xuY2xhc3MgTWFwcGluZ0RvY3VtZW50VHJhbnNmb3JtZXIgZXh0ZW5kcyBCYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciB7XG4gICAgYXN5bmMgdHJhbnNmb3JtRG9jdW1lbnRzKGRvY3VtZW50cykge1xuICAgICAgICBjb25zdCBuZXdEb2N1bWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBkb2N1bWVudCBvZiBkb2N1bWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkRG9jdW1lbnQgPSBhd2FpdCB0aGlzLl90cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgICAgICAgICBuZXdEb2N1bWVudHMucHVzaCh0cmFuc2Zvcm1lZERvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RG9jdW1lbnRzO1xuICAgIH1cbn1cbmV4cG9ydHMuTWFwcGluZ0RvY3VtZW50VHJhbnNmb3JtZXIgPSBNYXBwaW5nRG9jdW1lbnRUcmFuc2Zvcm1lcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/documents/transformers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/embeddings.cjs":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/embeddings.cjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Embeddings = void 0;\nconst async_caller_js_1 = __webpack_require__(/*! ./utils/async_caller.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.cjs\");\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */\nclass Embeddings {\n    constructor(params) {\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new async_caller_js_1.AsyncCaller(params ?? {});\n    }\n}\nexports.Embeddings = Embeddings;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZW1iZWRkaW5ncy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLDBCQUEwQixtQkFBTyxDQUFDLGtHQUEwQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsb0VBQW9FO0FBQ3BFO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2VtYmVkZGluZ3MuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbWJlZGRpbmdzID0gdm9pZCAwO1xuY29uc3QgYXN5bmNfY2FsbGVyX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy9hc3luY19jYWxsZXIuY2pzXCIpO1xuLyoqXG4gKiBBbiBhYnN0cmFjdCBjbGFzcyB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgZm9yIGVtYmVkZGluZyBkb2N1bWVudHMgYW5kXG4gKiBxdWVyaWVzIHVzaW5nIExhbmdDaGFpbi5cbiAqL1xuY2xhc3MgRW1iZWRkaW5ncyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXN5bmMgY2FsbGVyIHNob3VsZCBiZSB1c2VkIGJ5IHN1YmNsYXNzZXMgdG8gbWFrZSBhbnkgYXN5bmMgY2FsbHMsXG4gICAgICAgICAqIHdoaWNoIHdpbGwgdGh1cyBiZW5lZml0IGZyb20gdGhlIGNvbmN1cnJlbmN5IGFuZCByZXRyeSBsb2dpYy5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNhbGxlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNhbGxlciA9IG5ldyBhc3luY19jYWxsZXJfanNfMS5Bc3luY0NhbGxlcihwYXJhbXMgPz8ge30pO1xuICAgIH1cbn1cbmV4cG9ydHMuRW1iZWRkaW5ncyA9IEVtYmVkZGluZ3M7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/embeddings.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/errors/index.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/errors/index.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-param-reassign */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addLangChainErrorFields = addLangChainErrorFields;\nfunction addLangChainErrorFields(error, lc_error_code) {\n    error.lc_error_code = lc_error_code;\n    error.message = `${error.message}\\n\\nTroubleshooting URL: https://js.langchain.com/docs/troubleshooting/errors/${lc_error_code}/\\n`;\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXJyb3JzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQSx1QkFBdUIsY0FBYyxnRkFBZ0YsY0FBYztBQUNuSTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9lcnJvcnMvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWRkTGFuZ0NoYWluRXJyb3JGaWVsZHMgPSBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcztcbmZ1bmN0aW9uIGFkZExhbmdDaGFpbkVycm9yRmllbGRzKGVycm9yLCBsY19lcnJvcl9jb2RlKSB7XG4gICAgZXJyb3IubGNfZXJyb3JfY29kZSA9IGxjX2Vycm9yX2NvZGU7XG4gICAgZXJyb3IubWVzc2FnZSA9IGAke2Vycm9yLm1lc3NhZ2V9XFxuXFxuVHJvdWJsZXNob290aW5nIFVSTDogaHR0cHM6Ly9qcy5sYW5nY2hhaW4uY29tL2RvY3MvdHJvdWJsZXNob290aW5nL2Vycm9ycy8ke2xjX2Vycm9yX2NvZGV9L1xcbmA7XG4gICAgcmV0dXJuIGVycm9yO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/errors/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/base.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/base.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseLanguageModel = exports.BaseLangChain = exports.calculateMaxTokens = exports.getModelContextSize = exports.getEmbeddingContextSize = exports.getModelNameForTiktoken = void 0;\nexports.isOpenAITool = isOpenAITool;\nconst base_js_1 = __webpack_require__(/*! ../caches/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/caches/base.cjs\");\nconst prompt_values_js_1 = __webpack_require__(/*! ../prompt_values.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ../messages/utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\");\nconst async_caller_js_1 = __webpack_require__(/*! ../utils/async_caller.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.cjs\");\nconst tiktoken_js_1 = __webpack_require__(/*! ../utils/tiktoken.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.cjs\");\nconst base_js_2 = __webpack_require__(/*! ../runnables/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\n// https://www.npmjs.com/package/js-tiktoken\nconst getModelNameForTiktoken = (modelName) => {\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\n        return \"gpt-3.5-turbo-16k\";\n    }\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\n        return \"gpt-3.5-turbo\";\n    }\n    if (modelName.startsWith(\"gpt-4-32k\")) {\n        return \"gpt-4-32k\";\n    }\n    if (modelName.startsWith(\"gpt-4-\")) {\n        return \"gpt-4\";\n    }\n    if (modelName.startsWith(\"gpt-4o\")) {\n        return \"gpt-4o\";\n    }\n    return modelName;\n};\nexports.getModelNameForTiktoken = getModelNameForTiktoken;\nconst getEmbeddingContextSize = (modelName) => {\n    switch (modelName) {\n        case \"text-embedding-ada-002\":\n            return 8191;\n        default:\n            return 2046;\n    }\n};\nexports.getEmbeddingContextSize = getEmbeddingContextSize;\nconst getModelContextSize = (modelName) => {\n    switch ((0, exports.getModelNameForTiktoken)(modelName)) {\n        case \"gpt-3.5-turbo-16k\":\n            return 16384;\n        case \"gpt-3.5-turbo\":\n            return 4096;\n        case \"gpt-4-32k\":\n            return 32768;\n        case \"gpt-4\":\n            return 8192;\n        case \"text-davinci-003\":\n            return 4097;\n        case \"text-curie-001\":\n            return 2048;\n        case \"text-babbage-001\":\n            return 2048;\n        case \"text-ada-001\":\n            return 2048;\n        case \"code-davinci-002\":\n            return 8000;\n        case \"code-cushman-001\":\n            return 2048;\n        default:\n            return 4097;\n    }\n};\nexports.getModelContextSize = getModelContextSize;\n/**\n * Whether or not the input matches the OpenAI tool definition.\n * @param {unknown} tool The input to check.\n * @returns {boolean} Whether the input is an OpenAI tool definition.\n */\nfunction isOpenAITool(tool) {\n    if (typeof tool !== \"object\" || !tool)\n        return false;\n    if (\"type\" in tool &&\n        tool.type === \"function\" &&\n        \"function\" in tool &&\n        typeof tool.function === \"object\" &&\n        tool.function &&\n        \"name\" in tool.function &&\n        \"parameters\" in tool.function) {\n        return true;\n    }\n    return false;\n}\nconst calculateMaxTokens = async ({ prompt, modelName, }) => {\n    let numTokens;\n    try {\n        numTokens = (await (0, tiktoken_js_1.encodingForModel)((0, exports.getModelNameForTiktoken)(modelName))).encode(prompt).length;\n    }\n    catch (error) {\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\n        // fallback to approximate calculation if tiktoken is not available\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\n        numTokens = Math.ceil(prompt.length / 4);\n    }\n    const maxTokens = (0, exports.getModelContextSize)(modelName);\n    return maxTokens - numTokens;\n};\nexports.calculateMaxTokens = calculateMaxTokens;\nconst getVerbosity = () => false;\n/**\n * Base class for language models, chains, tools.\n */\nclass BaseLangChain extends base_js_2.Runnable {\n    get lc_attributes() {\n        return {\n            callbacks: undefined,\n            verbose: undefined,\n        };\n    }\n    constructor(params) {\n        super(params);\n        /**\n         * Whether to print out response text.\n         */\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verbose = params.verbose ?? getVerbosity();\n        this.callbacks = params.callbacks;\n        this.tags = params.tags ?? [];\n        this.metadata = params.metadata ?? {};\n    }\n}\nexports.BaseLangChain = BaseLangChain;\n/**\n * Base class for language models.\n */\nclass BaseLanguageModel extends BaseLangChain {\n    /**\n     * Keys that the language model accepts as call options.\n     */\n    get callKeys() {\n        return [\"stop\", \"timeout\", \"signal\", \"tags\", \"metadata\", \"callbacks\"];\n    }\n    constructor({ callbacks, callbackManager, ...params }) {\n        const { cache, ...rest } = params;\n        super({\n            callbacks: callbacks ?? callbackManager,\n            ...rest,\n        });\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof cache === \"object\") {\n            this.cache = cache;\n        }\n        else if (cache) {\n            this.cache = base_js_1.InMemoryCache.global();\n        }\n        else {\n            this.cache = undefined;\n        }\n        this.caller = new async_caller_js_1.AsyncCaller(params ?? {});\n    }\n    /**\n     * Get the number of tokens in the content.\n     * @param content The content to get the number of tokens for.\n     * @returns The number of tokens in the content.\n     */\n    async getNumTokens(content) {\n        // Extract text content from MessageContent\n        let textContent;\n        if (typeof content === \"string\") {\n            textContent = content;\n        }\n        else {\n            /**\n             * Content is an array of MessageContentComplex\n             *\n             * ToDo(@christian-bromann): This is a temporary fix to get the number of tokens for the content.\n             * We need to find a better way to do this.\n             * @see https://github.com/langchain-ai/langchainjs/pull/8341#pullrequestreview-2933713116\n             */\n            textContent = content\n                .map((item) => {\n                if (typeof item === \"string\")\n                    return item;\n                if (item.type === \"text\" && \"text\" in item)\n                    return item.text;\n                return \"\";\n            })\n                .join(\"\");\n        }\n        // fallback to approximate calculation if tiktoken is not available\n        let numTokens = Math.ceil(textContent.length / 4);\n        if (!this._encoding) {\n            try {\n                this._encoding = await (0, tiktoken_js_1.encodingForModel)(\"modelName\" in this\n                    ? (0, exports.getModelNameForTiktoken)(this.modelName)\n                    : \"gpt2\");\n            }\n            catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        if (this._encoding) {\n            try {\n                numTokens = this._encoding.encode(textContent).length;\n            }\n            catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        return numTokens;\n    }\n    static _convertInputToPromptValue(input) {\n        if (typeof input === \"string\") {\n            return new prompt_values_js_1.StringPromptValue(input);\n        }\n        else if (Array.isArray(input)) {\n            return new prompt_values_js_1.ChatPromptValue(input.map(utils_js_1.coerceMessageLikeToMessage));\n        }\n        else {\n            return input;\n        }\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */\n    _getSerializedCacheKeyParametersForCall(\n    // TODO: Fix when we remove the RunnableLambda backwards compatibility shim.\n    { config, ...callOptions }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = {\n            ...this._identifyingParams(),\n            ...callOptions,\n            _type: this._llmType(),\n            _model: this._modelType(),\n        };\n        const filteredEntries = Object.entries(params).filter(([_, value]) => value !== undefined);\n        const serializedEntries = filteredEntries\n            .map(([key, value]) => `${key}:${JSON.stringify(value)}`)\n            .sort()\n            .join(\",\");\n        return serializedEntries;\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */\n    serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType(),\n        };\n    }\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */\n    static async deserialize(_data) {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n}\nexports.BaseLanguageModel = BaseLanguageModel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.cjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/chat_models.cjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimpleChatModel = exports.BaseChatModel = void 0;\nexports.createChatMessageChunkEncoderStream = createChatMessageChunkEncoderStream;\nconst index_js_1 = __webpack_require__(/*! ../messages/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.cjs\");\nconst outputs_js_1 = __webpack_require__(/*! ../outputs.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.cjs\");\nconst manager_js_1 = __webpack_require__(/*! ../callbacks/manager.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\");\nconst base_js_2 = __webpack_require__(/*! ../runnables/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nconst passthrough_js_1 = __webpack_require__(/*! ../runnables/passthrough.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.cjs\");\nconst zod_js_1 = __webpack_require__(/*! ../utils/types/zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\");\nconst base_js_3 = __webpack_require__(/*! ../callbacks/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.cjs\");\nconst json_schema_js_1 = __webpack_require__(/*! ../utils/json_schema.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs\");\n/**\n * Creates a transform stream for encoding chat message chunks.\n * @deprecated Use {@link BytesOutputParser} instead\n * @returns A TransformStream instance that encodes chat message chunks.\n */\nfunction createChatMessageChunkEncoderStream() {\n    const textEncoder = new TextEncoder();\n    return new TransformStream({\n        transform(chunk, controller) {\n            controller.enqueue(textEncoder.encode(typeof chunk.content === \"string\"\n                ? chunk.content\n                : JSON.stringify(chunk.content)));\n        },\n    });\n}\nfunction _formatForTracing(messages) {\n    const messagesToTrace = [];\n    for (const message of messages) {\n        let messageToTrace = message;\n        if (Array.isArray(message.content)) {\n            for (let idx = 0; idx < message.content.length; idx++) {\n                const block = message.content[idx];\n                if ((0, index_js_1.isURLContentBlock)(block) || (0, index_js_1.isBase64ContentBlock)(block)) {\n                    if (messageToTrace === message) {\n                        // Also shallow-copy content\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        messageToTrace = new message.constructor({\n                            ...messageToTrace,\n                            content: [\n                                ...message.content.slice(0, idx),\n                                (0, index_js_1.convertToOpenAIImageBlock)(block),\n                                ...message.content.slice(idx + 1),\n                            ],\n                        });\n                    }\n                }\n            }\n        }\n        messagesToTrace.push(messageToTrace);\n    }\n    return messagesToTrace;\n}\n/**\n * Base class for chat models. It extends the BaseLanguageModel class and\n * provides methods for generating chat based on input messages.\n */\nclass BaseChatModel extends base_js_1.BaseLanguageModel {\n    constructor(fields) {\n        super(fields);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"chat_models\", this._llmType()]\n        });\n        Object.defineProperty(this, \"disableStreaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    _separateRunnableConfigFromCallOptionsCompat(options) {\n        // For backwards compat, keep `signal` in both runnableConfig and callOptions\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        callOptions.signal = runnableConfig.signal;\n        return [runnableConfig, callOptions];\n    }\n    /**\n     * Invokes the chat model with a single input.\n     * @param input The input for the language model.\n     * @param options The call options.\n     * @returns A Promise that resolves to a BaseMessageChunk.\n     */\n    async invoke(input, options) {\n        const promptValue = BaseChatModel._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([promptValue], options, options?.callbacks);\n        const chatGeneration = result.generations[0][0];\n        // TODO: Remove cast after figuring out inheritance\n        return chatGeneration.message;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_messages, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks ===\n            BaseChatModel.prototype._streamResponseChunks ||\n            this.disableStreaming) {\n            yield this.invoke(input, options);\n        }\n        else {\n            const prompt = BaseChatModel._convertInputToPromptValue(input);\n            const messages = prompt.toChatMessages();\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(options);\n            const inheritableMetadata = {\n                ...runnableConfig.metadata,\n                ...this.getLsParams(callOptions),\n            };\n            const callbackManager_ = await manager_js_1.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, inheritableMetadata, this.metadata, { verbose: this.verbose });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1,\n            };\n            const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), [_formatForTracing(messages)], runnableConfig.runId, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generationChunk;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let llmOutput;\n            try {\n                for await (const chunk of this._streamResponseChunks(messages, callOptions, runManagers?.[0])) {\n                    if (chunk.message.id == null) {\n                        const runId = runManagers?.at(0)?.runId;\n                        if (runId != null)\n                            chunk.message._updateId(`run-${runId}`);\n                    }\n                    chunk.message.response_metadata = {\n                        ...chunk.generationInfo,\n                        ...chunk.message.response_metadata,\n                    };\n                    yield chunk.message;\n                    if (!generationChunk) {\n                        generationChunk = chunk;\n                    }\n                    else {\n                        generationChunk = generationChunk.concat(chunk);\n                    }\n                    if ((0, index_js_1.isAIMessageChunk)(chunk.message) &&\n                        chunk.message.usage_metadata !== undefined) {\n                        llmOutput = {\n                            tokenUsage: {\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\n                                totalTokens: chunk.message.usage_metadata.total_tokens,\n                            },\n                        };\n                    }\n                }\n            }\n            catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMEnd({\n                // TODO: Remove cast after figuring out inheritance\n                generations: [[generationChunk]],\n                llmOutput,\n            })));\n        }\n    }\n    getLsParams(options) {\n        const providerName = this.getName().startsWith(\"Chat\")\n            ? this.getName().replace(\"Chat\", \"\")\n            : this.getName();\n        return {\n            ls_model_type: \"chat\",\n            ls_stop: options.stop,\n            ls_provider: providerName,\n        };\n    }\n    /** @ignore */\n    async _generateUncached(messages, parsedOptions, handledOptions, startedRunManagers) {\n        const baseMessages = messages.map((messageList) => messageList.map(index_js_1.coerceMessageLikeToMessage));\n        let runManagers;\n        if (startedRunManagers !== undefined &&\n            startedRunManagers.length === baseMessages.length) {\n            runManagers = startedRunManagers;\n        }\n        else {\n            const inheritableMetadata = {\n                ...handledOptions.metadata,\n                ...this.getLsParams(parsedOptions),\n            };\n            // create callback manager and start run\n            const callbackManager_ = await manager_js_1.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, { verbose: this.verbose });\n            const extra = {\n                options: parsedOptions,\n                invocation_params: this?.invocationParams(parsedOptions),\n                batch_size: 1,\n            };\n            runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages.map(_formatForTracing), handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        }\n        const generations = [];\n        const llmOutputs = [];\n        // Even if stream is not explicitly called, check if model is implicitly\n        // called from streamEvents() or streamLog() to get all streamed events.\n        // Bail out if _streamResponseChunks not overridden\n        const hasStreamingHandler = !!runManagers?.[0].handlers.find(base_js_3.callbackHandlerPrefersStreaming);\n        if (hasStreamingHandler &&\n            !this.disableStreaming &&\n            baseMessages.length === 1 &&\n            this._streamResponseChunks !==\n                BaseChatModel.prototype._streamResponseChunks) {\n            try {\n                const stream = await this._streamResponseChunks(baseMessages[0], parsedOptions, runManagers?.[0]);\n                let aggregated;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let llmOutput;\n                for await (const chunk of stream) {\n                    if (chunk.message.id == null) {\n                        const runId = runManagers?.at(0)?.runId;\n                        if (runId != null)\n                            chunk.message._updateId(`run-${runId}`);\n                    }\n                    if (aggregated === undefined) {\n                        aggregated = chunk;\n                    }\n                    else {\n                        aggregated = (0, stream_js_1.concat)(aggregated, chunk);\n                    }\n                    if ((0, index_js_1.isAIMessageChunk)(chunk.message) &&\n                        chunk.message.usage_metadata !== undefined) {\n                        llmOutput = {\n                            tokenUsage: {\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\n                                totalTokens: chunk.message.usage_metadata.total_tokens,\n                            },\n                        };\n                    }\n                }\n                if (aggregated === undefined) {\n                    throw new Error(\"Received empty response from chat model call.\");\n                }\n                generations.push([aggregated]);\n                await runManagers?.[0].handleLLMEnd({\n                    generations,\n                    llmOutput,\n                });\n            }\n            catch (e) {\n                await runManagers?.[0].handleLLMError(e);\n                throw e;\n            }\n        }\n        else {\n            // generate results\n            const results = await Promise.allSettled(baseMessages.map((messageList, i) => this._generate(messageList, { ...parsedOptions, promptIndex: i }, runManagers?.[i])));\n            // handle results\n            await Promise.all(results.map(async (pResult, i) => {\n                if (pResult.status === \"fulfilled\") {\n                    const result = pResult.value;\n                    for (const generation of result.generations) {\n                        if (generation.message.id == null) {\n                            const runId = runManagers?.at(0)?.runId;\n                            if (runId != null)\n                                generation.message._updateId(`run-${runId}`);\n                        }\n                        generation.message.response_metadata = {\n                            ...generation.generationInfo,\n                            ...generation.message.response_metadata,\n                        };\n                    }\n                    if (result.generations.length === 1) {\n                        result.generations[0].message.response_metadata = {\n                            ...result.llmOutput,\n                            ...result.generations[0].message.response_metadata,\n                        };\n                    }\n                    generations[i] = result.generations;\n                    llmOutputs[i] = result.llmOutput;\n                    return runManagers?.[i]?.handleLLMEnd({\n                        generations: [result.generations],\n                        llmOutput: result.llmOutput,\n                    });\n                }\n                else {\n                    // status === \"rejected\"\n                    await runManagers?.[i]?.handleLLMError(pResult.reason);\n                    return Promise.reject(pResult.reason);\n                }\n            }));\n        }\n        // create combined output\n        const output = {\n            generations,\n            llmOutput: llmOutputs.length\n                ? this._combineLLMOutput?.(...llmOutputs)\n                : undefined,\n        };\n        Object.defineProperty(output, outputs_js_1.RUN_KEY, {\n            value: runManagers\n                ? { runIds: runManagers?.map((manager) => manager.runId) }\n                : undefined,\n            configurable: true,\n        });\n        return output;\n    }\n    async _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions, }) {\n        const baseMessages = messages.map((messageList) => messageList.map(index_js_1.coerceMessageLikeToMessage));\n        const inheritableMetadata = {\n            ...handledOptions.metadata,\n            ...this.getLsParams(parsedOptions),\n        };\n        // create callback manager and start run\n        const callbackManager_ = await manager_js_1.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, { verbose: this.verbose });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1,\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages.map(_formatForTracing), handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(baseMessages.map(async (baseMessage, index) => {\n            // Join all content into one string for the prompt index\n            const prompt = BaseChatModel._convertInputToPromptValue(baseMessage).toString();\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results\n            .map((result, index) => ({ result, runManager: runManagers?.[index] }))\n            .filter(({ result }) => (result.status === \"fulfilled\" && result.value != null) ||\n            result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i) => {\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result.map((result) => {\n                    if (\"message\" in result &&\n                        (0, index_js_1.isBaseMessage)(result.message) &&\n                        (0, index_js_1.isAIMessage)(result.message)) {\n                        // eslint-disable-next-line no-param-reassign\n                        result.message.usage_metadata = {\n                            input_tokens: 0,\n                            output_tokens: 0,\n                            total_tokens: 0,\n                        };\n                    }\n                    // eslint-disable-next-line no-param-reassign\n                    result.generationInfo = {\n                        ...result.generationInfo,\n                        tokenUsage: {},\n                    };\n                    return result;\n                });\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [result],\n                }, undefined, undefined, undefined, {\n                    cached: true,\n                });\n            }\n            else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason, undefined, undefined, undefined, {\n                    cached: true,\n                });\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices,\n            startedRunManagers: runManagers,\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, outputs_js_1.RUN_KEY, {\n            value: runManagers\n                ? { runIds: runManagers?.map((manager) => manager.runId) }\n                : undefined,\n            configurable: true,\n        });\n        return output;\n    }\n    /**\n     * Generates chat based on the input messages.\n     * @param messages An array of arrays of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */\n    async generate(messages, options, callbacks) {\n        // parse call options\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = { stop: options };\n        }\n        else {\n            parsedOptions = options;\n        }\n        const baseMessages = messages.map((messageList) => messageList.map(index_js_1.coerceMessageLikeToMessage));\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(baseMessages, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices, startedRunManagers } = await this._generateCached({\n            messages: baseMessages,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig,\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i) => baseMessages[i]), callOptions, runnableConfig, startedRunManagers !== undefined\n                ? missingPromptIndices.map((i) => startedRunManagers?.[i])\n                : undefined);\n            await Promise.all(results.generations.map(async (generation, index) => {\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                // Join all content into one string for the prompt index\n                const prompt = BaseChatModel._convertInputToPromptValue(baseMessages[promptIndex]).toString();\n                return cache.update(prompt, llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return { generations, llmOutput };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _modelType() {\n        return \"base_chat_model\";\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */\n    serialize() {\n        return {\n            ...this.invocationParams(),\n            _type: this._llmType(),\n            _model: this._modelType(),\n        };\n    }\n    /**\n     * Generates a prompt based on the input prompt values.\n     * @param promptValues An array of BasePromptValue instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */\n    async generatePrompt(promptValues, options, callbacks) {\n        const promptMessages = promptValues.map((promptValue) => promptValue.toChatMessages());\n        return this.generate(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */\n    async call(messages, options, callbacks) {\n        const result = await this.generate([messages.map(index_js_1.coerceMessageLikeToMessage)], options, callbacks);\n        const generations = result.generations;\n        return generations[0][0].message;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model with a prompt value.\n     * @param promptValue The value of the prompt.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */\n    async callPrompt(promptValue, options, callbacks) {\n        const promptMessages = promptValue.toChatMessages();\n        return this.call(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on the input messages.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */\n    async predictMessages(messages, options, callbacks) {\n        return this.call(messages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on a text input.\n     * @param text The text input.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a string.\n     */\n    async predict(text, options, callbacks) {\n        const message = new index_js_1.HumanMessage(text);\n        const result = await this.call([message], options, callbacks);\n        if (typeof result.content !== \"string\") {\n            throw new Error(\"Cannot use predict when output is not a string.\");\n        }\n        return result.content;\n    }\n    withStructuredOutput(outputSchema, config) {\n        if (typeof this.bindTools !== \"function\") {\n            throw new Error(`Chat model must implement \".bindTools()\" to use withStructuredOutput.`);\n        }\n        if (config?.strict) {\n            throw new Error(`\"strict\" mode is not supported for this model by default.`);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const schema = outputSchema;\n        const name = config?.name;\n        const description = (0, zod_js_1.getSchemaDescription)(schema) ?? \"A function available to call.\";\n        const method = config?.method;\n        const includeRaw = config?.includeRaw;\n        if (method === \"jsonMode\") {\n            throw new Error(`Base withStructuredOutput implementation only supports \"functionCalling\" as a method.`);\n        }\n        let functionName = name ?? \"extract\";\n        let tools;\n        if ((0, zod_js_1.isInteropZodSchema)(schema)) {\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: (0, json_schema_js_1.toJsonSchema)(schema),\n                    },\n                },\n            ];\n        }\n        else {\n            if (\"name\" in schema) {\n                functionName = schema.name;\n            }\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: schema,\n                    },\n                },\n            ];\n        }\n        const llm = this.bindTools(tools);\n        const outputParser = base_js_2.RunnableLambda.from((input) => {\n            if (!input.tool_calls || input.tool_calls.length === 0) {\n                throw new Error(\"No tool calls found in the response.\");\n            }\n            const toolCall = input.tool_calls.find((tc) => tc.name === functionName);\n            if (!toolCall) {\n                throw new Error(`No tool call found with name ${functionName}.`);\n            }\n            return toolCall.args;\n        });\n        if (!includeRaw) {\n            return llm.pipe(outputParser).withConfig({\n                runName: \"StructuredOutput\",\n            });\n        }\n        const parserAssign = passthrough_js_1.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config) => outputParser.invoke(input.raw, config),\n        });\n        const parserNone = passthrough_js_1.RunnablePassthrough.assign({\n            parsed: () => null,\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [parserNone],\n        });\n        return base_js_2.RunnableSequence.from([\n            {\n                raw: llm,\n            },\n            parsedWithFallback,\n        ]).withConfig({\n            runName: \"StructuredOutputRunnable\",\n        });\n    }\n}\nexports.BaseChatModel = BaseChatModel;\n/**\n * An abstract class that extends BaseChatModel and provides a simple\n * implementation of _generate.\n */\nclass SimpleChatModel extends BaseChatModel {\n    async _generate(messages, options, runManager) {\n        const text = await this._call(messages, options, runManager);\n        const message = new index_js_1.AIMessage(text);\n        if (typeof message.content !== \"string\") {\n            throw new Error(\"Cannot generate with a simple chat model when output is not a string.\");\n        }\n        return {\n            generations: [\n                {\n                    text: message.content,\n                    message,\n                },\n            ],\n        };\n    }\n}\nexports.SimpleChatModel = SimpleChatModel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/llms.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/llms.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LLM = exports.BaseLLM = void 0;\nconst index_js_1 = __webpack_require__(/*! ../messages/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.cjs\");\nconst outputs_js_1 = __webpack_require__(/*! ../outputs.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.cjs\");\nconst manager_js_1 = __webpack_require__(/*! ../callbacks/manager.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nconst base_js_2 = __webpack_require__(/*! ../callbacks/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.cjs\");\n/**\n * LLM Wrapper. Takes in a prompt (or prompts) and returns a string.\n */\nclass BaseLLM extends base_js_1.BaseLanguageModel {\n    constructor({ concurrency, ...rest }) {\n        super(concurrency ? { maxConcurrency: concurrency, ...rest } : rest);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"llms\", this._llmType()]\n        });\n    }\n    /**\n     * This method takes an input and options, and returns a string. It\n     * converts the input to a prompt value and generates a result based on\n     * the prompt.\n     * @param input Input for the LLM.\n     * @param options Options for the LLM call.\n     * @returns A string result based on the prompt.\n     */\n    async invoke(input, options) {\n        const promptValue = BaseLLM._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([promptValue], options, options?.callbacks);\n        return result.generations[0][0].text;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_input, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    _separateRunnableConfigFromCallOptionsCompat(options) {\n        // For backwards compat, keep `signal` in both runnableConfig and callOptions\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        callOptions.signal = runnableConfig.signal;\n        return [runnableConfig, callOptions];\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks === BaseLLM.prototype._streamResponseChunks) {\n            yield this.invoke(input, options);\n        }\n        else {\n            const prompt = BaseLLM._convertInputToPromptValue(input);\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(options);\n            const callbackManager_ = await manager_js_1.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, runnableConfig.metadata, this.metadata, { verbose: this.verbose });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1,\n            };\n            const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), [prompt.toString()], runnableConfig.runId, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generation = new outputs_js_1.GenerationChunk({\n                text: \"\",\n            });\n            try {\n                for await (const chunk of this._streamResponseChunks(prompt.toString(), callOptions, runManagers?.[0])) {\n                    if (!generation) {\n                        generation = chunk;\n                    }\n                    else {\n                        generation = generation.concat(chunk);\n                    }\n                    if (typeof chunk.text === \"string\") {\n                        yield chunk.text;\n                    }\n                }\n            }\n            catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMEnd({\n                generations: [[generation]],\n            })));\n        }\n    }\n    /**\n     * This method takes prompt values, options, and callbacks, and generates\n     * a result based on the prompts.\n     * @param promptValues Prompt values for the LLM.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns An LLMResult based on the prompts.\n     */\n    async generatePrompt(promptValues, options, callbacks) {\n        const prompts = promptValues.map((promptValue) => promptValue.toString());\n        return this.generate(prompts, options, callbacks);\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _flattenLLMResult(llmResult) {\n        const llmResults = [];\n        for (let i = 0; i < llmResult.generations.length; i += 1) {\n            const genList = llmResult.generations[i];\n            if (i === 0) {\n                llmResults.push({\n                    generations: [genList],\n                    llmOutput: llmResult.llmOutput,\n                });\n            }\n            else {\n                const llmOutput = llmResult.llmOutput\n                    ? { ...llmResult.llmOutput, tokenUsage: {} }\n                    : undefined;\n                llmResults.push({\n                    generations: [genList],\n                    llmOutput,\n                });\n            }\n        }\n        return llmResults;\n    }\n    /** @ignore */\n    async _generateUncached(prompts, parsedOptions, handledOptions, startedRunManagers) {\n        let runManagers;\n        if (startedRunManagers !== undefined &&\n            startedRunManagers.length === prompts.length) {\n            runManagers = startedRunManagers;\n        }\n        else {\n            const callbackManager_ = await manager_js_1.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, { verbose: this.verbose });\n            const extra = {\n                options: parsedOptions,\n                invocation_params: this?.invocationParams(parsedOptions),\n                batch_size: prompts.length,\n            };\n            runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), prompts, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions?.runName);\n        }\n        // Even if stream is not explicitly called, check if model is implicitly\n        // called from streamEvents() or streamLog() to get all streamed events.\n        // Bail out if _streamResponseChunks not overridden\n        const hasStreamingHandler = !!runManagers?.[0].handlers.find(base_js_2.callbackHandlerPrefersStreaming);\n        let output;\n        if (hasStreamingHandler &&\n            prompts.length === 1 &&\n            this._streamResponseChunks !== BaseLLM.prototype._streamResponseChunks) {\n            try {\n                const stream = await this._streamResponseChunks(prompts[0], parsedOptions, runManagers?.[0]);\n                let aggregated;\n                for await (const chunk of stream) {\n                    if (aggregated === undefined) {\n                        aggregated = chunk;\n                    }\n                    else {\n                        aggregated = (0, stream_js_1.concat)(aggregated, chunk);\n                    }\n                }\n                if (aggregated === undefined) {\n                    throw new Error(\"Received empty response from chat model call.\");\n                }\n                output = { generations: [[aggregated]], llmOutput: {} };\n                await runManagers?.[0].handleLLMEnd(output);\n            }\n            catch (e) {\n                await runManagers?.[0].handleLLMError(e);\n                throw e;\n            }\n        }\n        else {\n            try {\n                output = await this._generate(prompts, parsedOptions, runManagers?.[0]);\n            }\n            catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMError(err)));\n                throw err;\n            }\n            const flattenedOutputs = this._flattenLLMResult(output);\n            await Promise.all((runManagers ?? []).map((runManager, i) => runManager?.handleLLMEnd(flattenedOutputs[i])));\n        }\n        const runIds = runManagers?.map((manager) => manager.runId) || undefined;\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, outputs_js_1.RUN_KEY, {\n            value: runIds ? { runIds } : undefined,\n            configurable: true,\n        });\n        return output;\n    }\n    async _generateCached({ prompts, cache, llmStringKey, parsedOptions, handledOptions, runId, }) {\n        const callbackManager_ = await manager_js_1.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, { verbose: this.verbose });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: prompts.length,\n        };\n        const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), prompts, runId, undefined, extra, undefined, undefined, handledOptions?.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(prompts.map(async (prompt, index) => {\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results\n            .map((result, index) => ({ result, runManager: runManagers?.[index] }))\n            .filter(({ result }) => (result.status === \"fulfilled\" && result.value != null) ||\n            result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i) => {\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result.map((result) => {\n                    // eslint-disable-next-line no-param-reassign\n                    result.generationInfo = {\n                        ...result.generationInfo,\n                        tokenUsage: {},\n                    };\n                    return result;\n                });\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [result],\n                }, undefined, undefined, undefined, {\n                    cached: true,\n                });\n            }\n            else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason, undefined, undefined, undefined, {\n                    cached: true,\n                });\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices,\n            startedRunManagers: runManagers,\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, outputs_js_1.RUN_KEY, {\n            value: runManagers\n                ? { runIds: runManagers?.map((manager) => manager.runId) }\n                : undefined,\n            configurable: true,\n        });\n        return output;\n    }\n    /**\n     * Run the LLM on the given prompts and input, handling caching.\n     */\n    async generate(prompts, options, callbacks) {\n        if (!Array.isArray(prompts)) {\n            throw new Error(\"Argument 'prompts' is expected to be a string[]\");\n        }\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = { stop: options };\n        }\n        else {\n            parsedOptions = options;\n        }\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(prompts, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices, startedRunManagers } = await this._generateCached({\n            prompts,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig,\n            runId: runnableConfig.runId,\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i) => prompts[i]), callOptions, runnableConfig, startedRunManagers !== undefined\n                ? missingPromptIndices.map((i) => startedRunManagers?.[i])\n                : undefined);\n            await Promise.all(results.generations.map(async (generation, index) => {\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                return cache.update(prompts[promptIndex], llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return { generations, llmOutput };\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     * Convenience wrapper for {@link generate} that takes in a single string prompt and returns a single string output.\n     */\n    async call(prompt, options, callbacks) {\n        const { generations } = await this.generate([prompt], options, callbacks);\n        return generations[0][0].text;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * This method is similar to `call`, but it's used for making predictions\n     * based on the input text.\n     * @param text Input text for the prediction.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns A prediction based on the input text.\n     */\n    async predict(text, options, callbacks) {\n        return this.call(text, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * This method takes a list of messages, options, and callbacks, and\n     * returns a predicted message.\n     * @param messages A list of messages for the prediction.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns A predicted message based on the list of messages.\n     */\n    async predictMessages(messages, options, callbacks) {\n        const text = (0, index_js_1.getBufferString)(messages);\n        const prediction = await this.call(text, options, callbacks);\n        return new index_js_1.AIMessage(prediction);\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */\n    serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType(),\n        };\n    }\n    _modelType() {\n        return \"base_llm\";\n    }\n}\nexports.BaseLLM = BaseLLM;\n/**\n * LLM class that provides a simpler interface to subclass than {@link BaseLLM}.\n *\n * Requires only implementing a simpler {@link _call} method instead of {@link _generate}.\n *\n * @augments BaseLLM\n */\nclass LLM extends BaseLLM {\n    async _generate(prompts, options, runManager) {\n        const generations = await Promise.all(prompts.map((prompt, promptIndex) => this._call(prompt, { ...options, promptIndex }, runManager).then((text) => [{ text }])));\n        return { generations };\n    }\n}\nexports.LLM = LLM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/llms.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/map_keys.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/map_keys.cjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.keyToJson = keyToJson;\nexports.keyFromJson = keyFromJson;\nexports.mapKeys = mapKeys;\nconst decamelize_1 = __importDefault(__webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\"));\nconst camelcase_1 = __importDefault(__webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\"));\nfunction keyToJson(key, map) {\n    return map?.[key] || (0, decamelize_1.default)(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || (0, camelcase_1.default)(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for (const key in fields) {\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9tYXBfa2V5cy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsbUJBQW1CO0FBQ25CLGVBQWU7QUFDZixxQ0FBcUMsbUJBQU8sQ0FBQyw0REFBWTtBQUN6RCxvQ0FBb0MsbUJBQU8sQ0FBQywwREFBVztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2xvYWQvbWFwX2tleXMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5rZXlUb0pzb24gPSBrZXlUb0pzb247XG5leHBvcnRzLmtleUZyb21Kc29uID0ga2V5RnJvbUpzb247XG5leHBvcnRzLm1hcEtleXMgPSBtYXBLZXlzO1xuY29uc3QgZGVjYW1lbGl6ZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWNhbWVsaXplXCIpKTtcbmNvbnN0IGNhbWVsY2FzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjYW1lbGNhc2VcIikpO1xuZnVuY3Rpb24ga2V5VG9Kc29uKGtleSwgbWFwKSB7XG4gICAgcmV0dXJuIG1hcD8uW2tleV0gfHwgKDAsIGRlY2FtZWxpemVfMS5kZWZhdWx0KShrZXkpO1xufVxuZnVuY3Rpb24ga2V5RnJvbUpzb24oa2V5LCBtYXApIHtcbiAgICByZXR1cm4gbWFwPy5ba2V5XSB8fCAoMCwgY2FtZWxjYXNlXzEuZGVmYXVsdCkoa2V5KTtcbn1cbmZ1bmN0aW9uIG1hcEtleXMoZmllbGRzLCBtYXBwZXIsIG1hcCkge1xuICAgIGNvbnN0IG1hcHBlZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZpZWxkcykge1xuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihmaWVsZHMsIGtleSkpIHtcbiAgICAgICAgICAgIG1hcHBlZFttYXBwZXIoa2V5LCBtYXApXSA9IGZpZWxkc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQ7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/map_keys.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/serializable.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Serializable = void 0;\nexports.get_lc_unique_name = get_lc_unique_name;\nconst map_keys_js_1 = __webpack_require__(/*! ./map_keys.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/load/map_keys.cjs\");\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [...obj] : { ...obj };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)) {\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()) {\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [secretId],\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */\nfunction get_lc_unique_name(\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" &&\n        (typeof parentClass.lc_name !== \"function\" ||\n            serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    }\n    else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */\n    static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */\n    get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor),\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */\n    get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */\n    get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * A manual list of keys that should be serialized.\n     * If not overridden, all fields passed into the constructor will be serialized.\n     */\n    get lc_serializable_keys() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args) {\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (this.lc_serializable_keys !== undefined) {\n            this.lc_kwargs = Object.fromEntries(Object.entries(kwargs || {}).filter(([key]) => this.lc_serializable_keys?.includes(key)));\n        }\n        else {\n            this.lc_kwargs = kwargs ?? {};\n        }\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable ||\n            typeof this.lc_kwargs !== \"object\" ||\n            Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key) => {\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for (\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)) {\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath) => {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()) {\n                if (!(key in read) || read[key] === undefined)\n                    return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    }\n                    else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0, map_keys_js_1.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, map_keys_js_1.keyToJson, aliases),\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id,\n        };\n    }\n}\nexports.Serializable = Serializable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/ai.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AIMessageChunk = exports.AIMessage = void 0;\nexports.isAIMessage = isAIMessage;\nexports.isAIMessageChunk = isAIMessageChunk;\nconst json_js_1 = __webpack_require__(/*! ../utils/json.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\nconst tool_js_1 = __webpack_require__(/*! ./tool.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.cjs\");\n/**\n * Represents an AI message in a conversation.\n */\nclass AIMessage extends base_js_1.BaseMessage {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                additional_kwargs: kwargs ?? {},\n            };\n        }\n        else {\n            initParams = fields;\n            const rawToolCalls = initParams.additional_kwargs?.tool_calls;\n            const toolCalls = initParams.tool_calls;\n            if (!(rawToolCalls == null) &&\n                rawToolCalls.length > 0 &&\n                (toolCalls === undefined || toolCalls.length === 0)) {\n                console.warn([\n                    \"New LangChain packages are available that more efficiently handle\",\n                    \"tool calling.\\n\\nPlease upgrade your packages to versions that set\",\n                    \"message tool calls. e.g., `yarn add @langchain/anthropic`,\",\n                    \"yarn add @langchain/openai`, etc.\",\n                ].join(\" \"));\n            }\n            try {\n                if (!(rawToolCalls == null) && toolCalls === undefined) {\n                    const [toolCalls, invalidToolCalls] = (0, tool_js_1.defaultToolCallParser)(rawToolCalls);\n                    initParams.tool_calls = toolCalls ?? [];\n                    initParams.invalid_tool_calls = invalidToolCalls ?? [];\n                }\n                else {\n                    initParams.tool_calls = initParams.tool_calls ?? [];\n                    initParams.invalid_tool_calls = initParams.invalid_tool_calls ?? [];\n                }\n            }\n            catch (e) {\n                // Do nothing if parsing fails\n                initParams.tool_calls = [];\n                initParams.invalid_tool_calls = [];\n            }\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */\n        Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof initParams !== \"string\") {\n            this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n            this.invalid_tool_calls =\n                initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        }\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_calls: this.tool_calls,\n            invalid_tool_calls: this.invalid_tool_calls,\n            usage_metadata: this.usage_metadata,\n        };\n    }\n}\nexports.AIMessage = AIMessage;\nfunction isAIMessage(x) {\n    return x._getType() === \"ai\";\n}\nfunction isAIMessageChunk(x) {\n    return x._getType() === \"ai\";\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */\nclass AIMessageChunk extends base_js_1.BaseMessageChunk {\n    constructor(fields) {\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: [],\n            };\n        }\n        else if (fields.tool_call_chunks === undefined) {\n            initParams = {\n                ...fields,\n                tool_calls: fields.tool_calls ?? [],\n                invalid_tool_calls: [],\n                tool_call_chunks: [],\n                usage_metadata: fields.usage_metadata !== undefined\n                    ? fields.usage_metadata\n                    : undefined,\n            };\n        }\n        else {\n            const groupedToolCallChunks = fields.tool_call_chunks.reduce((acc, chunk) => {\n                const matchedChunkIndex = acc.findIndex(([match]) => {\n                    // If chunk has an id and index, match if both are present\n                    if (\"id\" in chunk &&\n                        chunk.id &&\n                        \"index\" in chunk &&\n                        chunk.index !== undefined) {\n                        return chunk.id === match.id && chunk.index === match.index;\n                    }\n                    // If chunk has an id, we match on id\n                    if (\"id\" in chunk && chunk.id) {\n                        return chunk.id === match.id;\n                    }\n                    // If chunk has an index, we match on index\n                    if (\"index\" in chunk && chunk.index !== undefined) {\n                        return chunk.index === match.index;\n                    }\n                    return false;\n                });\n                if (matchedChunkIndex !== -1) {\n                    acc[matchedChunkIndex].push(chunk);\n                }\n                else {\n                    acc.push([chunk]);\n                }\n                return acc;\n            }, []);\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const chunks of groupedToolCallChunks) {\n                let parsedArgs = {};\n                const name = chunks[0]?.name ?? \"\";\n                const joinedArgs = chunks.map((c) => c.args || \"\").join(\"\");\n                const argsStr = joinedArgs.length ? joinedArgs : \"{}\";\n                const id = chunks[0]?.id;\n                try {\n                    parsedArgs = (0, json_js_1.parsePartialJson)(argsStr);\n                    if (!id ||\n                        parsedArgs === null ||\n                        typeof parsedArgs !== \"object\" ||\n                        Array.isArray(parsedArgs)) {\n                        throw new Error(\"Malformed tool call chunk args.\");\n                    }\n                    toolCalls.push({\n                        name,\n                        args: parsedArgs,\n                        id,\n                        type: \"tool_call\",\n                    });\n                }\n                catch (e) {\n                    invalidToolCalls.push({\n                        name,\n                        args: argsStr,\n                        id,\n                        error: \"Malformed args.\",\n                        type: \"invalid_tool_call\",\n                    });\n                }\n            }\n            initParams = {\n                ...fields,\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls,\n                usage_metadata: fields.usage_metadata !== undefined\n                    ? fields.usage_metadata\n                    : undefined,\n            };\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // Must redeclare tool call fields since there is no multiple inheritance in JS.\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tool_call_chunks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */\n        Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_chunks =\n            initParams.tool_call_chunks ?? this.tool_call_chunks;\n        this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n        this.invalid_tool_calls =\n            initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n            tool_call_chunks: \"tool_call_chunks\",\n        };\n    }\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_calls: this.tool_calls,\n            tool_call_chunks: this.tool_call_chunks,\n            invalid_tool_calls: this.invalid_tool_calls,\n            usage_metadata: this.usage_metadata,\n        };\n    }\n    concat(chunk) {\n        const combinedFields = {\n            content: (0, base_js_1.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0, base_js_1._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0, base_js_1._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            tool_call_chunks: [],\n            id: this.id ?? chunk.id,\n        };\n        if (this.tool_call_chunks !== undefined ||\n            chunk.tool_call_chunks !== undefined) {\n            const rawToolCalls = (0, base_js_1._mergeLists)(this.tool_call_chunks, chunk.tool_call_chunks);\n            if (rawToolCalls !== undefined && rawToolCalls.length > 0) {\n                combinedFields.tool_call_chunks = rawToolCalls;\n            }\n        }\n        if (this.usage_metadata !== undefined ||\n            chunk.usage_metadata !== undefined) {\n            const inputTokenDetails = {\n                ...((this.usage_metadata?.input_token_details?.audio !== undefined ||\n                    chunk.usage_metadata?.input_token_details?.audio !== undefined) && {\n                    audio: (this.usage_metadata?.input_token_details?.audio ?? 0) +\n                        (chunk.usage_metadata?.input_token_details?.audio ?? 0),\n                }),\n                ...((this.usage_metadata?.input_token_details?.cache_read !==\n                    undefined ||\n                    chunk.usage_metadata?.input_token_details?.cache_read !==\n                        undefined) && {\n                    cache_read: (this.usage_metadata?.input_token_details?.cache_read ?? 0) +\n                        (chunk.usage_metadata?.input_token_details?.cache_read ?? 0),\n                }),\n                ...((this.usage_metadata?.input_token_details?.cache_creation !==\n                    undefined ||\n                    chunk.usage_metadata?.input_token_details?.cache_creation !==\n                        undefined) && {\n                    cache_creation: (this.usage_metadata?.input_token_details?.cache_creation ?? 0) +\n                        (chunk.usage_metadata?.input_token_details?.cache_creation ?? 0),\n                }),\n            };\n            const outputTokenDetails = {\n                ...((this.usage_metadata?.output_token_details?.audio !== undefined ||\n                    chunk.usage_metadata?.output_token_details?.audio !== undefined) && {\n                    audio: (this.usage_metadata?.output_token_details?.audio ?? 0) +\n                        (chunk.usage_metadata?.output_token_details?.audio ?? 0),\n                }),\n                ...((this.usage_metadata?.output_token_details?.reasoning !==\n                    undefined ||\n                    chunk.usage_metadata?.output_token_details?.reasoning !==\n                        undefined) && {\n                    reasoning: (this.usage_metadata?.output_token_details?.reasoning ?? 0) +\n                        (chunk.usage_metadata?.output_token_details?.reasoning ?? 0),\n                }),\n            };\n            const left = this.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0,\n            };\n            const right = chunk.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0,\n            };\n            const usage_metadata = {\n                input_tokens: left.input_tokens + right.input_tokens,\n                output_tokens: left.output_tokens + right.output_tokens,\n                total_tokens: left.total_tokens + right.total_tokens,\n                // Do not include `input_token_details` / `output_token_details` keys in combined fields\n                // unless their values are defined.\n                ...(Object.keys(inputTokenDetails).length > 0 && {\n                    input_token_details: inputTokenDetails,\n                }),\n                ...(Object.keys(outputTokenDetails).length > 0 && {\n                    output_token_details: outputTokenDetails,\n                }),\n            };\n            combinedFields.usage_metadata = usage_metadata;\n        }\n        return new AIMessageChunk(combinedFields);\n    }\n}\nexports.AIMessageChunk = AIMessageChunk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvYWkuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLGlCQUFpQjtBQUMxQyxtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCLGtCQUFrQixtQkFBTyxDQUFDLG1GQUFtQjtBQUM3QyxrQkFBa0IsbUJBQU8sQ0FBQywrRUFBWTtBQUN0QyxrQkFBa0IsbUJBQU8sQ0FBQywrRUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9haS5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFJTWVzc2FnZUNodW5rID0gZXhwb3J0cy5BSU1lc3NhZ2UgPSB2b2lkIDA7XG5leHBvcnRzLmlzQUlNZXNzYWdlID0gaXNBSU1lc3NhZ2U7XG5leHBvcnRzLmlzQUlNZXNzYWdlQ2h1bmsgPSBpc0FJTWVzc2FnZUNodW5rO1xuY29uc3QganNvbl9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2pzb24uY2pzXCIpO1xuY29uc3QgYmFzZV9qc18xID0gcmVxdWlyZShcIi4vYmFzZS5janNcIik7XG5jb25zdCB0b29sX2pzXzEgPSByZXF1aXJlKFwiLi90b29sLmNqc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhbiBBSSBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5jbGFzcyBBSU1lc3NhZ2UgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2Uge1xuICAgIGdldCBsY19hbGlhc2VzKCkge1xuICAgICAgICAvLyBleGNsdWRlIHNuYWtlIGNhc2UgY29udmVyc2lvbiB0byBwYXNjYWwgY2FzZVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIubGNfYWxpYXNlcyxcbiAgICAgICAgICAgIHRvb2xfY2FsbHM6IFwidG9vbF9jYWxsc1wiLFxuICAgICAgICAgICAgaW52YWxpZF90b29sX2NhbGxzOiBcImludmFsaWRfdG9vbF9jYWxsc1wiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIFxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIGt3YXJncykge1xuICAgICAgICBsZXQgaW5pdFBhcmFtcztcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGluaXRQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogZmllbGRzLFxuICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IFtdLFxuICAgICAgICAgICAgICAgIGludmFsaWRfdG9vbF9jYWxsczogW10sXG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IGt3YXJncyA/PyB7fSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbml0UGFyYW1zID0gZmllbGRzO1xuICAgICAgICAgICAgY29uc3QgcmF3VG9vbENhbGxzID0gaW5pdFBhcmFtcy5hZGRpdGlvbmFsX2t3YXJncz8udG9vbF9jYWxscztcbiAgICAgICAgICAgIGNvbnN0IHRvb2xDYWxscyA9IGluaXRQYXJhbXMudG9vbF9jYWxscztcbiAgICAgICAgICAgIGlmICghKHJhd1Rvb2xDYWxscyA9PSBudWxsKSAmJlxuICAgICAgICAgICAgICAgIHJhd1Rvb2xDYWxscy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgKHRvb2xDYWxscyA9PT0gdW5kZWZpbmVkIHx8IHRvb2xDYWxscy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFtcbiAgICAgICAgICAgICAgICAgICAgXCJOZXcgTGFuZ0NoYWluIHBhY2thZ2VzIGFyZSBhdmFpbGFibGUgdGhhdCBtb3JlIGVmZmljaWVudGx5IGhhbmRsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInRvb2wgY2FsbGluZy5cXG5cXG5QbGVhc2UgdXBncmFkZSB5b3VyIHBhY2thZ2VzIHRvIHZlcnNpb25zIHRoYXQgc2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwibWVzc2FnZSB0b29sIGNhbGxzLiBlLmcuLCBgeWFybiBhZGQgQGxhbmdjaGFpbi9hbnRocm9waWNgLFwiLFxuICAgICAgICAgICAgICAgICAgICBcInlhcm4gYWRkIEBsYW5nY2hhaW4vb3BlbmFpYCwgZXRjLlwiLFxuICAgICAgICAgICAgICAgIF0uam9pbihcIiBcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIShyYXdUb29sQ2FsbHMgPT0gbnVsbCkgJiYgdG9vbENhbGxzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3Rvb2xDYWxscywgaW52YWxpZFRvb2xDYWxsc10gPSAoMCwgdG9vbF9qc18xLmRlZmF1bHRUb29sQ2FsbFBhcnNlcikocmF3VG9vbENhbGxzKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pdFBhcmFtcy50b29sX2NhbGxzID0gdG9vbENhbGxzID8/IFtdO1xuICAgICAgICAgICAgICAgICAgICBpbml0UGFyYW1zLmludmFsaWRfdG9vbF9jYWxscyA9IGludmFsaWRUb29sQ2FsbHMgPz8gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbml0UGFyYW1zLnRvb2xfY2FsbHMgPSBpbml0UGFyYW1zLnRvb2xfY2FsbHMgPz8gW107XG4gICAgICAgICAgICAgICAgICAgIGluaXRQYXJhbXMuaW52YWxpZF90b29sX2NhbGxzID0gaW5pdFBhcmFtcy5pbnZhbGlkX3Rvb2xfY2FsbHMgPz8gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHBhcnNpbmcgZmFpbHNcbiAgICAgICAgICAgICAgICBpbml0UGFyYW1zLnRvb2xfY2FsbHMgPSBbXTtcbiAgICAgICAgICAgICAgICBpbml0UGFyYW1zLmludmFsaWRfdG9vbF9jYWxscyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNhZGx5LCBUeXBlU2NyaXB0IG9ubHkgYWxsb3dzIHN1cGVyKCkgY2FsbHMgYXQgcm9vdCBpZiB0aGUgY2xhc3MgaGFzXG4gICAgICAgIC8vIHByb3BlcnRpZXMgd2l0aCBpbml0aWFsaXplcnMsIHNvIHdlIGhhdmUgdG8gY2hlY2sgdHlwZXMgdHdpY2UuXG4gICAgICAgIHN1cGVyKGluaXRQYXJhbXMpO1xuICAgICAgICAvLyBUaGVzZSBhcmUgdHlwZWQgYXMgb3B0aW9uYWwgdG8gYXZvaWQgYnJlYWtpbmcgY2hhbmdlcyBhbmQgYWxsb3cgZm9yIGNhc3RpbmdcbiAgICAgICAgLy8gZnJvbSBCYXNlTWVzc2FnZS5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidG9vbF9jYWxsc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImludmFsaWRfdG9vbF9jYWxsc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBwcm92aWRlZCwgdG9rZW4gdXNhZ2UgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXNzYWdlLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidXNhZ2VfbWV0YWRhdGFcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbml0UGFyYW1zICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLnRvb2xfY2FsbHMgPSBpbml0UGFyYW1zLnRvb2xfY2FsbHMgPz8gdGhpcy50b29sX2NhbGxzO1xuICAgICAgICAgICAgdGhpcy5pbnZhbGlkX3Rvb2xfY2FsbHMgPVxuICAgICAgICAgICAgICAgIGluaXRQYXJhbXMuaW52YWxpZF90b29sX2NhbGxzID8/IHRoaXMuaW52YWxpZF90b29sX2NhbGxzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXNhZ2VfbWV0YWRhdGEgPSBpbml0UGFyYW1zLnVzYWdlX21ldGFkYXRhO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQUlNZXNzYWdlXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJhaVwiO1xuICAgIH1cbiAgICBnZXQgX3ByaW50YWJsZUZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLl9wcmludGFibGVGaWVsZHMsXG4gICAgICAgICAgICB0b29sX2NhbGxzOiB0aGlzLnRvb2xfY2FsbHMsXG4gICAgICAgICAgICBpbnZhbGlkX3Rvb2xfY2FsbHM6IHRoaXMuaW52YWxpZF90b29sX2NhbGxzLFxuICAgICAgICAgICAgdXNhZ2VfbWV0YWRhdGE6IHRoaXMudXNhZ2VfbWV0YWRhdGEsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5BSU1lc3NhZ2UgPSBBSU1lc3NhZ2U7XG5mdW5jdGlvbiBpc0FJTWVzc2FnZSh4KSB7XG4gICAgcmV0dXJuIHguX2dldFR5cGUoKSA9PT0gXCJhaVwiO1xufVxuZnVuY3Rpb24gaXNBSU1lc3NhZ2VDaHVuayh4KSB7XG4gICAgcmV0dXJuIHguX2dldFR5cGUoKSA9PT0gXCJhaVwiO1xufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYW4gQUkgbWVzc2FnZSwgd2hpY2ggY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoXG4gKiBvdGhlciBBSSBtZXNzYWdlIGNodW5rcy5cbiAqL1xuY2xhc3MgQUlNZXNzYWdlQ2h1bmsgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2VDaHVuayB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIGxldCBpbml0UGFyYW1zO1xuICAgICAgICBpZiAodHlwZW9mIGZpZWxkcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaW5pdFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBmaWVsZHMsXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsczogW10sXG4gICAgICAgICAgICAgICAgaW52YWxpZF90b29sX2NhbGxzOiBbXSxcbiAgICAgICAgICAgICAgICB0b29sX2NhbGxfY2h1bmtzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZmllbGRzLnRvb2xfY2FsbF9jaHVua3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5pdFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsczogZmllbGRzLnRvb2xfY2FsbHMgPz8gW10sXG4gICAgICAgICAgICAgICAgaW52YWxpZF90b29sX2NhbGxzOiBbXSxcbiAgICAgICAgICAgICAgICB0b29sX2NhbGxfY2h1bmtzOiBbXSxcbiAgICAgICAgICAgICAgICB1c2FnZV9tZXRhZGF0YTogZmllbGRzLnVzYWdlX21ldGFkYXRhICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBmaWVsZHMudXNhZ2VfbWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBlZFRvb2xDYWxsQ2h1bmtzID0gZmllbGRzLnRvb2xfY2FsbF9jaHVua3MucmVkdWNlKChhY2MsIGNodW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlZENodW5rSW5kZXggPSBhY2MuZmluZEluZGV4KChbbWF0Y2hdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGNodW5rIGhhcyBhbiBpZCBhbmQgaW5kZXgsIG1hdGNoIGlmIGJvdGggYXJlIHByZXNlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiaWRcIiBpbiBjaHVuayAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsuaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5kZXhcIiBpbiBjaHVuayAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsuaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNodW5rLmlkID09PSBtYXRjaC5pZCAmJiBjaHVuay5pbmRleCA9PT0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgY2h1bmsgaGFzIGFuIGlkLCB3ZSBtYXRjaCBvbiBpZFxuICAgICAgICAgICAgICAgICAgICBpZiAoXCJpZFwiIGluIGNodW5rICYmIGNodW5rLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2h1bmsuaWQgPT09IG1hdGNoLmlkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGNodW5rIGhhcyBhbiBpbmRleCwgd2UgbWF0Y2ggb24gaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwiaW5kZXhcIiBpbiBjaHVuayAmJiBjaHVuay5pbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2h1bmsuaW5kZXggPT09IG1hdGNoLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlZENodW5rSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY1ttYXRjaGVkQ2h1bmtJbmRleF0ucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY2MucHVzaChbY2h1bmtdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIFtdKTtcbiAgICAgICAgICAgIGNvbnN0IHRvb2xDYWxscyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgaW52YWxpZFRvb2xDYWxscyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaHVua3Mgb2YgZ3JvdXBlZFRvb2xDYWxsQ2h1bmtzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZEFyZ3MgPSB7fTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gY2h1bmtzWzBdPy5uYW1lID8/IFwiXCI7XG4gICAgICAgICAgICAgICAgY29uc3Qgam9pbmVkQXJncyA9IGNodW5rcy5tYXAoKGMpID0+IGMuYXJncyB8fCBcIlwiKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3NTdHIgPSBqb2luZWRBcmdzLmxlbmd0aCA/IGpvaW5lZEFyZ3MgOiBcInt9XCI7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBjaHVua3NbMF0/LmlkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MgPSAoMCwganNvbl9qc18xLnBhcnNlUGFydGlhbEpzb24pKGFyZ3NTdHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRBcmdzID09PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcGFyc2VkQXJncyAhPT0gXCJvYmplY3RcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShwYXJzZWRBcmdzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIHRvb2wgY2FsbCBjaHVuayBhcmdzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogcGFyc2VkQXJncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sX2NhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRUb29sQ2FsbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogYXJnc1N0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiTWFsZm9ybWVkIGFyZ3MuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImludmFsaWRfdG9vbF9jYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgLi4uZmllbGRzLFxuICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IHRvb2xDYWxscyxcbiAgICAgICAgICAgICAgICBpbnZhbGlkX3Rvb2xfY2FsbHM6IGludmFsaWRUb29sQ2FsbHMsXG4gICAgICAgICAgICAgICAgdXNhZ2VfbWV0YWRhdGE6IGZpZWxkcy51c2FnZV9tZXRhZGF0YSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gZmllbGRzLnVzYWdlX21ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTYWRseSwgVHlwZVNjcmlwdCBvbmx5IGFsbG93cyBzdXBlcigpIGNhbGxzIGF0IHJvb3QgaWYgdGhlIGNsYXNzIGhhc1xuICAgICAgICAvLyBwcm9wZXJ0aWVzIHdpdGggaW5pdGlhbGl6ZXJzLCBzbyB3ZSBoYXZlIHRvIGNoZWNrIHR5cGVzIHR3aWNlLlxuICAgICAgICBzdXBlcihpbml0UGFyYW1zKTtcbiAgICAgICAgLy8gTXVzdCByZWRlY2xhcmUgdG9vbCBjYWxsIGZpZWxkcyBzaW5jZSB0aGVyZSBpcyBubyBtdWx0aXBsZSBpbmhlcml0YW5jZSBpbiBKUy5cbiAgICAgICAgLy8gVGhlc2UgYXJlIHR5cGVkIGFzIG9wdGlvbmFsIHRvIGF2b2lkIGJyZWFraW5nIGNoYW5nZXMgYW5kIGFsbG93IGZvciBjYXN0aW5nXG4gICAgICAgIC8vIGZyb20gQmFzZU1lc3NhZ2UuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRvb2xfY2FsbHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbnZhbGlkX3Rvb2xfY2FsbHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b29sX2NhbGxfY2h1bmtzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHByb3ZpZGVkLCB0b2tlbiB1c2FnZSBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1c2FnZV9tZXRhZGF0YVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvb2xfY2FsbF9jaHVua3MgPVxuICAgICAgICAgICAgaW5pdFBhcmFtcy50b29sX2NhbGxfY2h1bmtzID8/IHRoaXMudG9vbF9jYWxsX2NodW5rcztcbiAgICAgICAgdGhpcy50b29sX2NhbGxzID0gaW5pdFBhcmFtcy50b29sX2NhbGxzID8/IHRoaXMudG9vbF9jYWxscztcbiAgICAgICAgdGhpcy5pbnZhbGlkX3Rvb2xfY2FsbHMgPVxuICAgICAgICAgICAgaW5pdFBhcmFtcy5pbnZhbGlkX3Rvb2xfY2FsbHMgPz8gdGhpcy5pbnZhbGlkX3Rvb2xfY2FsbHM7XG4gICAgICAgIHRoaXMudXNhZ2VfbWV0YWRhdGEgPSBpbml0UGFyYW1zLnVzYWdlX21ldGFkYXRhO1xuICAgIH1cbiAgICBnZXQgbGNfYWxpYXNlcygpIHtcbiAgICAgICAgLy8gZXhjbHVkZSBzbmFrZSBjYXNlIGNvbnZlcnNpb24gdG8gcGFzY2FsIGNhc2VcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLmxjX2FsaWFzZXMsXG4gICAgICAgICAgICB0b29sX2NhbGxzOiBcInRvb2xfY2FsbHNcIixcbiAgICAgICAgICAgIGludmFsaWRfdG9vbF9jYWxsczogXCJpbnZhbGlkX3Rvb2xfY2FsbHNcIixcbiAgICAgICAgICAgIHRvb2xfY2FsbF9jaHVua3M6IFwidG9vbF9jYWxsX2NodW5rc1wiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQUlNZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImFpXCI7XG4gICAgfVxuICAgIGdldCBfcHJpbnRhYmxlRmllbGRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIuX3ByaW50YWJsZUZpZWxkcyxcbiAgICAgICAgICAgIHRvb2xfY2FsbHM6IHRoaXMudG9vbF9jYWxscyxcbiAgICAgICAgICAgIHRvb2xfY2FsbF9jaHVua3M6IHRoaXMudG9vbF9jYWxsX2NodW5rcyxcbiAgICAgICAgICAgIGludmFsaWRfdG9vbF9jYWxsczogdGhpcy5pbnZhbGlkX3Rvb2xfY2FsbHMsXG4gICAgICAgICAgICB1c2FnZV9tZXRhZGF0YTogdGhpcy51c2FnZV9tZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkRmllbGRzID0ge1xuICAgICAgICAgICAgY29udGVudDogKDAsIGJhc2VfanNfMS5tZXJnZUNvbnRlbnQpKHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogKDAsIGJhc2VfanNfMS5fbWVyZ2VEaWN0cykodGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6ICgwLCBiYXNlX2pzXzEuX21lcmdlRGljdHMpKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIHRvb2xfY2FsbF9jaHVua3M6IFtdLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQgPz8gY2h1bmsuaWQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnRvb2xfY2FsbF9jaHVua3MgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgY2h1bmsudG9vbF9jYWxsX2NodW5rcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCByYXdUb29sQ2FsbHMgPSAoMCwgYmFzZV9qc18xLl9tZXJnZUxpc3RzKSh0aGlzLnRvb2xfY2FsbF9jaHVua3MsIGNodW5rLnRvb2xfY2FsbF9jaHVua3MpO1xuICAgICAgICAgICAgaWYgKHJhd1Rvb2xDYWxscyAhPT0gdW5kZWZpbmVkICYmIHJhd1Rvb2xDYWxscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29tYmluZWRGaWVsZHMudG9vbF9jYWxsX2NodW5rcyA9IHJhd1Rvb2xDYWxscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy51c2FnZV9tZXRhZGF0YSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBjaHVuay51c2FnZV9tZXRhZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFRva2VuRGV0YWlscyA9IHtcbiAgICAgICAgICAgICAgICAuLi4oKHRoaXMudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmF1ZGlvICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgY2h1bmsudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmF1ZGlvICE9PSB1bmRlZmluZWQpICYmIHtcbiAgICAgICAgICAgICAgICAgICAgYXVkaW86ICh0aGlzLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5hdWRpbyA/PyAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2h1bmsudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmF1ZGlvID8/IDApLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLigodGhpcy51c2FnZV9tZXRhZGF0YT8uaW5wdXRfdG9rZW5fZGV0YWlscz8uY2FjaGVfcmVhZCAhPT1cbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIGNodW5rLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5jYWNoZV9yZWFkICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkKSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlX3JlYWQ6ICh0aGlzLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5jYWNoZV9yZWFkID8/IDApICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChjaHVuay51c2FnZV9tZXRhZGF0YT8uaW5wdXRfdG9rZW5fZGV0YWlscz8uY2FjaGVfcmVhZCA/PyAwKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4oKHRoaXMudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmNhY2hlX2NyZWF0aW9uICE9PVxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgY2h1bmsudXNhZ2VfbWV0YWRhdGE/LmlucHV0X3Rva2VuX2RldGFpbHM/LmNhY2hlX2NyZWF0aW9uICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkKSAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlX2NyZWF0aW9uOiAodGhpcy51c2FnZV9tZXRhZGF0YT8uaW5wdXRfdG9rZW5fZGV0YWlscz8uY2FjaGVfY3JlYXRpb24gPz8gMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGNodW5rLnVzYWdlX21ldGFkYXRhPy5pbnB1dF90b2tlbl9kZXRhaWxzPy5jYWNoZV9jcmVhdGlvbiA/PyAwKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRUb2tlbkRldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgLi4uKCh0aGlzLnVzYWdlX21ldGFkYXRhPy5vdXRwdXRfdG9rZW5fZGV0YWlscz8uYXVkaW8gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICBjaHVuay51c2FnZV9tZXRhZGF0YT8ub3V0cHV0X3Rva2VuX2RldGFpbHM/LmF1ZGlvICE9PSB1bmRlZmluZWQpICYmIHtcbiAgICAgICAgICAgICAgICAgICAgYXVkaW86ICh0aGlzLnVzYWdlX21ldGFkYXRhPy5vdXRwdXRfdG9rZW5fZGV0YWlscz8uYXVkaW8gPz8gMCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGNodW5rLnVzYWdlX21ldGFkYXRhPy5vdXRwdXRfdG9rZW5fZGV0YWlscz8uYXVkaW8gPz8gMCksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgLi4uKCh0aGlzLnVzYWdlX21ldGFkYXRhPy5vdXRwdXRfdG9rZW5fZGV0YWlscz8ucmVhc29uaW5nICE9PVxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgY2h1bmsudXNhZ2VfbWV0YWRhdGE/Lm91dHB1dF90b2tlbl9kZXRhaWxzPy5yZWFzb25pbmcgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQpICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uaW5nOiAodGhpcy51c2FnZV9tZXRhZGF0YT8ub3V0cHV0X3Rva2VuX2RldGFpbHM/LnJlYXNvbmluZyA/PyAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2h1bmsudXNhZ2VfbWV0YWRhdGE/Lm91dHB1dF90b2tlbl9kZXRhaWxzPy5yZWFzb25pbmcgPz8gMCksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgbGVmdCA9IHRoaXMudXNhZ2VfbWV0YWRhdGEgPz8ge1xuICAgICAgICAgICAgICAgIGlucHV0X3Rva2VuczogMCxcbiAgICAgICAgICAgICAgICBvdXRwdXRfdG9rZW5zOiAwLFxuICAgICAgICAgICAgICAgIHRvdGFsX3Rva2VuczogMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByaWdodCA9IGNodW5rLnVzYWdlX21ldGFkYXRhID8/IHtcbiAgICAgICAgICAgICAgICBpbnB1dF90b2tlbnM6IDAsXG4gICAgICAgICAgICAgICAgb3V0cHV0X3Rva2VuczogMCxcbiAgICAgICAgICAgICAgICB0b3RhbF90b2tlbnM6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgdXNhZ2VfbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgaW5wdXRfdG9rZW5zOiBsZWZ0LmlucHV0X3Rva2VucyArIHJpZ2h0LmlucHV0X3Rva2VucyxcbiAgICAgICAgICAgICAgICBvdXRwdXRfdG9rZW5zOiBsZWZ0Lm91dHB1dF90b2tlbnMgKyByaWdodC5vdXRwdXRfdG9rZW5zLFxuICAgICAgICAgICAgICAgIHRvdGFsX3Rva2VuczogbGVmdC50b3RhbF90b2tlbnMgKyByaWdodC50b3RhbF90b2tlbnMsXG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IGluY2x1ZGUgYGlucHV0X3Rva2VuX2RldGFpbHNgIC8gYG91dHB1dF90b2tlbl9kZXRhaWxzYCBrZXlzIGluIGNvbWJpbmVkIGZpZWxkc1xuICAgICAgICAgICAgICAgIC8vIHVubGVzcyB0aGVpciB2YWx1ZXMgYXJlIGRlZmluZWQuXG4gICAgICAgICAgICAgICAgLi4uKE9iamVjdC5rZXlzKGlucHV0VG9rZW5EZXRhaWxzKS5sZW5ndGggPiAwICYmIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRfdG9rZW5fZGV0YWlsczogaW5wdXRUb2tlbkRldGFpbHMsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgLi4uKE9iamVjdC5rZXlzKG91dHB1dFRva2VuRGV0YWlscykubGVuZ3RoID4gMCAmJiB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dF90b2tlbl9kZXRhaWxzOiBvdXRwdXRUb2tlbkRldGFpbHMsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29tYmluZWRGaWVsZHMudXNhZ2VfbWV0YWRhdGEgPSB1c2FnZV9tZXRhZGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFJTWVzc2FnZUNodW5rKGNvbWJpbmVkRmllbGRzKTtcbiAgICB9XG59XG5leHBvcnRzLkFJTWVzc2FnZUNodW5rID0gQUlNZXNzYWdlQ2h1bms7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/base.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseMessageChunk = exports.BaseMessage = void 0;\nexports.mergeContent = mergeContent;\nexports._mergeStatus = _mergeStatus;\nexports.isOpenAIToolCallArray = isOpenAIToolCallArray;\nexports._mergeDicts = _mergeDicts;\nexports._mergeLists = _mergeLists;\nexports._mergeObj = _mergeObj;\nexports._isMessageFieldWithRole = _isMessageFieldWithRole;\nexports.isBaseMessage = isBaseMessage;\nexports.isBaseMessageChunk = isBaseMessageChunk;\nconst serializable_js_1 = __webpack_require__(/*! ../load/serializable.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs\");\nconst content_blocks_js_1 = __webpack_require__(/*! ./content_blocks.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.cjs\");\nfunction mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (firstContent === \"\") {\n            return secondContent;\n        }\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        }\n        else if (Array.isArray(secondContent) &&\n            secondContent.some((c) => (0, content_blocks_js_1.isDataContentBlock)(c))) {\n            return [\n                {\n                    type: \"text\",\n                    source_type: \"text\",\n                    text: firstContent,\n                },\n                ...secondContent,\n            ];\n        }\n        else {\n            return [{ type: \"text\", text: firstContent }, ...secondContent];\n        }\n        // If both are arrays\n    }\n    else if (Array.isArray(secondContent)) {\n        return (_mergeLists(firstContent, secondContent) ?? [\n            ...firstContent,\n            ...secondContent,\n        ]);\n    }\n    else {\n        if (secondContent === \"\") {\n            return firstContent;\n        }\n        else if (Array.isArray(firstContent) &&\n            firstContent.some((c) => (0, content_blocks_js_1.isDataContentBlock)(c))) {\n            return [\n                ...firstContent,\n                {\n                    type: \"file\",\n                    source_type: \"text\",\n                    text: secondContent,\n                },\n            ];\n        }\n        else {\n            return [...firstContent, { type: \"text\", text: secondContent }];\n        }\n    }\n}\n/**\n * 'Merge' two statuses. If either value passed is 'error', it will return 'error'. Else\n * it will return 'success'.\n *\n * @param {\"success\" | \"error\" | undefined} left The existing value to 'merge' with the new value.\n * @param {\"success\" | \"error\" | undefined} right The new value to 'merge' with the existing value\n * @returns {\"success\" | \"error\"} The 'merged' value.\n */\nfunction _mergeStatus(left, right) {\n    if (left === \"error\" || right === \"error\") {\n        return \"error\";\n    }\n    return \"success\";\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stringifyWithDepthLimit(obj, depthLimit) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function helper(obj, currentDepth) {\n        if (typeof obj !== \"object\" || obj === null || obj === undefined) {\n            return obj;\n        }\n        if (currentDepth >= depthLimit) {\n            if (Array.isArray(obj)) {\n                return \"[Array]\";\n            }\n            return \"[Object]\";\n        }\n        if (Array.isArray(obj)) {\n            return obj.map((item) => helper(item, currentDepth + 1));\n        }\n        const result = {};\n        for (const key of Object.keys(obj)) {\n            result[key] = helper(obj[key], currentDepth + 1);\n        }\n        return result;\n    }\n    return JSON.stringify(helper(obj, 0), null, 2);\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */\nclass BaseMessage extends serializable_js_1.Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\",\n        };\n    }\n    /**\n     * Get text content of the message.\n     */\n    get text() {\n        if (typeof this.content === \"string\") {\n            return this.content;\n        }\n        if (!Array.isArray(this.content))\n            return \"\";\n        return this.content\n            .map((c) => {\n            if (typeof c === \"string\")\n                return c;\n            if (c.type === \"text\")\n                return c.text;\n            return \"\";\n        })\n            .join(\"\");\n    }\n    /** The type of the message. */\n    getType() {\n        return this._getType();\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {},\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"messages\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */\n        Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */\n        Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts, model name. */\n        Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * An optional unique identifier for the message. This should ideally be\n         * provided by the provider/model which created the message.\n         */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n        this.id = fields.id;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON()\n                .kwargs,\n        };\n    }\n    static lc_name() {\n        return \"BaseMessage\";\n    }\n    // Can't be protected for silly reasons\n    get _printableFields() {\n        return {\n            id: this.id,\n            content: this.content,\n            name: this.name,\n            additional_kwargs: this.additional_kwargs,\n            response_metadata: this.response_metadata,\n        };\n    }\n    // this private method is used to update the ID for the runtime\n    // value as well as in lc_kwargs for serialisation\n    _updateId(value) {\n        this.id = value;\n        // lc_attributes wouldn't work here, because jest compares the\n        // whole object\n        this.lc_kwargs.id = value;\n    }\n    get [Symbol.toStringTag]() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this.constructor.lc_name();\n    }\n    // Override the default behavior of console.log\n    [Symbol.for(\"nodejs.util.inspect.custom\")](depth) {\n        if (depth === null) {\n            return this;\n        }\n        const printable = stringifyWithDepthLimit(this._printableFields, Math.max(4, depth));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return `${this.constructor.lc_name()} ${printable}`;\n    }\n}\nexports.BaseMessage = BaseMessage;\nfunction isOpenAIToolCallArray(value) {\n    return (Array.isArray(value) &&\n        value.every((v) => typeof v.index === \"number\"));\n}\nfunction _mergeDicts(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nright\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    const merged = { ...left };\n    for (const [key, value] of Object.entries(right)) {\n        if (merged[key] == null) {\n            merged[key] = value;\n        }\n        else if (value == null) {\n            continue;\n        }\n        else if (typeof merged[key] !== typeof value ||\n            Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        }\n        else if (typeof merged[key] === \"string\") {\n            if (key === \"type\") {\n                // Do not merge 'type' fields\n                continue;\n            }\n            else if ([\"id\", \"name\", \"output_version\", \"model_provider\"].includes(key)) {\n                // Keep the incoming value for these fields\n                merged[key] = value;\n            }\n            else {\n                merged[key] += value;\n            }\n        }\n        else if (typeof merged[key] === \"object\" && !Array.isArray(merged[key])) {\n            merged[key] = _mergeDicts(merged[key], value);\n        }\n        else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        }\n        else if (merged[key] === value) {\n            continue;\n        }\n        else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\nfunction _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    }\n    else if (left === undefined || right === undefined) {\n        return left || right;\n    }\n    else {\n        const merged = [...left];\n        for (const item of right) {\n            if (typeof item === \"object\" &&\n                item !== null &&\n                \"index\" in item &&\n                typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem) => {\n                    const isObject = typeof leftItem === \"object\";\n                    const indiciesMatch = \"index\" in leftItem && leftItem.index === item.index;\n                    const idsMatch = \"id\" in leftItem && \"id\" in item && leftItem?.id === item?.id;\n                    const eitherItemMissingID = !(\"id\" in leftItem) ||\n                        !leftItem?.id ||\n                        !(\"id\" in item) ||\n                        !item?.id;\n                    return isObject && indiciesMatch && (idsMatch || eitherItemMissingID);\n                });\n                if (toMerge !== -1 &&\n                    typeof merged[toMerge] === \"object\" &&\n                    merged[toMerge] !== null) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                }\n                else {\n                    merged.push(item);\n                }\n            }\n            else if (typeof item === \"object\" &&\n                item !== null &&\n                \"text\" in item &&\n                item.text === \"\") {\n                // No-op - skip empty text blocks\n                continue;\n            }\n            else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _mergeObj(left, right) {\n    if (!left && !right) {\n        throw new Error(\"Cannot merge two undefined objects.\");\n    }\n    if (!left || !right) {\n        return left || right;\n    }\n    else if (typeof left !== typeof right) {\n        throw new Error(`Cannot merge objects of different types.\\nLeft ${typeof left}\\nRight ${typeof right}`);\n    }\n    else if (typeof left === \"string\" && typeof right === \"string\") {\n        return (left + right);\n    }\n    else if (Array.isArray(left) && Array.isArray(right)) {\n        return _mergeLists(left, right);\n    }\n    else if (typeof left === \"object\" && typeof right === \"object\") {\n        return _mergeDicts(left, right);\n    }\n    else if (left === right) {\n        return left;\n    }\n    else {\n        throw new Error(`Can not merge objects of different types.\\nLeft ${left}\\nRight ${right}`);\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */\nclass BaseMessageChunk extends BaseMessage {\n}\nexports.BaseMessageChunk = BaseMessageChunk;\nfunction _isMessageFieldWithRole(x) {\n    return typeof x.role === \"string\";\n}\nfunction isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nfunction isBaseMessageChunk(messageLike) {\n    return (isBaseMessage(messageLike) &&\n        typeof messageLike.concat === \"function\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/chat.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/chat.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatMessageChunk = exports.ChatMessage = void 0;\nexports.isChatMessage = isChatMessage;\nexports.isChatMessageChunk = isChatMessageChunk;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\n/**\n * Represents a chat message in a conversation.\n */\nclass ChatMessage extends base_js_1.BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            role: this.role,\n        };\n    }\n}\nexports.ChatMessage = ChatMessage;\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */\nclass ChatMessageChunk extends base_js_1.BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: (0, base_js_1.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0, base_js_1._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0, base_js_1._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            role: this.role,\n            id: this.id ?? chunk.id,\n        });\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            role: this.role,\n        };\n    }\n}\nexports.ChatMessageChunk = ChatMessageChunk;\nfunction isChatMessage(x) {\n    return x._getType() === \"generic\";\n}\nfunction isChatMessageChunk(x) {\n    return x._getType() === \"generic\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvY2hhdC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsbUJBQW1CO0FBQzlDLHFCQUFxQjtBQUNyQiwwQkFBMEI7QUFDMUIsa0JBQWtCLG1CQUFPLENBQUMsK0VBQVk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9jaGF0LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hhdE1lc3NhZ2VDaHVuayA9IGV4cG9ydHMuQ2hhdE1lc3NhZ2UgPSB2b2lkIDA7XG5leHBvcnRzLmlzQ2hhdE1lc3NhZ2UgPSBpc0NoYXRNZXNzYWdlO1xuZXhwb3J0cy5pc0NoYXRNZXNzYWdlQ2h1bmsgPSBpc0NoYXRNZXNzYWdlQ2h1bms7XG5jb25zdCBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlLmNqc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGNoYXQgbWVzc2FnZSBpbiBhIGNvbnZlcnNhdGlvbi5cbiAqL1xuY2xhc3MgQ2hhdE1lc3NhZ2UgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDaGF0TWVzc2FnZVwiO1xuICAgIH1cbiAgICBzdGF0aWMgX2NoYXRNZXNzYWdlQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiBDaGF0TWVzc2FnZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCByb2xlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCByb2xlOiByb2xlIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9sZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJvbGUgPSBmaWVsZHMucm9sZTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgc3RhdGljIGlzSW5zdGFuY2UobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5fZ2V0VHlwZSgpID09PSBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgZ2V0IF9wcmludGFibGVGaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci5fcHJpbnRhYmxlRmllbGRzLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuQ2hhdE1lc3NhZ2UgPSBDaGF0TWVzc2FnZTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIGEgY2hhdCBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIGNoYXQgbWVzc2FnZSBjaHVua3MuXG4gKi9cbmNsYXNzIENoYXRNZXNzYWdlQ2h1bmsgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2VDaHVuayB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkNoYXRNZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCByb2xlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZpZWxkcyA9IHsgY29udGVudDogZmllbGRzLCByb2xlOiByb2xlIH07XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9sZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJvbGUgPSBmaWVsZHMucm9sZTtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImdlbmVyaWNcIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhdE1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICBjb250ZW50OiAoMCwgYmFzZV9qc18xLm1lcmdlQ29udGVudCkodGhpcy5jb250ZW50LCBjaHVuay5jb250ZW50KSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiAoMCwgYmFzZV9qc18xLl9tZXJnZURpY3RzKSh0aGlzLmFkZGl0aW9uYWxfa3dhcmdzLCBjaHVuay5hZGRpdGlvbmFsX2t3YXJncyksXG4gICAgICAgICAgICByZXNwb25zZV9tZXRhZGF0YTogKDAsIGJhc2VfanNfMS5fbWVyZ2VEaWN0cykodGhpcy5yZXNwb25zZV9tZXRhZGF0YSwgY2h1bmsucmVzcG9uc2VfbWV0YWRhdGEpLFxuICAgICAgICAgICAgcm9sZTogdGhpcy5yb2xlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQgPz8gY2h1bmsuaWQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgX3ByaW50YWJsZUZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLl9wcmludGFibGVGaWVsZHMsXG4gICAgICAgICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5DaGF0TWVzc2FnZUNodW5rID0gQ2hhdE1lc3NhZ2VDaHVuaztcbmZ1bmN0aW9uIGlzQ2hhdE1lc3NhZ2UoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwiZ2VuZXJpY1wiO1xufVxuZnVuY3Rpb24gaXNDaGF0TWVzc2FnZUNodW5rKHgpIHtcbiAgICByZXR1cm4geC5fZ2V0VHlwZSgpID09PSBcImdlbmVyaWNcIjtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/chat.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.cjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/content_blocks.cjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isDataContentBlock = isDataContentBlock;\nexports.isURLContentBlock = isURLContentBlock;\nexports.isBase64ContentBlock = isBase64ContentBlock;\nexports.isPlainTextContentBlock = isPlainTextContentBlock;\nexports.isIDContentBlock = isIDContentBlock;\nexports.convertToOpenAIImageBlock = convertToOpenAIImageBlock;\nexports.parseMimeType = parseMimeType;\nexports.parseBase64DataUrl = parseBase64DataUrl;\nexports.convertToProviderContentBlock = convertToProviderContentBlock;\nfunction isDataContentBlock(content_block) {\n    return (typeof content_block === \"object\" &&\n        content_block !== null &&\n        \"type\" in content_block &&\n        typeof content_block.type === \"string\" &&\n        \"source_type\" in content_block &&\n        (content_block.source_type === \"url\" ||\n            content_block.source_type === \"base64\" ||\n            content_block.source_type === \"text\" ||\n            content_block.source_type === \"id\"));\n}\nfunction isURLContentBlock(content_block) {\n    return (isDataContentBlock(content_block) &&\n        content_block.source_type === \"url\" &&\n        \"url\" in content_block &&\n        typeof content_block.url === \"string\");\n}\nfunction isBase64ContentBlock(content_block) {\n    return (isDataContentBlock(content_block) &&\n        content_block.source_type === \"base64\" &&\n        \"data\" in content_block &&\n        typeof content_block.data === \"string\");\n}\nfunction isPlainTextContentBlock(content_block) {\n    return (isDataContentBlock(content_block) &&\n        content_block.source_type === \"text\" &&\n        \"text\" in content_block &&\n        typeof content_block.text === \"string\");\n}\nfunction isIDContentBlock(content_block) {\n    return (isDataContentBlock(content_block) &&\n        content_block.source_type === \"id\" &&\n        \"id\" in content_block &&\n        typeof content_block.id === \"string\");\n}\nfunction convertToOpenAIImageBlock(content_block) {\n    if (isDataContentBlock(content_block)) {\n        if (content_block.source_type === \"url\") {\n            return {\n                type: \"image_url\",\n                image_url: {\n                    url: content_block.url,\n                },\n            };\n        }\n        if (content_block.source_type === \"base64\") {\n            if (!content_block.mime_type) {\n                throw new Error(\"mime_type key is required for base64 data.\");\n            }\n            const mime_type = content_block.mime_type;\n            return {\n                type: \"image_url\",\n                image_url: {\n                    url: `data:${mime_type};base64,${content_block.data}`,\n                },\n            };\n        }\n    }\n    throw new Error(\"Unsupported source type. Only 'url' and 'base64' are supported.\");\n}\n/**\n * Utility function for ChatModelProviders. Parses a mime type into a type, subtype, and parameters.\n *\n * @param mime_type - The mime type to parse.\n * @returns An object containing the type, subtype, and parameters.\n */\nfunction parseMimeType(mime_type) {\n    const parts = mime_type.split(\";\")[0].split(\"/\");\n    if (parts.length !== 2) {\n        throw new Error(`Invalid mime type: \"${mime_type}\" - does not match type/subtype format.`);\n    }\n    const type = parts[0].trim();\n    const subtype = parts[1].trim();\n    if (type === \"\" || subtype === \"\") {\n        throw new Error(`Invalid mime type: \"${mime_type}\" - type or subtype is empty.`);\n    }\n    const parameters = {};\n    for (const parameterKvp of mime_type.split(\";\").slice(1)) {\n        const parameterParts = parameterKvp.split(\"=\");\n        if (parameterParts.length !== 2) {\n            throw new Error(`Invalid parameter syntax in mime type: \"${mime_type}\".`);\n        }\n        const key = parameterParts[0].trim();\n        const value = parameterParts[1].trim();\n        if (key === \"\") {\n            throw new Error(`Invalid parameter syntax in mime type: \"${mime_type}\".`);\n        }\n        parameters[key] = value;\n    }\n    return {\n        type,\n        subtype,\n        parameters,\n    };\n}\n/**\n * Utility function for ChatModelProviders. Parses a base64 data URL into a typed array or string.\n *\n * @param dataUrl - The base64 data URL to parse.\n * @param asTypedArray - Whether to return the data as a typed array.\n * @returns The parsed data and mime type, or undefined if the data URL is invalid.\n */\nfunction parseBase64DataUrl({ dataUrl: data_url, asTypedArray = false, }) {\n    const formatMatch = data_url.match(/^data:(\\w+\\/\\w+);base64,([A-Za-z0-9+/]+=*)$/);\n    let mime_type;\n    if (formatMatch) {\n        mime_type = formatMatch[1].toLowerCase();\n        const data = asTypedArray\n            ? Uint8Array.from(atob(formatMatch[2]), (c) => c.charCodeAt(0))\n            : formatMatch[2];\n        return {\n            mime_type,\n            data,\n        };\n    }\n    return undefined;\n}\n/**\n * Convert from a standard data content block to a provider's proprietary data content block format.\n *\n * Don't override this method. Instead, override the more specific conversion methods and use this\n * method unmodified.\n *\n * @param block - The standard data content block to convert.\n * @returns The provider data content block.\n * @throws An error if the standard data content block type is not supported.\n */\nfunction convertToProviderContentBlock(block, converter) {\n    if (block.type === \"text\") {\n        if (!converter.fromStandardTextBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardTextBlock\\` method.`);\n        }\n        return converter.fromStandardTextBlock(block);\n    }\n    if (block.type === \"image\") {\n        if (!converter.fromStandardImageBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardImageBlock\\` method.`);\n        }\n        return converter.fromStandardImageBlock(block);\n    }\n    if (block.type === \"audio\") {\n        if (!converter.fromStandardAudioBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardAudioBlock\\` method.`);\n        }\n        return converter.fromStandardAudioBlock(block);\n    }\n    if (block.type === \"file\") {\n        if (!converter.fromStandardFileBlock) {\n            throw new Error(`Converter for ${converter.providerName} does not implement \\`fromStandardFileBlock\\` method.`);\n        }\n        return converter.fromStandardFileBlock(block);\n    }\n    throw new Error(`Unable to convert content block type '${block.type}' to provider-specific format: not recognized.`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/function.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/function.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FunctionMessageChunk = exports.FunctionMessage = void 0;\nexports.isFunctionMessage = isFunctionMessage;\nexports.isFunctionMessageChunk = isFunctionMessageChunk;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\n/**\n * Represents a function message in a conversation.\n */\nclass FunctionMessage extends base_js_1.BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    name) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, name: name };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\nexports.FunctionMessage = FunctionMessage;\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */\nclass FunctionMessageChunk extends base_js_1.BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: (0, base_js_1.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0, base_js_1._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0, base_js_1._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            name: this.name ?? \"\",\n            id: this.id ?? chunk.id,\n        });\n    }\n}\nexports.FunctionMessageChunk = FunctionMessageChunk;\nfunction isFunctionMessage(x) {\n    return x._getType() === \"function\";\n}\nfunction isFunctionMessageChunk(x) {\n    return x._getType() === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvZnVuY3Rpb24uY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLHVCQUF1QjtBQUN0RCx5QkFBeUI7QUFDekIsOEJBQThCO0FBQzlCLGtCQUFrQixtQkFBTyxDQUFDLCtFQUFZO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL2Z1bmN0aW9uLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRnVuY3Rpb25NZXNzYWdlQ2h1bmsgPSBleHBvcnRzLkZ1bmN0aW9uTWVzc2FnZSA9IHZvaWQgMDtcbmV4cG9ydHMuaXNGdW5jdGlvbk1lc3NhZ2UgPSBpc0Z1bmN0aW9uTWVzc2FnZTtcbmV4cG9ydHMuaXNGdW5jdGlvbk1lc3NhZ2VDaHVuayA9IGlzRnVuY3Rpb25NZXNzYWdlQ2h1bms7XG5jb25zdCBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlLmNqc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGZ1bmN0aW9uIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uXG4gKi9cbmNsYXNzIEZ1bmN0aW9uTWVzc2FnZSBleHRlbmRzIGJhc2VfanNfMS5CYXNlTWVzc2FnZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkZ1bmN0aW9uTWVzc2FnZVwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIFxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZmllbGRzID0geyBjb250ZW50OiBmaWVsZHMsIG5hbWU6IG5hbWUgfTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIjtcbiAgICB9XG59XG5leHBvcnRzLkZ1bmN0aW9uTWVzc2FnZSA9IEZ1bmN0aW9uTWVzc2FnZTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIGEgZnVuY3Rpb24gbWVzc2FnZSwgd2hpY2ggY2FuIGJlIGNvbmNhdGVuYXRlZFxuICogd2l0aCBvdGhlciBmdW5jdGlvbiBtZXNzYWdlIGNodW5rcy5cbiAqL1xuY2xhc3MgRnVuY3Rpb25NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2VDaHVuayB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkZ1bmN0aW9uTWVzc2FnZUNodW5rXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJmdW5jdGlvblwiO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbk1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICBjb250ZW50OiAoMCwgYmFzZV9qc18xLm1lcmdlQ29udGVudCkodGhpcy5jb250ZW50LCBjaHVuay5jb250ZW50KSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfa3dhcmdzOiAoMCwgYmFzZV9qc18xLl9tZXJnZURpY3RzKSh0aGlzLmFkZGl0aW9uYWxfa3dhcmdzLCBjaHVuay5hZGRpdGlvbmFsX2t3YXJncyksXG4gICAgICAgICAgICByZXNwb25zZV9tZXRhZGF0YTogKDAsIGJhc2VfanNfMS5fbWVyZ2VEaWN0cykodGhpcy5yZXNwb25zZV9tZXRhZGF0YSwgY2h1bmsucmVzcG9uc2VfbWV0YWRhdGEpLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lID8/IFwiXCIsXG4gICAgICAgICAgICBpZDogdGhpcy5pZCA/PyBjaHVuay5pZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5GdW5jdGlvbk1lc3NhZ2VDaHVuayA9IEZ1bmN0aW9uTWVzc2FnZUNodW5rO1xuZnVuY3Rpb24gaXNGdW5jdGlvbk1lc3NhZ2UoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzRnVuY3Rpb25NZXNzYWdlQ2h1bmsoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwiZnVuY3Rpb25cIjtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/function.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/human.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/human.cjs ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HumanMessageChunk = exports.HumanMessage = void 0;\nexports.isHumanMessage = isHumanMessage;\nexports.isHumanMessageChunk = isHumanMessageChunk;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\n/**\n * Represents a human message in a conversation.\n */\nclass HumanMessage extends base_js_1.BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        super(fields, kwargs);\n    }\n}\nexports.HumanMessage = HumanMessage;\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */\nclass HumanMessageChunk extends base_js_1.BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        super(fields, kwargs);\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: (0, base_js_1.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0, base_js_1._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0, base_js_1._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            id: this.id ?? chunk.id,\n        });\n    }\n}\nexports.HumanMessageChunk = HumanMessageChunk;\nfunction isHumanMessage(x) {\n    return x.getType() === \"human\";\n}\nfunction isHumanMessageChunk(x) {\n    return x.getType() === \"human\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaHVtYW4uY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLG9CQUFvQjtBQUNoRCxzQkFBc0I7QUFDdEIsMkJBQTJCO0FBQzNCLGtCQUFrQixtQkFBTyxDQUFDLCtFQUFZO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9odW1hbi5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkh1bWFuTWVzc2FnZUNodW5rID0gZXhwb3J0cy5IdW1hbk1lc3NhZ2UgPSB2b2lkIDA7XG5leHBvcnRzLmlzSHVtYW5NZXNzYWdlID0gaXNIdW1hbk1lc3NhZ2U7XG5leHBvcnRzLmlzSHVtYW5NZXNzYWdlQ2h1bmsgPSBpc0h1bWFuTWVzc2FnZUNodW5rO1xuY29uc3QgYmFzZV9qc18xID0gcmVxdWlyZShcIi4vYmFzZS5janNcIik7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBodW1hbiBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5jbGFzcyBIdW1hbk1lc3NhZ2UgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJIdW1hbk1lc3NhZ2VcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImh1bWFuXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAga3dhcmdzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcywga3dhcmdzKTtcbiAgICB9XG59XG5leHBvcnRzLkh1bWFuTWVzc2FnZSA9IEh1bWFuTWVzc2FnZTtcbi8qKlxuICogUmVwcmVzZW50cyBhIGNodW5rIG9mIGEgaHVtYW4gbWVzc2FnZSwgd2hpY2ggY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoXG4gKiBvdGhlciBodW1hbiBtZXNzYWdlIGNodW5rcy5cbiAqL1xuY2xhc3MgSHVtYW5NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2VDaHVuayB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkh1bWFuTWVzc2FnZUNodW5rXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJodW1hblwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIFxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIGt3YXJncykge1xuICAgICAgICBzdXBlcihmaWVsZHMsIGt3YXJncyk7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6ICgwLCBiYXNlX2pzXzEubWVyZ2VDb250ZW50KSh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6ICgwLCBiYXNlX2pzXzEuX21lcmdlRGljdHMpKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiAoMCwgYmFzZV9qc18xLl9tZXJnZURpY3RzKSh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgICAgICBpZDogdGhpcy5pZCA/PyBjaHVuay5pZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5IdW1hbk1lc3NhZ2VDaHVuayA9IEh1bWFuTWVzc2FnZUNodW5rO1xuZnVuY3Rpb24gaXNIdW1hbk1lc3NhZ2UoeCkge1xuICAgIHJldHVybiB4LmdldFR5cGUoKSA9PT0gXCJodW1hblwiO1xufVxuZnVuY3Rpb24gaXNIdW1hbk1lc3NhZ2VDaHVuayh4KSB7XG4gICAgcmV0dXJuIHguZ2V0VHlwZSgpID09PSBcImh1bWFuXCI7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/human.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/index.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/index.cjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isToolMessageChunk = exports.isToolMessage = exports.ToolMessageChunk = exports.ToolMessage = void 0;\n__exportStar(__webpack_require__(/*! ./ai.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./chat.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./function.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./human.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./system.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./transformers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/transformers.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./modifier.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/modifier.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./content_blocks.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/content_blocks.cjs\"), exports);\n// TODO: Use a star export when we deprecate the\n// existing \"ToolCall\" type in \"base.js\".\nvar tool_js_1 = __webpack_require__(/*! ./tool.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.cjs\");\nObject.defineProperty(exports, \"ToolMessage\", ({ enumerable: true, get: function () { return tool_js_1.ToolMessage; } }));\nObject.defineProperty(exports, \"ToolMessageChunk\", ({ enumerable: true, get: function () { return tool_js_1.ToolMessageChunk; } }));\nObject.defineProperty(exports, \"isToolMessage\", ({ enumerable: true, get: function () { return tool_js_1.isToolMessage; } }));\nObject.defineProperty(exports, \"isToolMessageChunk\", ({ enumerable: true, get: function () { return tool_js_1.isToolMessageChunk; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLHFCQUFxQixHQUFHLHdCQUF3QixHQUFHLG1CQUFtQjtBQUNuRyxhQUFhLG1CQUFPLENBQUMsMkVBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLCtFQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQywrRUFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsdUZBQWdCO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyxpRkFBYTtBQUNsQyxhQUFhLG1CQUFPLENBQUMsbUZBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLGlGQUFhO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQywrRkFBb0I7QUFDekMsYUFBYSxtQkFBTyxDQUFDLHVGQUFnQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMsbUdBQXNCO0FBQzNDO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQywrRUFBWTtBQUNwQywrQ0FBOEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDdkgsb0RBQW1ELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ2pJLGlEQUFnRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUMzSCxzREFBcUQsRUFBRSxxQ0FBcUMsd0NBQXdDLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL2luZGV4LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1Rvb2xNZXNzYWdlQ2h1bmsgPSBleHBvcnRzLmlzVG9vbE1lc3NhZ2UgPSBleHBvcnRzLlRvb2xNZXNzYWdlQ2h1bmsgPSBleHBvcnRzLlRvb2xNZXNzYWdlID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FpLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmFzZS5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NoYXQuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mdW5jdGlvbi5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2h1bWFuLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3lzdGVtLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHMuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2Zvcm1lcnMuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tb2RpZmllci5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnRlbnRfYmxvY2tzLmNqc1wiKSwgZXhwb3J0cyk7XG4vLyBUT0RPOiBVc2UgYSBzdGFyIGV4cG9ydCB3aGVuIHdlIGRlcHJlY2F0ZSB0aGVcbi8vIGV4aXN0aW5nIFwiVG9vbENhbGxcIiB0eXBlIGluIFwiYmFzZS5qc1wiLlxudmFyIHRvb2xfanNfMSA9IHJlcXVpcmUoXCIuL3Rvb2wuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9vbE1lc3NhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRvb2xfanNfMS5Ub29sTWVzc2FnZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRvb2xNZXNzYWdlQ2h1bmtcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRvb2xfanNfMS5Ub29sTWVzc2FnZUNodW5rOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNUb29sTWVzc2FnZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdG9vbF9qc18xLmlzVG9vbE1lc3NhZ2U7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1Rvb2xNZXNzYWdlQ2h1bmtcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRvb2xfanNfMS5pc1Rvb2xNZXNzYWdlQ2h1bms7IH0gfSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/modifier.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/modifier.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoveMessage = void 0;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\n/**\n * Message responsible for deleting other messages.\n */\nclass RemoveMessage extends base_js_1.BaseMessage {\n    constructor(fields) {\n        super({\n            ...fields,\n            content: \"\",\n        });\n        /**\n         * The ID of the message to remove.\n         */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.id = fields.id;\n    }\n    _getType() {\n        return \"remove\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            id: this.id,\n        };\n    }\n}\nexports.RemoveMessage = RemoveMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvbW9kaWZpZXIuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixrQkFBa0IsbUJBQU8sQ0FBQywrRUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9tb2RpZmllci5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlbW92ZU1lc3NhZ2UgPSB2b2lkIDA7XG5jb25zdCBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlLmNqc1wiKTtcbi8qKlxuICogTWVzc2FnZSByZXNwb25zaWJsZSBmb3IgZGVsZXRpbmcgb3RoZXIgbWVzc2FnZXMuXG4gKi9cbmNsYXNzIFJlbW92ZU1lc3NhZ2UgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBJRCBvZiB0aGUgbWVzc2FnZSB0byByZW1vdmUuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmlkID0gZmllbGRzLmlkO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwicmVtb3ZlXCI7XG4gICAgfVxuICAgIGdldCBfcHJpbnRhYmxlRmllbGRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIuX3ByaW50YWJsZUZpZWxkcyxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUmVtb3ZlTWVzc2FnZSA9IFJlbW92ZU1lc3NhZ2U7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/modifier.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/system.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/system.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SystemMessageChunk = exports.SystemMessage = void 0;\nexports.isSystemMessage = isSystemMessage;\nexports.isSystemMessageChunk = isSystemMessageChunk;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\n/**\n * Represents a system message in a conversation.\n */\nclass SystemMessage extends base_js_1.BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        super(fields, kwargs);\n    }\n}\nexports.SystemMessage = SystemMessage;\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */\nclass SystemMessageChunk extends base_js_1.BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        super(fields, kwargs);\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: (0, base_js_1.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0, base_js_1._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0, base_js_1._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            id: this.id ?? chunk.id,\n        });\n    }\n}\nexports.SystemMessageChunk = SystemMessageChunk;\nfunction isSystemMessage(x) {\n    return x._getType() === \"system\";\n}\nfunction isSystemMessageChunk(x) {\n    return x._getType() === \"system\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvc3lzdGVtLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxxQkFBcUI7QUFDbEQsdUJBQXVCO0FBQ3ZCLDRCQUE0QjtBQUM1QixrQkFBa0IsbUJBQU8sQ0FBQywrRUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvc3lzdGVtLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3lzdGVtTWVzc2FnZUNodW5rID0gZXhwb3J0cy5TeXN0ZW1NZXNzYWdlID0gdm9pZCAwO1xuZXhwb3J0cy5pc1N5c3RlbU1lc3NhZ2UgPSBpc1N5c3RlbU1lc3NhZ2U7XG5leHBvcnRzLmlzU3lzdGVtTWVzc2FnZUNodW5rID0gaXNTeXN0ZW1NZXNzYWdlQ2h1bms7XG5jb25zdCBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlLmNqc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHN5c3RlbSBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5jbGFzcyBTeXN0ZW1NZXNzYWdlIGV4dGVuZHMgYmFzZV9qc18xLkJhc2VNZXNzYWdlIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3lzdGVtTWVzc2FnZVwiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic3lzdGVtXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAga3dhcmdzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcywga3dhcmdzKTtcbiAgICB9XG59XG5leHBvcnRzLlN5c3RlbU1lc3NhZ2UgPSBTeXN0ZW1NZXNzYWdlO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBzeXN0ZW0gbWVzc2FnZSwgd2hpY2ggY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoXG4gKiBvdGhlciBzeXN0ZW0gbWVzc2FnZSBjaHVua3MuXG4gKi9cbmNsYXNzIFN5c3RlbU1lc3NhZ2VDaHVuayBleHRlbmRzIGJhc2VfanNfMS5CYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3lzdGVtTWVzc2FnZUNodW5rXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJzeXN0ZW1cIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzLCBcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICBrd2FyZ3MpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzLCBrd2FyZ3MpO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogKDAsIGJhc2VfanNfMS5tZXJnZUNvbnRlbnQpKHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogKDAsIGJhc2VfanNfMS5fbWVyZ2VEaWN0cykodGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6ICgwLCBiYXNlX2pzXzEuX21lcmdlRGljdHMpKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkID8/IGNodW5rLmlkLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlN5c3RlbU1lc3NhZ2VDaHVuayA9IFN5c3RlbU1lc3NhZ2VDaHVuaztcbmZ1bmN0aW9uIGlzU3lzdGVtTWVzc2FnZSh4KSB7XG4gICAgcmV0dXJuIHguX2dldFR5cGUoKSA9PT0gXCJzeXN0ZW1cIjtcbn1cbmZ1bmN0aW9uIGlzU3lzdGVtTWVzc2FnZUNodW5rKHgpIHtcbiAgICByZXR1cm4geC5fZ2V0VHlwZSgpID09PSBcInN5c3RlbVwiO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/system.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/tool.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/tool.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ToolMessageChunk = exports.ToolMessage = void 0;\nexports.isDirectToolOutput = isDirectToolOutput;\nexports.defaultToolCallParser = defaultToolCallParser;\nexports.isToolMessage = isToolMessage;\nexports.isToolMessageChunk = isToolMessageChunk;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\nfunction isDirectToolOutput(x) {\n    return (x != null &&\n        typeof x === \"object\" &&\n        \"lc_direct_tool_output\" in x &&\n        x.lc_direct_tool_output === true);\n}\n/**\n * Represents a tool message in a conversation.\n */\nclass ToolMessage extends base_js_1.BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return { tool_call_id: \"tool_call_id\" };\n    }\n    constructor(fields, tool_call_id, name) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { content: fields, name, tool_call_id: tool_call_id };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_direct_tool_output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n        this.metadata = fields.metadata;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact,\n        };\n    }\n}\nexports.ToolMessage = ToolMessage;\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */\nclass ToolMessageChunk extends base_js_1.BaseMessageChunk {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: (0, base_js_1.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0, base_js_1._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0, base_js_1._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            artifact: (0, base_js_1._mergeObj)(this.artifact, chunk.artifact),\n            tool_call_id: this.tool_call_id,\n            id: this.id ?? chunk.id,\n            status: (0, base_js_1._mergeStatus)(this.status, chunk.status),\n        });\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact,\n        };\n    }\n}\nexports.ToolMessageChunk = ToolMessageChunk;\nfunction defaultToolCallParser(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls) {\n        if (!toolCall.function) {\n            continue;\n        }\n        else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id,\n                };\n                toolCalls.push(parsed);\n            }\n            catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\",\n                });\n            }\n        }\n    }\n    return [toolCalls, invalidToolCalls];\n}\nfunction isToolMessage(x) {\n    return x._getType() === \"tool\";\n}\nfunction isToolMessageChunk(x) {\n    return x._getType() === \"tool\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/tool.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/transformers.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/transformers.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.filterMessages = filterMessages;\nexports.mergeMessageRuns = mergeMessageRuns;\nexports.trimMessages = trimMessages;\nexports.defaultTextSplitter = defaultTextSplitter;\nconst base_js_1 = __webpack_require__(/*! ../runnables/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst ai_js_1 = __webpack_require__(/*! ./ai.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs\");\nconst base_js_2 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\nconst chat_js_1 = __webpack_require__(/*! ./chat.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.cjs\");\nconst function_js_1 = __webpack_require__(/*! ./function.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.cjs\");\nconst human_js_1 = __webpack_require__(/*! ./human.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.cjs\");\nconst modifier_js_1 = __webpack_require__(/*! ./modifier.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/modifier.cjs\");\nconst system_js_1 = __webpack_require__(/*! ./system.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.cjs\");\nconst tool_js_1 = __webpack_require__(/*! ./tool.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\");\nconst _isMessageType = (msg, types) => {\n    const typesAsStrings = [\n        ...new Set(types?.map((t) => {\n            if (typeof t === \"string\") {\n                return t;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const instantiatedMsgClass = new t({});\n            if (!(\"getType\" in instantiatedMsgClass) ||\n                typeof instantiatedMsgClass.getType !== \"function\") {\n                throw new Error(\"Invalid type provided.\");\n            }\n            return instantiatedMsgClass.getType();\n        })),\n    ];\n    const msgType = msg.getType();\n    return typesAsStrings.some((t) => t === msgType);\n};\nfunction filterMessages(messagesOrOptions, options) {\n    if (Array.isArray(messagesOrOptions)) {\n        return _filterMessages(messagesOrOptions, options);\n    }\n    return base_js_1.RunnableLambda.from((input) => {\n        return _filterMessages(input, messagesOrOptions);\n    });\n}\nfunction _filterMessages(messages, options = {}) {\n    const { includeNames, excludeNames, includeTypes, excludeTypes, includeIds, excludeIds, } = options;\n    const filtered = [];\n    for (const msg of messages) {\n        if (excludeNames && msg.name && excludeNames.includes(msg.name)) {\n            continue;\n        }\n        else if (excludeTypes && _isMessageType(msg, excludeTypes)) {\n            continue;\n        }\n        else if (excludeIds && msg.id && excludeIds.includes(msg.id)) {\n            continue;\n        }\n        // default to inclusion when no inclusion criteria given.\n        if (!(includeTypes || includeIds || includeNames)) {\n            filtered.push(msg);\n        }\n        else if (includeNames &&\n            msg.name &&\n            includeNames.some((iName) => iName === msg.name)) {\n            filtered.push(msg);\n        }\n        else if (includeTypes && _isMessageType(msg, includeTypes)) {\n            filtered.push(msg);\n        }\n        else if (includeIds && msg.id && includeIds.some((id) => id === msg.id)) {\n            filtered.push(msg);\n        }\n    }\n    return filtered;\n}\nfunction mergeMessageRuns(messages) {\n    if (Array.isArray(messages)) {\n        return _mergeMessageRuns(messages);\n    }\n    return base_js_1.RunnableLambda.from(_mergeMessageRuns);\n}\nfunction _mergeMessageRuns(messages) {\n    if (!messages.length) {\n        return [];\n    }\n    const merged = [];\n    for (const msg of messages) {\n        const curr = msg;\n        const last = merged.pop();\n        if (!last) {\n            merged.push(curr);\n        }\n        else if (curr.getType() === \"tool\" ||\n            !(curr.getType() === last.getType())) {\n            merged.push(last, curr);\n        }\n        else {\n            const lastChunk = (0, utils_js_1.convertToChunk)(last);\n            const currChunk = (0, utils_js_1.convertToChunk)(curr);\n            const mergedChunks = lastChunk.concat(currChunk);\n            if (typeof lastChunk.content === \"string\" &&\n                typeof currChunk.content === \"string\") {\n                mergedChunks.content = `${lastChunk.content}\\n${currChunk.content}`;\n            }\n            merged.push(_chunkToMsg(mergedChunks));\n        }\n    }\n    return merged;\n}\nfunction trimMessages(messagesOrOptions, options) {\n    if (Array.isArray(messagesOrOptions)) {\n        const messages = messagesOrOptions;\n        if (!options) {\n            throw new Error(\"Options parameter is required when providing messages.\");\n        }\n        return _trimMessagesHelper(messages, options);\n    }\n    else {\n        const trimmerOptions = messagesOrOptions;\n        return base_js_1.RunnableLambda.from((input) => _trimMessagesHelper(input, trimmerOptions)).withConfig({\n            runName: \"trim_messages\",\n        });\n    }\n}\nasync function _trimMessagesHelper(messages, options) {\n    const { maxTokens, tokenCounter, strategy = \"last\", allowPartial = false, endOn, startOn, includeSystem = false, textSplitter, } = options;\n    if (startOn && strategy === \"first\") {\n        throw new Error(\"`startOn` should only be specified if `strategy` is 'last'.\");\n    }\n    if (includeSystem && strategy === \"first\") {\n        throw new Error(\"`includeSystem` should only be specified if `strategy` is 'last'.\");\n    }\n    let listTokenCounter;\n    if (\"getNumTokens\" in tokenCounter) {\n        listTokenCounter = async (msgs) => {\n            const tokenCounts = await Promise.all(msgs.map((msg) => tokenCounter.getNumTokens(msg.content)));\n            return tokenCounts.reduce((sum, count) => sum + count, 0);\n        };\n    }\n    else {\n        listTokenCounter = async (msgs) => tokenCounter(msgs);\n    }\n    let textSplitterFunc = defaultTextSplitter;\n    if (textSplitter) {\n        if (\"splitText\" in textSplitter) {\n            textSplitterFunc = textSplitter.splitText;\n        }\n        else {\n            textSplitterFunc = async (text) => textSplitter(text);\n        }\n    }\n    if (strategy === \"first\") {\n        return _firstMaxTokens(messages, {\n            maxTokens,\n            tokenCounter: listTokenCounter,\n            textSplitter: textSplitterFunc,\n            partialStrategy: allowPartial ? \"first\" : undefined,\n            endOn,\n        });\n    }\n    else if (strategy === \"last\") {\n        return _lastMaxTokens(messages, {\n            maxTokens,\n            tokenCounter: listTokenCounter,\n            textSplitter: textSplitterFunc,\n            allowPartial,\n            includeSystem,\n            startOn,\n            endOn,\n        });\n    }\n    else {\n        throw new Error(`Unrecognized strategy: '${strategy}'. Must be one of 'first' or 'last'.`);\n    }\n}\nasync function _firstMaxTokens(messages, options) {\n    const { maxTokens, tokenCounter, textSplitter, partialStrategy, endOn } = options;\n    let messagesCopy = [...messages];\n    let idx = 0;\n    for (let i = 0; i < messagesCopy.length; i += 1) {\n        const remainingMessages = i > 0 ? messagesCopy.slice(0, -i) : messagesCopy;\n        if ((await tokenCounter(remainingMessages)) <= maxTokens) {\n            idx = messagesCopy.length - i;\n            break;\n        }\n    }\n    if (idx < messagesCopy.length && partialStrategy) {\n        let includedPartial = false;\n        if (Array.isArray(messagesCopy[idx].content)) {\n            const excluded = messagesCopy[idx];\n            if (typeof excluded.content === \"string\") {\n                throw new Error(\"Expected content to be an array.\");\n            }\n            const numBlock = excluded.content.length;\n            const reversedContent = partialStrategy === \"last\"\n                ? [...excluded.content].reverse()\n                : excluded.content;\n            for (let i = 1; i <= numBlock; i += 1) {\n                const partialContent = partialStrategy === \"first\"\n                    ? reversedContent.slice(0, i)\n                    : reversedContent.slice(-i);\n                const fields = Object.fromEntries(Object.entries(excluded).filter(([k]) => k !== \"type\" && !k.startsWith(\"lc_\")));\n                const updatedMessage = _switchTypeToMessage(excluded.getType(), {\n                    ...fields,\n                    content: partialContent,\n                });\n                const slicedMessages = [...messagesCopy.slice(0, idx), updatedMessage];\n                if ((await tokenCounter(slicedMessages)) <= maxTokens) {\n                    messagesCopy = slicedMessages;\n                    idx += 1;\n                    includedPartial = true;\n                }\n                else {\n                    break;\n                }\n            }\n            if (includedPartial && partialStrategy === \"last\") {\n                excluded.content = [...reversedContent].reverse();\n            }\n        }\n        if (!includedPartial) {\n            const excluded = messagesCopy[idx];\n            let text;\n            if (Array.isArray(excluded.content) &&\n                excluded.content.some((block) => typeof block === \"string\" || block.type === \"text\")) {\n                const textBlock = excluded.content.find((block) => block.type === \"text\" && block.text);\n                text = textBlock?.text;\n            }\n            else if (typeof excluded.content === \"string\") {\n                text = excluded.content;\n            }\n            if (text) {\n                const splitTexts = await textSplitter(text);\n                const numSplits = splitTexts.length;\n                if (partialStrategy === \"last\") {\n                    splitTexts.reverse();\n                }\n                for (let _ = 0; _ < numSplits - 1; _ += 1) {\n                    splitTexts.pop();\n                    excluded.content = splitTexts.join(\"\");\n                    if ((await tokenCounter([...messagesCopy.slice(0, idx), excluded])) <=\n                        maxTokens) {\n                        if (partialStrategy === \"last\") {\n                            excluded.content = [...splitTexts].reverse().join(\"\");\n                        }\n                        messagesCopy = [...messagesCopy.slice(0, idx), excluded];\n                        idx += 1;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (endOn) {\n        const endOnArr = Array.isArray(endOn) ? endOn : [endOn];\n        while (idx > 0 && !_isMessageType(messagesCopy[idx - 1], endOnArr)) {\n            idx -= 1;\n        }\n    }\n    return messagesCopy.slice(0, idx);\n}\nasync function _lastMaxTokens(messages, options) {\n    const { allowPartial = false, includeSystem = false, endOn, startOn, ...rest } = options;\n    // Create a copy of messages to avoid mutation\n    let messagesCopy = messages.map((message) => {\n        const fields = Object.fromEntries(Object.entries(message).filter(([k]) => k !== \"type\" && !k.startsWith(\"lc_\")));\n        return _switchTypeToMessage(message.getType(), fields, (0, base_js_2.isBaseMessageChunk)(message));\n    });\n    if (endOn) {\n        const endOnArr = Array.isArray(endOn) ? endOn : [endOn];\n        while (messagesCopy.length > 0 &&\n            !_isMessageType(messagesCopy[messagesCopy.length - 1], endOnArr)) {\n            messagesCopy = messagesCopy.slice(0, -1);\n        }\n    }\n    const swappedSystem = includeSystem && messagesCopy[0]?.getType() === \"system\";\n    let reversed_ = swappedSystem\n        ? messagesCopy.slice(0, 1).concat(messagesCopy.slice(1).reverse())\n        : messagesCopy.reverse();\n    reversed_ = await _firstMaxTokens(reversed_, {\n        ...rest,\n        partialStrategy: allowPartial ? \"last\" : undefined,\n        endOn: startOn,\n    });\n    if (swappedSystem) {\n        return [reversed_[0], ...reversed_.slice(1).reverse()];\n    }\n    else {\n        return reversed_.reverse();\n    }\n}\nconst _MSG_CHUNK_MAP = {\n    human: {\n        message: human_js_1.HumanMessage,\n        messageChunk: human_js_1.HumanMessageChunk,\n    },\n    ai: {\n        message: ai_js_1.AIMessage,\n        messageChunk: ai_js_1.AIMessageChunk,\n    },\n    system: {\n        message: system_js_1.SystemMessage,\n        messageChunk: system_js_1.SystemMessageChunk,\n    },\n    developer: {\n        message: system_js_1.SystemMessage,\n        messageChunk: system_js_1.SystemMessageChunk,\n    },\n    tool: {\n        message: tool_js_1.ToolMessage,\n        messageChunk: tool_js_1.ToolMessageChunk,\n    },\n    function: {\n        message: function_js_1.FunctionMessage,\n        messageChunk: function_js_1.FunctionMessageChunk,\n    },\n    generic: {\n        message: chat_js_1.ChatMessage,\n        messageChunk: chat_js_1.ChatMessageChunk,\n    },\n    remove: {\n        message: modifier_js_1.RemoveMessage,\n        messageChunk: modifier_js_1.RemoveMessage, // RemoveMessage does not have a chunk class.\n    },\n};\nfunction _switchTypeToMessage(messageType, fields, returnChunk) {\n    let chunk;\n    let msg;\n    switch (messageType) {\n        case \"human\":\n            if (returnChunk) {\n                chunk = new human_js_1.HumanMessageChunk(fields);\n            }\n            else {\n                msg = new human_js_1.HumanMessage(fields);\n            }\n            break;\n        case \"ai\":\n            if (returnChunk) {\n                let aiChunkFields = {\n                    ...fields,\n                };\n                if (\"tool_calls\" in aiChunkFields) {\n                    aiChunkFields = {\n                        ...aiChunkFields,\n                        tool_call_chunks: aiChunkFields.tool_calls?.map((tc) => ({\n                            ...tc,\n                            type: \"tool_call_chunk\",\n                            index: undefined,\n                            args: JSON.stringify(tc.args),\n                        })),\n                    };\n                }\n                chunk = new ai_js_1.AIMessageChunk(aiChunkFields);\n            }\n            else {\n                msg = new ai_js_1.AIMessage(fields);\n            }\n            break;\n        case \"system\":\n            if (returnChunk) {\n                chunk = new system_js_1.SystemMessageChunk(fields);\n            }\n            else {\n                msg = new system_js_1.SystemMessage(fields);\n            }\n            break;\n        case \"developer\":\n            if (returnChunk) {\n                chunk = new system_js_1.SystemMessageChunk({\n                    ...fields,\n                    additional_kwargs: {\n                        ...fields.additional_kwargs,\n                        __openai_role__: \"developer\",\n                    },\n                });\n            }\n            else {\n                msg = new system_js_1.SystemMessage({\n                    ...fields,\n                    additional_kwargs: {\n                        ...fields.additional_kwargs,\n                        __openai_role__: \"developer\",\n                    },\n                });\n            }\n            break;\n        case \"tool\":\n            if (\"tool_call_id\" in fields) {\n                if (returnChunk) {\n                    chunk = new tool_js_1.ToolMessageChunk(fields);\n                }\n                else {\n                    msg = new tool_js_1.ToolMessage(fields);\n                }\n            }\n            else {\n                throw new Error(\"Can not convert ToolMessage to ToolMessageChunk if 'tool_call_id' field is not defined.\");\n            }\n            break;\n        case \"function\":\n            if (returnChunk) {\n                chunk = new function_js_1.FunctionMessageChunk(fields);\n            }\n            else {\n                if (!fields.name) {\n                    throw new Error(\"FunctionMessage must have a 'name' field\");\n                }\n                msg = new function_js_1.FunctionMessage(fields);\n            }\n            break;\n        case \"generic\":\n            if (\"role\" in fields) {\n                if (returnChunk) {\n                    chunk = new chat_js_1.ChatMessageChunk(fields);\n                }\n                else {\n                    msg = new chat_js_1.ChatMessage(fields);\n                }\n            }\n            else {\n                throw new Error(\"Can not convert ChatMessage to ChatMessageChunk if 'role' field is not defined.\");\n            }\n            break;\n        default:\n            throw new Error(`Unrecognized message type ${messageType}`);\n    }\n    if (returnChunk && chunk) {\n        return chunk;\n    }\n    if (msg) {\n        return msg;\n    }\n    throw new Error(`Unrecognized message type ${messageType}`);\n}\nfunction _chunkToMsg(chunk) {\n    const chunkType = chunk.getType();\n    let msg;\n    const fields = Object.fromEntries(Object.entries(chunk).filter(([k]) => ![\"type\", \"tool_call_chunks\"].includes(k) && !k.startsWith(\"lc_\")));\n    if (chunkType in _MSG_CHUNK_MAP) {\n        msg = _switchTypeToMessage(chunkType, fields);\n    }\n    if (!msg) {\n        throw new Error(`Unrecognized message chunk class ${chunkType}. Supported classes are ${Object.keys(_MSG_CHUNK_MAP)}`);\n    }\n    return msg;\n}\n/**\n * The default text splitter function that splits text by newlines.\n *\n * @param {string} text\n * @returns A promise that resolves to an array of strings split by newlines.\n */\nfunction defaultTextSplitter(text) {\n    const splits = text.split(\"\\n\");\n    return Promise.resolve([\n        ...splits.slice(0, -1).map((s) => `${s}\\n`),\n        splits[splits.length - 1],\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/transformers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/utils.cjs ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.coerceMessageLikeToMessage = coerceMessageLikeToMessage;\nexports.getBufferString = getBufferString;\nexports.mapStoredMessageToChatMessage = mapStoredMessageToChatMessage;\nexports.mapStoredMessagesToChatMessages = mapStoredMessagesToChatMessages;\nexports.mapChatMessagesToStoredMessages = mapChatMessagesToStoredMessages;\nexports.convertToChunk = convertToChunk;\nconst index_js_1 = __webpack_require__(/*! ../errors/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/errors/index.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ../tools/utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.cjs\");\nconst ai_js_1 = __webpack_require__(/*! ./ai.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\nconst chat_js_1 = __webpack_require__(/*! ./chat.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.cjs\");\nconst function_js_1 = __webpack_require__(/*! ./function.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.cjs\");\nconst human_js_1 = __webpack_require__(/*! ./human.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.cjs\");\nconst modifier_js_1 = __webpack_require__(/*! ./modifier.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/modifier.cjs\");\nconst system_js_1 = __webpack_require__(/*! ./system.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.cjs\");\nconst tool_js_1 = __webpack_require__(/*! ./tool.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.cjs\");\nfunction _coerceToolCall(toolCall) {\n    if ((0, utils_js_1._isToolCall)(toolCall)) {\n        return toolCall;\n    }\n    else if (typeof toolCall.id === \"string\" &&\n        toolCall.type === \"function\" &&\n        typeof toolCall.function === \"object\" &&\n        toolCall.function !== null &&\n        \"arguments\" in toolCall.function &&\n        typeof toolCall.function.arguments === \"string\" &&\n        \"name\" in toolCall.function &&\n        typeof toolCall.function.name === \"string\") {\n        // Handle OpenAI tool call format\n        return {\n            id: toolCall.id,\n            args: JSON.parse(toolCall.function.arguments),\n            name: toolCall.function.name,\n            type: \"tool_call\",\n        };\n    }\n    else {\n        // TODO: Throw an error?\n        return toolCall;\n    }\n}\nfunction isSerializedConstructor(x) {\n    return (typeof x === \"object\" &&\n        x != null &&\n        x.lc === 1 &&\n        Array.isArray(x.id) &&\n        x.kwargs != null &&\n        typeof x.kwargs === \"object\");\n}\nfunction _constructMessageFromParams(params) {\n    let type;\n    let rest;\n    // Support serialized messages\n    if (isSerializedConstructor(params)) {\n        const className = params.id.at(-1);\n        if (className === \"HumanMessage\" || className === \"HumanMessageChunk\") {\n            type = \"user\";\n        }\n        else if (className === \"AIMessage\" || className === \"AIMessageChunk\") {\n            type = \"assistant\";\n        }\n        else if (className === \"SystemMessage\" ||\n            className === \"SystemMessageChunk\") {\n            type = \"system\";\n        }\n        else if (className === \"FunctionMessage\" ||\n            className === \"FunctionMessageChunk\") {\n            type = \"function\";\n        }\n        else if (className === \"ToolMessage\" ||\n            className === \"ToolMessageChunk\") {\n            type = \"tool\";\n        }\n        else {\n            type = \"unknown\";\n        }\n        rest = params.kwargs;\n    }\n    else {\n        const { type: extractedType, ...otherParams } = params;\n        type = extractedType;\n        rest = otherParams;\n    }\n    if (type === \"human\" || type === \"user\") {\n        return new human_js_1.HumanMessage(rest);\n    }\n    else if (type === \"ai\" || type === \"assistant\") {\n        const { tool_calls: rawToolCalls, ...other } = rest;\n        if (!Array.isArray(rawToolCalls)) {\n            return new ai_js_1.AIMessage(rest);\n        }\n        const tool_calls = rawToolCalls.map(_coerceToolCall);\n        return new ai_js_1.AIMessage({ ...other, tool_calls });\n    }\n    else if (type === \"system\") {\n        return new system_js_1.SystemMessage(rest);\n    }\n    else if (type === \"developer\") {\n        return new system_js_1.SystemMessage({\n            ...rest,\n            additional_kwargs: {\n                ...rest.additional_kwargs,\n                __openai_role__: \"developer\",\n            },\n        });\n    }\n    else if (type === \"tool\" && \"tool_call_id\" in rest) {\n        return new tool_js_1.ToolMessage({\n            ...rest,\n            content: rest.content,\n            tool_call_id: rest.tool_call_id,\n            name: rest.name,\n        });\n    }\n    else if (type === \"remove\" && \"id\" in rest && typeof rest.id === \"string\") {\n        return new modifier_js_1.RemoveMessage({ ...rest, id: rest.id });\n    }\n    else {\n        const error = (0, index_js_1.addLangChainErrorFields)(new Error(`Unable to coerce message from array: only human, AI, system, developer, or tool message coercion is currently supported.\\n\\nReceived: ${JSON.stringify(params, null, 2)}`), \"MESSAGE_COERCION_FAILURE\");\n        throw error;\n    }\n}\nfunction coerceMessageLikeToMessage(messageLike) {\n    if (typeof messageLike === \"string\") {\n        return new human_js_1.HumanMessage(messageLike);\n    }\n    else if ((0, base_js_1.isBaseMessage)(messageLike)) {\n        return messageLike;\n    }\n    if (Array.isArray(messageLike)) {\n        const [type, content] = messageLike;\n        return _constructMessageFromParams({ type, content });\n    }\n    else if ((0, base_js_1._isMessageFieldWithRole)(messageLike)) {\n        const { role: type, ...rest } = messageLike;\n        return _constructMessageFromParams({ ...rest, type });\n    }\n    else {\n        return _constructMessageFromParams(messageLike);\n    }\n}\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */\nfunction getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages) {\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        }\n        else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        }\n        else if (m._getType() === \"system\") {\n            role = \"System\";\n        }\n        else if (m._getType() === \"function\") {\n            role = \"Function\";\n        }\n        else if (m._getType() === \"tool\") {\n            role = \"Tool\";\n        }\n        else if (m._getType() === \"generic\") {\n            role = m.role;\n        }\n        else {\n            throw new Error(`Got unsupported message type: ${m._getType()}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        const readableContent = typeof m.content === \"string\"\n            ? m.content\n            : JSON.stringify(m.content, null, 2);\n        string_messages.push(`${role}: ${nameStr}${readableContent}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Maps messages from an older format (V1) to the current `StoredMessage`\n * format. If the message is already in the `StoredMessage` format, it is\n * returned as is. Otherwise, it transforms the V1 message into a\n * `StoredMessage`. This function is important for maintaining\n * compatibility with older message formats.\n */\nfunction mapV1MessageToStoredMessage(message) {\n    // TODO: Remove this mapper when we deprecate the old message format.\n    if (message.data !== undefined) {\n        return message;\n    }\n    else {\n        const v1Message = message;\n        return {\n            type: v1Message.type,\n            data: {\n                content: v1Message.text,\n                role: v1Message.role,\n                name: undefined,\n                tool_call_id: undefined,\n            },\n        };\n    }\n}\nfunction mapStoredMessageToChatMessage(message) {\n    const storedMessage = mapV1MessageToStoredMessage(message);\n    switch (storedMessage.type) {\n        case \"human\":\n            return new human_js_1.HumanMessage(storedMessage.data);\n        case \"ai\":\n            return new ai_js_1.AIMessage(storedMessage.data);\n        case \"system\":\n            return new system_js_1.SystemMessage(storedMessage.data);\n        case \"function\":\n            if (storedMessage.data.name === undefined) {\n                throw new Error(\"Name must be defined for function messages\");\n            }\n            return new function_js_1.FunctionMessage(storedMessage.data);\n        case \"tool\":\n            if (storedMessage.data.tool_call_id === undefined) {\n                throw new Error(\"Tool call ID must be defined for tool messages\");\n            }\n            return new tool_js_1.ToolMessage(storedMessage.data);\n        case \"generic\": {\n            if (storedMessage.data.role === undefined) {\n                throw new Error(\"Role must be defined for chat messages\");\n            }\n            return new chat_js_1.ChatMessage(storedMessage.data);\n        }\n        default:\n            throw new Error(`Got unexpected type: ${storedMessage.type}`);\n    }\n}\n/**\n * Transforms an array of `StoredMessage` instances into an array of\n * `BaseMessage` instances. It uses the `mapV1MessageToStoredMessage`\n * function to ensure all messages are in the `StoredMessage` format, then\n * creates new instances of the appropriate `BaseMessage` subclass based\n * on the type of each message. This function is used to prepare stored\n * messages for use in a chat context.\n */\nfunction mapStoredMessagesToChatMessages(messages) {\n    return messages.map(mapStoredMessageToChatMessage);\n}\n/**\n * Transforms an array of `BaseMessage` instances into an array of\n * `StoredMessage` instances. It does this by calling the `toDict` method\n * on each `BaseMessage`, which returns a `StoredMessage`. This function\n * is used to prepare chat messages for storage.\n */\nfunction mapChatMessagesToStoredMessages(messages) {\n    return messages.map((message) => message.toDict());\n}\nfunction convertToChunk(message) {\n    const type = message._getType();\n    if (type === \"human\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new human_js_1.HumanMessageChunk({ ...message });\n    }\n    else if (type === \"ai\") {\n        let aiChunkFields = {\n            ...message,\n        };\n        if (\"tool_calls\" in aiChunkFields) {\n            aiChunkFields = {\n                ...aiChunkFields,\n                tool_call_chunks: aiChunkFields.tool_calls?.map((tc) => ({\n                    ...tc,\n                    type: \"tool_call_chunk\",\n                    index: undefined,\n                    args: JSON.stringify(tc.args),\n                })),\n            };\n        }\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new ai_js_1.AIMessageChunk({ ...aiChunkFields });\n    }\n    else if (type === \"system\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new system_js_1.SystemMessageChunk({ ...message });\n    }\n    else if (type === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new function_js_1.FunctionMessageChunk({ ...message });\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    }\n    else if (chat_js_1.ChatMessage.isInstance(message)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new chat_js_1.ChatMessageChunk({ ...message });\n    }\n    else {\n        throw new Error(\"Unknown message type.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/base.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OutputParserException = exports.BaseOutputParser = exports.BaseLLMOutputParser = void 0;\nconst index_js_1 = __webpack_require__(/*! ../runnables/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.cjs\");\nconst index_js_2 = __webpack_require__(/*! ../errors/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/errors/index.cjs\");\n/**\n * Abstract base class for parsing the output of a Large Language Model\n * (LLM) call. It provides methods for parsing the result of an LLM call\n * and invoking the parser with a given input.\n */\nclass BaseLLMOutputParser extends index_js_1.Runnable {\n    /**\n     * Parses the result of an LLM call with a given prompt. By default, it\n     * simply calls `parseResult`.\n     * @param generations The generations from an LLM call.\n     * @param _prompt The prompt used in the LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */\n    parseResultWithPrompt(generations, _prompt, callbacks) {\n        return this.parseResult(generations, callbacks);\n    }\n    _baseMessageToString(message) {\n        return typeof message.content === \"string\"\n            ? message.content\n            : this._baseMessageContentToString(message.content);\n    }\n    _baseMessageContentToString(content) {\n        return JSON.stringify(content);\n    }\n    /**\n     * Calls the parser with a given input and optional configuration options.\n     * If the input is a string, it creates a generation with the input as\n     * text and calls `parseResult`. If the input is a `BaseMessage`, it\n     * creates a generation with the input as a message and the content of the\n     * input as text, and then calls `parseResult`.\n     * @param input The input to the parser, which can be a string or a `BaseMessage`.\n     * @param options Optional configuration options.\n     * @returns A promise of the parsed output.\n     */\n    async invoke(input, options) {\n        if (typeof input === \"string\") {\n            return this._callWithConfig(async (input, options) => this.parseResult([{ text: input }], options?.callbacks), input, { ...options, runType: \"parser\" });\n        }\n        else {\n            return this._callWithConfig(async (input, options) => this.parseResult([\n                {\n                    message: input,\n                    text: this._baseMessageToString(input),\n                },\n            ], options?.callbacks), input, { ...options, runType: \"parser\" });\n        }\n    }\n}\nexports.BaseLLMOutputParser = BaseLLMOutputParser;\n/**\n * Class to parse the output of an LLM call.\n */\nclass BaseOutputParser extends BaseLLMOutputParser {\n    parseResult(generations, callbacks) {\n        return this.parse(generations[0].text, callbacks);\n    }\n    async parseWithPrompt(text, _prompt, callbacks) {\n        return this.parse(text, callbacks);\n    }\n    /**\n     * Return the string type key uniquely identifying this class of parser\n     */\n    _type() {\n        throw new Error(\"_type not implemented\");\n    }\n}\nexports.BaseOutputParser = BaseOutputParser;\n/**\n * Exception that output parsers should raise to signify a parsing error.\n *\n * This exists to differentiate parsing errors from other code or execution errors\n * that also may arise inside the output parser. OutputParserExceptions will be\n * available to catch and handle in ways to fix the parsing error, while other\n * errors will be raised.\n *\n * @param message - The error that's being re-raised or an error message.\n * @param llmOutput - String model output which is error-ing.\n * @param observation - String explanation of error which can be passed to a\n *     model to try and remediate the issue.\n * @param sendToLLM - Whether to send the observation and llm_output back to an Agent\n *     after an OutputParserException has been raised. This gives the underlying\n *     model driving the agent the context that the previous output was improperly\n *     structured, in the hopes that it will update the output to the correct\n *     format.\n */\nclass OutputParserException extends Error {\n    constructor(message, llmOutput, observation, sendToLLM = false) {\n        super(message);\n        Object.defineProperty(this, \"llmOutput\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sendToLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmOutput = llmOutput;\n        this.observation = observation;\n        this.sendToLLM = sendToLLM;\n        if (sendToLLM) {\n            if (observation === undefined || llmOutput === undefined) {\n                throw new Error(\"Arguments 'observation' & 'llmOutput' are required if 'sendToLlm' is true\");\n            }\n        }\n        (0, index_js_2.addLangChainErrorFields)(this, \"OUTPUT_PARSING_FAILURE\");\n    }\n}\nexports.OutputParserException = OutputParserException;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/bytes.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BytesOutputParser = void 0;\nconst transform_js_1 = __webpack_require__(/*! ./transform.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\");\n/**\n * OutputParser that parses LLMResult into the top likely string and\n * encodes it into bytes.\n */\nclass BytesOutputParser extends transform_js_1.BaseTransformOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\", \"bytes\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"textEncoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new TextEncoder()\n        });\n    }\n    static lc_name() {\n        return \"BytesOutputParser\";\n    }\n    parse(text) {\n        return Promise.resolve(this.textEncoder.encode(text));\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\nexports.BytesOutputParser = BytesOutputParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvYnl0ZXMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qix1QkFBdUIsbUJBQU8sQ0FBQywrRkFBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9vdXRwdXRfcGFyc2Vycy9ieXRlcy5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ5dGVzT3V0cHV0UGFyc2VyID0gdm9pZCAwO1xuY29uc3QgdHJhbnNmb3JtX2pzXzEgPSByZXF1aXJlKFwiLi90cmFuc2Zvcm0uY2pzXCIpO1xuLyoqXG4gKiBPdXRwdXRQYXJzZXIgdGhhdCBwYXJzZXMgTExNUmVzdWx0IGludG8gdGhlIHRvcCBsaWtlbHkgc3RyaW5nIGFuZFxuICogZW5jb2RlcyBpdCBpbnRvIGJ5dGVzLlxuICovXG5jbGFzcyBCeXRlc091dHB1dFBhcnNlciBleHRlbmRzIHRyYW5zZm9ybV9qc18xLkJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwib3V0cHV0X3BhcnNlcnNcIiwgXCJieXRlc1wiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfc2VyaWFsaXphYmxlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0ZXh0RW5jb2RlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbmV3IFRleHRFbmNvZGVyKClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJCeXRlc091dHB1dFBhcnNlclwiO1xuICAgIH1cbiAgICBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy50ZXh0RW5jb2Rlci5lbmNvZGUodGV4dCkpO1xuICAgIH1cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cbmV4cG9ydHMuQnl0ZXNPdXRwdXRQYXJzZXIgPSBCeXRlc091dHB1dFBhcnNlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/index.cjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./bytes.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./list.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./string.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./structured.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./transform.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./json.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./xml.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxxRkFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsdUZBQWE7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLHFGQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyx5RkFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsaUdBQWtCO0FBQ3ZDLGFBQWEsbUJBQU8sQ0FBQywrRkFBaUI7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLHFGQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyxtRkFBVyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYmFzZS5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2J5dGVzLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbGlzdC5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0cmluZy5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0cnVjdHVyZWQuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2Zvcm0uY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9qc29uLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4veG1sLmNqc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/json.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseJsonMarkdown = exports.parsePartialJson = exports.JsonOutputParser = void 0;\nconst transform_js_1 = __webpack_require__(/*! ./transform.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\");\nconst json_patch_js_1 = __webpack_require__(/*! ../utils/json_patch.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.cjs\");\nconst json_js_1 = __webpack_require__(/*! ../utils/json.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json.cjs\");\nObject.defineProperty(exports, \"parseJsonMarkdown\", ({ enumerable: true, get: function () { return json_js_1.parseJsonMarkdown; } }));\nObject.defineProperty(exports, \"parsePartialJson\", ({ enumerable: true, get: function () { return json_js_1.parsePartialJson; } }));\n/**\n * Class for parsing the output of an LLM into a JSON object.\n */\nclass JsonOutputParser extends transform_js_1.BaseCumulativeTransformOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"JsonOutputParser\";\n    }\n    /** @internal */\n    _concatOutputChunks(first, second) {\n        if (this.diff) {\n            return super._concatOutputChunks(first, second);\n        }\n        return second;\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [{ op: \"replace\", path: \"\", value: next }];\n        }\n        return (0, json_patch_js_1.compare)(prev, next);\n    }\n    // This should actually return Partial<T>, but there's no way\n    // to specify emitted chunks as instances separate from the main output type.\n    async parsePartialResult(generations) {\n        return (0, json_js_1.parseJsonMarkdown)(generations[0].text);\n    }\n    async parse(text) {\n        return (0, json_js_1.parseJsonMarkdown)(text, JSON.parse);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\nexports.JsonOutputParser = JsonOutputParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvanNvbi5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsd0JBQXdCLEdBQUcsd0JBQXdCO0FBQy9FLHVCQUF1QixtQkFBTyxDQUFDLCtGQUFpQjtBQUNoRCx3QkFBd0IsbUJBQU8sQ0FBQywrRkFBeUI7QUFDekQsa0JBQWtCLG1CQUFPLENBQUMsbUZBQW1CO0FBQzdDLHFEQUFvRCxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUNuSSxvREFBbUQsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDakk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNDQUFzQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL2pzb24uY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUpzb25NYXJrZG93biA9IGV4cG9ydHMucGFyc2VQYXJ0aWFsSnNvbiA9IGV4cG9ydHMuSnNvbk91dHB1dFBhcnNlciA9IHZvaWQgMDtcbmNvbnN0IHRyYW5zZm9ybV9qc18xID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtLmNqc1wiKTtcbmNvbnN0IGpzb25fcGF0Y2hfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9qc29uX3BhdGNoLmNqc1wiKTtcbmNvbnN0IGpzb25fanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9qc29uLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlSnNvbk1hcmtkb3duXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBqc29uX2pzXzEucGFyc2VKc29uTWFya2Rvd247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVBhcnRpYWxKc29uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBqc29uX2pzXzEucGFyc2VQYXJ0aWFsSnNvbjsgfSB9KTtcbi8qKlxuICogQ2xhc3MgZm9yIHBhcnNpbmcgdGhlIG91dHB1dCBvZiBhbiBMTE0gaW50byBhIEpTT04gb2JqZWN0LlxuICovXG5jbGFzcyBKc29uT3V0cHV0UGFyc2VyIGV4dGVuZHMgdHJhbnNmb3JtX2pzXzEuQmFzZUN1bXVsYXRpdmVUcmFuc2Zvcm1PdXRwdXRQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwib3V0cHV0X3BhcnNlcnNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkpzb25PdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9jb25jYXRPdXRwdXRDaHVua3MoZmlyc3QsIHNlY29uZCkge1xuICAgICAgICBpZiAodGhpcy5kaWZmKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuX2NvbmNhdE91dHB1dENodW5rcyhmaXJzdCwgc2Vjb25kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2Vjb25kO1xuICAgIH1cbiAgICBfZGlmZihwcmV2LCBuZXh0KSB7XG4gICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBbeyBvcDogXCJyZXBsYWNlXCIsIHBhdGg6IFwiXCIsIHZhbHVlOiBuZXh0IH1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwganNvbl9wYXRjaF9qc18xLmNvbXBhcmUpKHByZXYsIG5leHQpO1xuICAgIH1cbiAgICAvLyBUaGlzIHNob3VsZCBhY3R1YWxseSByZXR1cm4gUGFydGlhbDxUPiwgYnV0IHRoZXJlJ3Mgbm8gd2F5XG4gICAgLy8gdG8gc3BlY2lmeSBlbWl0dGVkIGNodW5rcyBhcyBpbnN0YW5jZXMgc2VwYXJhdGUgZnJvbSB0aGUgbWFpbiBvdXRwdXQgdHlwZS5cbiAgICBhc3luYyBwYXJzZVBhcnRpYWxSZXN1bHQoZ2VuZXJhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBqc29uX2pzXzEucGFyc2VKc29uTWFya2Rvd24pKGdlbmVyYXRpb25zWzBdLnRleHQpO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIHJldHVybiAoMCwganNvbl9qc18xLnBhcnNlSnNvbk1hcmtkb3duKSh0ZXh0LCBKU09OLnBhcnNlKTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG5leHBvcnRzLkpzb25PdXRwdXRQYXJzZXIgPSBKc29uT3V0cHV0UGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/list.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkdownListOutputParser = exports.NumberedListOutputParser = exports.CustomListOutputParser = exports.CommaSeparatedListOutputParser = exports.ListOutputParser = void 0;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.cjs\");\nconst transform_js_1 = __webpack_require__(/*! ./transform.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\");\n/**\n * Class to parse the output of an LLM call to a list.\n * @augments BaseOutputParser\n */\nclass ListOutputParser extends transform_js_1.BaseTransformOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async *_transform(inputGenerator) {\n        let buffer = \"\";\n        for await (const input of inputGenerator) {\n            if (typeof input === \"string\") {\n                // add current chunk to buffer\n                buffer += input;\n            }\n            else {\n                // extract message content and add to buffer\n                buffer += input.content;\n            }\n            // get parts in buffer\n            if (!this.re) {\n                const parts = await this.parse(buffer);\n                if (parts.length > 1) {\n                    // if there are multiple parts, yield all but the last one\n                    for (const part of parts.slice(0, -1)) {\n                        yield [part];\n                    }\n                    // keep the last part in the buffer\n                    buffer = parts[parts.length - 1];\n                }\n            }\n            else {\n                // if there is a regex, get all matches\n                const matches = [...buffer.matchAll(this.re)];\n                if (matches.length > 1) {\n                    let doneIdx = 0;\n                    // if there are multiple matches, yield all but the last one\n                    for (const match of matches.slice(0, -1)) {\n                        yield [match[1]];\n                        doneIdx += (match.index ?? 0) + match[0].length;\n                    }\n                    // keep the last match in the buffer\n                    buffer = buffer.slice(doneIdx);\n                }\n            }\n        }\n        // yield the last part\n        for (const part of await this.parse(buffer)) {\n            yield [part];\n        }\n    }\n}\nexports.ListOutputParser = ListOutputParser;\n/**\n * Class to parse the output of an LLM call as a comma-separated list.\n * @augments ListOutputParser\n */\nclass CommaSeparatedListOutputParser extends ListOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\", \"list\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"CommaSeparatedListOutputParser\";\n    }\n    /**\n     * Parses the given text into an array of strings, using a comma as the\n     * separator. If the parsing fails, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each comma.\n     */\n    async parse(text) {\n        try {\n            return text\n                .trim()\n                .split(\",\")\n                .map((s) => s.trim());\n        }\n        catch (e) {\n            throw new base_js_1.OutputParserException(`Could not parse output: ${text}`, text);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CommaSeparatedListOutputParser.\n     * @returns A string containing instructions on the expected format of the response.\n     */\n    getFormatInstructions() {\n        return `Your response should be a list of comma separated values, eg: \\`foo, bar, baz\\``;\n    }\n}\nexports.CommaSeparatedListOutputParser = CommaSeparatedListOutputParser;\n/**\n * Class to parse the output of an LLM call to a list with a specific length and separator.\n * @augments ListOutputParser\n */\nclass CustomListOutputParser extends ListOutputParser {\n    constructor({ length, separator }) {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\", \"list\"]\n        });\n        Object.defineProperty(this, \"length\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.length = length;\n        this.separator = separator || \",\";\n    }\n    /**\n     * Parses the given text into an array of strings, using the specified\n     * separator. If the parsing fails or the number of items in the list\n     * doesn't match the expected length, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each occurrence of the specified separator.\n     */\n    async parse(text) {\n        try {\n            const items = text\n                .trim()\n                .split(this.separator)\n                .map((s) => s.trim());\n            if (this.length !== undefined && items.length !== this.length) {\n                throw new base_js_1.OutputParserException(`Incorrect number of items. Expected ${this.length}, got ${items.length}.`);\n            }\n            return items;\n        }\n        catch (e) {\n            if (Object.getPrototypeOf(e) === base_js_1.OutputParserException.prototype) {\n                throw e;\n            }\n            throw new base_js_1.OutputParserException(`Could not parse output: ${text}`);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CustomListOutputParser, including the number of items and the\n     * separator.\n     * @returns A string containing instructions on the expected format of the response.\n     */\n    getFormatInstructions() {\n        return `Your response should be a list of ${this.length === undefined ? \"\" : `${this.length} `}items separated by \"${this.separator}\" (eg: \\`foo${this.separator} bar${this.separator} baz\\`)`;\n    }\n}\nexports.CustomListOutputParser = CustomListOutputParser;\nclass NumberedListOutputParser extends ListOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\", \"list\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /\\d+\\.\\s([^\\n]+)/g\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [...(text.matchAll(this.re) ?? [])].map((m) => m[1]);\n    }\n}\nexports.NumberedListOutputParser = NumberedListOutputParser;\nclass MarkdownListOutputParser extends ListOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\", \"list\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /^\\s*[-*]\\s([^\\n]+)$/gm\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [...(text.matchAll(this.re) ?? [])].map((m) => m[1]);\n    }\n}\nexports.MarkdownListOutputParser = MarkdownListOutputParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.cjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.cjs ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./json_output_tools_parsers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsNElBQWlDIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9vdXRwdXRfcGFyc2Vycy9vcGVuYWlfdG9vbHMvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vanNvbl9vdXRwdXRfdG9vbHNfcGFyc2Vycy5janNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.cjs":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.cjs ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsonOutputKeyToolsParser = exports.JsonOutputToolsParser = void 0;\nexports.parseToolCall = parseToolCall;\nexports.convertLangChainToolCallToOpenAI = convertLangChainToolCallToOpenAI;\nexports.makeInvalidToolCall = makeInvalidToolCall;\nconst base_js_1 = __webpack_require__(/*! ../base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.cjs\");\nconst json_js_1 = __webpack_require__(/*! ../json.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.cjs\");\nconst transform_js_1 = __webpack_require__(/*! ../transform.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\");\nconst ai_js_1 = __webpack_require__(/*! ../../messages/ai.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs\");\nconst zod_js_1 = __webpack_require__(/*! ../../utils/types/zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\");\nfunction parseToolCall(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCall, options) {\n    if (rawToolCall.function === undefined) {\n        return undefined;\n    }\n    let functionArgs;\n    if (options?.partial) {\n        try {\n            functionArgs = (0, json_js_1.parsePartialJson)(rawToolCall.function.arguments ?? \"{}\");\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    else {\n        try {\n            functionArgs = JSON.parse(rawToolCall.function.arguments);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            throw new base_js_1.OutputParserException([\n                `Function \"${rawToolCall.function.name}\" arguments:`,\n                ``,\n                rawToolCall.function.arguments,\n                ``,\n                `are not valid JSON.`,\n                `Error: ${e.message}`,\n            ].join(\"\\n\"));\n        }\n    }\n    const parsedToolCall = {\n        name: rawToolCall.function.name,\n        args: functionArgs,\n        type: \"tool_call\",\n    };\n    if (options?.returnId) {\n        parsedToolCall.id = rawToolCall.id;\n    }\n    return parsedToolCall;\n}\nfunction convertLangChainToolCallToOpenAI(toolCall) {\n    if (toolCall.id === undefined) {\n        throw new Error(`All OpenAI tool calls must have an \"id\" field.`);\n    }\n    return {\n        id: toolCall.id,\n        type: \"function\",\n        function: {\n            name: toolCall.name,\n            arguments: JSON.stringify(toolCall.args),\n        },\n    };\n}\nfunction makeInvalidToolCall(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCall, errorMsg) {\n    return {\n        name: rawToolCall.function?.name,\n        args: rawToolCall.function?.arguments,\n        id: rawToolCall.id,\n        error: errorMsg,\n        type: \"invalid_tool_call\",\n    };\n}\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object.\n */\nclass JsonOutputToolsParser extends transform_js_1.BaseCumulativeTransformOutputParser {\n    static lc_name() {\n        return \"JsonOutputToolsParser\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"openai_tools\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.returnId = fields?.returnId ?? this.returnId;\n    }\n    _diff() {\n        throw new Error(\"Not supported.\");\n    }\n    async parse() {\n        throw new Error(\"Not implemented.\");\n    }\n    async parseResult(generations) {\n        const result = await this.parsePartialResult(generations, false);\n        return result;\n    }\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */\n    async parsePartialResult(generations, partial = true\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) {\n        const message = generations[0].message;\n        let toolCalls;\n        if ((0, ai_js_1.isAIMessage)(message) && message.tool_calls?.length) {\n            toolCalls = message.tool_calls.map((toolCall) => {\n                const { id, ...rest } = toolCall;\n                if (!this.returnId) {\n                    return rest;\n                }\n                return {\n                    id,\n                    ...rest,\n                };\n            });\n        }\n        else if (message.additional_kwargs.tool_calls !== undefined) {\n            const rawToolCalls = JSON.parse(JSON.stringify(message.additional_kwargs.tool_calls));\n            toolCalls = rawToolCalls.map((rawToolCall) => {\n                return parseToolCall(rawToolCall, { returnId: this.returnId, partial });\n            });\n        }\n        if (!toolCalls) {\n            return [];\n        }\n        const parsedToolCalls = [];\n        for (const toolCall of toolCalls) {\n            if (toolCall !== undefined) {\n                const backwardsCompatibleToolCall = {\n                    type: toolCall.name,\n                    args: toolCall.args,\n                    id: toolCall.id,\n                };\n                parsedToolCalls.push(backwardsCompatibleToolCall);\n            }\n        }\n        return parsedToolCalls;\n    }\n}\nexports.JsonOutputToolsParser = JsonOutputToolsParser;\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object if you are\n * expecting only a single tool to be called.\n */\nclass JsonOutputKeyToolsParser extends JsonOutputToolsParser {\n    static lc_name() {\n        return \"JsonOutputKeyToolsParser\";\n    }\n    constructor(params) {\n        super(params);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"openai_tools\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /** The type of tool calls to return. */\n        Object.defineProperty(this, \"keyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Whether to return only the first tool call. */\n        Object.defineProperty(this, \"returnSingle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"zodSchema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keyName = params.keyName;\n        this.returnSingle = params.returnSingle ?? this.returnSingle;\n        this.zodSchema = params.zodSchema;\n    }\n    async _validateResult(result) {\n        if (this.zodSchema === undefined) {\n            return result;\n        }\n        const zodParsedResult = await (0, zod_js_1.interopSafeParseAsync)(this.zodSchema, result);\n        if (zodParsedResult.success) {\n            return zodParsedResult.data;\n        }\n        else {\n            throw new base_js_1.OutputParserException(`Failed to parse. Text: \"${JSON.stringify(result, null, 2)}\". Error: ${JSON.stringify(zodParsedResult.error?.issues)}`, JSON.stringify(result, null, 2));\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async parsePartialResult(generations) {\n        const results = await super.parsePartialResult(generations);\n        const matchingResults = results.filter((result) => result.type === this.keyName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let returnedValues = matchingResults;\n        if (!matchingResults.length) {\n            return undefined;\n        }\n        if (!this.returnId) {\n            returnedValues = matchingResults.map((result) => result.args);\n        }\n        if (this.returnSingle) {\n            return returnedValues[0];\n        }\n        return returnedValues;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async parseResult(generations) {\n        const results = await super.parsePartialResult(generations, false);\n        const matchingResults = results.filter((result) => result.type === this.keyName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let returnedValues = matchingResults;\n        if (!matchingResults.length) {\n            return undefined;\n        }\n        if (!this.returnId) {\n            returnedValues = matchingResults.map((result) => result.args);\n        }\n        if (this.returnSingle) {\n            return this._validateResult(returnedValues[0]);\n        }\n        const toolCallResults = await Promise.all(returnedValues.map((value) => this._validateResult(value)));\n        return toolCallResults;\n    }\n}\nexports.JsonOutputKeyToolsParser = JsonOutputKeyToolsParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/string.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StringOutputParser = void 0;\nconst transform_js_1 = __webpack_require__(/*! ./transform.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\");\n/**\n * OutputParser that parses LLMResult into the top likely string.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n *\n * const chain = RunnableSequence.from([\n *   promptTemplate,\n *   new ChatOpenAI({ model: \"gpt-4o-mini\" }),\n *   new StringOutputParser(),\n * ]);\n *\n * const result = await chain.invoke({ topic: \"bears\" });\n * console.log(\"What do you call a bear with no teeth? A gummy bear!\");\n * ```\n */\nclass StringOutputParser extends transform_js_1.BaseTransformOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\", \"string\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"StrOutputParser\";\n    }\n    /**\n     * Parses a string output from an LLM call. This method is meant to be\n     * implemented by subclasses to define how a string output from an LLM\n     * should be parsed.\n     * @param text The string output from an LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */\n    parse(text) {\n        return Promise.resolve(text);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n    _textContentToString(content) {\n        return content.text;\n    }\n    _imageUrlContentToString(_content) {\n        throw new Error(`Cannot coerce a multimodal \"image_url\" message part into a string.`);\n    }\n    _messageContentComplexToString(content) {\n        switch (content.type) {\n            case \"text\":\n            case \"text_delta\":\n                if (\"text\" in content) {\n                    // Type guard for MessageContentText\n                    return this._textContentToString(content);\n                }\n                break;\n            case \"image_url\":\n                if (\"image_url\" in content) {\n                    // Type guard for MessageContentImageUrl\n                    return this._imageUrlContentToString(content);\n                }\n                break;\n            default:\n                throw new Error(`Cannot coerce \"${content.type}\" message part into a string.`);\n        }\n        throw new Error(`Invalid content type: ${content.type}`);\n    }\n    _baseMessageContentToString(content) {\n        return content.reduce((acc, item) => acc + this._messageContentComplexToString(item), \"\");\n    }\n}\nexports.StringOutputParser = StringOutputParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RyaW5nLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsdUJBQXVCLG1CQUFPLENBQUMsK0ZBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsTUFBTTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQkFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGdCQUFnQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsYUFBYTtBQUMvRDtBQUNBLGlEQUFpRCxhQUFhO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL3N0cmluZy5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmluZ091dHB1dFBhcnNlciA9IHZvaWQgMDtcbmNvbnN0IHRyYW5zZm9ybV9qc18xID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtLmNqc1wiKTtcbi8qKlxuICogT3V0cHV0UGFyc2VyIHRoYXQgcGFyc2VzIExMTVJlc3VsdCBpbnRvIHRoZSB0b3AgbGlrZWx5IHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBwcm9tcHRUZW1wbGF0ZSA9IFByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcbiAqICAgXCJUZWxsIG1lIGEgam9rZSBhYm91dCB7dG9waWN9XCIsXG4gKiApO1xuICpcbiAqIGNvbnN0IGNoYWluID0gUnVubmFibGVTZXF1ZW5jZS5mcm9tKFtcbiAqICAgcHJvbXB0VGVtcGxhdGUsXG4gKiAgIG5ldyBDaGF0T3BlbkFJKHsgbW9kZWw6IFwiZ3B0LTRvLW1pbmlcIiB9KSxcbiAqICAgbmV3IFN0cmluZ091dHB1dFBhcnNlcigpLFxuICogXSk7XG4gKlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgY2hhaW4uaW52b2tlKHsgdG9waWM6IFwiYmVhcnNcIiB9KTtcbiAqIGNvbnNvbGUubG9nKFwiV2hhdCBkbyB5b3UgY2FsbCBhIGJlYXIgd2l0aCBubyB0ZWV0aD8gQSBndW1teSBiZWFyIVwiKTtcbiAqIGBgYFxuICovXG5jbGFzcyBTdHJpbmdPdXRwdXRQYXJzZXIgZXh0ZW5kcyB0cmFuc2Zvcm1fanNfMS5CYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5fY29yZVwiLCBcIm91dHB1dF9wYXJzZXJzXCIsIFwic3RyaW5nXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTdHJPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgc3RyaW5nIG91dHB1dCBmcm9tIGFuIExMTSBjYWxsLiBUaGlzIG1ldGhvZCBpcyBtZWFudCB0byBiZVxuICAgICAqIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzZXMgdG8gZGVmaW5lIGhvdyBhIHN0cmluZyBvdXRwdXQgZnJvbSBhbiBMTE1cbiAgICAgKiBzaG91bGQgYmUgcGFyc2VkLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBzdHJpbmcgb3V0cHV0IGZyb20gYW4gTExNIGNhbGwuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrcyBPcHRpb25hbCBjYWxsYmFja3MuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIG9mIHRoZSBwYXJzZWQgb3V0cHV0LlxuICAgICAqL1xuICAgIHBhcnNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0ZXh0KTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgX3RleHRDb250ZW50VG9TdHJpbmcoY29udGVudCkge1xuICAgICAgICByZXR1cm4gY29udGVudC50ZXh0O1xuICAgIH1cbiAgICBfaW1hZ2VVcmxDb250ZW50VG9TdHJpbmcoX2NvbnRlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY29lcmNlIGEgbXVsdGltb2RhbCBcImltYWdlX3VybFwiIG1lc3NhZ2UgcGFydCBpbnRvIGEgc3RyaW5nLmApO1xuICAgIH1cbiAgICBfbWVzc2FnZUNvbnRlbnRDb21wbGV4VG9TdHJpbmcoY29udGVudCkge1xuICAgICAgICBzd2l0Y2ggKGNvbnRlbnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0X2RlbHRhXCI6XG4gICAgICAgICAgICAgICAgaWYgKFwidGV4dFwiIGluIGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHlwZSBndWFyZCBmb3IgTWVzc2FnZUNvbnRlbnRUZXh0XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0Q29udGVudFRvU3RyaW5nKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJpbWFnZV91cmxcIjpcbiAgICAgICAgICAgICAgICBpZiAoXCJpbWFnZV91cmxcIiBpbiBjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFR5cGUgZ3VhcmQgZm9yIE1lc3NhZ2VDb250ZW50SW1hZ2VVcmxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlVXJsQ29udGVudFRvU3RyaW5nKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY29lcmNlIFwiJHtjb250ZW50LnR5cGV9XCIgbWVzc2FnZSBwYXJ0IGludG8gYSBzdHJpbmcuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbnRlbnQgdHlwZTogJHtjb250ZW50LnR5cGV9YCk7XG4gICAgfVxuICAgIF9iYXNlTWVzc2FnZUNvbnRlbnRUb1N0cmluZyhjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50LnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgKyB0aGlzLl9tZXNzYWdlQ29udGVudENvbXBsZXhUb1N0cmluZyhpdGVtKSwgXCJcIik7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJpbmdPdXRwdXRQYXJzZXIgPSBTdHJpbmdPdXRwdXRQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.cjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/structured.cjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsymmetricStructuredOutputParser = exports.JsonMarkdownStructuredOutputParser = exports.StructuredOutputParser = void 0;\nconst v3_1 = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/zod/v3/index.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.cjs\");\nconst zod_js_1 = __webpack_require__(/*! ../utils/types/zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\");\nconst json_schema_js_1 = __webpack_require__(/*! ../utils/json_schema.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs\");\nclass StructuredOutputParser extends base_js_1.BaseOutputParser {\n    static lc_name() {\n        return \"StructuredOutputParser\";\n    }\n    toJSON() {\n        return this.toJSONNotImplemented();\n    }\n    constructor(schema) {\n        super(schema);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: schema\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"structured\"]\n        });\n    }\n    /**\n     * Creates a new StructuredOutputParser from a Zod schema.\n     * @param schema The Zod schema which the output should match\n     * @returns A new instance of StructuredOutputParser.\n     */\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    /**\n     * Creates a new StructuredOutputParser from a set of names and\n     * descriptions.\n     * @param schemas An object where each key is a name and each value is a description\n     * @returns A new instance of StructuredOutputParser.\n     */\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = v3_1.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description]) => [name, v3_1.z.string().describe(description)])));\n        return new this(zodSchema);\n    }\n    /**\n     * Returns a markdown code snippet with a JSON object formatted according\n     * to the schema.\n     * @param options Optional. The options for formatting the instructions\n     * @returns A markdown code snippet with a JSON object formatted according to the schema.\n     */\n    getFormatInstructions() {\n        return `You must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n\\`\\`\\`json\n${JSON.stringify((0, json_schema_js_1.toJsonSchema)(this.schema))}\n\\`\\`\\`\n`;\n    }\n    /**\n     * Parses the given text according to the schema.\n     * @param text The text to parse\n     * @returns The parsed output.\n     */\n    async parse(text) {\n        try {\n            const trimmedText = text.trim();\n            const json = \n            // first case: if back ticks appear at the start of the text\n            trimmedText.match(/^```(?:json)?\\s*([\\s\\S]*?)```/)?.[1] ||\n                // second case: if back ticks with `json` appear anywhere in the text\n                trimmedText.match(/```json\\s*([\\s\\S]*?)```/)?.[1] ||\n                // otherwise, return the trimmed text\n                trimmedText;\n            const escapedJson = json\n                .replace(/\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"/g, (_match, capturedGroup) => {\n                const escapedInsideQuotes = capturedGroup.replace(/\\n/g, \"\\\\n\");\n                return `\"${escapedInsideQuotes}\"`;\n            })\n                .replace(/\\n/g, \"\");\n            return await (0, zod_js_1.interopParseAsync)(this.schema, JSON.parse(escapedJson));\n        }\n        catch (e) {\n            throw new base_js_1.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\nexports.StructuredOutputParser = StructuredOutputParser;\n/**\n * A specific type of `StructuredOutputParser` that parses JSON data\n * formatted as a markdown code snippet.\n */\nclass JsonMarkdownStructuredOutputParser extends StructuredOutputParser {\n    static lc_name() {\n        return \"JsonMarkdownStructuredOutputParser\";\n    }\n    getFormatInstructions(options) {\n        const interpolationDepth = options?.interpolationDepth ?? 1;\n        if (interpolationDepth < 1) {\n            throw new Error(\"f string interpolation depth must be at least 1\");\n        }\n        return `Return a markdown code snippet with a JSON object formatted to look like:\\n\\`\\`\\`json\\n${this._schemaToInstruction((0, json_schema_js_1.toJsonSchema)(this.schema))\n            .replaceAll(\"{\", \"{\".repeat(interpolationDepth))\n            .replaceAll(\"}\", \"}\".repeat(interpolationDepth))}\\n\\`\\`\\``;\n    }\n    _schemaToInstruction(schemaInput, indent = 2) {\n        const schema = schemaInput;\n        if (\"type\" in schema) {\n            let nullable = false;\n            let type;\n            if (Array.isArray(schema.type)) {\n                const nullIdx = schema.type.findIndex((type) => type === \"null\");\n                if (nullIdx !== -1) {\n                    nullable = true;\n                    schema.type.splice(nullIdx, 1);\n                }\n                type = schema.type.join(\" | \");\n            }\n            else {\n                type = schema.type;\n            }\n            if (schema.type === \"object\" && schema.properties) {\n                const description = schema.description\n                    ? ` // ${schema.description}`\n                    : \"\";\n                const properties = Object.entries(schema.properties)\n                    .map(([key, value]) => {\n                    const isOptional = schema.required?.includes(key)\n                        ? \"\"\n                        : \" (optional)\";\n                    return `${\" \".repeat(indent)}\"${key}\": ${this._schemaToInstruction(value, indent + 2)}${isOptional}`;\n                })\n                    .join(\"\\n\");\n                return `{\\n${properties}\\n${\" \".repeat(indent - 2)}}${description}`;\n            }\n            if (schema.type === \"array\" && schema.items) {\n                const description = schema.description\n                    ? ` // ${schema.description}`\n                    : \"\";\n                return `array[\\n${\" \".repeat(indent)}${this._schemaToInstruction(schema.items, indent + 2)}\\n${\" \".repeat(indent - 2)}] ${description}`;\n            }\n            const isNullable = nullable ? \" (nullable)\" : \"\";\n            const description = schema.description ? ` // ${schema.description}` : \"\";\n            return `${type}${description}${isNullable}`;\n        }\n        if (\"anyOf\" in schema) {\n            return schema.anyOf\n                .map((s) => this._schemaToInstruction(s, indent))\n                .join(`\\n${\" \".repeat(indent - 2)}`);\n        }\n        throw new Error(\"unsupported schema type\");\n    }\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = v3_1.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description]) => [name, v3_1.z.string().describe(description)])));\n        return new this(zodSchema);\n    }\n}\nexports.JsonMarkdownStructuredOutputParser = JsonMarkdownStructuredOutputParser;\n/**\n * A type of `StructuredOutputParser` that handles asymmetric input and\n * output schemas.\n */\nclass AsymmetricStructuredOutputParser extends base_js_1.BaseOutputParser {\n    constructor({ inputSchema }) {\n        super(...arguments);\n        Object.defineProperty(this, \"structuredInputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.structuredInputParser = new JsonMarkdownStructuredOutputParser(inputSchema);\n    }\n    async parse(text) {\n        let parsedInput;\n        try {\n            parsedInput = await this.structuredInputParser.parse(text);\n        }\n        catch (e) {\n            throw new base_js_1.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n        return this.outputProcessor(parsedInput);\n    }\n    getFormatInstructions() {\n        return this.structuredInputParser.getFormatInstructions();\n    }\n}\nexports.AsymmetricStructuredOutputParser = AsymmetricStructuredOutputParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RydWN0dXJlZC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0NBQXdDLEdBQUcsMENBQTBDLEdBQUcsOEJBQThCO0FBQ3RILGFBQWEsbUJBQU8sQ0FBQyxxREFBUTtBQUM3QixrQkFBa0IsbUJBQU8sQ0FBQyxxRkFBWTtBQUN0QyxpQkFBaUIsbUJBQU8sQ0FBQyw2RkFBd0I7QUFDakQseUJBQXlCLG1CQUFPLENBQUMsaUdBQTBCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsa0RBQWtELGdCQUFnQixTQUFTLG1FQUFtRSxzQkFBc0I7QUFDcEs7QUFDQSxtQkFBbUIsd0JBQXdCLHlFQUF5RSxnQkFBZ0IsMEJBQTBCOztBQUU5Sjs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixvQkFBb0I7QUFDL0MsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLEtBQUssWUFBWSxFQUFFO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlHQUF5RztBQUN6RywwQkFBMEIsS0FBSztBQUMvQiwwQkFBMEIsS0FBSyw4QkFBOEI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQkFBbUIsR0FBRyxJQUFJLEtBQUssNkNBQTZDLEVBQUUsV0FBVztBQUN2SCxpQkFBaUI7QUFDakI7QUFDQSx5QkFBeUIsSUFBSSxXQUFXLElBQUksd0JBQXdCLEVBQUUsWUFBWTtBQUNsRjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ0Esa0NBQWtDLG1CQUFtQixFQUFFLG9EQUFvRCxJQUFJLHVCQUF1QixJQUFJLFlBQVk7QUFDdEo7QUFDQTtBQUNBLDREQUE0RCxtQkFBbUI7QUFDL0Usc0JBQXNCLEtBQUssRUFBRSxZQUFZLEVBQUUsV0FBVztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsS0FBSyxZQUFZLEVBQUU7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL3N0cnVjdHVyZWQuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3ltbWV0cmljU3RydWN0dXJlZE91dHB1dFBhcnNlciA9IGV4cG9ydHMuSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlciA9IGV4cG9ydHMuU3RydWN0dXJlZE91dHB1dFBhcnNlciA9IHZvaWQgMDtcbmNvbnN0IHYzXzEgPSByZXF1aXJlKFwiem9kL3YzXCIpO1xuY29uc3QgYmFzZV9qc18xID0gcmVxdWlyZShcIi4vYmFzZS5janNcIik7XG5jb25zdCB6b2RfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy90eXBlcy96b2QuY2pzXCIpO1xuY29uc3QganNvbl9zY2hlbWFfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9qc29uX3NjaGVtYS5janNcIik7XG5jbGFzcyBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIGV4dGVuZHMgYmFzZV9qc18xLkJhc2VPdXRwdXRQYXJzZXIge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyXCI7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9KU09OTm90SW1wbGVtZW50ZWQoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKHNjaGVtYSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNjaGVtYVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogc2NoZW1hXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpblwiLCBcIm91dHB1dF9wYXJzZXJzXCIsIFwic3RydWN0dXJlZFwiXVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIGZyb20gYSBab2Qgc2NoZW1hLlxuICAgICAqIEBwYXJhbSBzY2hlbWEgVGhlIFpvZCBzY2hlbWEgd2hpY2ggdGhlIG91dHB1dCBzaG91bGQgbWF0Y2hcbiAgICAgKiBAcmV0dXJucyBBIG5ldyBpbnN0YW5jZSBvZiBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tWm9kU2NoZW1hKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoc2NoZW1hKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIGZyb20gYSBzZXQgb2YgbmFtZXMgYW5kXG4gICAgICogZGVzY3JpcHRpb25zLlxuICAgICAqIEBwYXJhbSBzY2hlbWFzIEFuIG9iamVjdCB3aGVyZSBlYWNoIGtleSBpcyBhIG5hbWUgYW5kIGVhY2ggdmFsdWUgaXMgYSBkZXNjcmlwdGlvblxuICAgICAqIEByZXR1cm5zIEEgbmV3IGluc3RhbmNlIG9mIFN0cnVjdHVyZWRPdXRwdXRQYXJzZXIuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21OYW1lc0FuZERlc2NyaXB0aW9ucyhzY2hlbWFzKSB7XG4gICAgICAgIGNvbnN0IHpvZFNjaGVtYSA9IHYzXzEuei5vYmplY3QoT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHNjaGVtYXMpLm1hcCgoW25hbWUsIGRlc2NyaXB0aW9uXSkgPT4gW25hbWUsIHYzXzEuei5zdHJpbmcoKS5kZXNjcmliZShkZXNjcmlwdGlvbildKSkpO1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoem9kU2NoZW1hKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1hcmtkb3duIGNvZGUgc25pcHBldCB3aXRoIGEgSlNPTiBvYmplY3QgZm9ybWF0dGVkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzY2hlbWEuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwuIFRoZSBvcHRpb25zIGZvciBmb3JtYXR0aW5nIHRoZSBpbnN0cnVjdGlvbnNcbiAgICAgKiBAcmV0dXJucyBBIG1hcmtkb3duIGNvZGUgc25pcHBldCB3aXRoIGEgSlNPTiBvYmplY3QgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc2NoZW1hLlxuICAgICAqL1xuICAgIGdldEZvcm1hdEluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIGBZb3UgbXVzdCBmb3JtYXQgeW91ciBvdXRwdXQgYXMgYSBKU09OIHZhbHVlIHRoYXQgYWRoZXJlcyB0byBhIGdpdmVuIFwiSlNPTiBTY2hlbWFcIiBpbnN0YW5jZS5cblxuXCJKU09OIFNjaGVtYVwiIGlzIGEgZGVjbGFyYXRpdmUgbGFuZ3VhZ2UgdGhhdCBhbGxvd3MgeW91IHRvIGFubm90YXRlIGFuZCB2YWxpZGF0ZSBKU09OIGRvY3VtZW50cy5cblxuRm9yIGV4YW1wbGUsIHRoZSBleGFtcGxlIFwiSlNPTiBTY2hlbWFcIiBpbnN0YW5jZSB7e1wicHJvcGVydGllc1wiOiB7e1wiZm9vXCI6IHt7XCJkZXNjcmlwdGlvblwiOiBcImEgbGlzdCBvZiB0ZXN0IHdvcmRzXCIsIFwidHlwZVwiOiBcImFycmF5XCIsIFwiaXRlbXNcIjoge3tcInR5cGVcIjogXCJzdHJpbmdcIn19fX19fSwgXCJyZXF1aXJlZFwiOiBbXCJmb29cIl19fVxud291bGQgbWF0Y2ggYW4gb2JqZWN0IHdpdGggb25lIHJlcXVpcmVkIHByb3BlcnR5LCBcImZvb1wiLiBUaGUgXCJ0eXBlXCIgcHJvcGVydHkgc3BlY2lmaWVzIFwiZm9vXCIgbXVzdCBiZSBhbiBcImFycmF5XCIsIGFuZCB0aGUgXCJkZXNjcmlwdGlvblwiIHByb3BlcnR5IHNlbWFudGljYWxseSBkZXNjcmliZXMgaXQgYXMgXCJhIGxpc3Qgb2YgdGVzdCB3b3Jkc1wiLiBUaGUgaXRlbXMgd2l0aGluIFwiZm9vXCIgbXVzdCBiZSBzdHJpbmdzLlxuVGh1cywgdGhlIG9iamVjdCB7e1wiZm9vXCI6IFtcImJhclwiLCBcImJhelwiXX19IGlzIGEgd2VsbC1mb3JtYXR0ZWQgaW5zdGFuY2Ugb2YgdGhpcyBleGFtcGxlIFwiSlNPTiBTY2hlbWFcIi4gVGhlIG9iamVjdCB7e1wicHJvcGVydGllc1wiOiB7e1wiZm9vXCI6IFtcImJhclwiLCBcImJhelwiXX19fX0gaXMgbm90IHdlbGwtZm9ybWF0dGVkLlxuXG5Zb3VyIG91dHB1dCB3aWxsIGJlIHBhcnNlZCBhbmQgdHlwZS1jaGVja2VkIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgc2NoZW1hIGluc3RhbmNlLCBzbyBtYWtlIHN1cmUgYWxsIGZpZWxkcyBpbiB5b3VyIG91dHB1dCBtYXRjaCB0aGUgc2NoZW1hIGV4YWN0bHkgYW5kIHRoZXJlIGFyZSBubyB0cmFpbGluZyBjb21tYXMhXG5cbkhlcmUgaXMgdGhlIEpTT04gU2NoZW1hIGluc3RhbmNlIHlvdXIgb3V0cHV0IG11c3QgYWRoZXJlIHRvLiBJbmNsdWRlIHRoZSBlbmNsb3NpbmcgbWFya2Rvd24gY29kZWJsb2NrOlxuXFxgXFxgXFxganNvblxuJHtKU09OLnN0cmluZ2lmeSgoMCwganNvbl9zY2hlbWFfanNfMS50b0pzb25TY2hlbWEpKHRoaXMuc2NoZW1hKSl9XG5cXGBcXGBcXGBcbmA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZ2l2ZW4gdGV4dCBhY2NvcmRpbmcgdG8gdGhlIHNjaGVtYS5cbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byBwYXJzZVxuICAgICAqIEByZXR1cm5zIFRoZSBwYXJzZWQgb3V0cHV0LlxuICAgICAqL1xuICAgIGFzeW5jIHBhcnNlKHRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRUZXh0ID0gdGV4dC50cmltKCk7XG4gICAgICAgICAgICBjb25zdCBqc29uID0gXG4gICAgICAgICAgICAvLyBmaXJzdCBjYXNlOiBpZiBiYWNrIHRpY2tzIGFwcGVhciBhdCB0aGUgc3RhcnQgb2YgdGhlIHRleHRcbiAgICAgICAgICAgIHRyaW1tZWRUZXh0Lm1hdGNoKC9eYGBgKD86anNvbik/XFxzKihbXFxzXFxTXSo/KWBgYC8pPy5bMV0gfHxcbiAgICAgICAgICAgICAgICAvLyBzZWNvbmQgY2FzZTogaWYgYmFjayB0aWNrcyB3aXRoIGBqc29uYCBhcHBlYXIgYW55d2hlcmUgaW4gdGhlIHRleHRcbiAgICAgICAgICAgICAgICB0cmltbWVkVGV4dC5tYXRjaCgvYGBganNvblxccyooW1xcc1xcU10qPylgYGAvKT8uWzFdIHx8XG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCByZXR1cm4gdGhlIHRyaW1tZWQgdGV4dFxuICAgICAgICAgICAgICAgIHRyaW1tZWRUZXh0O1xuICAgICAgICAgICAgY29uc3QgZXNjYXBlZEpzb24gPSBqc29uXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiKFteXCJcXFxcXSooXFxcXC5bXlwiXFxcXF0qKSopXCIvZywgKF9tYXRjaCwgY2FwdHVyZWRHcm91cCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVzY2FwZWRJbnNpZGVRdW90ZXMgPSBjYXB0dXJlZEdyb3VwLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgXCIke2VzY2FwZWRJbnNpZGVRdW90ZXN9XCJgO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCB6b2RfanNfMS5pbnRlcm9wUGFyc2VBc3luYykodGhpcy5zY2hlbWEsIEpTT04ucGFyc2UoZXNjYXBlZEpzb24pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGJhc2VfanNfMS5PdXRwdXRQYXJzZXJFeGNlcHRpb24oYEZhaWxlZCB0byBwYXJzZS4gVGV4dDogXCIke3RleHR9XCIuIEVycm9yOiAke2V9YCwgdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlN0cnVjdHVyZWRPdXRwdXRQYXJzZXIgPSBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyO1xuLyoqXG4gKiBBIHNwZWNpZmljIHR5cGUgb2YgYFN0cnVjdHVyZWRPdXRwdXRQYXJzZXJgIHRoYXQgcGFyc2VzIEpTT04gZGF0YVxuICogZm9ybWF0dGVkIGFzIGEgbWFya2Rvd24gY29kZSBzbmlwcGV0LlxuICovXG5jbGFzcyBKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIGV4dGVuZHMgU3RydWN0dXJlZE91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkpzb25NYXJrZG93blN0cnVjdHVyZWRPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaW50ZXJwb2xhdGlvbkRlcHRoID0gb3B0aW9ucz8uaW50ZXJwb2xhdGlvbkRlcHRoID8/IDE7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uRGVwdGggPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmIHN0cmluZyBpbnRlcnBvbGF0aW9uIGRlcHRoIG11c3QgYmUgYXQgbGVhc3QgMVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFJldHVybiBhIG1hcmtkb3duIGNvZGUgc25pcHBldCB3aXRoIGEgSlNPTiBvYmplY3QgZm9ybWF0dGVkIHRvIGxvb2sgbGlrZTpcXG5cXGBcXGBcXGBqc29uXFxuJHt0aGlzLl9zY2hlbWFUb0luc3RydWN0aW9uKCgwLCBqc29uX3NjaGVtYV9qc18xLnRvSnNvblNjaGVtYSkodGhpcy5zY2hlbWEpKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoXCJ7XCIsIFwie1wiLnJlcGVhdChpbnRlcnBvbGF0aW9uRGVwdGgpKVxuICAgICAgICAgICAgLnJlcGxhY2VBbGwoXCJ9XCIsIFwifVwiLnJlcGVhdChpbnRlcnBvbGF0aW9uRGVwdGgpKX1cXG5cXGBcXGBcXGBgO1xuICAgIH1cbiAgICBfc2NoZW1hVG9JbnN0cnVjdGlvbihzY2hlbWFJbnB1dCwgaW5kZW50ID0gMikge1xuICAgICAgICBjb25zdCBzY2hlbWEgPSBzY2hlbWFJbnB1dDtcbiAgICAgICAgaWYgKFwidHlwZVwiIGluIHNjaGVtYSkge1xuICAgICAgICAgICAgbGV0IG51bGxhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgdHlwZTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYS50eXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bGxJZHggPSBzY2hlbWEudHlwZS5maW5kSW5kZXgoKHR5cGUpID0+IHR5cGUgPT09IFwibnVsbFwiKTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbElkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzY2hlbWEudHlwZS5zcGxpY2UobnVsbElkeCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHR5cGUgPSBzY2hlbWEudHlwZS5qb2luKFwiIHwgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9IHNjaGVtYS50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNjaGVtYS50eXBlID09PSBcIm9iamVjdFwiICYmIHNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBzY2hlbWEuZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgPyBgIC8vICR7c2NoZW1hLmRlc2NyaXB0aW9ufWBcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBPYmplY3QuZW50cmllcyhzY2hlbWEucHJvcGVydGllcylcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzT3B0aW9uYWwgPSBzY2hlbWEucmVxdWlyZWQ/LmluY2x1ZGVzKGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIiAob3B0aW9uYWwpXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtcIiBcIi5yZXBlYXQoaW5kZW50KX1cIiR7a2V5fVwiOiAke3RoaXMuX3NjaGVtYVRvSW5zdHJ1Y3Rpb24odmFsdWUsIGluZGVudCArIDIpfSR7aXNPcHRpb25hbH1gO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBge1xcbiR7cHJvcGVydGllc31cXG4ke1wiIFwiLnJlcGVhdChpbmRlbnQgLSAyKX19JHtkZXNjcmlwdGlvbn1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNjaGVtYS50eXBlID09PSBcImFycmF5XCIgJiYgc2NoZW1hLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBzY2hlbWEuZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICAgICAgPyBgIC8vICR7c2NoZW1hLmRlc2NyaXB0aW9ufWBcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBgYXJyYXlbXFxuJHtcIiBcIi5yZXBlYXQoaW5kZW50KX0ke3RoaXMuX3NjaGVtYVRvSW5zdHJ1Y3Rpb24oc2NoZW1hLml0ZW1zLCBpbmRlbnQgKyAyKX1cXG4ke1wiIFwiLnJlcGVhdChpbmRlbnQgLSAyKX1dICR7ZGVzY3JpcHRpb259YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlzTnVsbGFibGUgPSBudWxsYWJsZSA/IFwiIChudWxsYWJsZSlcIiA6IFwiXCI7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHNjaGVtYS5kZXNjcmlwdGlvbiA/IGAgLy8gJHtzY2hlbWEuZGVzY3JpcHRpb259YCA6IFwiXCI7XG4gICAgICAgICAgICByZXR1cm4gYCR7dHlwZX0ke2Rlc2NyaXB0aW9ufSR7aXNOdWxsYWJsZX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcImFueU9mXCIgaW4gc2NoZW1hKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLmFueU9mXG4gICAgICAgICAgICAgICAgLm1hcCgocykgPT4gdGhpcy5fc2NoZW1hVG9JbnN0cnVjdGlvbihzLCBpbmRlbnQpKVxuICAgICAgICAgICAgICAgIC5qb2luKGBcXG4ke1wiIFwiLnJlcGVhdChpbmRlbnQgLSAyKX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBzY2hlbWEgdHlwZVwiKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21ab2RTY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhzY2hlbWEpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbU5hbWVzQW5kRGVzY3JpcHRpb25zKHNjaGVtYXMpIHtcbiAgICAgICAgY29uc3Qgem9kU2NoZW1hID0gdjNfMS56Lm9iamVjdChPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoc2NoZW1hcykubWFwKChbbmFtZSwgZGVzY3JpcHRpb25dKSA9PiBbbmFtZSwgdjNfMS56LnN0cmluZygpLmRlc2NyaWJlKGRlc2NyaXB0aW9uKV0pKSk7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyh6b2RTY2hlbWEpO1xuICAgIH1cbn1cbmV4cG9ydHMuSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlciA9IEpzb25NYXJrZG93blN0cnVjdHVyZWRPdXRwdXRQYXJzZXI7XG4vKipcbiAqIEEgdHlwZSBvZiBgU3RydWN0dXJlZE91dHB1dFBhcnNlcmAgdGhhdCBoYW5kbGVzIGFzeW1tZXRyaWMgaW5wdXQgYW5kXG4gKiBvdXRwdXQgc2NoZW1hcy5cbiAqL1xuY2xhc3MgQXN5bW1ldHJpY1N0cnVjdHVyZWRPdXRwdXRQYXJzZXIgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZU91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoeyBpbnB1dFNjaGVtYSB9KSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0cnVjdHVyZWRJbnB1dFBhcnNlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0cnVjdHVyZWRJbnB1dFBhcnNlciA9IG5ldyBKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyKGlucHV0U2NoZW1hKTtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UodGV4dCkge1xuICAgICAgICBsZXQgcGFyc2VkSW5wdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IGF3YWl0IHRoaXMuc3RydWN0dXJlZElucHV0UGFyc2VyLnBhcnNlKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgYmFzZV9qc18xLk91dHB1dFBhcnNlckV4Y2VwdGlvbihgRmFpbGVkIHRvIHBhcnNlLiBUZXh0OiBcIiR7dGV4dH1cIi4gRXJyb3I6ICR7ZX1gLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRQcm9jZXNzb3IocGFyc2VkSW5wdXQpO1xuICAgIH1cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cnVjdHVyZWRJbnB1dFBhcnNlci5nZXRGb3JtYXRJbnN0cnVjdGlvbnMoKTtcbiAgICB9XG59XG5leHBvcnRzLkFzeW1tZXRyaWNTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyID0gQXN5bW1ldHJpY1N0cnVjdHVyZWRPdXRwdXRQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/transform.cjs ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseCumulativeTransformOutputParser = exports.BaseTransformOutputParser = void 0;\nconst json_schema_1 = __webpack_require__(/*! @cfworker/json-schema */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/commonjs/index.js\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.cjs\");\nconst base_js_2 = __webpack_require__(/*! ../messages/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ../messages/utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\");\nconst outputs_js_1 = __webpack_require__(/*! ../outputs.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.cjs\");\n/**\n * Class to parse the output of an LLM call that also allows streaming inputs.\n */\nclass BaseTransformOutputParser extends base_js_1.BaseOutputParser {\n    async *_transform(inputGenerator) {\n        for await (const chunk of inputGenerator) {\n            if (typeof chunk === \"string\") {\n                yield this.parseResult([{ text: chunk }]);\n            }\n            else {\n                yield this.parseResult([\n                    {\n                        message: chunk,\n                        text: this._baseMessageToString(chunk),\n                    },\n                ]);\n            }\n        }\n    }\n    /**\n     * Transforms an asynchronous generator of input into an asynchronous\n     * generator of parsed output.\n     * @param inputGenerator An asynchronous generator of input.\n     * @param options A configuration object.\n     * @returns An asynchronous generator of parsed output.\n     */\n    async *transform(inputGenerator, options) {\n        yield* this._transformStreamWithConfig(inputGenerator, this._transform.bind(this), {\n            ...options,\n            runType: \"parser\",\n        });\n    }\n}\nexports.BaseTransformOutputParser = BaseTransformOutputParser;\n/**\n * A base class for output parsers that can handle streaming input. It\n * extends the `BaseTransformOutputParser` class and provides a method for\n * converting parsed outputs into a diff format.\n */\nclass BaseCumulativeTransformOutputParser extends BaseTransformOutputParser {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"diff\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.diff = fields?.diff ?? this.diff;\n    }\n    async *_transform(inputGenerator) {\n        let prevParsed;\n        let accGen;\n        for await (const chunk of inputGenerator) {\n            if (typeof chunk !== \"string\" && typeof chunk.content !== \"string\") {\n                throw new Error(\"Cannot handle non-string output.\");\n            }\n            let chunkGen;\n            if ((0, base_js_2.isBaseMessageChunk)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new outputs_js_1.ChatGenerationChunk({\n                    message: chunk,\n                    text: chunk.content,\n                });\n            }\n            else if ((0, base_js_2.isBaseMessage)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new outputs_js_1.ChatGenerationChunk({\n                    message: (0, utils_js_1.convertToChunk)(chunk),\n                    text: chunk.content,\n                });\n            }\n            else {\n                chunkGen = new outputs_js_1.GenerationChunk({ text: chunk });\n            }\n            if (accGen === undefined) {\n                accGen = chunkGen;\n            }\n            else {\n                accGen = accGen.concat(chunkGen);\n            }\n            const parsed = await this.parsePartialResult([accGen]);\n            if (parsed !== undefined &&\n                parsed !== null &&\n                !(0, json_schema_1.deepCompareStrict)(parsed, prevParsed)) {\n                if (this.diff) {\n                    yield this._diff(prevParsed, parsed);\n                }\n                else {\n                    yield parsed;\n                }\n                prevParsed = parsed;\n            }\n        }\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\nexports.BaseCumulativeTransformOutputParser = BaseCumulativeTransformOutputParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvdHJhbnNmb3JtLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQ0FBMkMsR0FBRyxpQ0FBaUM7QUFDL0Usc0JBQXNCLG1CQUFPLENBQUMsZ0dBQXVCO0FBQ3JELGtCQUFrQixtQkFBTyxDQUFDLHFGQUFZO0FBQ3RDLGtCQUFrQixtQkFBTyxDQUFDLHlGQUFzQjtBQUNoRCxtQkFBbUIsbUJBQU8sQ0FBQywyRkFBdUI7QUFDbEQscUJBQXFCLG1CQUFPLENBQUMsNkVBQWdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGFBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsOERBQThELGFBQWE7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL3RyYW5zZm9ybS5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyID0gZXhwb3J0cy5CYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyID0gdm9pZCAwO1xuY29uc3QganNvbl9zY2hlbWFfMSA9IHJlcXVpcmUoXCJAY2Z3b3JrZXIvanNvbi1zY2hlbWFcIik7XG5jb25zdCBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlLmNqc1wiKTtcbmNvbnN0IGJhc2VfanNfMiA9IHJlcXVpcmUoXCIuLi9tZXNzYWdlcy9iYXNlLmNqc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbWVzc2FnZXMvdXRpbHMuY2pzXCIpO1xuY29uc3Qgb3V0cHV0c19qc18xID0gcmVxdWlyZShcIi4uL291dHB1dHMuY2pzXCIpO1xuLyoqXG4gKiBDbGFzcyB0byBwYXJzZSB0aGUgb3V0cHV0IG9mIGFuIExMTSBjYWxsIHRoYXQgYWxzbyBhbGxvd3Mgc3RyZWFtaW5nIGlucHV0cy5cbiAqL1xuY2xhc3MgQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciBleHRlbmRzIGJhc2VfanNfMS5CYXNlT3V0cHV0UGFyc2VyIHtcbiAgICBhc3luYyAqX3RyYW5zZm9ybShpbnB1dEdlbmVyYXRvcikge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGlucHV0R2VuZXJhdG9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5wYXJzZVJlc3VsdChbeyB0ZXh0OiBjaHVuayB9XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLnBhcnNlUmVzdWx0KFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLl9iYXNlTWVzc2FnZVRvU3RyaW5nKGNodW5rKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGFuIGFzeW5jaHJvbm91cyBnZW5lcmF0b3Igb2YgaW5wdXQgaW50byBhbiBhc3luY2hyb25vdXNcbiAgICAgKiBnZW5lcmF0b3Igb2YgcGFyc2VkIG91dHB1dC5cbiAgICAgKiBAcGFyYW0gaW5wdXRHZW5lcmF0b3IgQW4gYXN5bmNocm9ub3VzIGdlbmVyYXRvciBvZiBpbnB1dC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIEFuIGFzeW5jaHJvbm91cyBnZW5lcmF0b3Igb2YgcGFyc2VkIG91dHB1dC5cbiAgICAgKi9cbiAgICBhc3luYyAqdHJhbnNmb3JtKGlucHV0R2VuZXJhdG9yLCBvcHRpb25zKSB7XG4gICAgICAgIHlpZWxkKiB0aGlzLl90cmFuc2Zvcm1TdHJlYW1XaXRoQ29uZmlnKGlucHV0R2VuZXJhdG9yLCB0aGlzLl90cmFuc2Zvcm0uYmluZCh0aGlzKSwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHJ1blR5cGU6IFwicGFyc2VyXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciA9IEJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXI7XG4vKipcbiAqIEEgYmFzZSBjbGFzcyBmb3Igb3V0cHV0IHBhcnNlcnMgdGhhdCBjYW4gaGFuZGxlIHN0cmVhbWluZyBpbnB1dC4gSXRcbiAqIGV4dGVuZHMgdGhlIGBCYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyYCBjbGFzcyBhbmQgcHJvdmlkZXMgYSBtZXRob2QgZm9yXG4gKiBjb252ZXJ0aW5nIHBhcnNlZCBvdXRwdXRzIGludG8gYSBkaWZmIGZvcm1hdC5cbiAqL1xuY2xhc3MgQmFzZUN1bXVsYXRpdmVUcmFuc2Zvcm1PdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGlmZlwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGlmZiA9IGZpZWxkcz8uZGlmZiA/PyB0aGlzLmRpZmY7XG4gICAgfVxuICAgIGFzeW5jICpfdHJhbnNmb3JtKGlucHV0R2VuZXJhdG9yKSB7XG4gICAgICAgIGxldCBwcmV2UGFyc2VkO1xuICAgICAgICBsZXQgYWNjR2VuO1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGlucHV0R2VuZXJhdG9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNodW5rICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiBjaHVuay5jb250ZW50ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGhhbmRsZSBub24tc3RyaW5nIG91dHB1dC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2h1bmtHZW47XG4gICAgICAgICAgICBpZiAoKDAsIGJhc2VfanNfMi5pc0Jhc2VNZXNzYWdlQ2h1bmspKGNodW5rKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2h1bmsuY29udGVudCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGFuZGxlIG5vbi1zdHJpbmcgbWVzc2FnZSBvdXRwdXQuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaHVua0dlbiA9IG5ldyBvdXRwdXRzX2pzXzEuQ2hhdEdlbmVyYXRpb25DaHVuayh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjaHVuay5jb250ZW50LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKDAsIGJhc2VfanNfMi5pc0Jhc2VNZXNzYWdlKShjaHVuaykpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNodW5rLmNvbnRlbnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGhhbmRsZSBub24tc3RyaW5nIG1lc3NhZ2Ugb3V0cHV0LlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2h1bmtHZW4gPSBuZXcgb3V0cHV0c19qc18xLkNoYXRHZW5lcmF0aW9uQ2h1bmsoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAoMCwgdXRpbHNfanNfMS5jb252ZXJ0VG9DaHVuaykoY2h1bmspLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBjaHVuay5jb250ZW50LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2h1bmtHZW4gPSBuZXcgb3V0cHV0c19qc18xLkdlbmVyYXRpb25DaHVuayh7IHRleHQ6IGNodW5rIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFjY0dlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYWNjR2VuID0gY2h1bmtHZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY2NHZW4gPSBhY2NHZW4uY29uY2F0KGNodW5rR2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IGF3YWl0IHRoaXMucGFyc2VQYXJ0aWFsUmVzdWx0KFthY2NHZW5dKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHBhcnNlZCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICEoMCwganNvbl9zY2hlbWFfMS5kZWVwQ29tcGFyZVN0cmljdCkocGFyc2VkLCBwcmV2UGFyc2VkKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdGhpcy5fZGlmZihwcmV2UGFyc2VkLCBwYXJzZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgcGFyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldEZvcm1hdEluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuZXhwb3J0cy5CYXNlQ3VtdWxhdGl2ZVRyYW5zZm9ybU91dHB1dFBhcnNlciA9IEJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/xml.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.XMLOutputParser = exports.XML_FORMAT_INSTRUCTIONS = void 0;\nexports.parseXMLMarkdown = parseXMLMarkdown;\nconst transform_js_1 = __webpack_require__(/*! ./transform.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.cjs\");\nconst json_patch_js_1 = __webpack_require__(/*! ../utils/json_patch.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.cjs\");\nconst sax_js_1 = __webpack_require__(/*! ../utils/sax-js/sax.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.cjs\");\nexports.XML_FORMAT_INSTRUCTIONS = `The output should be formatted as a XML file.\n1. Output should conform to the tags below. \n2. If tags are not given, make them on your own.\n3. Remember to always open and close all the tags.\n\nAs an example, for the tags [\"foo\", \"bar\", \"baz\"]:\n1. String \"<foo>\\n   <bar>\\n      <baz></baz>\\n   </bar>\\n</foo>\" is a well-formatted instance of the schema. \n2. String \"<foo>\\n   <bar>\\n   </foo>\" is a badly-formatted instance.\n3. String \"<foo>\\n   <tag>\\n   </tag>\\n</foo>\" is a badly-formatted instance.\n\nHere are the output tags:\n\\`\\`\\`\n{tags}\n\\`\\`\\``;\nclass XMLOutputParser extends transform_js_1.BaseCumulativeTransformOutputParser {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.tags = fields?.tags;\n    }\n    static lc_name() {\n        return \"XMLOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [{ op: \"replace\", path: \"\", value: next }];\n        }\n        return (0, json_patch_js_1.compare)(prev, next);\n    }\n    async parsePartialResult(generations) {\n        return parseXMLMarkdown(generations[0].text);\n    }\n    async parse(text) {\n        return parseXMLMarkdown(text);\n    }\n    getFormatInstructions() {\n        const withTags = !!(this.tags && this.tags.length > 0);\n        return withTags\n            ? exports.XML_FORMAT_INSTRUCTIONS.replace(\"{tags}\", this.tags?.join(\", \") ?? \"\")\n            : exports.XML_FORMAT_INSTRUCTIONS;\n    }\n}\nexports.XMLOutputParser = XMLOutputParser;\nconst strip = (text) => text\n    .split(\"\\n\")\n    .map((line) => line.replace(/^\\s+/, \"\"))\n    .join(\"\\n\")\n    .trim();\nconst parseParsedResult = (input) => {\n    if (Object.keys(input).length === 0) {\n        return {};\n    }\n    const result = {};\n    if (input.children.length > 0) {\n        result[input.name] = input.children.map(parseParsedResult);\n        return result;\n    }\n    else {\n        result[input.name] = input.text ?? undefined;\n        return result;\n    }\n};\nfunction parseXMLMarkdown(s) {\n    const cleanedString = strip(s);\n    const parser = sax_js_1.sax.parser(true);\n    let parsedResult = {};\n    const elementStack = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onopentag = (node) => {\n        const element = {\n            name: node.name,\n            attributes: node.attributes,\n            children: [],\n            text: \"\",\n            isSelfClosing: node.isSelfClosing,\n        };\n        if (elementStack.length > 0) {\n            const parentElement = elementStack[elementStack.length - 1];\n            parentElement.children.push(element);\n        }\n        else {\n            parsedResult = element;\n        }\n        if (!node.isSelfClosing) {\n            elementStack.push(element);\n        }\n    };\n    parser.onclosetag = () => {\n        if (elementStack.length > 0) {\n            const lastElement = elementStack.pop();\n            if (elementStack.length === 0 && lastElement) {\n                parsedResult = lastElement;\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.ontext = (text) => {\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.text += text;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onattribute = (attr) => {\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.attributes[attr.name] = attr.value;\n        }\n    };\n    // Try to find XML string within triple backticks.\n    const match = /```(xml)?(.*)```/s.exec(cleanedString);\n    const xmlString = match ? match[2] : cleanedString;\n    parser.write(xmlString).close();\n    // Remove the XML declaration if present\n    if (parsedResult && parsedResult.name === \"?xml\") {\n        parsedResult = parsedResult.children[0];\n    }\n    return parseParsedResult(parsedResult);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/outputs.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/@langchain/core/dist/outputs.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatGenerationChunk = exports.GenerationChunk = exports.RUN_KEY = void 0;\nexports.RUN_KEY = \"__run\";\n/**\n * Chunk of a single generation. Used for streaming.\n */\nclass GenerationChunk {\n    constructor(fields) {\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"generationInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.text = fields.text;\n        this.generationInfo = fields.generationInfo;\n    }\n    concat(chunk) {\n        return new GenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo,\n            },\n        });\n    }\n}\nexports.GenerationChunk = GenerationChunk;\nclass ChatGenerationChunk extends GenerationChunk {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = fields.message;\n    }\n    concat(chunk) {\n        return new ChatGenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo,\n            },\n            message: this.message.concat(chunk.message),\n        });\n    }\n}\nexports.ChatGenerationChunk = ChatGenerationChunk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0cy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsdUJBQXVCLEdBQUcsZUFBZTtBQUN2RSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDJCQUEyQiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0cy5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYXRHZW5lcmF0aW9uQ2h1bmsgPSBleHBvcnRzLkdlbmVyYXRpb25DaHVuayA9IGV4cG9ydHMuUlVOX0tFWSA9IHZvaWQgMDtcbmV4cG9ydHMuUlVOX0tFWSA9IFwiX19ydW5cIjtcbi8qKlxuICogQ2h1bmsgb2YgYSBzaW5nbGUgZ2VuZXJhdGlvbi4gVXNlZCBmb3Igc3RyZWFtaW5nLlxuICovXG5jbGFzcyBHZW5lcmF0aW9uQ2h1bmsge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0ZXh0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdlbmVyYXRpb25JbmZvXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGV4dCA9IGZpZWxkcy50ZXh0O1xuICAgICAgICB0aGlzLmdlbmVyYXRpb25JbmZvID0gZmllbGRzLmdlbmVyYXRpb25JbmZvO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHZW5lcmF0aW9uQ2h1bmsoe1xuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0ICsgY2h1bmsudGV4dCxcbiAgICAgICAgICAgIGdlbmVyYXRpb25JbmZvOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgICAgICAuLi5jaHVuay5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJhdGlvbkNodW5rID0gR2VuZXJhdGlvbkNodW5rO1xuY2xhc3MgQ2hhdEdlbmVyYXRpb25DaHVuayBleHRlbmRzIEdlbmVyYXRpb25DaHVuayB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZmllbGRzLm1lc3NhZ2U7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IENoYXRHZW5lcmF0aW9uQ2h1bmsoe1xuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0ICsgY2h1bmsudGV4dCxcbiAgICAgICAgICAgIGdlbmVyYXRpb25JbmZvOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgICAgICAuLi5jaHVuay5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UuY29uY2F0KGNodW5rLm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkNoYXRHZW5lcmF0aW9uQ2h1bmsgPSBDaGF0R2VuZXJhdGlvbkNodW5rO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/outputs.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompt_values.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompt_values.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ImagePromptValue = exports.ChatPromptValue = exports.StringPromptValue = exports.BasePromptValue = void 0;\nconst serializable_js_1 = __webpack_require__(/*! ./load/serializable.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs\");\nconst human_js_1 = __webpack_require__(/*! ./messages/human.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ./messages/utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.cjs\");\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */\nclass BasePromptValue extends serializable_js_1.Serializable {\n}\nexports.BasePromptValue = BasePromptValue;\n/**\n * Represents a prompt value as a string. It extends the BasePromptValue\n * class and overrides the toString and toChatMessages methods.\n */\nclass StringPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"StringPromptValue\";\n    }\n    constructor(value) {\n        super({ value });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompt_values\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [new human_js_1.HumanMessage(this.value)];\n    }\n}\nexports.StringPromptValue = StringPromptValue;\n/**\n * Class that represents a chat prompt value. It extends the\n * BasePromptValue and includes an array of BaseMessage instances.\n */\nclass ChatPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ChatPromptValue\";\n    }\n    constructor(fields) {\n        if (Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { messages: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompt_values\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = fields.messages;\n    }\n    toString() {\n        return (0, utils_js_1.getBufferString)(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\nexports.ChatPromptValue = ChatPromptValue;\n/**\n * Class that represents an image prompt value. It extends the\n * BasePromptValue and includes an ImageURL instance.\n */\nclass ImagePromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ImagePromptValue\";\n    }\n    constructor(fields) {\n        if (!(\"imageUrl\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { imageUrl: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompt_values\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"imageUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @ignore */\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.imageUrl = fields.imageUrl;\n    }\n    toString() {\n        return this.imageUrl.url;\n    }\n    toChatMessages() {\n        return [\n            new human_js_1.HumanMessage({\n                content: [\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            detail: this.imageUrl.detail,\n                            url: this.imageUrl.url,\n                        },\n                    },\n                ],\n            }),\n        ];\n    }\n}\nexports.ImagePromptValue = ImagePromptValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompt_values.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/retrievers/index.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/retrievers/index.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseRetriever = void 0;\nconst manager_js_1 = __webpack_require__(/*! ../callbacks/manager.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\");\nconst base_js_1 = __webpack_require__(/*! ../runnables/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst config_js_1 = __webpack_require__(/*! ../runnables/config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\n/**\n * Abstract base class for a document retrieval system, designed to\n * process string queries and return the most relevant documents from a source.\n *\n * `BaseRetriever` provides common properties and methods for derived retrievers,\n * such as callbacks, tagging, and verbose logging. Custom retrieval systems\n * should extend this class and implement `_getRelevantDocuments` to define\n * the specific retrieval logic.\n *\n * @template Metadata - The type of metadata associated with each document,\n *                      defaulting to `Record<string, any>`.\n */\nclass BaseRetriever extends base_js_1.Runnable {\n    /**\n     * Constructs a new `BaseRetriever` instance with optional configuration fields.\n     *\n     * @param fields - Optional input configuration that can include `callbacks`,\n     *                 `tags`, `metadata`, and `verbose` settings for custom retriever behavior.\n     */\n    constructor(fields) {\n        super(fields);\n        /**\n         * Optional callbacks to handle various events in the retrieval process.\n         */\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Tags to label or categorize the retrieval operation.\n         */\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Metadata to provide additional context or information about the retrieval\n         * operation.\n         */\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * If set to `true`, enables verbose logging for the retrieval process.\n         */\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callbacks = fields?.callbacks;\n        this.tags = fields?.tags ?? [];\n        this.metadata = fields?.metadata ?? {};\n        this.verbose = fields?.verbose ?? false;\n    }\n    /**\n     * TODO: This should be an abstract method, but we'd like to avoid breaking\n     * changes to people currently using subclassed custom retrievers.\n     * Change it on next major release.\n     */\n    /**\n     * Placeholder method for retrieving relevant documents based on a query.\n     *\n     * This method is intended to be implemented by subclasses and will be\n     * converted to an abstract method in the next major release. Currently, it\n     * throws an error if not implemented, ensuring that custom retrievers define\n     * the specific retrieval logic.\n     *\n     * @param _query - The query string used to search for relevant documents.\n     * @param _callbacks - (optional) Callback manager for managing callbacks\n     *                     during retrieval.\n     * @returns A promise resolving to an array of `DocumentInterface` instances relevant to the query.\n     * @throws {Error} Throws an error indicating the method is not implemented.\n     */\n    _getRelevantDocuments(_query, _callbacks) {\n        throw new Error(\"Not implemented!\");\n    }\n    /**\n     * Executes a retrieval operation.\n     *\n     * @param input - The query string used to search for relevant documents.\n     * @param options - (optional) Configuration options for the retrieval run,\n     *                  which may include callbacks, tags, and metadata.\n     * @returns A promise that resolves to an array of `DocumentInterface` instances\n     *          representing the most relevant documents to the query.\n     */\n    async invoke(input, options) {\n        return this.getRelevantDocuments(input, (0, config_js_1.ensureConfig)(options));\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     *\n     * Main method used to retrieve relevant documents. It takes a query\n     * string and an optional configuration object, and returns a promise that\n     * resolves to an array of `Document` objects. This method handles the\n     * retrieval process, including starting and ending callbacks, and error\n     * handling.\n     * @param query The query string to retrieve relevant documents for.\n     * @param config Optional configuration object for the retrieval process.\n     * @returns A promise that resolves to an array of `Document` objects.\n     */\n    async getRelevantDocuments(query, config) {\n        const parsedConfig = (0, config_js_1.ensureConfig)((0, manager_js_1.parseCallbackConfigArg)(config));\n        const callbackManager_ = await manager_js_1.CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags, this.tags, parsedConfig.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleRetrieverStart(this.toJSON(), query, parsedConfig.runId, undefined, undefined, undefined, parsedConfig.runName);\n        try {\n            const results = await this._getRelevantDocuments(query, runManager);\n            await runManager?.handleRetrieverEnd(results);\n            return results;\n        }\n        catch (error) {\n            await runManager?.handleRetrieverError(error);\n            throw error;\n        }\n    }\n}\nexports.BaseRetriever = BaseRetriever;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/retrievers/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/base.cjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunnableToolLike = exports.RunnablePick = exports.RunnableAssign = exports.RunnableWithFallbacks = exports.RunnableParallel = exports.RunnableLambda = exports.RunnableTraceable = exports.RunnableMap = exports.RunnableSequence = exports.RunnableRetry = exports.RunnableEach = exports.RunnableBinding = exports.Runnable = void 0;\nexports._coerceToDict = _coerceToDict;\nexports._coerceToRunnable = _coerceToRunnable;\nexports.convertRunnableToTool = convertRunnableToTool;\nconst v3_1 = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/zod/v3/index.cjs\");\nconst p_retry_1 = __importDefault(__webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\"));\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/index.js\");\nconst traceable_1 = __webpack_require__(/*! langsmith/singletons/traceable */ \"(rsc)/./node_modules/langsmith/singletons/traceable.cjs\");\nconst log_stream_js_1 = __webpack_require__(/*! ../tracers/log_stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.cjs\");\nconst event_stream_js_1 = __webpack_require__(/*! ../tracers/event_stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.cjs\");\nconst serializable_js_1 = __webpack_require__(/*! ../load/serializable.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nconst signal_js_1 = __webpack_require__(/*! ../utils/signal.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/signal.cjs\");\nconst config_js_1 = __webpack_require__(/*! ./config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\nconst async_caller_js_1 = __webpack_require__(/*! ../utils/async_caller.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.cjs\");\nconst root_listener_js_1 = __webpack_require__(/*! ../tracers/root_listener.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.cjs\");\nconst index_js_1 = __webpack_require__(/*! ../singletons/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.cjs\");\nconst graph_js_1 = __webpack_require__(/*! ./graph.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/graph.cjs\");\nconst wrappers_js_1 = __webpack_require__(/*! ./wrappers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.cjs\");\nconst iter_js_1 = __webpack_require__(/*! ./iter.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/iter.cjs\");\nconst utils_js_2 = __webpack_require__(/*! ../tools/utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.cjs\");\nconst zod_js_1 = __webpack_require__(/*! ../utils/types/zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value &&\n        !Array.isArray(value) &&\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        !(value instanceof Date) &&\n        typeof value === \"object\"\n        ? value\n        : { [defaultKey]: value };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */\nclass Runnable extends serializable_js_1.Serializable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    getName(suffix) {\n        const name = \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.name ?? this.constructor.lc_name() ?? this.constructor.name;\n        return suffix ? `${name}${suffix}` : name;\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     *\n     * @deprecated Use {@link withConfig} instead. This will be removed in the next breaking release.\n     */\n    bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({ bound: this, kwargs, config: {} });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     *\n     * @deprecated This will be removed in the next breaking release.\n     */\n    map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({ bound: this });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param fields.stopAfterAttempt The number of attempts to retry.\n     * @param fields.onFailedAttempt A function that is called when a retry fails.\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields,\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */\n    withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {},\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */\n    withFallbacks(fields) {\n        const fallbacks = Array.isArray(fields) ? fields : fields.fallbacks;\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks,\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options) && options.length !== length) {\n            throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n        }\n        if (Array.isArray(options)) {\n            return options.map(config_js_1.ensureConfig);\n        }\n        if (length > 1 && !Array.isArray(options) && options.runId) {\n            console.warn(\"Provided runId will be used only for the first element of the batch.\");\n            const subsequent = Object.fromEntries(Object.entries(options).filter(([key]) => key !== \"runId\"));\n            return Array.from({ length }, (_, i) => (0, config_js_1.ensureConfig)(i === 0 ? options : subsequent));\n        }\n        return Array.from({ length }, () => (0, config_js_1.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = configList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const caller = new async_caller_js_1.AsyncCaller({\n            maxConcurrency,\n            onFailedAttempt: (e) => {\n                throw e;\n            },\n        });\n        const batchCalls = inputs.map((input, i) => caller.call(async () => {\n            try {\n                const result = await this.invoke(input, configList[i]);\n                return result;\n            }\n            catch (e) {\n                if (batchOptions?.returnExceptions) {\n                    return e;\n                }\n                throw e;\n            }\n        }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */\n    async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */\n    async stream(input, options) {\n        // Buffer the first streamed chunk to allow for initial errors\n        // to surface immediately.\n        const config = (0, config_js_1.ensureConfig)(options);\n        const wrappedGenerator = new stream_js_1.AsyncGeneratorWithSetup({\n            generator: this._streamIterator(input, config),\n            config,\n        });\n        await wrappedGenerator.setup;\n        return stream_js_1.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        let runnableConfig;\n        if (options === undefined) {\n            runnableConfig = (0, config_js_1.ensureConfig)(options);\n        }\n        else {\n            runnableConfig = (0, config_js_1.ensureConfig)({\n                callbacks: options.callbacks,\n                tags: options.tags,\n                metadata: options.metadata,\n                runName: options.runName,\n                configurable: options.configurable,\n                recursionLimit: options.recursionLimit,\n                maxConcurrency: options.maxConcurrency,\n                runId: options.runId,\n                timeout: options.timeout,\n                signal: options.signal,\n            });\n        }\n        const callOptions = { ...options };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        delete callOptions.runName;\n        delete callOptions.configurable;\n        delete callOptions.recursionLimit;\n        delete callOptions.maxConcurrency;\n        delete callOptions.runId;\n        delete callOptions.timeout;\n        delete callOptions.signal;\n        return [runnableConfig, callOptions];\n    }\n    async _callWithConfig(func, input, options) {\n        const config = (0, config_js_1.ensureConfig)(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, config?.runType, undefined, undefined, config?.runName ?? this.getName());\n        delete config.runId;\n        let output;\n        try {\n            const promise = func.call(this, input, config, runManager);\n            output = await (0, signal_js_1.raceWithSignal)(promise, options?.signal);\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */\n    async _batchWithConfig(func, inputs, options, batchOptions) {\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(optionsList.map(config_js_1.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i) => {\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), optionsList[i].runId, optionsList[i].runType, undefined, undefined, optionsList[i].runName ?? this.getName());\n            delete optionsList[i].runId;\n            return handleStartRes;\n        }));\n        let outputs;\n        try {\n            const promise = func.call(this, inputs, optionsList, runManagers, batchOptions);\n            outputs = await (0, signal_js_1.raceWithSignal)(promise, optionsList?.[0]?.signal);\n        }\n        catch (e) {\n            await Promise.all(runManagers.map((runManager) => runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager) => runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /** @internal */\n    _concatOutputChunks(first, second) {\n        return (0, stream_js_1.concat)(first, second);\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */\n    async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const config = (0, config_js_1.ensureConfig)(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const outerThis = this;\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator) {\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    }\n                    else {\n                        try {\n                            finalInput = outerThis._concatOutputChunks(finalInput, \n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            chunk);\n                        }\n                        catch {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        let runManager;\n        try {\n            const pipe = await (0, stream_js_1.pipeGeneratorWithSetup)(transformer.bind(this), wrapInputForTracing(), async () => callbackManager_?.handleChainStart(this.toJSON(), { input: \"\" }, config.runId, config.runType, undefined, undefined, config.runName ?? this.getName()), options?.signal, config);\n            delete config.runId;\n            runManager = pipe.setup;\n            const streamEventsHandler = runManager?.handlers.find(event_stream_js_1.isStreamEventsHandler);\n            let iterator = pipe.output;\n            if (streamEventsHandler !== undefined && runManager !== undefined) {\n                iterator = streamEventsHandler.tapOutputIterable(runManager.runId, iterator);\n            }\n            const streamLogHandler = runManager?.handlers.find(log_stream_js_1.isLogStreamHandler);\n            if (streamLogHandler !== undefined && runManager !== undefined) {\n                iterator = streamLogHandler.tapOutputIterable(runManager.runId, iterator);\n            }\n            for await (const chunk of iterator) {\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    }\n                    else {\n                        try {\n                            finalOutput = this._concatOutputChunks(finalOutput, \n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            chunk);\n                        }\n                        catch {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        }\n        catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\"),\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, { inputs: _coerceToDict(finalInput, \"input\") });\n    }\n    getGraph(_) {\n        const graph = new graph_js_1.Graph();\n        // TODO: Add input schema for runnables\n        const inputNode = graph.addNode({\n            name: `${this.getName()}Input`,\n            schema: v3_1.z.any(),\n        });\n        const runnableNode = graph.addNode(this);\n        // TODO: Add output schemas for runnables\n        const outputNode = graph.addNode({\n            name: `${this.getName()}Output`,\n            schema: v3_1.z.any(),\n        });\n        graph.addEdge(inputNode, runnableNode);\n        graph.addEdge(runnableNode, outputNode);\n        return graph;\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */\n    pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable),\n        });\n    }\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */\n    pick(keys) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.pipe(new RunnablePick(keys));\n    }\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */\n    assign(mapping) {\n        return this.pipe(\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableAssign(\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableMap({ steps: mapping })));\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */\n    async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator) {\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            }\n            else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = this._concatOutputChunks(finalChunk, chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, (0, config_js_1.ensureConfig)(options));\n    }\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */\n    async *streamLog(input, options, streamOptions) {\n        const logStreamCallbackHandler = new log_stream_js_1.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"original\",\n        });\n        const config = (0, config_js_1.ensureConfig)(options);\n        yield* this._streamLog(input, logStreamCallbackHandler, config);\n    }\n    async *_streamLog(input, logStreamCallbackHandler, config) {\n        const { callbacks } = config;\n        if (callbacks === undefined) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = [logStreamCallbackHandler];\n        }\n        else if (Array.isArray(callbacks)) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = callbacks.concat([logStreamCallbackHandler]);\n        }\n        else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.addHandler(logStreamCallbackHandler, true);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const runnableStreamPromise = this.stream(input, config);\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await runnableStreamPromise;\n                for await (const chunk of runnableStream) {\n                    const patch = new log_stream_js_1.RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: \"/streamed_output/-\",\n                                value: chunk,\n                            },\n                        ],\n                    });\n                    await logStreamCallbackHandler.writer.write(patch);\n                }\n            }\n            finally {\n                await logStreamCallbackHandler.writer.close();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        try {\n            for await (const log of logStreamCallbackHandler) {\n                yield log;\n            }\n        }\n        finally {\n            await runnableStreamConsumePromise;\n        }\n    }\n    streamEvents(input, options, streamOptions) {\n        let stream;\n        if (options.version === \"v1\") {\n            stream = this._streamEventsV1(input, options, streamOptions);\n        }\n        else if (options.version === \"v2\") {\n            stream = this._streamEventsV2(input, options, streamOptions);\n        }\n        else {\n            throw new Error(`Only versions \"v1\" and \"v2\" of the schema are currently supported.`);\n        }\n        if (options.encoding === \"text/event-stream\") {\n            return (0, wrappers_js_1.convertToHttpEventStream)(stream);\n        }\n        else {\n            return stream_js_1.IterableReadableStream.fromAsyncGenerator(stream);\n        }\n    }\n    async *_streamEventsV2(input, options, streamOptions) {\n        const eventStreamer = new event_stream_js_1.EventStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n        });\n        const config = (0, config_js_1.ensureConfig)(options);\n        const runId = config.runId ?? (0, uuid_1.v4)();\n        config.runId = runId;\n        const callbacks = config.callbacks;\n        if (callbacks === undefined) {\n            config.callbacks = [eventStreamer];\n        }\n        else if (Array.isArray(callbacks)) {\n            config.callbacks = callbacks.concat(eventStreamer);\n        }\n        else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.addHandler(eventStreamer, true);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const abortController = new AbortController();\n        // Call the runnable in streaming mode,\n        // add each chunk to the output stream\n        const outerThis = this;\n        async function consumeRunnableStream() {\n            let signal;\n            let listener = null;\n            try {\n                if (options?.signal) {\n                    if (\"any\" in AbortSignal) {\n                        // Use native AbortSignal.any() if available (Node 19+)\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        signal = AbortSignal.any([\n                            abortController.signal,\n                            options.signal,\n                        ]);\n                    }\n                    else {\n                        // Fallback for Node 18 and below - just use the provided signal\n                        signal = options.signal;\n                        // Ensure we still abort our controller when the parent signal aborts\n                        listener = () => {\n                            abortController.abort();\n                        };\n                        options.signal.addEventListener(\"abort\", listener, { once: true });\n                    }\n                }\n                else {\n                    signal = abortController.signal;\n                }\n                const runnableStream = await outerThis.stream(input, {\n                    ...config,\n                    signal,\n                });\n                const tappedStream = eventStreamer.tapOutputIterable(runId, runnableStream);\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                for await (const _ of tappedStream) {\n                    // Just iterate so that the callback handler picks up events\n                    if (abortController.signal.aborted)\n                        break;\n                }\n            }\n            finally {\n                await eventStreamer.finish();\n                if (signal && listener) {\n                    signal.removeEventListener(\"abort\", listener);\n                }\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        let firstEventSent = false;\n        let firstEventRunId;\n        try {\n            for await (const event of eventStreamer) {\n                // This is a work-around an issue where the inputs into the\n                // chain are not available until the entire input is consumed.\n                // As a temporary solution, we'll modify the input to be the input\n                // that was passed into the chain.\n                if (!firstEventSent) {\n                    event.data.input = input;\n                    firstEventSent = true;\n                    firstEventRunId = event.run_id;\n                    yield event;\n                    continue;\n                }\n                if (event.run_id === firstEventRunId && event.event.endsWith(\"_end\")) {\n                    // If it's the end event corresponding to the root runnable\n                    // we dont include the input in the event since it's guaranteed\n                    // to be included in the first event.\n                    if (event.data?.input) {\n                        delete event.data.input;\n                    }\n                }\n                yield event;\n            }\n        }\n        finally {\n            abortController.abort();\n            await runnableStreamConsumePromise;\n        }\n    }\n    async *_streamEventsV1(input, options, streamOptions) {\n        let runLog;\n        let hasEncounteredStartEvent = false;\n        const config = (0, config_js_1.ensureConfig)(options);\n        const rootTags = config.tags ?? [];\n        const rootMetadata = config.metadata ?? {};\n        const rootName = config.runName ?? this.getName();\n        const logStreamCallbackHandler = new log_stream_js_1.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"streaming_events\",\n        });\n        const rootEventFilter = new utils_js_1._RootEventFilter({\n            ...streamOptions,\n        });\n        const logStream = this._streamLog(input, logStreamCallbackHandler, config);\n        for await (const log of logStream) {\n            if (!runLog) {\n                runLog = log_stream_js_1.RunLog.fromRunLogPatch(log);\n            }\n            else {\n                runLog = runLog.concat(log);\n            }\n            if (runLog.state === undefined) {\n                throw new Error(`Internal error: \"streamEvents\" state is missing. Please open a bug report.`);\n            }\n            // Yield the start event for the root runnable if it hasn't been seen.\n            // The root run is never filtered out\n            if (!hasEncounteredStartEvent) {\n                hasEncounteredStartEvent = true;\n                const state = { ...runLog.state };\n                const event = {\n                    run_id: state.id,\n                    event: `on_${state.type}_start`,\n                    name: rootName,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    data: {\n                        input,\n                    },\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n            const paths = log.ops\n                .filter((op) => op.path.startsWith(\"/logs/\"))\n                .map((op) => op.path.split(\"/\")[2]);\n            const dedupedPaths = [...new Set(paths)];\n            for (const path of dedupedPaths) {\n                let eventType;\n                let data = {};\n                const logEntry = runLog.state.logs[path];\n                if (logEntry.end_time === undefined) {\n                    if (logEntry.streamed_output.length > 0) {\n                        eventType = \"stream\";\n                    }\n                    else {\n                        eventType = \"start\";\n                    }\n                }\n                else {\n                    eventType = \"end\";\n                }\n                if (eventType === \"start\") {\n                    // Include the inputs with the start event if they are available.\n                    // Usually they will NOT be available for components that operate\n                    // on streams, since those components stream the input and\n                    // don't know its final value until the end of the stream.\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                }\n                else if (eventType === \"end\") {\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                    data.output = logEntry.final_output;\n                }\n                else if (eventType === \"stream\") {\n                    const chunkCount = logEntry.streamed_output.length;\n                    if (chunkCount !== 1) {\n                        throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${logEntry.name}\"`);\n                    }\n                    data = { chunk: logEntry.streamed_output[0] };\n                    // Clean up the stream, we don't need it anymore.\n                    // And this avoids duplicates as well!\n                    logEntry.streamed_output = [];\n                }\n                yield {\n                    event: `on_${logEntry.type}_${eventType}`,\n                    name: logEntry.name,\n                    run_id: logEntry.id,\n                    tags: logEntry.tags,\n                    metadata: logEntry.metadata,\n                    data,\n                };\n            }\n            // Finally, we take care of the streaming output from the root chain\n            // if there is any.\n            const { state } = runLog;\n            if (state.streamed_output.length > 0) {\n                const chunkCount = state.streamed_output.length;\n                if (chunkCount !== 1) {\n                    throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${state.name}\"`);\n                }\n                const data = { chunk: state.streamed_output[0] };\n                // Clean up the stream, we don't need it anymore.\n                state.streamed_output = [];\n                const event = {\n                    event: `on_${state.type}_stream`,\n                    run_id: state.id,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    name: rootName,\n                    data,\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n        }\n        const state = runLog?.state;\n        if (state !== undefined) {\n            // Finally, yield the end event for the root runnable.\n            const event = {\n                event: `on_${state.type}_end`,\n                name: rootName,\n                run_id: state.id,\n                tags: rootTags,\n                metadata: rootMetadata,\n                data: {\n                    output: state.final_output,\n                },\n            };\n            if (rootEventFilter.includeEvent(event, state.type))\n                yield event;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return (0, utils_js_1.isRunnableInterface)(thing);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */\n    withListeners({ onStart, onEnd, onError, }) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config: {},\n            configFactories: [\n                (config) => ({\n                    callbacks: [\n                        new root_listener_js_1.RootListenersTracer({\n                            config,\n                            onStart,\n                            onEnd,\n                            onError,\n                        }),\n                    ],\n                }),\n            ],\n        });\n    }\n    /**\n     * Convert a runnable to a tool. Return a new instance of `RunnableToolLike`\n     * which contains the runnable, name, description and schema.\n     *\n     * @template {T extends RunInput = RunInput} RunInput - The input type of the runnable. Should be the same as the `RunInput` type of the runnable.\n     *\n     * @param fields\n     * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n     * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n     * @param {z.ZodType<T>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n     * @returns {RunnableToolLike<z.ZodType<T>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n     */\n    asTool(fields) {\n        return convertRunnableToTool(this, fields);\n    }\n}\nexports.Runnable = Runnable;\n/**\n * Wraps a runnable and applies partial config upon invocation.\n *\n * @example\n * ```typescript\n * import {\n *   type RunnableConfig,\n *   RunnableLambda,\n * } from \"@langchain/core/runnables\";\n *\n * const enhanceProfile = (\n *   profile: Record<string, any>,\n *   config?: RunnableConfig\n * ) => {\n *   if (config?.configurable?.role) {\n *     return { ...profile, role: config.configurable.role };\n *   }\n *   return profile;\n * };\n *\n * const runnable = RunnableLambda.from(enhanceProfile);\n *\n * // Bind configuration to the runnable to set the user's role dynamically\n * const adminRunnable = runnable.bind({ configurable: { role: \"Admin\" } });\n * const userRunnable = runnable.bind({ configurable: { role: \"User\" } });\n *\n * const result1 = await adminRunnable.invoke({\n *   name: \"Alice\",\n *   email: \"alice@example.com\"\n * });\n *\n * // { name: \"Alice\", email: \"alice@example.com\", role: \"Admin\" }\n *\n * const result2 = await userRunnable.invoke({\n *   name: \"Bob\",\n *   email: \"bob@example.com\"\n * });\n *\n * // { name: \"Bob\", email: \"bob@example.com\", role: \"User\" }\n * ```\n */\nclass RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"configFactories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n        this.configFactories = fields.configFactories;\n    }\n    getName(suffix) {\n        return this.bound.getName(suffix);\n    }\n    async _mergeConfig(...options) {\n        const config = (0, config_js_1.mergeConfigs)(this.config, ...options);\n        return (0, config_js_1.mergeConfigs)(config, ...(this.configFactories\n            ? await Promise.all(this.configFactories.map(async (configFactory) => await configFactory(config)))\n            : []));\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableBinding` class that is bound with the specified arguments.\n     *\n     * @deprecated Use {@link withConfig} instead. This will be removed in the next breaking release.\n     */\n    bind(kwargs) {\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: { ...this.kwargs, ...kwargs },\n            config: this.config,\n        });\n    }\n    withConfig(config) {\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: { ...this.config, ...config },\n        });\n    }\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields,\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, await this._mergeConfig((0, config_js_1.ensureConfig)(options), this.kwargs));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options)\n            ? await Promise.all(options.map(async (individualOption) => this._mergeConfig((0, config_js_1.ensureConfig)(individualOption), this.kwargs)))\n            : await this._mergeConfig((0, config_js_1.ensureConfig)(options), this.kwargs);\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    /** @internal */\n    _concatOutputChunks(first, second) {\n        return this.bound._concatOutputChunks(first, second);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, await this._mergeConfig((0, config_js_1.ensureConfig)(options), this.kwargs));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, await this._mergeConfig((0, config_js_1.ensureConfig)(options), this.kwargs));\n    }\n    async *transform(generator, options) {\n        yield* this.bound.transform(generator, await this._mergeConfig((0, config_js_1.ensureConfig)(options), this.kwargs));\n    }\n    streamEvents(input, options, streamOptions) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const outerThis = this;\n        const generator = async function* () {\n            yield* outerThis.bound.streamEvents(input, {\n                ...(await outerThis._mergeConfig((0, config_js_1.ensureConfig)(options), outerThis.kwargs)),\n                version: options.version,\n            }, streamOptions);\n        };\n        return stream_js_1.IterableReadableStream.fromAsyncGenerator(generator());\n    }\n    static isRunnableBinding(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */\n    withListeners({ onStart, onEnd, onError, }) {\n        return new RunnableBinding({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            configFactories: [\n                (config) => ({\n                    callbacks: [\n                        new root_listener_js_1.RootListenersTracer({\n                            config,\n                            onStart,\n                            onEnd,\n                            onError,\n                        }),\n                    ],\n                }),\n            ],\n        });\n    }\n}\nexports.RunnableBinding = RunnableBinding;\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n * @example\n * ```typescript\n * import { RunnableEach, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const toUpperCase = (input: string): string => input.toUpperCase();\n * const addGreeting = (input: string): string => `Hello, ${input}!`;\n *\n * const upperCaseLambda = RunnableLambda.from(toUpperCase);\n * const greetingLambda = RunnableLambda.from(addGreeting);\n *\n * const chain = new RunnableEach({\n *   bound: upperCaseLambda.pipe(greetingLambda),\n * });\n *\n * const result = await chain.invoke([\"alice\", \"bob\", \"carol\"])\n *\n * // [\"Hello, ALICE!\", \"Hello, BOB!\", \"Hello, CAROL!\"]\n * ```\n *\n * @deprecated This will be removed in the next breaking release.\n */\nclass RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     *\n     * @deprecated Use {@link withConfig} instead. This will be removed in the next breaking release.\n     */\n    bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs),\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */\n    async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke.bind(this), inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */\n    async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, (0, config_js_1.patchConfig)(config, { callbacks: runManager?.getChild() }));\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */\n    withListeners({ onStart, onEnd, onError, }) {\n        return new RunnableEach({\n            bound: this.bound.withListeners({ onStart, onEnd, onError }),\n        });\n    }\n}\nexports.RunnableEach = RunnableEach;\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableRetry,\n * } from \"@langchain/core/runnables\";\n *\n * // Simulate an API call that fails\n * const simulateApiCall = (input: string): string => {\n *   console.log(`Attempting API call with input: ${input}`);\n *   throw new Error(\"API call failed due to network issue\");\n * };\n *\n * const apiCallLambda = RunnableLambda.from(simulateApiCall);\n *\n * // Apply retry logic using the .withRetry() method\n * const apiCallWithRetry = apiCallLambda.withRetry({ stopAfterAttempt: 3 });\n *\n * // Alternatively, create a RunnableRetry instance manually\n * const manualRetry = new RunnableRetry({\n *   bound: apiCallLambda,\n *   maxAttemptNumber: 3,\n *   config: {},\n * });\n *\n * // Example invocation using the .withRetry() method\n * const res = await apiCallWithRetry\n *   .invoke(\"Request 1\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n *\n * // Example invocation using the manual retry instance\n * const res2 = await manualRetry\n *   .invoke(\"Request 2\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n * ```\n */\nclass RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: () => { }\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return (0, config_js_1.patchConfig)(config, { callbacks: runManager?.getChild(tag) });\n    }\n    async _invoke(input, config, runManager) {\n        return (0, p_retry_1.default)((attemptNumber) => super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onFailedAttempt: (error) => this.onFailedAttempt(error, input),\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true,\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */\n    async invoke(input, config) {\n        return this._callWithConfig(this._invoke.bind(this), input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await (0, p_retry_1.default)(async (attemptNumber) => {\n                const remainingIndexes = inputs\n                    .map((_, i) => i)\n                    .filter((i) => resultsMap[i.toString()] === undefined ||\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i) => inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i) => this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true,\n                });\n                let firstException;\n                for (let i = 0; i < results.length; i += 1) {\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            firstException.input = remainingInputs[i];\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onFailedAttempt: (error) => this.onFailedAttempt(error, error.input),\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true,\n            });\n        }\n        catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap)\n            .sort((a, b) => parseInt(a, 10) - parseInt(b, 10))\n            .map((key) => resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\nexports.RunnableRetry = RunnableRetry;\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({ model: \"gpt-4o-mini\" })]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */\nclass RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"omitSequenceTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n        this.name = fields.name;\n        this.omitSequenceTags = fields.omitSequenceTags ?? this.omitSequenceTags;\n    }\n    get steps() {\n        return [this.first, ...this.middle, this.last];\n    }\n    async invoke(input, options) {\n        const config = (0, config_js_1.ensureConfig)(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [this.first, ...this.middle];\n            for (let i = 0; i < initialSteps.length; i += 1) {\n                const step = initialSteps[i];\n                const promise = step.invoke(nextStepInput, (0, config_js_1.patchConfig)(config, {\n                    callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`),\n                }));\n                nextStepInput = await (0, signal_js_1.raceWithSignal)(promise, options?.signal);\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            if (options?.signal?.aborted) {\n                throw new Error(\"Aborted\");\n            }\n            finalOutput = await this.last.invoke(nextStepInput, (0, config_js_1.patchConfig)(config, {\n                callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${this.steps.length}`),\n            }));\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(config_js_1.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i) => {\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        try {\n            for (let i = 0; i < this.steps.length; i += 1) {\n                const step = this.steps[i];\n                const promise = step.batch(nextStepInputs, runManagers.map((runManager, j) => {\n                    const childRunManager = runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`);\n                    return (0, config_js_1.patchConfig)(configList[j], { callbacks: childRunManager });\n                }), batchOptions);\n                nextStepInputs = await (0, signal_js_1.raceWithSignal)(promise, configList[0]?.signal);\n            }\n        }\n        catch (e) {\n            await Promise.all(runManagers.map((runManager) => runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager) => runManager?.handleChainEnd(_coerceToDict(nextStepInputs, \"output\"))));\n        return nextStepInputs;\n    }\n    /** @internal */\n    _concatOutputChunks(first, second) {\n        return this.last._concatOutputChunks(first, second);\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(options);\n        const { runId, ...otherOptions } = options ?? {};\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherOptions?.runName);\n        const steps = [this.first, ...this.middle, this.last];\n        let concatSupported = true;\n        let finalOutput;\n        async function* inputGenerator() {\n            yield input;\n        }\n        try {\n            let finalGenerator = steps[0].transform(inputGenerator(), (0, config_js_1.patchConfig)(otherOptions, {\n                callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:1`),\n            }));\n            for (let i = 1; i < steps.length; i += 1) {\n                const step = steps[i];\n                finalGenerator = await step.transform(finalGenerator, (0, config_js_1.patchConfig)(otherOptions, {\n                    callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`),\n                }));\n            }\n            for await (const chunk of finalGenerator) {\n                options?.signal?.throwIfAborted();\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    }\n                    else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = this._concatOutputChunks(finalOutput, chunk);\n                        }\n                        catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    getGraph(config) {\n        const graph = new graph_js_1.Graph();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let currentLastNode = null;\n        this.steps.forEach((step, index) => {\n            const stepGraph = step.getGraph(config);\n            if (index !== 0) {\n                stepGraph.trimFirstNode();\n            }\n            if (index !== this.steps.length - 1) {\n                stepGraph.trimLastNode();\n            }\n            graph.extend(stepGraph);\n            const stepFirstNode = stepGraph.firstNode();\n            if (!stepFirstNode) {\n                throw new Error(`Runnable ${step} has no first node`);\n            }\n            if (currentLastNode) {\n                graph.addEdge(currentLastNode, stepFirstNode);\n            }\n            currentLastNode = stepGraph.lastNode();\n        });\n        return graph;\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle,\n                ]),\n                last: coerceable.last,\n                name: this.name ?? coerceable.name,\n            });\n        }\n        else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [...this.middle, this.last],\n                last: _coerceToRunnable(coerceable),\n                name: this.name,\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables], nameOrFields) {\n        let extra = {};\n        if (typeof nameOrFields === \"string\") {\n            extra.name = nameOrFields;\n        }\n        else if (nameOrFields !== undefined) {\n            extra = nameOrFields;\n        }\n        return new RunnableSequence({\n            ...extra,\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1]),\n        });\n    }\n}\nexports.RunnableSequence = RunnableSequence;\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */\nclass RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    getStepsKeys() {\n        return Object.keys(this.steps);\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)) {\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    static from(steps) {\n        return new RunnableMap({ steps });\n    }\n    async invoke(input, options) {\n        const config = (0, config_js_1.ensureConfig)(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input,\n        }, config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            const promises = Object.entries(this.steps).map(async ([key, runnable]) => {\n                output[key] = await runnable.invoke(input, (0, config_js_1.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`map:key:${key}`),\n                }));\n            });\n            await (0, signal_js_1.raceWithSignal)(Promise.all(promises), options?.signal);\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n    async *_transform(generator, runManager, options) {\n        // shallow copy steps to ignore changes while iterating\n        const steps = { ...this.steps };\n        // each step gets a copy of the input iterator\n        const inputCopies = (0, stream_js_1.atee)(generator, Object.keys(steps).length);\n        // start the first iteration of each output iterator\n        const tasks = new Map(Object.entries(steps).map(([key, runnable], i) => {\n            const gen = runnable.transform(inputCopies[i], (0, config_js_1.patchConfig)(options, {\n                callbacks: runManager?.getChild(`map:key:${key}`),\n            }));\n            return [key, gen.next().then((result) => ({ key, gen, result }))];\n        }));\n        // yield chunks as they become available,\n        // starting new iterations as needed,\n        // until all iterators are done\n        while (tasks.size) {\n            const promise = Promise.race(tasks.values());\n            const { key, result, gen } = await (0, signal_js_1.raceWithSignal)(promise, options?.signal);\n            tasks.delete(key);\n            if (!result.done) {\n                yield { [key]: result.value };\n                tasks.set(key, gen.next().then((result) => ({ key, gen, result })));\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0, config_js_1.ensureConfig)(options);\n        const wrappedGenerator = new stream_js_1.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config,\n        });\n        await wrappedGenerator.setup;\n        return stream_js_1.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nexports.RunnableMap = RunnableMap;\n/**\n * A runnable that wraps a traced LangSmith function.\n */\nclass RunnableTraceable extends Runnable {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (!(0, traceable_1.isTraceableFunction)(fields.func)) {\n            throw new Error(\"RunnableTraceable requires a function that is wrapped in traceable higher-order function\");\n        }\n        this.func = fields.func;\n    }\n    async invoke(input, options) {\n        const [config] = this._getOptionsList(options ?? {}, 1);\n        const callbacks = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const promise = this.func((0, config_js_1.patchConfig)(config, { callbacks }), input);\n        return (0, signal_js_1.raceWithSignal)(promise, config?.signal);\n    }\n    async *_streamIterator(input, options) {\n        const [config] = this._getOptionsList(options ?? {}, 1);\n        const result = await this.invoke(input, options);\n        if ((0, iter_js_1.isAsyncIterable)(result)) {\n            for await (const item of result) {\n                config?.signal?.throwIfAborted();\n                yield item;\n            }\n            return;\n        }\n        if ((0, iter_js_1.isIterator)(result)) {\n            while (true) {\n                config?.signal?.throwIfAborted();\n                const state = result.next();\n                if (state.done)\n                    break;\n                yield state.value;\n            }\n            return;\n        }\n        yield result;\n    }\n    static from(func) {\n        return new RunnableTraceable({ func });\n    }\n}\nexports.RunnableTraceable = RunnableTraceable;\nfunction assertNonTraceableFunction(func) {\n    if ((0, traceable_1.isTraceableFunction)(func)) {\n        throw new Error(\"RunnableLambda requires a function that is not wrapped in traceable higher-order function. This shouldn't happen.\");\n    }\n}\n/**\n * A runnable that wraps an arbitrary function that takes a single argument.\n * @example\n * ```typescript\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const add = (input: { x: number; y: number }) => input.x + input.y;\n *\n * const multiply = (input: { value: number; multiplier: number }) =>\n *   input.value * input.multiplier;\n *\n * // Create runnables for the functions\n * const addLambda = RunnableLambda.from(add);\n * const multiplyLambda = RunnableLambda.from(multiply);\n *\n * // Chain the lambdas for a mathematical operation\n * const chainedLambda = addLambda.pipe((result) =>\n *   multiplyLambda.invoke({ value: result, multiplier: 2 })\n * );\n *\n * // Example invocation of the chainedLambda\n * const result = await chainedLambda.invoke({ x: 2, y: 3 });\n *\n * // Will log \"10\" (since (2 + 3) * 2 = 10)\n * ```\n */\nclass RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields) {\n        if ((0, traceable_1.isTraceableFunction)(fields.func)) {\n            // eslint-disable-next-line no-constructor-return\n            return RunnableTraceable.from(fields.func);\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        assertNonTraceableFunction(fields.func);\n        this.func = fields.func;\n    }\n    static from(func) {\n        return new RunnableLambda({\n            func,\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return new Promise((resolve, reject) => {\n            const childConfig = (0, config_js_1.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? config_js_1.DEFAULT_RECURSION_LIMIT) - 1,\n            });\n            void index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(childConfig), async () => {\n                try {\n                    let output = await this.func(input, {\n                        ...childConfig,\n                    });\n                    if (output && Runnable.isRunnable(output)) {\n                        if (config?.recursionLimit === 0) {\n                            throw new Error(\"Recursion limit reached.\");\n                        }\n                        output = await output.invoke(input, {\n                            ...childConfig,\n                            recursionLimit: (childConfig.recursionLimit ?? config_js_1.DEFAULT_RECURSION_LIMIT) - 1,\n                        });\n                    }\n                    else if ((0, iter_js_1.isAsyncIterable)(output)) {\n                        let finalOutput;\n                        for await (const chunk of (0, iter_js_1.consumeAsyncIterableInContext)(childConfig, output)) {\n                            config?.signal?.throwIfAborted();\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            }\n                            else {\n                                // Make a best effort to gather, for any type that supports concat.\n                                try {\n                                    finalOutput = this._concatOutputChunks(finalOutput, \n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    chunk);\n                                }\n                                catch (e) {\n                                    finalOutput = chunk;\n                                }\n                            }\n                        }\n                        output = finalOutput;\n                    }\n                    else if ((0, iter_js_1.isIterableIterator)(output)) {\n                        let finalOutput;\n                        for (const chunk of (0, iter_js_1.consumeIteratorInContext)(childConfig, output)) {\n                            config?.signal?.throwIfAborted();\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            }\n                            else {\n                                // Make a best effort to gather, for any type that supports concat.\n                                try {\n                                    finalOutput = this._concatOutputChunks(finalOutput, \n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    chunk);\n                                }\n                                catch (e) {\n                                    finalOutput = chunk;\n                                }\n                            }\n                        }\n                        output = finalOutput;\n                    }\n                    resolve(output);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke.bind(this), input, options);\n    }\n    async *_transform(generator, runManager, config) {\n        let finalChunk;\n        for await (const chunk of generator) {\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            }\n            else {\n                // Make a best effort to gather, for any type that supports concat.\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    finalChunk = this._concatOutputChunks(finalChunk, chunk);\n                }\n                catch (e) {\n                    finalChunk = chunk;\n                }\n            }\n        }\n        const childConfig = (0, config_js_1.patchConfig)(config, {\n            callbacks: runManager?.getChild(),\n            recursionLimit: (config?.recursionLimit ?? config_js_1.DEFAULT_RECURSION_LIMIT) - 1,\n        });\n        const output = await new Promise((resolve, reject) => {\n            void index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(childConfig), async () => {\n                try {\n                    const res = await this.func(finalChunk, {\n                        ...childConfig,\n                        config: childConfig,\n                    });\n                    resolve(res);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n        if (output && Runnable.isRunnable(output)) {\n            if (config?.recursionLimit === 0) {\n                throw new Error(\"Recursion limit reached.\");\n            }\n            const stream = await output.stream(finalChunk, childConfig);\n            for await (const chunk of stream) {\n                yield chunk;\n            }\n        }\n        else if ((0, iter_js_1.isAsyncIterable)(output)) {\n            for await (const chunk of (0, iter_js_1.consumeAsyncIterableInContext)(childConfig, output)) {\n                config?.signal?.throwIfAborted();\n                yield chunk;\n            }\n        }\n        else if ((0, iter_js_1.isIterableIterator)(output)) {\n            for (const chunk of (0, iter_js_1.consumeIteratorInContext)(childConfig, output)) {\n                config?.signal?.throwIfAborted();\n                yield chunk;\n            }\n        }\n        else {\n            yield output;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0, config_js_1.ensureConfig)(options);\n        const wrappedGenerator = new stream_js_1.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config,\n        });\n        await wrappedGenerator.setup;\n        return stream_js_1.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nexports.RunnableLambda = RunnableLambda;\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const addYears = (age: number): number => age + 5;\n * const yearsToFifty = (age: number): number => 50 - age;\n * const yearsToHundred = (age: number): number => 100 - age;\n *\n * const addYearsLambda = RunnableLambda.from(addYears);\n * const milestoneFiftyLambda = RunnableLambda.from(yearsToFifty);\n * const milestoneHundredLambda = RunnableLambda.from(yearsToHundred);\n *\n * // Pipe will coerce objects into RunnableParallel by default, but we\n * // explicitly instantiate one here to demonstrate\n * const sequence = addYearsLambda.pipe(\n *   RunnableParallel.from({\n *     years_to_fifty: milestoneFiftyLambda,\n *     years_to_hundred: milestoneHundredLambda,\n *   })\n * );\n *\n * // Invoke the sequence with a single age input\n * const res = await sequence.invoke(25);\n *\n * // { years_to_fifty: 20, years_to_hundred: 70 }\n * ```\n */\nclass RunnableParallel extends RunnableMap {\n}\nexports.RunnableParallel = RunnableParallel;\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n * External APIs (e.g., APIs for a language model) may at times experience\n * degraded performance or even downtime.\n *\n * In these cases, it can be useful to have a fallback Runnable that can be\n * used in place of the original Runnable (e.g., fallback to another LLM provider).\n *\n * Fallbacks can be defined at the level of a single Runnable, or at the level\n * of a chain of Runnables. Fallbacks are tried in order until one succeeds or\n * all fail.\n *\n * While you can instantiate a `RunnableWithFallbacks` directly, it is usually\n * more convenient to use the `withFallbacks` method on an existing Runnable.\n *\n * When streaming, fallbacks will only be called on failures during the initial\n * stream creation. Errors that occur after a stream starts will not fallback\n * to the next Runnable.\n *\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableWithFallbacks,\n * } from \"@langchain/core/runnables\";\n *\n * const primaryOperation = (input: string): string => {\n *   if (input !== \"safe\") {\n *     throw new Error(\"Primary operation failed due to unsafe input\");\n *   }\n *   return `Processed: ${input}`;\n * };\n *\n * // Define a fallback operation that processes the input differently\n * const fallbackOperation = (input: string): string =>\n *   `Fallback processed: ${input}`;\n *\n * const primaryRunnable = RunnableLambda.from(primaryOperation);\n * const fallbackRunnable = RunnableLambda.from(fallbackOperation);\n *\n * // Apply the fallback logic using the .withFallbacks() method\n * const runnableWithFallback = primaryRunnable.withFallbacks([fallbackRunnable]);\n *\n * // Alternatively, create a RunnableWithFallbacks instance manually\n * const manualFallbackChain = new RunnableWithFallbacks({\n *   runnable: primaryRunnable,\n *   fallbacks: [fallbackRunnable],\n * });\n *\n * // Example invocation using .withFallbacks()\n * const res = await runnableWithFallback\n *   .invoke(\"unsafe input\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Fallback processed: unsafe input\"\n *\n * // Example invocation using manual instantiation\n * const res = await manualFallbackChain\n *   .invoke(\"safe\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Processed: safe\"\n * ```\n */\nclass RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks) {\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const config = (0, config_js_1.ensureConfig)(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const { runId, ...otherConfigFields } = config;\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherConfigFields?.runName);\n        const childConfig = (0, config_js_1.patchConfig)(otherConfigFields, {\n            callbacks: runManager?.getChild(),\n        });\n        const res = await index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig(childConfig, async () => {\n            let firstError;\n            for (const runnable of this.runnables()) {\n                config?.signal?.throwIfAborted();\n                try {\n                    const output = await runnable.invoke(input, childConfig);\n                    await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                    return output;\n                }\n                catch (e) {\n                    if (firstError === undefined) {\n                        firstError = e;\n                    }\n                }\n            }\n            if (firstError === undefined) {\n                throw new Error(\"No error stored at end of fallback.\");\n            }\n            await runManager?.handleChainError(firstError);\n            throw firstError;\n        });\n        return res;\n    }\n    async *_streamIterator(input, options) {\n        const config = (0, config_js_1.ensureConfig)(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const { runId, ...otherConfigFields } = config;\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherConfigFields?.runName);\n        let firstError;\n        let stream;\n        for (const runnable of this.runnables()) {\n            config?.signal?.throwIfAborted();\n            const childConfig = (0, config_js_1.patchConfig)(otherConfigFields, {\n                callbacks: runManager?.getChild(),\n            });\n            try {\n                const originalStream = await runnable.stream(input, childConfig);\n                stream = (0, iter_js_1.consumeAsyncIterableInContext)(childConfig, originalStream);\n                break;\n            }\n            catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (stream === undefined) {\n            const error = firstError ?? new Error(\"No error stored at end of fallback.\");\n            await runManager?.handleChainError(error);\n            throw error;\n        }\n        let output;\n        try {\n            for await (const chunk of stream) {\n                yield chunk;\n                try {\n                    output =\n                        output === undefined\n                            ? output\n                            : this._concatOutputChunks(output, chunk);\n                }\n                catch (e) {\n                    output = undefined;\n                }\n            }\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config) => (0, config_js_1.getCallbackManagerForConfig)(config)));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i) => {\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()) {\n            configList[0].signal?.throwIfAborted();\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j) => (0, config_js_1.patchConfig)(configList[j], {\n                    callbacks: runManager?.getChild(),\n                })), batchOptions);\n                await Promise.all(runManagers.map((runManager, i) => runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            }\n            catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager) => runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\nexports.RunnableWithFallbacks = RunnableWithFallbacks;\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({ func: coerceable });\n    }\n    else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    }\n    else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)) {\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables,\n        });\n    }\n    else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * @example\n * ```typescript\n * import {\n *   RunnableAssign,\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const calculateAge = (x: { birthYear: number }): { age: number } => {\n *   const currentYear = new Date().getFullYear();\n *   return { age: currentYear - x.birthYear };\n * };\n *\n * const createGreeting = (x: { name: string }): { greeting: string } => {\n *   return { greeting: `Hello, ${x.name}!` };\n * };\n *\n * const mapper = RunnableParallel.from({\n *   age_step: RunnableLambda.from(calculateAge),\n *   greeting_step: RunnableLambda.from(createGreeting),\n * });\n *\n * const runnableAssign = new RunnableAssign({ mapper });\n *\n * const res = await runnableAssign.invoke({ name: \"Alice\", birthYear: 1990 });\n *\n * // { name: \"Alice\", birthYear: 1990, age_step: { age: 34 }, greeting_step: { greeting: \"Hello, Alice!\" } }\n * ```\n */\nclass RunnableAssign extends Runnable {\n    static lc_name() {\n        return \"RunnableAssign\";\n    }\n    constructor(fields) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields instanceof RunnableMap) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { mapper: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"mapper\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.mapper = fields.mapper;\n    }\n    async invoke(input, options) {\n        const mapperResult = await this.mapper.invoke(input, options);\n        return {\n            ...input,\n            ...mapperResult,\n        };\n    }\n    async *_transform(generator, runManager, options) {\n        // collect mapper keys\n        const mapperKeys = this.mapper.getStepsKeys();\n        // create two input gens, one for the mapper, one for the input\n        const [forPassthrough, forMapper] = (0, stream_js_1.atee)(generator);\n        // create mapper output gen\n        const mapperOutput = this.mapper.transform(forMapper, (0, config_js_1.patchConfig)(options, { callbacks: runManager?.getChild() }));\n        // start the mapper\n        const firstMapperChunkPromise = mapperOutput.next();\n        // yield the passthrough\n        for await (const chunk of forPassthrough) {\n            if (typeof chunk !== \"object\" || Array.isArray(chunk)) {\n                throw new Error(`RunnableAssign can only be used with objects as input, got ${typeof chunk}`);\n            }\n            const filtered = Object.fromEntries(Object.entries(chunk).filter(([key]) => !mapperKeys.includes(key)));\n            if (Object.keys(filtered).length > 0) {\n                yield filtered;\n            }\n        }\n        // yield the mapper output\n        yield (await firstMapperChunkPromise).value;\n        for await (const chunk of mapperOutput) {\n            yield chunk;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0, config_js_1.ensureConfig)(options);\n        const wrappedGenerator = new stream_js_1.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config,\n        });\n        await wrappedGenerator.setup;\n        return stream_js_1.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nexports.RunnableAssign = RunnableAssign;\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * Useful for streaming, can be automatically created and chained by calling `runnable.pick();`.\n * @example\n * ```typescript\n * import { RunnablePick } from \"@langchain/core/runnables\";\n *\n * const inputData = {\n *   name: \"John\",\n *   age: 30,\n *   city: \"New York\",\n *   country: \"USA\",\n *   email: \"john.doe@example.com\",\n *   phone: \"+1234567890\",\n * };\n *\n * const basicInfoRunnable = new RunnablePick([\"name\", \"city\"]);\n *\n * // Example invocation\n * const res = await basicInfoRunnable.invoke(inputData);\n *\n * // { name: 'John', city: 'New York' }\n * ```\n */\nclass RunnablePick extends Runnable {\n    static lc_name() {\n        return \"RunnablePick\";\n    }\n    constructor(fields) {\n        if (typeof fields === \"string\" || Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { keys: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"keys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keys = fields.keys;\n    }\n    async _pick(input) {\n        if (typeof this.keys === \"string\") {\n            return input[this.keys];\n        }\n        else {\n            const picked = this.keys\n                .map((key) => [key, input[key]])\n                .filter((v) => v[1] !== undefined);\n            return picked.length === 0\n                ? undefined\n                : Object.fromEntries(picked);\n        }\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._pick.bind(this), input, options);\n    }\n    async *_transform(generator) {\n        for await (const chunk of generator) {\n            const picked = await this._pick(chunk);\n            if (picked !== undefined) {\n                yield picked;\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0, config_js_1.ensureConfig)(options);\n        const wrappedGenerator = new stream_js_1.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config,\n        });\n        await wrappedGenerator.setup;\n        return stream_js_1.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nexports.RunnablePick = RunnablePick;\nclass RunnableToolLike extends RunnableBinding {\n    constructor(fields) {\n        const sequence = RunnableSequence.from([\n            RunnableLambda.from(async (input) => {\n                let toolInput;\n                if ((0, utils_js_2._isToolCall)(input)) {\n                    try {\n                        toolInput = await (0, zod_js_1.interopParseAsync)(this.schema, input.args);\n                    }\n                    catch (e) {\n                        throw new utils_js_2.ToolInputParsingException(`Received tool input did not match expected schema`, JSON.stringify(input.args));\n                    }\n                }\n                else {\n                    toolInput = input;\n                }\n                return toolInput;\n            }).withConfig({ runName: `${fields.name}:parse_input` }),\n            fields.bound,\n        ]).withConfig({ runName: fields.name });\n        super({\n            bound: sequence,\n            config: fields.config ?? {},\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.schema = fields.schema;\n    }\n    static lc_name() {\n        return \"RunnableToolLike\";\n    }\n}\nexports.RunnableToolLike = RunnableToolLike;\n/**\n * Given a runnable and a Zod schema, convert the runnable to a tool.\n *\n * @template RunInput The input type for the runnable.\n * @template RunOutput The output type for the runnable.\n *\n * @param {Runnable<RunInput, RunOutput>} runnable The runnable to convert to a tool.\n * @param fields\n * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n * @param {InteropZodType<RunInput>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n * @returns {RunnableToolLike<InteropZodType<RunInput>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n */\nfunction convertRunnableToTool(runnable, fields) {\n    const name = fields.name ?? runnable.getName();\n    const description = fields.description ?? (0, zod_js_1.getSchemaDescription)(fields.schema);\n    if ((0, zod_js_1.isSimpleStringZodSchema)(fields.schema)) {\n        return new RunnableToolLike({\n            name,\n            description,\n            schema: v3_1.z\n                .object({ input: v3_1.z.string() })\n                .transform((input) => input.input),\n            bound: runnable,\n        });\n    }\n    return new RunnableToolLike({\n        name,\n        description,\n        schema: fields.schema,\n        bound: runnable,\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/branch.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/branch.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunnableBranch = void 0;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst config_js_1 = __webpack_require__(/*! ./config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\n/**\n * Class that represents a runnable branch. The RunnableBranch is\n * initialized with an array of branches and a default branch. When invoked,\n * it evaluates the condition of each branch in order and executes the\n * corresponding branch if the condition is true. If none of the conditions\n * are true, it executes the default branch.\n * @example\n * ```typescript\n * const branch = RunnableBranch.from([\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"anthropic\"),\n *     anthropicChain,\n *   ],\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"langchain\"),\n *     langChainChain,\n *   ],\n *   generalChain,\n * ]);\n *\n * const fullChain = RunnableSequence.from([\n *   {\n *     topic: classificationChain,\n *     question: (input: { question: string }) => input.question,\n *   },\n *   branch,\n * ]);\n *\n * const result = await fullChain.invoke({\n *   question: \"how do I use LangChain?\",\n * });\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnableBranch extends base_js_1.Runnable {\n    static lc_name() {\n        return \"RunnableBranch\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"default\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"branches\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.branches = fields.branches;\n        this.default = fields.default;\n    }\n    /**\n     * Convenience method for instantiating a RunnableBranch from\n     * RunnableLikes (objects, functions, or Runnables).\n     *\n     * Each item in the input except for the last one should be a\n     * tuple with two items. The first is a \"condition\" RunnableLike that\n     * returns \"true\" if the second RunnableLike in the tuple should run.\n     *\n     * The final item in the input should be a RunnableLike that acts as a\n     * default branch if no other branches match.\n     *\n     * @example\n     * ```ts\n     * import { RunnableBranch } from \"@langchain/core/runnables\";\n     *\n     * const branch = RunnableBranch.from([\n     *   [(x: number) => x > 0, (x: number) => x + 1],\n     *   [(x: number) => x < 0, (x: number) => x - 1],\n     *   (x: number) => x\n     * ]);\n     * ```\n     * @param branches An array where the every item except the last is a tuple of [condition, runnable]\n     *   pairs. The last item is a default runnable which is invoked if no other condition matches.\n     * @returns A new RunnableBranch.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from(branches) {\n        if (branches.length < 1) {\n            throw new Error(\"RunnableBranch requires at least one branch\");\n        }\n        const branchLikes = branches.slice(0, -1);\n        const coercedBranches = branchLikes.map(([condition, runnable]) => [\n            (0, base_js_1._coerceToRunnable)(condition),\n            (0, base_js_1._coerceToRunnable)(runnable),\n        ]);\n        const defaultBranch = (0, base_js_1._coerceToRunnable)(branches[branches.length - 1]);\n        return new this({\n            branches: coercedBranches,\n            default: defaultBranch,\n        });\n    }\n    async _invoke(input, config, runManager) {\n        let result;\n        for (let i = 0; i < this.branches.length; i += 1) {\n            const [condition, branchRunnable] = this.branches[i];\n            const conditionValue = await condition.invoke(input, (0, config_js_1.patchConfig)(config, {\n                callbacks: runManager?.getChild(`condition:${i + 1}`),\n            }));\n            if (conditionValue) {\n                result = await branchRunnable.invoke(input, (0, config_js_1.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`branch:${i + 1}`),\n                }));\n                break;\n            }\n        }\n        if (!result) {\n            result = await this.default.invoke(input, (0, config_js_1.patchConfig)(config, {\n                callbacks: runManager?.getChild(\"branch:default\"),\n            }));\n        }\n        return result;\n    }\n    async invoke(input, config = {}) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async *_streamIterator(input, config) {\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), (0, base_js_1._coerceToDict)(input, \"input\"), config?.runId, undefined, undefined, undefined, config?.runName);\n        let finalOutput;\n        let finalOutputSupported = true;\n        let stream;\n        try {\n            for (let i = 0; i < this.branches.length; i += 1) {\n                const [condition, branchRunnable] = this.branches[i];\n                const conditionValue = await condition.invoke(input, (0, config_js_1.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`condition:${i + 1}`),\n                }));\n                if (conditionValue) {\n                    stream = await branchRunnable.stream(input, (0, config_js_1.patchConfig)(config, {\n                        callbacks: runManager?.getChild(`branch:${i + 1}`),\n                    }));\n                    for await (const chunk of stream) {\n                        yield chunk;\n                        if (finalOutputSupported) {\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            }\n                            else {\n                                try {\n                                    finalOutput = (0, stream_js_1.concat)(finalOutput, chunk);\n                                }\n                                catch (e) {\n                                    finalOutput = undefined;\n                                    finalOutputSupported = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (stream === undefined) {\n                stream = await this.default.stream(input, (0, config_js_1.patchConfig)(config, {\n                    callbacks: runManager?.getChild(\"branch:default\"),\n                }));\n                for await (const chunk of stream) {\n                    yield chunk;\n                    if (finalOutputSupported) {\n                        if (finalOutput === undefined) {\n                            finalOutput = chunk;\n                        }\n                        else {\n                            try {\n                                finalOutput = (0, stream_js_1.concat)(finalOutput, chunk);\n                            }\n                            catch (e) {\n                                finalOutput = undefined;\n                                finalOutputSupported = false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {});\n    }\n}\nexports.RunnableBranch = RunnableBranch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/branch.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/config.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_RECURSION_LIMIT = void 0;\nexports.getCallbackManagerForConfig = getCallbackManagerForConfig;\nexports.mergeConfigs = mergeConfigs;\nexports.ensureConfig = ensureConfig;\nexports.patchConfig = patchConfig;\nexports.pickRunnableConfigKeys = pickRunnableConfigKeys;\nconst manager_js_1 = __webpack_require__(/*! ../callbacks/manager.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\");\nconst index_js_1 = __webpack_require__(/*! ../singletons/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.cjs\");\nexports.DEFAULT_RECURSION_LIMIT = 25;\nasync function getCallbackManagerForConfig(config) {\n    return manager_js_1.CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\nfunction mergeConfigs(...configs) {\n    // We do not want to call ensureConfig on the empty state here as this may cause\n    // double loading of callbacks if async local storage is being used.\n    const copy = {};\n    for (const options of configs.filter((c) => !!c)) {\n        for (const key of Object.keys(options)) {\n            if (key === \"metadata\") {\n                copy[key] = { ...copy[key], ...options[key] };\n            }\n            else if (key === \"tags\") {\n                const baseKeys = copy[key] ?? [];\n                copy[key] = [...new Set(baseKeys.concat(options[key] ?? []))];\n            }\n            else if (key === \"configurable\") {\n                copy[key] = { ...copy[key], ...options[key] };\n            }\n            else if (key === \"timeout\") {\n                if (copy.timeout === undefined) {\n                    copy.timeout = options.timeout;\n                }\n                else if (options.timeout !== undefined) {\n                    copy.timeout = Math.min(copy.timeout, options.timeout);\n                }\n            }\n            else if (key === \"signal\") {\n                if (copy.signal === undefined) {\n                    copy.signal = options.signal;\n                }\n                else if (options.signal !== undefined) {\n                    if (\"any\" in AbortSignal) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        copy.signal = AbortSignal.any([\n                            copy.signal,\n                            options.signal,\n                        ]);\n                    }\n                    else {\n                        copy.signal = options.signal;\n                    }\n                }\n            }\n            else if (key === \"callbacks\") {\n                const baseCallbacks = copy.callbacks;\n                const providedCallbacks = options.callbacks;\n                // callbacks can be either undefined, Array<handler> or manager\n                // so merging two callbacks values has 6 cases\n                if (Array.isArray(providedCallbacks)) {\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    }\n                    else if (Array.isArray(baseCallbacks)) {\n                        copy.callbacks = baseCallbacks.concat(providedCallbacks);\n                    }\n                    else {\n                        // baseCallbacks is a manager\n                        const manager = baseCallbacks.copy();\n                        for (const callback of providedCallbacks) {\n                            manager.addHandler((0, manager_js_1.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                }\n                else if (providedCallbacks) {\n                    // providedCallbacks is a manager\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    }\n                    else if (Array.isArray(baseCallbacks)) {\n                        const manager = providedCallbacks.copy();\n                        for (const callback of baseCallbacks) {\n                            manager.addHandler((0, manager_js_1.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                    else {\n                        // baseCallbacks is also a manager\n                        copy.callbacks = new manager_js_1.CallbackManager(providedCallbacks._parentRunId, {\n                            handlers: baseCallbacks.handlers.concat(providedCallbacks.handlers),\n                            inheritableHandlers: baseCallbacks.inheritableHandlers.concat(providedCallbacks.inheritableHandlers),\n                            tags: Array.from(new Set(baseCallbacks.tags.concat(providedCallbacks.tags))),\n                            inheritableTags: Array.from(new Set(baseCallbacks.inheritableTags.concat(providedCallbacks.inheritableTags))),\n                            metadata: {\n                                ...baseCallbacks.metadata,\n                                ...providedCallbacks.metadata,\n                            },\n                        });\n                    }\n                }\n            }\n            else {\n                const typedKey = key;\n                copy[typedKey] = options[typedKey] ?? copy[typedKey];\n            }\n        }\n    }\n    return copy;\n}\nconst PRIMITIVES = new Set([\"string\", \"number\", \"boolean\"]);\n/**\n * Ensure that a passed config is an object with all required keys present.\n */\nfunction ensureConfig(config) {\n    const implicitConfig = index_js_1.AsyncLocalStorageProviderSingleton.getRunnableConfig();\n    let empty = {\n        tags: [],\n        metadata: {},\n        recursionLimit: 25,\n        runId: undefined,\n    };\n    if (implicitConfig) {\n        // Don't allow runId and runName to be loaded implicitly, as this can cause\n        // child runs to improperly inherit their parents' run ids.\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { runId, runName, ...rest } = implicitConfig;\n        empty = Object.entries(rest).reduce(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (currentConfig, [key, value]) => {\n            if (value !== undefined) {\n                // eslint-disable-next-line no-param-reassign\n                currentConfig[key] = value;\n            }\n            return currentConfig;\n        }, empty);\n    }\n    if (config) {\n        empty = Object.entries(config).reduce(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (currentConfig, [key, value]) => {\n            if (value !== undefined) {\n                // eslint-disable-next-line no-param-reassign\n                currentConfig[key] = value;\n            }\n            return currentConfig;\n        }, empty);\n    }\n    if (empty?.configurable) {\n        for (const key of Object.keys(empty.configurable)) {\n            if (PRIMITIVES.has(typeof empty.configurable[key]) &&\n                !empty.metadata?.[key]) {\n                if (!empty.metadata) {\n                    empty.metadata = {};\n                }\n                empty.metadata[key] = empty.configurable[key];\n            }\n        }\n    }\n    if (empty.timeout !== undefined) {\n        if (empty.timeout <= 0) {\n            throw new Error(\"Timeout must be a positive number\");\n        }\n        const timeoutSignal = AbortSignal.timeout(empty.timeout);\n        if (empty.signal !== undefined) {\n            if (\"any\" in AbortSignal) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                empty.signal = AbortSignal.any([empty.signal, timeoutSignal]);\n            }\n        }\n        else {\n            empty.signal = timeoutSignal;\n        }\n        delete empty.timeout;\n    }\n    return empty;\n}\n/**\n * Helper function that patches runnable configs with updated properties.\n */\nfunction patchConfig(config = {}, { callbacks, maxConcurrency, recursionLimit, runName, configurable, runId, } = {}) {\n    const newConfig = ensureConfig(config);\n    if (callbacks !== undefined) {\n        /**\n         * If we're replacing callbacks we need to unset runName\n         * since that should apply only to the same run as the original callbacks\n         */\n        delete newConfig.runName;\n        newConfig.callbacks = callbacks;\n    }\n    if (recursionLimit !== undefined) {\n        newConfig.recursionLimit = recursionLimit;\n    }\n    if (maxConcurrency !== undefined) {\n        newConfig.maxConcurrency = maxConcurrency;\n    }\n    if (runName !== undefined) {\n        newConfig.runName = runName;\n    }\n    if (configurable !== undefined) {\n        newConfig.configurable = { ...newConfig.configurable, ...configurable };\n    }\n    if (runId !== undefined) {\n        delete newConfig.runId;\n    }\n    return newConfig;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction pickRunnableConfigKeys(config) {\n    return config\n        ? {\n            configurable: config.configurable,\n            recursionLimit: config.recursionLimit,\n            callbacks: config.callbacks,\n            tags: config.tags,\n            metadata: config.metadata,\n            maxConcurrency: config.maxConcurrency,\n            timeout: config.timeout,\n            signal: config.signal,\n        }\n        : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/graph.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/graph.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Graph = void 0;\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/index.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.cjs\");\nconst graph_mermaid_js_1 = __webpack_require__(/*! ./graph_mermaid.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.cjs\");\nconst json_schema_js_1 = __webpack_require__(/*! ../utils/json_schema.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs\");\nfunction nodeDataStr(id, data) {\n    if (id !== undefined && !(0, uuid_1.validate)(id)) {\n        return id;\n    }\n    else if ((0, utils_js_1.isRunnableInterface)(data)) {\n        try {\n            let dataStr = data.getName();\n            dataStr = dataStr.startsWith(\"Runnable\")\n                ? dataStr.slice(\"Runnable\".length)\n                : dataStr;\n            return dataStr;\n        }\n        catch (error) {\n            return data.getName();\n        }\n    }\n    else {\n        return data.name ?? \"UnknownSchema\";\n    }\n}\nfunction nodeDataJson(node) {\n    // if node.data implements Runnable\n    if ((0, utils_js_1.isRunnableInterface)(node.data)) {\n        return {\n            type: \"runnable\",\n            data: {\n                id: node.data.lc_id,\n                name: node.data.getName(),\n            },\n        };\n    }\n    else {\n        return {\n            type: \"schema\",\n            data: { ...(0, json_schema_js_1.toJsonSchema)(node.data.schema), title: node.data.name },\n        };\n    }\n}\nclass Graph {\n    constructor(params) {\n        Object.defineProperty(this, \"nodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"edges\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.nodes = params?.nodes ?? this.nodes;\n        this.edges = params?.edges ?? this.edges;\n    }\n    // Convert the graph to a JSON-serializable format.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const stableNodeIds = {};\n        Object.values(this.nodes).forEach((node, i) => {\n            stableNodeIds[node.id] = (0, uuid_1.validate)(node.id) ? i : node.id;\n        });\n        return {\n            nodes: Object.values(this.nodes).map((node) => ({\n                id: stableNodeIds[node.id],\n                ...nodeDataJson(node),\n            })),\n            edges: this.edges.map((edge) => {\n                const item = {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target],\n                };\n                if (typeof edge.data !== \"undefined\") {\n                    item.data = edge.data;\n                }\n                if (typeof edge.conditional !== \"undefined\") {\n                    item.conditional = edge.conditional;\n                }\n                return item;\n            }),\n        };\n    }\n    addNode(data, id, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadata) {\n        if (id !== undefined && this.nodes[id] !== undefined) {\n            throw new Error(`Node with id ${id} already exists`);\n        }\n        const nodeId = id ?? (0, uuid_1.v4)();\n        const node = {\n            id: nodeId,\n            data,\n            name: nodeDataStr(id, data),\n            metadata,\n        };\n        this.nodes[nodeId] = node;\n        return node;\n    }\n    removeNode(node) {\n        // Remove the node from the nodes map\n        delete this.nodes[node.id];\n        // Filter out edges connected to the node\n        this.edges = this.edges.filter((edge) => edge.source !== node.id && edge.target !== node.id);\n    }\n    addEdge(source, target, data, conditional) {\n        if (this.nodes[source.id] === undefined) {\n            throw new Error(`Source node ${source.id} not in graph`);\n        }\n        if (this.nodes[target.id] === undefined) {\n            throw new Error(`Target node ${target.id} not in graph`);\n        }\n        const edge = {\n            source: source.id,\n            target: target.id,\n            data,\n            conditional,\n        };\n        this.edges.push(edge);\n        return edge;\n    }\n    firstNode() {\n        return _firstNode(this);\n    }\n    lastNode() {\n        return _lastNode(this);\n    }\n    /**\n     * Add all nodes and edges from another graph.\n     * Note this doesn't check for duplicates, nor does it connect the graphs.\n     */\n    extend(graph, prefix = \"\") {\n        let finalPrefix = prefix;\n        const nodeIds = Object.values(graph.nodes).map((node) => node.id);\n        if (nodeIds.every(uuid_1.validate)) {\n            finalPrefix = \"\";\n        }\n        const prefixed = (id) => {\n            return finalPrefix ? `${finalPrefix}:${id}` : id;\n        };\n        Object.entries(graph.nodes).forEach(([key, value]) => {\n            this.nodes[prefixed(key)] = { ...value, id: prefixed(key) };\n        });\n        const newEdges = graph.edges.map((edge) => {\n            return {\n                ...edge,\n                source: prefixed(edge.source),\n                target: prefixed(edge.target),\n            };\n        });\n        // Add all edges from the other graph\n        this.edges = [...this.edges, ...newEdges];\n        const first = graph.firstNode();\n        const last = graph.lastNode();\n        return [\n            first ? { id: prefixed(first.id), data: first.data } : undefined,\n            last ? { id: prefixed(last.id), data: last.data } : undefined,\n        ];\n    }\n    trimFirstNode() {\n        const firstNode = this.firstNode();\n        if (firstNode && _firstNode(this, [firstNode.id])) {\n            this.removeNode(firstNode);\n        }\n    }\n    trimLastNode() {\n        const lastNode = this.lastNode();\n        if (lastNode && _lastNode(this, [lastNode.id])) {\n            this.removeNode(lastNode);\n        }\n    }\n    /**\n     * Return a new graph with all nodes re-identified,\n     * using their unique, readable names where possible.\n     */\n    reid() {\n        const nodeLabels = Object.fromEntries(Object.values(this.nodes).map((node) => [node.id, node.name]));\n        const nodeLabelCounts = new Map();\n        Object.values(nodeLabels).forEach((label) => {\n            nodeLabelCounts.set(label, (nodeLabelCounts.get(label) || 0) + 1);\n        });\n        const getNodeId = (nodeId) => {\n            const label = nodeLabels[nodeId];\n            if ((0, uuid_1.validate)(nodeId) && nodeLabelCounts.get(label) === 1) {\n                return label;\n            }\n            else {\n                return nodeId;\n            }\n        };\n        return new Graph({\n            nodes: Object.fromEntries(Object.entries(this.nodes).map(([id, node]) => [\n                getNodeId(id),\n                { ...node, id: getNodeId(id) },\n            ])),\n            edges: this.edges.map((edge) => ({\n                ...edge,\n                source: getNodeId(edge.source),\n                target: getNodeId(edge.target),\n            })),\n        });\n    }\n    drawMermaid(params) {\n        const { withStyles, curveStyle, nodeColors = {\n            default: \"fill:#f2f0ff,line-height:1.2\",\n            first: \"fill-opacity:0\",\n            last: \"fill:#bfb6fc\",\n        }, wrapLabelNWords, } = params ?? {};\n        const graph = this.reid();\n        const firstNode = graph.firstNode();\n        const lastNode = graph.lastNode();\n        return (0, graph_mermaid_js_1.drawMermaid)(graph.nodes, graph.edges, {\n            firstNode: firstNode?.id,\n            lastNode: lastNode?.id,\n            withStyles,\n            curveStyle,\n            nodeColors,\n            wrapLabelNWords,\n        });\n    }\n    async drawMermaidPng(params) {\n        const mermaidSyntax = this.drawMermaid(params);\n        return (0, graph_mermaid_js_1.drawMermaidPng)(mermaidSyntax, {\n            backgroundColor: params?.backgroundColor,\n        });\n    }\n}\nexports.Graph = Graph;\n/**\n * Find the single node that is not a target of any edge.\n * Exclude nodes/sources with ids in the exclude list.\n * If there is no such node, or there are multiple, return undefined.\n * When drawing the graph, this node would be the origin.\n */\nfunction _firstNode(graph, exclude = []) {\n    const targets = new Set(graph.edges\n        .filter((edge) => !exclude.includes(edge.source))\n        .map((edge) => edge.target));\n    const found = [];\n    for (const node of Object.values(graph.nodes)) {\n        if (!exclude.includes(node.id) && !targets.has(node.id)) {\n            found.push(node);\n        }\n    }\n    return found.length === 1 ? found[0] : undefined;\n}\n/**\n * Find the single node that is not a source of any edge.\n * Exclude nodes/targets with ids in the exclude list.\n * If there is no such node, or there are multiple, return undefined.\n * When drawing the graph, this node would be the destination.\n */\nfunction _lastNode(graph, exclude = []) {\n    const sources = new Set(graph.edges\n        .filter((edge) => !exclude.includes(edge.target))\n        .map((edge) => edge.source));\n    const found = [];\n    for (const node of Object.values(graph.nodes)) {\n        if (!exclude.includes(node.id) && !sources.has(node.id)) {\n            found.push(node);\n        }\n    }\n    return found.length === 1 ? found[0] : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/graph.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.cjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/graph_mermaid.cjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.drawMermaid = drawMermaid;\nexports.drawMermaidPng = drawMermaidPng;\nexports.drawMermaidImage = drawMermaidImage;\nfunction _escapeNodeLabel(nodeLabel) {\n    // Escapes the node label for Mermaid syntax.\n    return nodeLabel.replace(/[^a-zA-Z-_0-9]/g, \"_\");\n}\nconst MARKDOWN_SPECIAL_CHARS = [\"*\", \"_\", \"`\"];\nfunction _generateMermaidGraphStyles(nodeColors) {\n    let styles = \"\";\n    for (const [className, color] of Object.entries(nodeColors)) {\n        styles += `\\tclassDef ${className} ${color};\\n`;\n    }\n    return styles;\n}\n/**\n * Draws a Mermaid graph using the provided graph data\n */\nfunction drawMermaid(nodes, edges, config) {\n    const { firstNode, lastNode, nodeColors, withStyles = true, curveStyle = \"linear\", wrapLabelNWords = 9, } = config ?? {};\n    // Initialize Mermaid graph configuration\n    let mermaidGraph = withStyles\n        ? `%%{init: {'flowchart': {'curve': '${curveStyle}'}}}%%\\ngraph TD;\\n`\n        : \"graph TD;\\n\";\n    if (withStyles) {\n        // Node formatting templates\n        const defaultClassLabel = \"default\";\n        const formatDict = {\n            [defaultClassLabel]: \"{0}({1})\",\n        };\n        if (firstNode !== undefined) {\n            formatDict[firstNode] = \"{0}([{1}]):::first\";\n        }\n        if (lastNode !== undefined) {\n            formatDict[lastNode] = \"{0}([{1}]):::last\";\n        }\n        // Add nodes to the graph\n        for (const [key, node] of Object.entries(nodes)) {\n            const nodeName = node.name.split(\":\").pop() ?? \"\";\n            const label = MARKDOWN_SPECIAL_CHARS.some((char) => nodeName.startsWith(char) && nodeName.endsWith(char))\n                ? `<p>${nodeName}</p>`\n                : nodeName;\n            let finalLabel = label;\n            if (Object.keys(node.metadata ?? {}).length) {\n                finalLabel += `<hr/><small><em>${Object.entries(node.metadata ?? {})\n                    .map(([k, v]) => `${k} = ${v}`)\n                    .join(\"\\n\")}</em></small>`;\n            }\n            const nodeLabel = (formatDict[key] ?? formatDict[defaultClassLabel])\n                .replace(\"{0}\", _escapeNodeLabel(key))\n                .replace(\"{1}\", finalLabel);\n            mermaidGraph += `\\t${nodeLabel}\\n`;\n        }\n    }\n    // Group edges by their common prefixes\n    const edgeGroups = {};\n    for (const edge of edges) {\n        const srcParts = edge.source.split(\":\");\n        const tgtParts = edge.target.split(\":\");\n        const commonPrefix = srcParts\n            .filter((src, i) => src === tgtParts[i])\n            .join(\":\");\n        if (!edgeGroups[commonPrefix]) {\n            edgeGroups[commonPrefix] = [];\n        }\n        edgeGroups[commonPrefix].push(edge);\n    }\n    const seenSubgraphs = new Set();\n    function addSubgraph(edges, prefix) {\n        const selfLoop = edges.length === 1 && edges[0].source === edges[0].target;\n        if (prefix && !selfLoop) {\n            const subgraph = prefix.split(\":\").pop();\n            if (seenSubgraphs.has(subgraph)) {\n                throw new Error(`Found duplicate subgraph '${subgraph}' -- this likely means that ` +\n                    \"you're reusing a subgraph node with the same name. \" +\n                    \"Please adjust your graph to have subgraph nodes with unique names.\");\n            }\n            seenSubgraphs.add(subgraph);\n            mermaidGraph += `\\tsubgraph ${subgraph}\\n`;\n        }\n        for (const edge of edges) {\n            const { source, target, data, conditional } = edge;\n            let edgeLabel = \"\";\n            if (data !== undefined) {\n                let edgeData = data;\n                const words = edgeData.split(\" \");\n                if (words.length > wrapLabelNWords) {\n                    edgeData = Array.from({ length: Math.ceil(words.length / wrapLabelNWords) }, (_, i) => words\n                        .slice(i * wrapLabelNWords, (i + 1) * wrapLabelNWords)\n                        .join(\" \")).join(\"&nbsp;<br>&nbsp;\");\n                }\n                edgeLabel = conditional\n                    ? ` -. &nbsp;${edgeData}&nbsp; .-> `\n                    : ` -- &nbsp;${edgeData}&nbsp; --> `;\n            }\n            else {\n                edgeLabel = conditional ? \" -.-> \" : \" --> \";\n            }\n            mermaidGraph += `\\t${_escapeNodeLabel(source)}${edgeLabel}${_escapeNodeLabel(target)};\\n`;\n        }\n        // Recursively add nested subgraphs\n        for (const nestedPrefix in edgeGroups) {\n            if (nestedPrefix.startsWith(`${prefix}:`) && nestedPrefix !== prefix) {\n                addSubgraph(edgeGroups[nestedPrefix], nestedPrefix);\n            }\n        }\n        if (prefix && !selfLoop) {\n            mermaidGraph += \"\\tend\\n\";\n        }\n    }\n    // Start with the top-level edges (no common prefix)\n    addSubgraph(edgeGroups[\"\"] ?? [], \"\");\n    // Add remaining subgraphs\n    for (const prefix in edgeGroups) {\n        if (!prefix.includes(\":\") && prefix !== \"\") {\n            addSubgraph(edgeGroups[prefix], prefix);\n        }\n    }\n    // Add custom styles for nodes\n    if (withStyles) {\n        mermaidGraph += _generateMermaidGraphStyles(nodeColors ?? {});\n    }\n    return mermaidGraph;\n}\n/**\n * @deprecated Use `drawMermaidImage` instead.\n */\nasync function drawMermaidPng(mermaidSyntax, config) {\n    return drawMermaidImage(mermaidSyntax, {\n        ...config,\n        imageType: \"png\",\n    });\n}\n/**\n * Renders Mermaid graph using the Mermaid.INK API.\n *\n * @example\n * ```javascript\n * const image = await drawMermaidImage(mermaidSyntax, {\n *   backgroundColor: \"white\",\n *   imageType: \"png\",\n * });\n * fs.writeFileSync(\"image.png\", image);\n * ```\n *\n * @param mermaidSyntax - The Mermaid syntax to render.\n * @param config - The configuration for the image.\n * @returns The image as a Blob.\n */\nasync function drawMermaidImage(mermaidSyntax, config) {\n    let backgroundColor = config?.backgroundColor ?? \"white\";\n    const imageType = config?.imageType ?? \"png\";\n    // Use btoa for compatibility, assume ASCII\n    const mermaidSyntaxEncoded = btoa(mermaidSyntax);\n    // Check if the background color is a hexadecimal color code using regex\n    if (backgroundColor !== undefined) {\n        const hexColorPattern = /^#(?:[0-9a-fA-F]{3}){1,2}$/;\n        if (!hexColorPattern.test(backgroundColor)) {\n            backgroundColor = `!${backgroundColor}`;\n        }\n    }\n    const imageUrl = `https://mermaid.ink/img/${mermaidSyntaxEncoded}?bgColor=${backgroundColor}&type=${imageType}`;\n    const res = await fetch(imageUrl);\n    if (!res.ok) {\n        throw new Error([\n            `Failed to render the graph using the Mermaid.INK API.`,\n            `Status code: ${res.status}`,\n            `Status text: ${res.statusText}`,\n        ].join(\"\\n\"));\n    }\n    const content = await res.blob();\n    return content;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2dyYXBoX21lcm1haWQuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsV0FBVyxFQUFFLE9BQU87QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtHQUFrRztBQUM5RztBQUNBO0FBQ0EsY0FBYyxPQUFPLGNBQWMsWUFBWSxXQUFXLElBQUksYUFBYTtBQUMzRSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsRUFBRSxFQUFFLEVBQUU7QUFDekM7QUFDQTtBQUNBLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtBQUM3QztBQUNBO0FBQ0EscUNBQXFDLEVBQUUsR0FBRyxFQUFFO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsU0FBUztBQUNqQztBQUNBO0FBQ0EsK0NBQStDO0FBQy9DLGlEQUFpRCxrQ0FBa0M7QUFDbkYsd0NBQXdDLEdBQUcsSUFBSSxFQUFFO0FBQ2pELGdDQUFnQztBQUNoQztBQUNBO0FBQ0EsMkJBQTJCLEVBQUU7QUFDN0IsMkJBQTJCLEVBQUU7QUFDN0IsaUNBQWlDLFVBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELFNBQVM7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsU0FBUztBQUNuRDtBQUNBO0FBQ0Esb0JBQW9CLG9DQUFvQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLG1EQUFtRDtBQUMvRjtBQUNBLGdEQUFnRCxVQUFVO0FBQzFEO0FBQ0E7QUFDQSxpQ0FBaUMsRUFBRSxTQUFTLE9BQU87QUFDbkQsaUNBQWlDLEVBQUUsU0FBUyxPQUFPO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHlCQUF5QixFQUFFLFVBQVUsRUFBRSwwQkFBMEI7QUFDbEc7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLE9BQU87QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxFQUFFLEVBQUUsSUFBSTtBQUMxRDtBQUNBLGtDQUFrQyxnQkFBZ0I7QUFDbEQ7QUFDQTtBQUNBLGdEQUFnRCxxQkFBcUIsV0FBVyxnQkFBZ0IsUUFBUSxVQUFVO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFdBQVc7QUFDdkMsNEJBQTRCLGVBQWU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2dyYXBoX21lcm1haWQuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kcmF3TWVybWFpZCA9IGRyYXdNZXJtYWlkO1xuZXhwb3J0cy5kcmF3TWVybWFpZFBuZyA9IGRyYXdNZXJtYWlkUG5nO1xuZXhwb3J0cy5kcmF3TWVybWFpZEltYWdlID0gZHJhd01lcm1haWRJbWFnZTtcbmZ1bmN0aW9uIF9lc2NhcGVOb2RlTGFiZWwobm9kZUxhYmVsKSB7XG4gICAgLy8gRXNjYXBlcyB0aGUgbm9kZSBsYWJlbCBmb3IgTWVybWFpZCBzeW50YXguXG4gICAgcmV0dXJuIG5vZGVMYWJlbC5yZXBsYWNlKC9bXmEtekEtWi1fMC05XS9nLCBcIl9cIik7XG59XG5jb25zdCBNQVJLRE9XTl9TUEVDSUFMX0NIQVJTID0gW1wiKlwiLCBcIl9cIiwgXCJgXCJdO1xuZnVuY3Rpb24gX2dlbmVyYXRlTWVybWFpZEdyYXBoU3R5bGVzKG5vZGVDb2xvcnMpIHtcbiAgICBsZXQgc3R5bGVzID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IFtjbGFzc05hbWUsIGNvbG9yXSBvZiBPYmplY3QuZW50cmllcyhub2RlQ29sb3JzKSkge1xuICAgICAgICBzdHlsZXMgKz0gYFxcdGNsYXNzRGVmICR7Y2xhc3NOYW1lfSAke2NvbG9yfTtcXG5gO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVzO1xufVxuLyoqXG4gKiBEcmF3cyBhIE1lcm1haWQgZ3JhcGggdXNpbmcgdGhlIHByb3ZpZGVkIGdyYXBoIGRhdGFcbiAqL1xuZnVuY3Rpb24gZHJhd01lcm1haWQobm9kZXMsIGVkZ2VzLCBjb25maWcpIHtcbiAgICBjb25zdCB7IGZpcnN0Tm9kZSwgbGFzdE5vZGUsIG5vZGVDb2xvcnMsIHdpdGhTdHlsZXMgPSB0cnVlLCBjdXJ2ZVN0eWxlID0gXCJsaW5lYXJcIiwgd3JhcExhYmVsTldvcmRzID0gOSwgfSA9IGNvbmZpZyA/PyB7fTtcbiAgICAvLyBJbml0aWFsaXplIE1lcm1haWQgZ3JhcGggY29uZmlndXJhdGlvblxuICAgIGxldCBtZXJtYWlkR3JhcGggPSB3aXRoU3R5bGVzXG4gICAgICAgID8gYCUle2luaXQ6IHsnZmxvd2NoYXJ0JzogeydjdXJ2ZSc6ICcke2N1cnZlU3R5bGV9J319fSUlXFxuZ3JhcGggVEQ7XFxuYFxuICAgICAgICA6IFwiZ3JhcGggVEQ7XFxuXCI7XG4gICAgaWYgKHdpdGhTdHlsZXMpIHtcbiAgICAgICAgLy8gTm9kZSBmb3JtYXR0aW5nIHRlbXBsYXRlc1xuICAgICAgICBjb25zdCBkZWZhdWx0Q2xhc3NMYWJlbCA9IFwiZGVmYXVsdFwiO1xuICAgICAgICBjb25zdCBmb3JtYXREaWN0ID0ge1xuICAgICAgICAgICAgW2RlZmF1bHRDbGFzc0xhYmVsXTogXCJ7MH0oezF9KVwiLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoZmlyc3ROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdERpY3RbZmlyc3ROb2RlXSA9IFwiezB9KFt7MX1dKTo6OmZpcnN0XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3ROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdERpY3RbbGFzdE5vZGVdID0gXCJ7MH0oW3sxfV0pOjo6bGFzdFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBub2RlcyB0byB0aGUgZ3JhcGhcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBub2RlXSBvZiBPYmplY3QuZW50cmllcyhub2RlcykpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVOYW1lID0gbm9kZS5uYW1lLnNwbGl0KFwiOlwiKS5wb3AoKSA/PyBcIlwiO1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBNQVJLRE9XTl9TUEVDSUFMX0NIQVJTLnNvbWUoKGNoYXIpID0+IG5vZGVOYW1lLnN0YXJ0c1dpdGgoY2hhcikgJiYgbm9kZU5hbWUuZW5kc1dpdGgoY2hhcikpXG4gICAgICAgICAgICAgICAgPyBgPHA+JHtub2RlTmFtZX08L3A+YFxuICAgICAgICAgICAgICAgIDogbm9kZU5hbWU7XG4gICAgICAgICAgICBsZXQgZmluYWxMYWJlbCA9IGxhYmVsO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG5vZGUubWV0YWRhdGEgPz8ge30pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZpbmFsTGFiZWwgKz0gYDxoci8+PHNtYWxsPjxlbT4ke09iamVjdC5lbnRyaWVzKG5vZGUubWV0YWRhdGEgPz8ge30pXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKFtrLCB2XSkgPT4gYCR7a30gPSAke3Z9YClcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCJcXG5cIil9PC9lbT48L3NtYWxsPmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub2RlTGFiZWwgPSAoZm9ybWF0RGljdFtrZXldID8/IGZvcm1hdERpY3RbZGVmYXVsdENsYXNzTGFiZWxdKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwiezB9XCIsIF9lc2NhcGVOb2RlTGFiZWwoa2V5KSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcInsxfVwiLCBmaW5hbExhYmVsKTtcbiAgICAgICAgICAgIG1lcm1haWRHcmFwaCArPSBgXFx0JHtub2RlTGFiZWx9XFxuYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBHcm91cCBlZGdlcyBieSB0aGVpciBjb21tb24gcHJlZml4ZXNcbiAgICBjb25zdCBlZGdlR3JvdXBzID0ge307XG4gICAgZm9yIChjb25zdCBlZGdlIG9mIGVkZ2VzKSB7XG4gICAgICAgIGNvbnN0IHNyY1BhcnRzID0gZWRnZS5zb3VyY2Uuc3BsaXQoXCI6XCIpO1xuICAgICAgICBjb25zdCB0Z3RQYXJ0cyA9IGVkZ2UudGFyZ2V0LnNwbGl0KFwiOlwiKTtcbiAgICAgICAgY29uc3QgY29tbW9uUHJlZml4ID0gc3JjUGFydHNcbiAgICAgICAgICAgIC5maWx0ZXIoKHNyYywgaSkgPT4gc3JjID09PSB0Z3RQYXJ0c1tpXSlcbiAgICAgICAgICAgIC5qb2luKFwiOlwiKTtcbiAgICAgICAgaWYgKCFlZGdlR3JvdXBzW2NvbW1vblByZWZpeF0pIHtcbiAgICAgICAgICAgIGVkZ2VHcm91cHNbY29tbW9uUHJlZml4XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVkZ2VHcm91cHNbY29tbW9uUHJlZml4XS5wdXNoKGVkZ2UpO1xuICAgIH1cbiAgICBjb25zdCBzZWVuU3ViZ3JhcGhzID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIGFkZFN1YmdyYXBoKGVkZ2VzLCBwcmVmaXgpIHtcbiAgICAgICAgY29uc3Qgc2VsZkxvb3AgPSBlZGdlcy5sZW5ndGggPT09IDEgJiYgZWRnZXNbMF0uc291cmNlID09PSBlZGdlc1swXS50YXJnZXQ7XG4gICAgICAgIGlmIChwcmVmaXggJiYgIXNlbGZMb29wKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJncmFwaCA9IHByZWZpeC5zcGxpdChcIjpcIikucG9wKCk7XG4gICAgICAgICAgICBpZiAoc2VlblN1YmdyYXBocy5oYXMoc3ViZ3JhcGgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGb3VuZCBkdXBsaWNhdGUgc3ViZ3JhcGggJyR7c3ViZ3JhcGh9JyAtLSB0aGlzIGxpa2VseSBtZWFucyB0aGF0IGAgK1xuICAgICAgICAgICAgICAgICAgICBcInlvdSdyZSByZXVzaW5nIGEgc3ViZ3JhcGggbm9kZSB3aXRoIHRoZSBzYW1lIG5hbWUuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJQbGVhc2UgYWRqdXN0IHlvdXIgZ3JhcGggdG8gaGF2ZSBzdWJncmFwaCBub2RlcyB3aXRoIHVuaXF1ZSBuYW1lcy5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWVuU3ViZ3JhcGhzLmFkZChzdWJncmFwaCk7XG4gICAgICAgICAgICBtZXJtYWlkR3JhcGggKz0gYFxcdHN1YmdyYXBoICR7c3ViZ3JhcGh9XFxuYDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgZWRnZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc291cmNlLCB0YXJnZXQsIGRhdGEsIGNvbmRpdGlvbmFsIH0gPSBlZGdlO1xuICAgICAgICAgICAgbGV0IGVkZ2VMYWJlbCA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVkZ2VEYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IGVkZ2VEYXRhLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICBpZiAod29yZHMubGVuZ3RoID4gd3JhcExhYmVsTldvcmRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkZ2VEYXRhID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogTWF0aC5jZWlsKHdvcmRzLmxlbmd0aCAvIHdyYXBMYWJlbE5Xb3JkcykgfSwgKF8sIGkpID0+IHdvcmRzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaSAqIHdyYXBMYWJlbE5Xb3JkcywgKGkgKyAxKSAqIHdyYXBMYWJlbE5Xb3JkcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiIFwiKSkuam9pbihcIiZuYnNwOzxicj4mbmJzcDtcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVkZ2VMYWJlbCA9IGNvbmRpdGlvbmFsXG4gICAgICAgICAgICAgICAgICAgID8gYCAtLiAmbmJzcDske2VkZ2VEYXRhfSZuYnNwOyAuLT4gYFxuICAgICAgICAgICAgICAgICAgICA6IGAgLS0gJm5ic3A7JHtlZGdlRGF0YX0mbmJzcDsgLS0+IGA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlZGdlTGFiZWwgPSBjb25kaXRpb25hbCA/IFwiIC0uLT4gXCIgOiBcIiAtLT4gXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXJtYWlkR3JhcGggKz0gYFxcdCR7X2VzY2FwZU5vZGVMYWJlbChzb3VyY2UpfSR7ZWRnZUxhYmVsfSR7X2VzY2FwZU5vZGVMYWJlbCh0YXJnZXQpfTtcXG5gO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGFkZCBuZXN0ZWQgc3ViZ3JhcGhzXG4gICAgICAgIGZvciAoY29uc3QgbmVzdGVkUHJlZml4IGluIGVkZ2VHcm91cHMpIHtcbiAgICAgICAgICAgIGlmIChuZXN0ZWRQcmVmaXguc3RhcnRzV2l0aChgJHtwcmVmaXh9OmApICYmIG5lc3RlZFByZWZpeCAhPT0gcHJlZml4KSB7XG4gICAgICAgICAgICAgICAgYWRkU3ViZ3JhcGgoZWRnZUdyb3Vwc1tuZXN0ZWRQcmVmaXhdLCBuZXN0ZWRQcmVmaXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmaXggJiYgIXNlbGZMb29wKSB7XG4gICAgICAgICAgICBtZXJtYWlkR3JhcGggKz0gXCJcXHRlbmRcXG5cIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTdGFydCB3aXRoIHRoZSB0b3AtbGV2ZWwgZWRnZXMgKG5vIGNvbW1vbiBwcmVmaXgpXG4gICAgYWRkU3ViZ3JhcGgoZWRnZUdyb3Vwc1tcIlwiXSA/PyBbXSwgXCJcIik7XG4gICAgLy8gQWRkIHJlbWFpbmluZyBzdWJncmFwaHNcbiAgICBmb3IgKGNvbnN0IHByZWZpeCBpbiBlZGdlR3JvdXBzKSB7XG4gICAgICAgIGlmICghcHJlZml4LmluY2x1ZGVzKFwiOlwiKSAmJiBwcmVmaXggIT09IFwiXCIpIHtcbiAgICAgICAgICAgIGFkZFN1YmdyYXBoKGVkZ2VHcm91cHNbcHJlZml4XSwgcHJlZml4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZGQgY3VzdG9tIHN0eWxlcyBmb3Igbm9kZXNcbiAgICBpZiAod2l0aFN0eWxlcykge1xuICAgICAgICBtZXJtYWlkR3JhcGggKz0gX2dlbmVyYXRlTWVybWFpZEdyYXBoU3R5bGVzKG5vZGVDb2xvcnMgPz8ge30pO1xuICAgIH1cbiAgICByZXR1cm4gbWVybWFpZEdyYXBoO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGRyYXdNZXJtYWlkSW1hZ2VgIGluc3RlYWQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRyYXdNZXJtYWlkUG5nKG1lcm1haWRTeW50YXgsIGNvbmZpZykge1xuICAgIHJldHVybiBkcmF3TWVybWFpZEltYWdlKG1lcm1haWRTeW50YXgsIHtcbiAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICBpbWFnZVR5cGU6IFwicG5nXCIsXG4gICAgfSk7XG59XG4vKipcbiAqIFJlbmRlcnMgTWVybWFpZCBncmFwaCB1c2luZyB0aGUgTWVybWFpZC5JTksgQVBJLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBpbWFnZSA9IGF3YWl0IGRyYXdNZXJtYWlkSW1hZ2UobWVybWFpZFN5bnRheCwge1xuICogICBiYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcbiAqICAgaW1hZ2VUeXBlOiBcInBuZ1wiLFxuICogfSk7XG4gKiBmcy53cml0ZUZpbGVTeW5jKFwiaW1hZ2UucG5nXCIsIGltYWdlKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBtZXJtYWlkU3ludGF4IC0gVGhlIE1lcm1haWQgc3ludGF4IHRvIHJlbmRlci5cbiAqIEBwYXJhbSBjb25maWcgLSBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGltYWdlLlxuICogQHJldHVybnMgVGhlIGltYWdlIGFzIGEgQmxvYi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZHJhd01lcm1haWRJbWFnZShtZXJtYWlkU3ludGF4LCBjb25maWcpIHtcbiAgICBsZXQgYmFja2dyb3VuZENvbG9yID0gY29uZmlnPy5iYWNrZ3JvdW5kQ29sb3IgPz8gXCJ3aGl0ZVwiO1xuICAgIGNvbnN0IGltYWdlVHlwZSA9IGNvbmZpZz8uaW1hZ2VUeXBlID8/IFwicG5nXCI7XG4gICAgLy8gVXNlIGJ0b2EgZm9yIGNvbXBhdGliaWxpdHksIGFzc3VtZSBBU0NJSVxuICAgIGNvbnN0IG1lcm1haWRTeW50YXhFbmNvZGVkID0gYnRvYShtZXJtYWlkU3ludGF4KTtcbiAgICAvLyBDaGVjayBpZiB0aGUgYmFja2dyb3VuZCBjb2xvciBpcyBhIGhleGFkZWNpbWFsIGNvbG9yIGNvZGUgdXNpbmcgcmVnZXhcbiAgICBpZiAoYmFja2dyb3VuZENvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgaGV4Q29sb3JQYXR0ZXJuID0gL14jKD86WzAtOWEtZkEtRl17M30pezEsMn0kLztcbiAgICAgICAgaWYgKCFoZXhDb2xvclBhdHRlcm4udGVzdChiYWNrZ3JvdW5kQ29sb3IpKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBgISR7YmFja2dyb3VuZENvbG9yfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW1hZ2VVcmwgPSBgaHR0cHM6Ly9tZXJtYWlkLmluay9pbWcvJHttZXJtYWlkU3ludGF4RW5jb2RlZH0/YmdDb2xvcj0ke2JhY2tncm91bmRDb2xvcn0mdHlwZT0ke2ltYWdlVHlwZX1gO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGltYWdlVXJsKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoW1xuICAgICAgICAgICAgYEZhaWxlZCB0byByZW5kZXIgdGhlIGdyYXBoIHVzaW5nIHRoZSBNZXJtYWlkLklOSyBBUEkuYCxcbiAgICAgICAgICAgIGBTdGF0dXMgY29kZTogJHtyZXMuc3RhdHVzfWAsXG4gICAgICAgICAgICBgU3RhdHVzIHRleHQ6ICR7cmVzLnN0YXR1c1RleHR9YCxcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpKTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudCA9IGF3YWl0IHJlcy5ibG9iKCk7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/history.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/history.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunnableWithMessageHistory = void 0;\nconst index_js_1 = __webpack_require__(/*! ../messages/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst passthrough_js_1 = __webpack_require__(/*! ./passthrough.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.cjs\");\n/**\n * Wraps a LCEL chain and manages history. It appends input messages\n * and chain outputs as history, and adds the current history messages to\n * the chain input.\n * @example\n * ```typescript\n * // yarn add @langchain/anthropic @langchain/community @upstash/redis\n *\n * import {\n *   ChatPromptTemplate,\n *   MessagesPlaceholder,\n * } from \"@langchain/core/prompts\";\n * import { ChatAnthropic } from \"@langchain/anthropic\";\n * import { UpstashRedisChatMessageHistory } from \"@langchain/community/stores/message/upstash_redis\";\n * // For demos, you can also use an in-memory store:\n * // import { ChatMessageHistory } from \"langchain/stores/message/in_memory\";\n *\n * const prompt = ChatPromptTemplate.fromMessages([\n *   [\"system\", \"You're an assistant who's good at {ability}\"],\n *   new MessagesPlaceholder(\"history\"),\n *   [\"human\", \"{question}\"],\n * ]);\n *\n * const chain = prompt.pipe(new ChatAnthropic({}));\n *\n * const chainWithHistory = new RunnableWithMessageHistory({\n *   runnable: chain,\n *   getMessageHistory: (sessionId) =>\n *     new UpstashRedisChatMessageHistory({\n *       sessionId,\n *       config: {\n *         url: process.env.UPSTASH_REDIS_REST_URL!,\n *         token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n *       },\n *     }),\n *   inputMessagesKey: \"question\",\n *   historyMessagesKey: \"history\",\n * });\n *\n * const result = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What does cosine mean?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n *\n * const result2 = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What's its inverse?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n * ```\n */\nclass RunnableWithMessageHistory extends base_js_1.RunnableBinding {\n    constructor(fields) {\n        let historyChain = base_js_1.RunnableLambda.from((input, options) => this._enterHistory(input, options ?? {})).withConfig({ runName: \"loadHistory\" });\n        const messagesKey = fields.historyMessagesKey ?? fields.inputMessagesKey;\n        if (messagesKey) {\n            historyChain = passthrough_js_1.RunnablePassthrough.assign({\n                [messagesKey]: historyChain,\n            }).withConfig({ runName: \"insertHistory\" });\n        }\n        const bound = historyChain\n            .pipe(fields.runnable.withListeners({\n            onEnd: (run, config) => this._exitHistory(run, config ?? {}),\n        }))\n            .withConfig({ runName: \"RunnableWithMessageHistory\" });\n        const config = fields.config ?? {};\n        super({\n            ...fields,\n            config,\n            bound,\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"historyMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getMessageHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.getMessageHistory = fields.getMessageHistory;\n        this.inputMessagesKey = fields.inputMessagesKey;\n        this.outputMessagesKey = fields.outputMessagesKey;\n        this.historyMessagesKey = fields.historyMessagesKey;\n    }\n    _getInputMessages(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputValue) {\n        let parsedInputValue;\n        if (typeof inputValue === \"object\" &&\n            !Array.isArray(inputValue) &&\n            !(0, index_js_1.isBaseMessage)(inputValue)) {\n            let key;\n            if (this.inputMessagesKey) {\n                key = this.inputMessagesKey;\n            }\n            else if (Object.keys(inputValue).length === 1) {\n                key = Object.keys(inputValue)[0];\n            }\n            else {\n                key = \"input\";\n            }\n            if (Array.isArray(inputValue[key]) && Array.isArray(inputValue[key][0])) {\n                parsedInputValue = inputValue[key][0];\n            }\n            else {\n                parsedInputValue = inputValue[key];\n            }\n        }\n        else {\n            parsedInputValue = inputValue;\n        }\n        if (typeof parsedInputValue === \"string\") {\n            return [new index_js_1.HumanMessage(parsedInputValue)];\n        }\n        else if (Array.isArray(parsedInputValue)) {\n            return parsedInputValue;\n        }\n        else if ((0, index_js_1.isBaseMessage)(parsedInputValue)) {\n            return [parsedInputValue];\n        }\n        else {\n            throw new Error(`Expected a string, BaseMessage, or array of BaseMessages.\\nGot ${JSON.stringify(parsedInputValue, null, 2)}`);\n        }\n    }\n    _getOutputMessages(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    outputValue) {\n        let parsedOutputValue;\n        if (!Array.isArray(outputValue) &&\n            !(0, index_js_1.isBaseMessage)(outputValue) &&\n            typeof outputValue !== \"string\") {\n            let key;\n            if (this.outputMessagesKey !== undefined) {\n                key = this.outputMessagesKey;\n            }\n            else if (Object.keys(outputValue).length === 1) {\n                key = Object.keys(outputValue)[0];\n            }\n            else {\n                key = \"output\";\n            }\n            // If you are wrapping a chat model directly\n            // The output is actually this weird generations object\n            if (outputValue.generations !== undefined) {\n                parsedOutputValue = outputValue.generations[0][0].message;\n            }\n            else {\n                parsedOutputValue = outputValue[key];\n            }\n        }\n        else {\n            parsedOutputValue = outputValue;\n        }\n        if (typeof parsedOutputValue === \"string\") {\n            return [new index_js_1.AIMessage(parsedOutputValue)];\n        }\n        else if (Array.isArray(parsedOutputValue)) {\n            return parsedOutputValue;\n        }\n        else if ((0, index_js_1.isBaseMessage)(parsedOutputValue)) {\n            return [parsedOutputValue];\n        }\n        else {\n            throw new Error(`Expected a string, BaseMessage, or array of BaseMessages. Received: ${JSON.stringify(parsedOutputValue, null, 2)}`);\n        }\n    }\n    async _enterHistory(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, kwargs) {\n        const history = kwargs?.configurable?.messageHistory;\n        const messages = await history.getMessages();\n        if (this.historyMessagesKey === undefined) {\n            return messages.concat(this._getInputMessages(input));\n        }\n        return messages;\n    }\n    async _exitHistory(run, config) {\n        const history = config.configurable?.messageHistory;\n        // Get input messages\n        let inputs;\n        // Chat model inputs are nested arrays\n        if (Array.isArray(run.inputs) && Array.isArray(run.inputs[0])) {\n            inputs = run.inputs[0];\n        }\n        else {\n            inputs = run.inputs;\n        }\n        let inputMessages = this._getInputMessages(inputs);\n        // If historic messages were prepended to the input messages, remove them to\n        // avoid adding duplicate messages to history.\n        if (this.historyMessagesKey === undefined) {\n            const existingMessages = await history.getMessages();\n            inputMessages = inputMessages.slice(existingMessages.length);\n        }\n        // Get output messages\n        const outputValue = run.outputs;\n        if (!outputValue) {\n            throw new Error(`Output values from 'Run' undefined. Run: ${JSON.stringify(run, null, 2)}`);\n        }\n        const outputMessages = this._getOutputMessages(outputValue);\n        await history.addMessages([...inputMessages, ...outputMessages]);\n    }\n    async _mergeConfig(...configs) {\n        const config = await super._mergeConfig(...configs);\n        // Extract sessionId\n        if (!config.configurable || !config.configurable.sessionId) {\n            const exampleInput = {\n                [this.inputMessagesKey ?? \"input\"]: \"foo\",\n            };\n            const exampleConfig = { configurable: { sessionId: \"123\" } };\n            throw new Error(`sessionId is required. Pass it in as part of the config argument to .invoke() or .stream()\\n` +\n                `eg. chain.invoke(${JSON.stringify(exampleInput)}, ${JSON.stringify(exampleConfig)})`);\n        }\n        // attach messageHistory\n        const { sessionId } = config.configurable;\n        config.configurable.messageHistory = await this.getMessageHistory(sessionId);\n        return config;\n    }\n}\nexports.RunnableWithMessageHistory = RunnableWithMessageHistory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/history.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/index.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/index.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunnableWithMessageHistory = exports.RunnableBranch = exports.RouterRunnable = exports.RunnablePassthrough = exports.pickRunnableConfigKeys = exports.mergeConfigs = exports.ensureConfig = exports.patchConfig = exports.getCallbackManagerForConfig = exports.RunnableToolLike = exports._coerceToRunnable = exports.RunnablePick = exports.RunnableAssign = exports.RunnableWithFallbacks = exports.RunnableLambda = exports.RunnableParallel = exports.RunnableMap = exports.RunnableSequence = exports.RunnableRetry = exports.RunnableEach = exports.RunnableBinding = exports.Runnable = void 0;\nvar base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nObject.defineProperty(exports, \"Runnable\", ({ enumerable: true, get: function () { return base_js_1.Runnable; } }));\nObject.defineProperty(exports, \"RunnableBinding\", ({ enumerable: true, get: function () { return base_js_1.RunnableBinding; } }));\nObject.defineProperty(exports, \"RunnableEach\", ({ enumerable: true, get: function () { return base_js_1.RunnableEach; } }));\nObject.defineProperty(exports, \"RunnableRetry\", ({ enumerable: true, get: function () { return base_js_1.RunnableRetry; } }));\nObject.defineProperty(exports, \"RunnableSequence\", ({ enumerable: true, get: function () { return base_js_1.RunnableSequence; } }));\nObject.defineProperty(exports, \"RunnableMap\", ({ enumerable: true, get: function () { return base_js_1.RunnableMap; } }));\nObject.defineProperty(exports, \"RunnableParallel\", ({ enumerable: true, get: function () { return base_js_1.RunnableParallel; } }));\nObject.defineProperty(exports, \"RunnableLambda\", ({ enumerable: true, get: function () { return base_js_1.RunnableLambda; } }));\nObject.defineProperty(exports, \"RunnableWithFallbacks\", ({ enumerable: true, get: function () { return base_js_1.RunnableWithFallbacks; } }));\nObject.defineProperty(exports, \"RunnableAssign\", ({ enumerable: true, get: function () { return base_js_1.RunnableAssign; } }));\nObject.defineProperty(exports, \"RunnablePick\", ({ enumerable: true, get: function () { return base_js_1.RunnablePick; } }));\nObject.defineProperty(exports, \"_coerceToRunnable\", ({ enumerable: true, get: function () { return base_js_1._coerceToRunnable; } }));\nObject.defineProperty(exports, \"RunnableToolLike\", ({ enumerable: true, get: function () { return base_js_1.RunnableToolLike; } }));\nvar config_js_1 = __webpack_require__(/*! ./config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\nObject.defineProperty(exports, \"getCallbackManagerForConfig\", ({ enumerable: true, get: function () { return config_js_1.getCallbackManagerForConfig; } }));\nObject.defineProperty(exports, \"patchConfig\", ({ enumerable: true, get: function () { return config_js_1.patchConfig; } }));\nObject.defineProperty(exports, \"ensureConfig\", ({ enumerable: true, get: function () { return config_js_1.ensureConfig; } }));\nObject.defineProperty(exports, \"mergeConfigs\", ({ enumerable: true, get: function () { return config_js_1.mergeConfigs; } }));\nObject.defineProperty(exports, \"pickRunnableConfigKeys\", ({ enumerable: true, get: function () { return config_js_1.pickRunnableConfigKeys; } }));\nvar passthrough_js_1 = __webpack_require__(/*! ./passthrough.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.cjs\");\nObject.defineProperty(exports, \"RunnablePassthrough\", ({ enumerable: true, get: function () { return passthrough_js_1.RunnablePassthrough; } }));\nvar router_js_1 = __webpack_require__(/*! ./router.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/router.cjs\");\nObject.defineProperty(exports, \"RouterRunnable\", ({ enumerable: true, get: function () { return router_js_1.RouterRunnable; } }));\nvar branch_js_1 = __webpack_require__(/*! ./branch.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/branch.cjs\");\nObject.defineProperty(exports, \"RunnableBranch\", ({ enumerable: true, get: function () { return branch_js_1.RunnableBranch; } }));\nvar history_js_1 = __webpack_require__(/*! ./history.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/history.cjs\");\nObject.defineProperty(exports, \"RunnableWithMessageHistory\", ({ enumerable: true, get: function () { return history_js_1.RunnableWithMessageHistory; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRyxzQkFBc0IsR0FBRyxzQkFBc0IsR0FBRywyQkFBMkIsR0FBRyw4QkFBOEIsR0FBRyxvQkFBb0IsR0FBRyxvQkFBb0IsR0FBRyxtQkFBbUIsR0FBRyxtQ0FBbUMsR0FBRyx3QkFBd0IsR0FBRyx5QkFBeUIsR0FBRyxvQkFBb0IsR0FBRyxzQkFBc0IsR0FBRyw2QkFBNkIsR0FBRyxzQkFBc0IsR0FBRyx3QkFBd0IsR0FBRyxtQkFBbUIsR0FBRyx3QkFBd0IsR0FBRyxxQkFBcUIsR0FBRyxvQkFBb0IsR0FBRyx1QkFBdUIsR0FBRyxnQkFBZ0I7QUFDcmtCLGdCQUFnQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3BDLDRDQUEyQyxFQUFFLHFDQUFxQyw4QkFBOEIsRUFBQztBQUNqSCxtREFBa0QsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDL0gsZ0RBQStDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3pILGlEQUFnRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUMzSCxvREFBbUQsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDakksK0NBQThDLEVBQUUscUNBQXFDLGlDQUFpQyxFQUFDO0FBQ3ZILG9EQUFtRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNqSSxrREFBaUQsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDN0gseURBQXdELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQzNJLGtEQUFpRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM3SCxnREFBK0MsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDekgscURBQW9ELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ25JLG9EQUFtRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNqSSxrQkFBa0IsbUJBQU8sQ0FBQyxvRkFBYztBQUN4QywrREFBOEQsRUFBRSxxQ0FBcUMsbURBQW1ELEVBQUM7QUFDekosK0NBQThDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQ3pILGdEQUErQyxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUMzSCxnREFBK0MsRUFBRSxxQ0FBcUMsb0NBQW9DLEVBQUM7QUFDM0gsMERBQXlELEVBQUUscUNBQXFDLDhDQUE4QyxFQUFDO0FBQy9JLHVCQUF1QixtQkFBTyxDQUFDLDhGQUFtQjtBQUNsRCx1REFBc0QsRUFBRSxxQ0FBcUMsZ0RBQWdELEVBQUM7QUFDOUksa0JBQWtCLG1CQUFPLENBQUMsb0ZBQWM7QUFDeEMsa0RBQWlELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQy9ILGtCQUFrQixtQkFBTyxDQUFDLG9GQUFjO0FBQ3hDLGtEQUFpRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUMvSCxtQkFBbUIsbUJBQU8sQ0FBQyxzRkFBZTtBQUMxQyw4REFBNkQsRUFBRSxxQ0FBcUMsbURBQW1ELEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy9pbmRleC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJ1bm5hYmxlV2l0aE1lc3NhZ2VIaXN0b3J5ID0gZXhwb3J0cy5SdW5uYWJsZUJyYW5jaCA9IGV4cG9ydHMuUm91dGVyUnVubmFibGUgPSBleHBvcnRzLlJ1bm5hYmxlUGFzc3Rocm91Z2ggPSBleHBvcnRzLnBpY2tSdW5uYWJsZUNvbmZpZ0tleXMgPSBleHBvcnRzLm1lcmdlQ29uZmlncyA9IGV4cG9ydHMuZW5zdXJlQ29uZmlnID0gZXhwb3J0cy5wYXRjaENvbmZpZyA9IGV4cG9ydHMuZ2V0Q2FsbGJhY2tNYW5hZ2VyRm9yQ29uZmlnID0gZXhwb3J0cy5SdW5uYWJsZVRvb2xMaWtlID0gZXhwb3J0cy5fY29lcmNlVG9SdW5uYWJsZSA9IGV4cG9ydHMuUnVubmFibGVQaWNrID0gZXhwb3J0cy5SdW5uYWJsZUFzc2lnbiA9IGV4cG9ydHMuUnVubmFibGVXaXRoRmFsbGJhY2tzID0gZXhwb3J0cy5SdW5uYWJsZUxhbWJkYSA9IGV4cG9ydHMuUnVubmFibGVQYXJhbGxlbCA9IGV4cG9ydHMuUnVubmFibGVNYXAgPSBleHBvcnRzLlJ1bm5hYmxlU2VxdWVuY2UgPSBleHBvcnRzLlJ1bm5hYmxlUmV0cnkgPSBleHBvcnRzLlJ1bm5hYmxlRWFjaCA9IGV4cG9ydHMuUnVubmFibGVCaW5kaW5nID0gZXhwb3J0cy5SdW5uYWJsZSA9IHZvaWQgMDtcbnZhciBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJ1bm5hYmxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiYXNlX2pzXzEuUnVubmFibGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSdW5uYWJsZUJpbmRpbmdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfanNfMS5SdW5uYWJsZUJpbmRpbmc7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSdW5uYWJsZUVhY2hcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfanNfMS5SdW5uYWJsZUVhY2g7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSdW5uYWJsZVJldHJ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiYXNlX2pzXzEuUnVubmFibGVSZXRyeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJ1bm5hYmxlU2VxdWVuY2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfanNfMS5SdW5uYWJsZVNlcXVlbmNlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUnVubmFibGVNYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfanNfMS5SdW5uYWJsZU1hcDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJ1bm5hYmxlUGFyYWxsZWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfanNfMS5SdW5uYWJsZVBhcmFsbGVsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUnVubmFibGVMYW1iZGFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfanNfMS5SdW5uYWJsZUxhbWJkYTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJ1bm5hYmxlV2l0aEZhbGxiYWNrc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFzZV9qc18xLlJ1bm5hYmxlV2l0aEZhbGxiYWNrczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJ1bm5hYmxlQXNzaWduXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiYXNlX2pzXzEuUnVubmFibGVBc3NpZ247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSdW5uYWJsZVBpY2tcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfanNfMS5SdW5uYWJsZVBpY2s7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfY29lcmNlVG9SdW5uYWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFzZV9qc18xLl9jb2VyY2VUb1J1bm5hYmxlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUnVubmFibGVUb29sTGlrZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFzZV9qc18xLlJ1bm5hYmxlVG9vbExpa2U7IH0gfSk7XG52YXIgY29uZmlnX2pzXzEgPSByZXF1aXJlKFwiLi9jb25maWcuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0Q2FsbGJhY2tNYW5hZ2VyRm9yQ29uZmlnXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWdfanNfMS5nZXRDYWxsYmFja01hbmFnZXJGb3JDb25maWc7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXRjaENvbmZpZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnX2pzXzEucGF0Y2hDb25maWc7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbnN1cmVDb25maWdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZ19qc18xLmVuc3VyZUNvbmZpZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1lcmdlQ29uZmlnc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnX2pzXzEubWVyZ2VDb25maWdzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGlja1J1bm5hYmxlQ29uZmlnS2V5c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnX2pzXzEucGlja1J1bm5hYmxlQ29uZmlnS2V5czsgfSB9KTtcbnZhciBwYXNzdGhyb3VnaF9qc18xID0gcmVxdWlyZShcIi4vcGFzc3Rocm91Z2guY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUnVubmFibGVQYXNzdGhyb3VnaFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFzc3Rocm91Z2hfanNfMS5SdW5uYWJsZVBhc3N0aHJvdWdoOyB9IH0pO1xudmFyIHJvdXRlcl9qc18xID0gcmVxdWlyZShcIi4vcm91dGVyLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlclJ1bm5hYmxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByb3V0ZXJfanNfMS5Sb3V0ZXJSdW5uYWJsZTsgfSB9KTtcbnZhciBicmFuY2hfanNfMSA9IHJlcXVpcmUoXCIuL2JyYW5jaC5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSdW5uYWJsZUJyYW5jaFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnJhbmNoX2pzXzEuUnVubmFibGVCcmFuY2g7IH0gfSk7XG52YXIgaGlzdG9yeV9qc18xID0gcmVxdWlyZShcIi4vaGlzdG9yeS5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSdW5uYWJsZVdpdGhNZXNzYWdlSGlzdG9yeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGlzdG9yeV9qc18xLlJ1bm5hYmxlV2l0aE1lc3NhZ2VIaXN0b3J5OyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/iter.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/iter.cjs ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isIterator = void 0;\nexports.isIterableIterator = isIterableIterator;\nexports.isAsyncIterable = isAsyncIterable;\nexports.consumeIteratorInContext = consumeIteratorInContext;\nexports.consumeAsyncIterableInContext = consumeAsyncIterableInContext;\nconst index_js_1 = __webpack_require__(/*! ../singletons/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.cjs\");\nconst config_js_1 = __webpack_require__(/*! ./config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\nfunction isIterableIterator(thing) {\n    return (typeof thing === \"object\" &&\n        thing !== null &&\n        typeof thing[Symbol.iterator] === \"function\" &&\n        // avoid detecting array/set as iterator\n        typeof thing.next === \"function\");\n}\nconst isIterator = (x) => x != null &&\n    typeof x === \"object\" &&\n    \"next\" in x &&\n    typeof x.next === \"function\";\nexports.isIterator = isIterator;\nfunction isAsyncIterable(thing) {\n    return (typeof thing === \"object\" &&\n        thing !== null &&\n        typeof thing[Symbol.asyncIterator] ===\n            \"function\");\n}\nfunction* consumeIteratorInContext(context, iter) {\n    while (true) {\n        const { value, done } = index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(context), iter.next.bind(iter), true);\n        if (done) {\n            break;\n        }\n        else {\n            yield value;\n        }\n    }\n}\nasync function* consumeAsyncIterableInContext(context, iter) {\n    const iterator = iter[Symbol.asyncIterator]();\n    while (true) {\n        const { value, done } = await index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(context), iterator.next.bind(iter), true);\n        if (done) {\n            break;\n        }\n        else {\n            yield value;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2l0ZXIuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQiwwQkFBMEI7QUFDMUIsdUJBQXVCO0FBQ3ZCLGdDQUFnQztBQUNoQyxxQ0FBcUM7QUFDckMsbUJBQW1CLG1CQUFPLENBQUMsK0ZBQXlCO0FBQ3BELG9CQUFvQixtQkFBTyxDQUFDLG9GQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9ydW5uYWJsZXMvaXRlci5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSXRlcmF0b3IgPSB2b2lkIDA7XG5leHBvcnRzLmlzSXRlcmFibGVJdGVyYXRvciA9IGlzSXRlcmFibGVJdGVyYXRvcjtcbmV4cG9ydHMuaXNBc3luY0l0ZXJhYmxlID0gaXNBc3luY0l0ZXJhYmxlO1xuZXhwb3J0cy5jb25zdW1lSXRlcmF0b3JJbkNvbnRleHQgPSBjb25zdW1lSXRlcmF0b3JJbkNvbnRleHQ7XG5leHBvcnRzLmNvbnN1bWVBc3luY0l0ZXJhYmxlSW5Db250ZXh0ID0gY29uc3VtZUFzeW5jSXRlcmFibGVJbkNvbnRleHQ7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3NpbmdsZXRvbnMvaW5kZXguY2pzXCIpO1xuY29uc3QgY29uZmlnX2pzXzEgPSByZXF1aXJlKFwiLi9jb25maWcuY2pzXCIpO1xuZnVuY3Rpb24gaXNJdGVyYWJsZUl0ZXJhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgdGhpbmcgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAvLyBhdm9pZCBkZXRlY3RpbmcgYXJyYXkvc2V0IGFzIGl0ZXJhdG9yXG4gICAgICAgIHR5cGVvZiB0aGluZy5uZXh0ID09PSBcImZ1bmN0aW9uXCIpO1xufVxuY29uc3QgaXNJdGVyYXRvciA9ICh4KSA9PiB4ICE9IG51bGwgJiZcbiAgICB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJlxuICAgIFwibmV4dFwiIGluIHggJiZcbiAgICB0eXBlb2YgeC5uZXh0ID09PSBcImZ1bmN0aW9uXCI7XG5leHBvcnRzLmlzSXRlcmF0b3IgPSBpc0l0ZXJhdG9yO1xuZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKHRoaW5nKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgdGhpbmcgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHRoaW5nW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9PT1cbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIik7XG59XG5mdW5jdGlvbiogY29uc3VtZUl0ZXJhdG9ySW5Db250ZXh0KGNvbnRleHQsIGl0ZXIpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbmRleF9qc18xLkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24ucnVuV2l0aENvbmZpZygoMCwgY29uZmlnX2pzXzEucGlja1J1bm5hYmxlQ29uZmlnS2V5cykoY29udGV4dCksIGl0ZXIubmV4dC5iaW5kKGl0ZXIpLCB0cnVlKTtcbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiogY29uc3VtZUFzeW5jSXRlcmFibGVJbkNvbnRleHQoY29udGV4dCwgaXRlcikge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gaXRlcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBpbmRleF9qc18xLkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24ucnVuV2l0aENvbmZpZygoMCwgY29uZmlnX2pzXzEucGlja1J1bm5hYmxlQ29uZmlnS2V5cykoY29udGV4dCksIGl0ZXJhdG9yLm5leHQuYmluZChpdGVyKSwgdHJ1ZSk7XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/iter.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/passthrough.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunnablePassthrough = void 0;\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst config_js_1 = __webpack_require__(/*! ./config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\n/**\n * A runnable to passthrough inputs unchanged or with additional keys.\n *\n * This runnable behaves almost like the identity function, except that it\n * can be configured to add additional keys to the output, if the input is\n * an object.\n *\n * The example below demonstrates how to use `RunnablePassthrough to\n * passthrough the input from the `.invoke()`\n *\n * @example\n * ```typescript\n * const chain = RunnableSequence.from([\n *   {\n *     question: new RunnablePassthrough(),\n *     context: async () => loadContextFromStore(),\n *   },\n *   prompt,\n *   llm,\n *   outputParser,\n * ]);\n * const response = await chain.invoke(\n *   \"I can pass a single string instead of an object since I'm using `RunnablePassthrough`.\"\n * );\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnablePassthrough extends base_js_1.Runnable {\n    static lc_name() {\n        return \"RunnablePassthrough\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (fields) {\n            this.func = fields.func;\n        }\n    }\n    async invoke(input, options) {\n        const config = (0, config_js_1.ensureConfig)(options);\n        if (this.func) {\n            await this.func(input, config);\n        }\n        return this._callWithConfig((input) => Promise.resolve(input), input, config);\n    }\n    async *transform(generator, options) {\n        const config = (0, config_js_1.ensureConfig)(options);\n        let finalOutput;\n        let finalOutputSupported = true;\n        for await (const chunk of this._transformStreamWithConfig(generator, (input) => input, config)) {\n            yield chunk;\n            if (finalOutputSupported) {\n                if (finalOutput === undefined) {\n                    finalOutput = chunk;\n                }\n                else {\n                    try {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        finalOutput = (0, stream_js_1.concat)(finalOutput, chunk);\n                    }\n                    catch {\n                        finalOutput = undefined;\n                        finalOutputSupported = false;\n                    }\n                }\n            }\n        }\n        if (this.func && finalOutput !== undefined) {\n            await this.func(finalOutput, config);\n        }\n    }\n    /**\n     * A runnable that assigns key-value pairs to the input.\n     *\n     * The example below shows how you could use it with an inline function.\n     *\n     * @example\n     * ```typescript\n     * const prompt =\n     *   PromptTemplate.fromTemplate(`Write a SQL query to answer the question using the following schema: {schema}\n     * Question: {question}\n     * SQL Query:`);\n     *\n     * // The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`\n     * // call (in this example it's the question), along with any inputs passed to the `.assign()` method.\n     * // In this case, we're passing the schema.\n     * const sqlQueryGeneratorChain = RunnableSequence.from([\n     *   RunnablePassthrough.assign({\n     *     schema: async () => db.getTableInfo(),\n     *   }),\n     *   prompt,\n     *   new ChatOpenAI({ model: \"gpt-4o-mini\" }).withConfig({ stop: [\"\\nSQLResult:\"] }),\n     *   new StringOutputParser(),\n     * ]);\n     * const result = await sqlQueryGeneratorChain.invoke({\n     *   question: \"How many employees are there?\",\n     * });\n     * ```\n     */\n    static assign(mapping) {\n        return new base_js_1.RunnableAssign(new base_js_1.RunnableMap({ steps: mapping }));\n    }\n}\nexports.RunnablePassthrough = RunnablePassthrough;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3Bhc3N0aHJvdWdoLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0Isb0JBQW9CLG1CQUFPLENBQUMsdUZBQXFCO0FBQ2pELGtCQUFrQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3RDLG9CQUFvQixtQkFBTyxDQUFDLG9GQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEdBQTRHO0FBQzVHLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsMEJBQTBCLHNCQUFzQixlQUFlLHdCQUF3QjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsZ0JBQWdCO0FBQ3hGO0FBQ0E7QUFDQSwyQkFBMkIiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy9wYXNzdGhyb3VnaC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJ1bm5hYmxlUGFzc3Rocm91Z2ggPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9zdHJlYW0uY2pzXCIpO1xuY29uc3QgYmFzZV9qc18xID0gcmVxdWlyZShcIi4vYmFzZS5janNcIik7XG5jb25zdCBjb25maWdfanNfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZy5janNcIik7XG4vKipcbiAqIEEgcnVubmFibGUgdG8gcGFzc3Rocm91Z2ggaW5wdXRzIHVuY2hhbmdlZCBvciB3aXRoIGFkZGl0aW9uYWwga2V5cy5cbiAqXG4gKiBUaGlzIHJ1bm5hYmxlIGJlaGF2ZXMgYWxtb3N0IGxpa2UgdGhlIGlkZW50aXR5IGZ1bmN0aW9uLCBleGNlcHQgdGhhdCBpdFxuICogY2FuIGJlIGNvbmZpZ3VyZWQgdG8gYWRkIGFkZGl0aW9uYWwga2V5cyB0byB0aGUgb3V0cHV0LCBpZiB0aGUgaW5wdXQgaXNcbiAqIGFuIG9iamVjdC5cbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHVzZSBgUnVubmFibGVQYXNzdGhyb3VnaCB0b1xuICogcGFzc3Rocm91Z2ggdGhlIGlucHV0IGZyb20gdGhlIGAuaW52b2tlKClgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IGNoYWluID0gUnVubmFibGVTZXF1ZW5jZS5mcm9tKFtcbiAqICAge1xuICogICAgIHF1ZXN0aW9uOiBuZXcgUnVubmFibGVQYXNzdGhyb3VnaCgpLFxuICogICAgIGNvbnRleHQ6IGFzeW5jICgpID0+IGxvYWRDb250ZXh0RnJvbVN0b3JlKCksXG4gKiAgIH0sXG4gKiAgIHByb21wdCxcbiAqICAgbGxtLFxuICogICBvdXRwdXRQYXJzZXIsXG4gKiBdKTtcbiAqIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2hhaW4uaW52b2tlKFxuICogICBcIkkgY2FuIHBhc3MgYSBzaW5nbGUgc3RyaW5nIGluc3RlYWQgb2YgYW4gb2JqZWN0IHNpbmNlIEknbSB1c2luZyBgUnVubmFibGVQYXNzdGhyb3VnaGAuXCJcbiAqICk7XG4gKiBgYGBcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNsYXNzIFJ1bm5hYmxlUGFzc3Rocm91Z2ggZXh0ZW5kcyBiYXNlX2pzXzEuUnVubmFibGUge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJSdW5uYWJsZVBhc3N0aHJvdWdoXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwicnVubmFibGVzXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZ1bmNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy5mdW5jID0gZmllbGRzLmZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgaW52b2tlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9ICgwLCBjb25maWdfanNfMS5lbnN1cmVDb25maWcpKG9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5mdW5jKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZ1bmMoaW5wdXQsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxXaXRoQ29uZmlnKChpbnB1dCkgPT4gUHJvbWlzZS5yZXNvbHZlKGlucHV0KSwgaW5wdXQsIGNvbmZpZyk7XG4gICAgfVxuICAgIGFzeW5jICp0cmFuc2Zvcm0oZ2VuZXJhdG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9ICgwLCBjb25maWdfanNfMS5lbnN1cmVDb25maWcpKG9wdGlvbnMpO1xuICAgICAgICBsZXQgZmluYWxPdXRwdXQ7XG4gICAgICAgIGxldCBmaW5hbE91dHB1dFN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgdGhpcy5fdHJhbnNmb3JtU3RyZWFtV2l0aENvbmZpZyhnZW5lcmF0b3IsIChpbnB1dCkgPT4gaW5wdXQsIGNvbmZpZykpIHtcbiAgICAgICAgICAgIHlpZWxkIGNodW5rO1xuICAgICAgICAgICAgaWYgKGZpbmFsT3V0cHV0U3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbmFsT3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxPdXRwdXQgPSBjaHVuaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxPdXRwdXQgPSAoMCwgc3RyZWFtX2pzXzEuY29uY2F0KShmaW5hbE91dHB1dCwgY2h1bmspO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsT3V0cHV0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxPdXRwdXRTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mdW5jICYmIGZpbmFsT3V0cHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZnVuYyhmaW5hbE91dHB1dCwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIHJ1bm5hYmxlIHRoYXQgYXNzaWducyBrZXktdmFsdWUgcGFpcnMgdG8gdGhlIGlucHV0LlxuICAgICAqXG4gICAgICogVGhlIGV4YW1wbGUgYmVsb3cgc2hvd3MgaG93IHlvdSBjb3VsZCB1c2UgaXQgd2l0aCBhbiBpbmxpbmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBwcm9tcHQgPVxuICAgICAqICAgUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKGBXcml0ZSBhIFNRTCBxdWVyeSB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uIHVzaW5nIHRoZSBmb2xsb3dpbmcgc2NoZW1hOiB7c2NoZW1hfVxuICAgICAqIFF1ZXN0aW9uOiB7cXVlc3Rpb259XG4gICAgICogU1FMIFF1ZXJ5OmApO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBSdW5uYWJsZVBhc3N0aHJvdWdoLmFzc2lnbigpYCBpcyB1c2VkIGhlcmUgdG8gcGFzc3Rocm91Z2ggdGhlIGlucHV0IGZyb20gdGhlIGAuaW52b2tlKClgXG4gICAgICogLy8gY2FsbCAoaW4gdGhpcyBleGFtcGxlIGl0J3MgdGhlIHF1ZXN0aW9uKSwgYWxvbmcgd2l0aCBhbnkgaW5wdXRzIHBhc3NlZCB0byB0aGUgYC5hc3NpZ24oKWAgbWV0aG9kLlxuICAgICAqIC8vIEluIHRoaXMgY2FzZSwgd2UncmUgcGFzc2luZyB0aGUgc2NoZW1hLlxuICAgICAqIGNvbnN0IHNxbFF1ZXJ5R2VuZXJhdG9yQ2hhaW4gPSBSdW5uYWJsZVNlcXVlbmNlLmZyb20oW1xuICAgICAqICAgUnVubmFibGVQYXNzdGhyb3VnaC5hc3NpZ24oe1xuICAgICAqICAgICBzY2hlbWE6IGFzeW5jICgpID0+IGRiLmdldFRhYmxlSW5mbygpLFxuICAgICAqICAgfSksXG4gICAgICogICBwcm9tcHQsXG4gICAgICogICBuZXcgQ2hhdE9wZW5BSSh7IG1vZGVsOiBcImdwdC00by1taW5pXCIgfSkud2l0aENvbmZpZyh7IHN0b3A6IFtcIlxcblNRTFJlc3VsdDpcIl0gfSksXG4gICAgICogICBuZXcgU3RyaW5nT3V0cHV0UGFyc2VyKCksXG4gICAgICogXSk7XG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc3FsUXVlcnlHZW5lcmF0b3JDaGFpbi5pbnZva2Uoe1xuICAgICAqICAgcXVlc3Rpb246IFwiSG93IG1hbnkgZW1wbG95ZWVzIGFyZSB0aGVyZT9cIixcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXNzaWduKG1hcHBpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBiYXNlX2pzXzEuUnVubmFibGVBc3NpZ24obmV3IGJhc2VfanNfMS5SdW5uYWJsZU1hcCh7IHN0ZXBzOiBtYXBwaW5nIH0pKTtcbiAgICB9XG59XG5leHBvcnRzLlJ1bm5hYmxlUGFzc3Rocm91Z2ggPSBSdW5uYWJsZVBhc3N0aHJvdWdoO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/remote.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/remote.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoteRunnable = void 0;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst config_js_1 = __webpack_require__(/*! ./config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\nconst index_js_1 = __webpack_require__(/*! ../documents/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/documents/index.cjs\");\nconst prompt_values_js_1 = __webpack_require__(/*! ../prompt_values.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.cjs\");\nconst log_stream_js_1 = __webpack_require__(/*! ../tracers/log_stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.cjs\");\nconst index_js_2 = __webpack_require__(/*! ../messages/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.cjs\");\nconst outputs_js_1 = __webpack_require__(/*! ../outputs.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.cjs\");\nconst event_source_parse_js_1 = __webpack_require__(/*! ../utils/event_source_parse.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/event_source_parse.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nfunction isSuperset(set, subset) {\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction revive(obj) {\n    if (Array.isArray(obj))\n        return obj.map(revive);\n    if (typeof obj === \"object\") {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (!obj || obj instanceof Date) {\n            return obj;\n        }\n        const keysArr = Object.keys(obj);\n        const keys = new Set(keysArr);\n        if (isSuperset(keys, new Set([\"page_content\", \"metadata\"]))) {\n            return new index_js_1.Document({\n                pageContent: obj.page_content,\n                metadata: obj.metadata,\n            });\n        }\n        if (isSuperset(keys, new Set([\"content\", \"type\", \"additional_kwargs\"]))) {\n            if (obj.type === \"HumanMessage\" || obj.type === \"human\") {\n                return new index_js_2.HumanMessage({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"SystemMessage\" || obj.type === \"system\") {\n                return new index_js_2.SystemMessage({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"ChatMessage\" || obj.type === \"generic\") {\n                return new index_js_2.ChatMessage({\n                    content: obj.content,\n                    role: obj.role,\n                });\n            }\n            if (obj.type === \"FunctionMessage\" || obj.type === \"function\") {\n                return new index_js_2.FunctionMessage({\n                    content: obj.content,\n                    name: obj.name,\n                });\n            }\n            if (obj.type === \"ToolMessage\" || obj.type === \"tool\") {\n                return new index_js_2.ToolMessage({\n                    content: obj.content,\n                    tool_call_id: obj.tool_call_id,\n                    status: obj.status,\n                    artifact: obj.artifact,\n                });\n            }\n            if (obj.type === \"AIMessage\" || obj.type === \"ai\") {\n                return new index_js_2.AIMessage({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"HumanMessageChunk\") {\n                return new index_js_2.HumanMessageChunk({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"SystemMessageChunk\") {\n                return new index_js_2.SystemMessageChunk({\n                    content: obj.content,\n                });\n            }\n            if (obj.type === \"ChatMessageChunk\") {\n                return new index_js_2.ChatMessageChunk({\n                    content: obj.content,\n                    role: obj.role,\n                });\n            }\n            if (obj.type === \"FunctionMessageChunk\") {\n                return new index_js_2.FunctionMessageChunk({\n                    content: obj.content,\n                    name: obj.name,\n                });\n            }\n            if (obj.type === \"ToolMessageChunk\") {\n                return new index_js_2.ToolMessageChunk({\n                    content: obj.content,\n                    tool_call_id: obj.tool_call_id,\n                    status: obj.status,\n                    artifact: obj.artifact,\n                });\n            }\n            if (obj.type === \"AIMessageChunk\") {\n                return new index_js_2.AIMessageChunk({\n                    content: obj.content,\n                });\n            }\n        }\n        if (isSuperset(keys, new Set([\"text\", \"generation_info\", \"type\"]))) {\n            if (obj.type === \"ChatGenerationChunk\") {\n                return new outputs_js_1.ChatGenerationChunk({\n                    message: revive(obj.message),\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                });\n            }\n            else if (obj.type === \"ChatGeneration\") {\n                return {\n                    message: revive(obj.message),\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                };\n            }\n            else if (obj.type === \"GenerationChunk\") {\n                return new outputs_js_1.GenerationChunk({\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                });\n            }\n            else if (obj.type === \"Generation\") {\n                return {\n                    text: obj.text,\n                    generationInfo: obj.generation_info,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"tool\", \"tool_input\", \"log\", \"type\"]))) {\n            if (obj.type === \"AgentAction\") {\n                return {\n                    tool: obj.tool,\n                    toolInput: obj.tool_input,\n                    log: obj.log,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"return_values\", \"log\", \"type\"]))) {\n            if (obj.type === \"AgentFinish\") {\n                return {\n                    returnValues: obj.return_values,\n                    log: obj.log,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"generations\", \"run\", \"type\"]))) {\n            if (obj.type === \"LLMResult\") {\n                return {\n                    generations: revive(obj.generations),\n                    llmOutput: obj.llm_output,\n                    [outputs_js_1.RUN_KEY]: obj.run,\n                };\n            }\n        }\n        if (isSuperset(keys, new Set([\"messages\"]))) {\n            // TODO: Start checking for type: ChatPromptValue and ChatPromptValueConcrete\n            // when LangServe bug is fixed\n            return new prompt_values_js_1.ChatPromptValue({\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                messages: obj.messages.map((msg) => revive(msg)),\n            });\n        }\n        if (isSuperset(keys, new Set([\"text\"]))) {\n            // TODO: Start checking for type: StringPromptValue\n            // when LangServe bug is fixed\n            return new prompt_values_js_1.StringPromptValue(obj.text);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const innerRevive = (key) => [\n            key,\n            revive(obj[key]),\n        ];\n        const rtn = Object.fromEntries(keysArr.map(innerRevive));\n        return rtn;\n    }\n    return obj;\n}\nfunction deserialize(str) {\n    const obj = JSON.parse(str);\n    return revive(obj);\n}\nfunction removeCallbacksAndSignal(options) {\n    const rest = { ...options };\n    delete rest.callbacks;\n    delete rest.signal;\n    return rest;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction serialize(input) {\n    if (Array.isArray(input))\n        return input.map(serialize);\n    if ((0, index_js_2.isBaseMessage)(input)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const serializedMessage = {\n            content: input.content,\n            type: input._getType(),\n            additional_kwargs: input.additional_kwargs,\n            name: input.name,\n            example: false,\n        };\n        if (index_js_2.ToolMessage.isInstance(input)) {\n            serializedMessage.tool_call_id = input.tool_call_id;\n        }\n        else if (index_js_2.ChatMessage.isInstance(input)) {\n            serializedMessage.role = input.role;\n        }\n        return serializedMessage;\n    }\n    if (typeof input === \"object\") {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (!input || input instanceof Date) {\n            return input;\n        }\n        const keysArr = Object.keys(input);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const innerSerialize = (key) => [\n            key,\n            serialize(input[key]),\n        ];\n        const rtn = Object.fromEntries(keysArr.map(innerSerialize));\n        return rtn;\n    }\n    return input;\n}\n/**\n * Client for interacting with LangChain runnables\n * that are hosted as LangServe endpoints.\n *\n * Allows you to interact with hosted runnables using the standard\n * `.invoke()`, `.stream()`, `.streamEvents()`, etc. methods that\n * other runnables support.\n *\n * @deprecated LangServe is no longer actively developed - please consider using LangGraph Platform.\n *\n * @param url - The base URL of the LangServe endpoint.\n * @param options - Optional configuration for the remote runnable, including timeout and headers.\n * @param fetch - Optional custom fetch implementation.\n * @param fetchRequestOptions - Optional additional options for fetch requests.\n */\nclass RemoteRunnable extends base_js_1.Runnable {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"url\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // Wrap the default fetch call due to issues with illegal invocations\n        // from the browser:\n        // https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"fetchImplementation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (...args) => \n            // @ts-expect-error Broad typing to support a range of fetch implementations\n            fetch(...args)\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"fetchRequestOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"schema\", \"runnable\", \"remote\"]\n        });\n        const { url, options, fetch: fetchImplementation, fetchRequestOptions, } = fields;\n        this.url = url.replace(/\\/$/, \"\"); // remove trailing slash\n        this.options = options;\n        this.fetchImplementation = fetchImplementation ?? this.fetchImplementation;\n        this.fetchRequestOptions = fetchRequestOptions;\n    }\n    async post(path, body, signal) {\n        return this.fetchImplementation(`${this.url}${path}`, {\n            method: \"POST\",\n            body: JSON.stringify(serialize(body)),\n            signal: signal ?? AbortSignal.timeout(this.options?.timeout ?? 60000),\n            ...this.fetchRequestOptions,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this.fetchRequestOptions?.headers,\n                ...this.options?.headers,\n            },\n        });\n    }\n    async _invoke(input, options, _) {\n        const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n        const response = await this.post(\"/invoke\", {\n            input,\n            config: removeCallbacksAndSignal(config),\n            kwargs: kwargs ?? {},\n        }, config.signal);\n        if (!response.ok) {\n            throw new Error(`${response.status} Error: ${await response.text()}`);\n        }\n        return revive((await response.json()).output);\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke, input, options);\n    }\n    async _batch(inputs, options, _, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"returnExceptions is not supported for remote clients\");\n        }\n        const configsAndKwargsArray = options?.map((opts) => this._separateRunnableConfigFromCallOptions(opts));\n        const [configs, kwargs] = configsAndKwargsArray?.reduce(([pc, pk], [c, k]) => [\n            [...pc, c],\n            [...pk, k],\n        ], [[], []]) ?? [undefined, undefined];\n        const response = await this.post(\"/batch\", {\n            inputs,\n            config: (configs ?? [])\n                .map(removeCallbacksAndSignal)\n                .map((config) => ({ ...config, ...batchOptions })),\n            kwargs,\n        }, options?.[0]?.signal);\n        if (!response.ok) {\n            throw new Error(`${response.status} Error: ${await response.text()}`);\n        }\n        const body = await response.json();\n        if (!body.output)\n            throw new Error(\"Invalid response from remote runnable\");\n        return revive(body.output);\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw Error(\"returnExceptions is not supported for remote clients\");\n        }\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), (0, base_js_1._coerceToDict)(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n        delete config.runId;\n        let finalOutput;\n        let finalOutputSupported = true;\n        try {\n            const response = await this.post(\"/stream\", {\n                input,\n                config: removeCallbacksAndSignal(config),\n                kwargs,\n            }, config.signal);\n            if (!response.ok) {\n                const json = await response.json();\n                const error = new Error(`RemoteRunnable call failed with status code ${response.status}: ${json.message}`);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error.response = response;\n                throw error;\n            }\n            const { body } = response;\n            if (!body) {\n                throw new Error(\"Could not begin remote stream. Please check the given URL and try again.\");\n            }\n            const runnableStream = (0, event_source_parse_js_1.convertEventStreamToIterableReadableDataStream)(body);\n            for await (const chunk of runnableStream) {\n                const deserializedChunk = deserialize(chunk);\n                yield deserializedChunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = deserializedChunk;\n                    }\n                    else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0, stream_js_1.concat)(finalOutput, deserializedChunk);\n                        }\n                        catch {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        }\n        catch (err) {\n            await runManager?.handleChainError(err);\n            throw err;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {});\n    }\n    async *streamLog(input, options, streamOptions) {\n        const [config, kwargs] = this._separateRunnableConfigFromCallOptions(options);\n        const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), (0, base_js_1._coerceToDict)(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n        delete config.runId;\n        // The type is in camelCase but the API only accepts snake_case.\n        const camelCaseStreamOptions = {\n            include_names: streamOptions?.includeNames,\n            include_types: streamOptions?.includeTypes,\n            include_tags: streamOptions?.includeTags,\n            exclude_names: streamOptions?.excludeNames,\n            exclude_types: streamOptions?.excludeTypes,\n            exclude_tags: streamOptions?.excludeTags,\n        };\n        let runLog;\n        try {\n            const response = await this.post(\"/stream_log\", {\n                input,\n                config: removeCallbacksAndSignal(config),\n                kwargs,\n                ...camelCaseStreamOptions,\n                diff: false,\n            }, config.signal);\n            const { body, ok } = response;\n            if (!ok) {\n                throw new Error(`${response.status} Error: ${await response.text()}`);\n            }\n            if (!body) {\n                throw new Error(\"Could not begin remote stream log. Please check the given URL and try again.\");\n            }\n            const runnableStream = (0, event_source_parse_js_1.convertEventStreamToIterableReadableDataStream)(body);\n            for await (const log of runnableStream) {\n                const chunk = revive(JSON.parse(log));\n                const logPatch = new log_stream_js_1.RunLogPatch({ ops: chunk.ops });\n                yield logPatch;\n                if (runLog === undefined) {\n                    runLog = log_stream_js_1.RunLog.fromRunLogPatch(logPatch);\n                }\n                else {\n                    runLog = runLog.concat(logPatch);\n                }\n            }\n        }\n        catch (err) {\n            await runManager?.handleChainError(err);\n            throw err;\n        }\n        await runManager?.handleChainEnd(runLog?.state.final_output);\n    }\n    _streamEvents(input, options, streamOptions) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const outerThis = this;\n        const generator = async function* () {\n            const [config, kwargs] = outerThis._separateRunnableConfigFromCallOptions(options);\n            const callbackManager_ = await (0, config_js_1.getCallbackManagerForConfig)(options);\n            const runManager = await callbackManager_?.handleChainStart(outerThis.toJSON(), (0, base_js_1._coerceToDict)(input, \"input\"), config.runId, undefined, undefined, undefined, config.runName);\n            delete config.runId;\n            // The type is in camelCase but the API only accepts snake_case.\n            const camelCaseStreamOptions = {\n                include_names: streamOptions?.includeNames,\n                include_types: streamOptions?.includeTypes,\n                include_tags: streamOptions?.includeTags,\n                exclude_names: streamOptions?.excludeNames,\n                exclude_types: streamOptions?.excludeTypes,\n                exclude_tags: streamOptions?.excludeTags,\n            };\n            const events = [];\n            try {\n                const response = await outerThis.post(\"/stream_events\", {\n                    input,\n                    config: removeCallbacksAndSignal(config),\n                    kwargs,\n                    ...camelCaseStreamOptions,\n                    diff: false,\n                }, config.signal);\n                const { body, ok } = response;\n                if (!ok) {\n                    throw new Error(`${response.status} Error: ${await response.text()}`);\n                }\n                if (!body) {\n                    throw new Error(\"Could not begin remote stream events. Please check the given URL and try again.\");\n                }\n                const runnableStream = (0, event_source_parse_js_1.convertEventStreamToIterableReadableDataStream)(body);\n                for await (const log of runnableStream) {\n                    const chunk = revive(JSON.parse(log));\n                    const event = {\n                        event: chunk.event,\n                        name: chunk.name,\n                        run_id: chunk.run_id,\n                        tags: chunk.tags,\n                        metadata: chunk.metadata,\n                        data: chunk.data,\n                    };\n                    yield event;\n                    events.push(event);\n                }\n            }\n            catch (err) {\n                await runManager?.handleChainError(err);\n                throw err;\n            }\n            await runManager?.handleChainEnd(events);\n        };\n        return generator();\n    }\n    streamEvents(input, options, streamOptions) {\n        if (options.version !== \"v1\" && options.version !== \"v2\") {\n            throw new Error(`Only versions \"v1\" and \"v2\" of the events schema is currently supported.`);\n        }\n        if (options.encoding !== undefined) {\n            throw new Error(\"Special encodings are not supported for this runnable.\");\n        }\n        const eventStream = this._streamEvents(input, options, streamOptions);\n        return stream_js_1.IterableReadableStream.fromAsyncGenerator(eventStream);\n    }\n}\nexports.RemoteRunnable = RemoteRunnable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/remote.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/router.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/router.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RouterRunnable = void 0;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst config_js_1 = __webpack_require__(/*! ./config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n * @example\n * ```typescript\n * import { RouterRunnable, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const router = new RouterRunnable({\n *   runnables: {\n *     toUpperCase: RunnableLambda.from((text: string) => text.toUpperCase()),\n *     reverseText: RunnableLambda.from((text: string) =>\n *       text.split(\"\").reverse().join(\"\")\n *     ),\n *   },\n * });\n *\n * // Invoke the 'reverseText' runnable\n * const result1 = router.invoke({ key: \"reverseText\", input: \"Hello World\" });\n *\n * // \"dlroW olleH\"\n *\n * // Invoke the 'toUpperCase' runnable\n * const result2 = router.invoke({ key: \"toUpperCase\", input: \"Hello World\" });\n *\n * // \"HELLO WORLD\"\n * ```\n */\nclass RouterRunnable extends base_js_1.Runnable {\n    static lc_name() {\n        return \"RouterRunnable\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnables = fields.runnables;\n    }\n    async invoke(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.invoke(actualInput, (0, config_js_1.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const keys = inputs.map((input) => input.key);\n        const actualInputs = inputs.map((input) => input.input);\n        const missingKey = keys.find((key) => this.runnables[key] === undefined);\n        if (missingKey !== undefined) {\n            throw new Error(`One or more keys do not have a corresponding runnable.`);\n        }\n        const runnables = keys.map((key) => this.runnables[key]);\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = optionsList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const batchSize = maxConcurrency && maxConcurrency > 0 ? maxConcurrency : inputs.length;\n        const batchResults = [];\n        for (let i = 0; i < actualInputs.length; i += batchSize) {\n            const batchPromises = actualInputs\n                .slice(i, i + batchSize)\n                .map((actualInput, i) => runnables[i].invoke(actualInput, optionsList[i]));\n            const batchResult = await Promise.all(batchPromises);\n            batchResults.push(batchResult);\n        }\n        return batchResults.flat();\n    }\n    async stream(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.stream(actualInput, options);\n    }\n}\nexports.RouterRunnable = RouterRunnable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3JvdXRlci5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGtCQUFrQixtQkFBTyxDQUFDLGdGQUFZO0FBQ3RDLG9CQUFvQixtQkFBTyxDQUFDLG9GQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBLG1DQUFtQywwQ0FBMEM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMENBQTBDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0EsZ0VBQWdFLElBQUk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUJBQXlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBLGdFQUFnRSxJQUFJO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9ydW5uYWJsZXMvcm91dGVyLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUm91dGVyUnVubmFibGUgPSB2b2lkIDA7XG5jb25zdCBiYXNlX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlLmNqc1wiKTtcbmNvbnN0IGNvbmZpZ19qc18xID0gcmVxdWlyZShcIi4vY29uZmlnLmNqc1wiKTtcbi8qKlxuICogQSBydW5uYWJsZSB0aGF0IHJvdXRlcyB0byBhIHNldCBvZiBydW5uYWJsZXMgYmFzZWQgb24gSW5wdXRbJ2tleSddLlxuICogUmV0dXJucyB0aGUgb3V0cHV0IG9mIHRoZSBzZWxlY3RlZCBydW5uYWJsZS5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBSb3V0ZXJSdW5uYWJsZSwgUnVubmFibGVMYW1iZGEgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3J1bm5hYmxlc1wiO1xuICpcbiAqIGNvbnN0IHJvdXRlciA9IG5ldyBSb3V0ZXJSdW5uYWJsZSh7XG4gKiAgIHJ1bm5hYmxlczoge1xuICogICAgIHRvVXBwZXJDYXNlOiBSdW5uYWJsZUxhbWJkYS5mcm9tKCh0ZXh0OiBzdHJpbmcpID0+IHRleHQudG9VcHBlckNhc2UoKSksXG4gKiAgICAgcmV2ZXJzZVRleHQ6IFJ1bm5hYmxlTGFtYmRhLmZyb20oKHRleHQ6IHN0cmluZykgPT5cbiAqICAgICAgIHRleHQuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIilcbiAqICAgICApLFxuICogICB9LFxuICogfSk7XG4gKlxuICogLy8gSW52b2tlIHRoZSAncmV2ZXJzZVRleHQnIHJ1bm5hYmxlXG4gKiBjb25zdCByZXN1bHQxID0gcm91dGVyLmludm9rZSh7IGtleTogXCJyZXZlcnNlVGV4dFwiLCBpbnB1dDogXCJIZWxsbyBXb3JsZFwiIH0pO1xuICpcbiAqIC8vIFwiZGxyb1cgb2xsZUhcIlxuICpcbiAqIC8vIEludm9rZSB0aGUgJ3RvVXBwZXJDYXNlJyBydW5uYWJsZVxuICogY29uc3QgcmVzdWx0MiA9IHJvdXRlci5pbnZva2UoeyBrZXk6IFwidG9VcHBlckNhc2VcIiwgaW5wdXQ6IFwiSGVsbG8gV29ybGRcIiB9KTtcbiAqXG4gKiAvLyBcIkhFTExPIFdPUkxEXCJcbiAqIGBgYFxuICovXG5jbGFzcyBSb3V0ZXJSdW5uYWJsZSBleHRlbmRzIGJhc2VfanNfMS5SdW5uYWJsZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlJvdXRlclJ1bm5hYmxlXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwicnVubmFibGVzXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJ1bm5hYmxlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJ1bm5hYmxlcyA9IGZpZWxkcy5ydW5uYWJsZXM7XG4gICAgfVxuICAgIGFzeW5jIGludm9rZShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGtleSwgaW5wdXQ6IGFjdHVhbElucHV0IH0gPSBpbnB1dDtcbiAgICAgICAgY29uc3QgcnVubmFibGUgPSB0aGlzLnJ1bm5hYmxlc1trZXldO1xuICAgICAgICBpZiAocnVubmFibGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBydW5uYWJsZSBhc3NvY2lhdGVkIHdpdGgga2V5IFwiJHtrZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bm5hYmxlLmludm9rZShhY3R1YWxJbnB1dCwgKDAsIGNvbmZpZ19qc18xLmVuc3VyZUNvbmZpZykob3B0aW9ucykpO1xuICAgIH1cbiAgICBhc3luYyBiYXRjaChpbnB1dHMsIG9wdGlvbnMsIGJhdGNoT3B0aW9ucykge1xuICAgICAgICBjb25zdCBrZXlzID0gaW5wdXRzLm1hcCgoaW5wdXQpID0+IGlucHV0LmtleSk7XG4gICAgICAgIGNvbnN0IGFjdHVhbElucHV0cyA9IGlucHV0cy5tYXAoKGlucHV0KSA9PiBpbnB1dC5pbnB1dCk7XG4gICAgICAgIGNvbnN0IG1pc3NpbmdLZXkgPSBrZXlzLmZpbmQoKGtleSkgPT4gdGhpcy5ydW5uYWJsZXNba2V5XSA9PT0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1pc3NpbmdLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBPbmUgb3IgbW9yZSBrZXlzIGRvIG5vdCBoYXZlIGEgY29ycmVzcG9uZGluZyBydW5uYWJsZS5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBydW5uYWJsZXMgPSBrZXlzLm1hcCgoa2V5KSA9PiB0aGlzLnJ1bm5hYmxlc1trZXldKTtcbiAgICAgICAgY29uc3Qgb3B0aW9uc0xpc3QgPSB0aGlzLl9nZXRPcHRpb25zTGlzdChvcHRpb25zID8/IHt9LCBpbnB1dHMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbWF4Q29uY3VycmVuY3kgPSBvcHRpb25zTGlzdFswXT8ubWF4Q29uY3VycmVuY3kgPz8gYmF0Y2hPcHRpb25zPy5tYXhDb25jdXJyZW5jeTtcbiAgICAgICAgY29uc3QgYmF0Y2hTaXplID0gbWF4Q29uY3VycmVuY3kgJiYgbWF4Q29uY3VycmVuY3kgPiAwID8gbWF4Q29uY3VycmVuY3kgOiBpbnB1dHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBiYXRjaFJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3R1YWxJbnB1dHMubGVuZ3RoOyBpICs9IGJhdGNoU2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgYmF0Y2hQcm9taXNlcyA9IGFjdHVhbElucHV0c1xuICAgICAgICAgICAgICAgIC5zbGljZShpLCBpICsgYmF0Y2hTaXplKVxuICAgICAgICAgICAgICAgIC5tYXAoKGFjdHVhbElucHV0LCBpKSA9PiBydW5uYWJsZXNbaV0uaW52b2tlKGFjdHVhbElucHV0LCBvcHRpb25zTGlzdFtpXSkpO1xuICAgICAgICAgICAgY29uc3QgYmF0Y2hSZXN1bHQgPSBhd2FpdCBQcm9taXNlLmFsbChiYXRjaFByb21pc2VzKTtcbiAgICAgICAgICAgIGJhdGNoUmVzdWx0cy5wdXNoKGJhdGNoUmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmF0Y2hSZXN1bHRzLmZsYXQoKTtcbiAgICB9XG4gICAgYXN5bmMgc3RyZWFtKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsga2V5LCBpbnB1dDogYWN0dWFsSW5wdXQgfSA9IGlucHV0O1xuICAgICAgICBjb25zdCBydW5uYWJsZSA9IHRoaXMucnVubmFibGVzW2tleV07XG4gICAgICAgIGlmIChydW5uYWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHJ1bm5hYmxlIGFzc29jaWF0ZWQgd2l0aCBrZXkgXCIke2tleX1cIi5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnVubmFibGUuc3RyZWFtKGFjdHVhbElucHV0LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLlJvdXRlclJ1bm5hYmxlID0gUm91dGVyUnVubmFibGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/router.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/utils.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/utils.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._RootEventFilter = void 0;\nexports.isRunnableInterface = isRunnableInterface;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isRunnableInterface(thing) {\n    return thing ? thing.lc_runnable : false;\n}\n/**\n * Utility to filter the root event in the streamEvents implementation.\n * This is simply binding the arguments to the namespace to make save on\n * a bit of typing in the streamEvents implementation.\n *\n * TODO: Refactor and remove.\n */\nclass _RootEventFilter {\n    constructor(fields) {\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.includeNames = fields.includeNames;\n        this.includeTypes = fields.includeTypes;\n        this.includeTags = fields.includeTags;\n        this.excludeNames = fields.excludeNames;\n        this.excludeTypes = fields.excludeTypes;\n        this.excludeTags = fields.excludeTags;\n    }\n    includeEvent(event, rootType) {\n        let include = this.includeNames === undefined &&\n            this.includeTypes === undefined &&\n            this.includeTags === undefined;\n        const eventTags = event.tags ?? [];\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(event.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(rootType);\n        }\n        if (this.includeTags !== undefined) {\n            include =\n                include || eventTags.some((tag) => this.includeTags?.includes(tag));\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(event.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(rootType);\n        }\n        if (this.excludeTags !== undefined) {\n            include =\n                include && eventTags.every((tag) => !this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n}\nexports._RootEventFilter = _RootEventFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuX1Jvb3RFdmVudEZpbHRlciA9IHZvaWQgMDtcbmV4cG9ydHMuaXNSdW5uYWJsZUludGVyZmFjZSA9IGlzUnVubmFibGVJbnRlcmZhY2U7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gaXNSdW5uYWJsZUludGVyZmFjZSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyA/IHRoaW5nLmxjX3J1bm5hYmxlIDogZmFsc2U7XG59XG4vKipcbiAqIFV0aWxpdHkgdG8gZmlsdGVyIHRoZSByb290IGV2ZW50IGluIHRoZSBzdHJlYW1FdmVudHMgaW1wbGVtZW50YXRpb24uXG4gKiBUaGlzIGlzIHNpbXBseSBiaW5kaW5nIHRoZSBhcmd1bWVudHMgdG8gdGhlIG5hbWVzcGFjZSB0byBtYWtlIHNhdmUgb25cbiAqIGEgYml0IG9mIHR5cGluZyBpbiB0aGUgc3RyZWFtRXZlbnRzIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIFRPRE86IFJlZmFjdG9yIGFuZCByZW1vdmUuXG4gKi9cbmNsYXNzIF9Sb290RXZlbnRGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlTmFtZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZVR5cGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVUYWdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVOYW1lc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlVHlwZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZVRhZ3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbmNsdWRlTmFtZXMgPSBmaWVsZHMuaW5jbHVkZU5hbWVzO1xuICAgICAgICB0aGlzLmluY2x1ZGVUeXBlcyA9IGZpZWxkcy5pbmNsdWRlVHlwZXM7XG4gICAgICAgIHRoaXMuaW5jbHVkZVRhZ3MgPSBmaWVsZHMuaW5jbHVkZVRhZ3M7XG4gICAgICAgIHRoaXMuZXhjbHVkZU5hbWVzID0gZmllbGRzLmV4Y2x1ZGVOYW1lcztcbiAgICAgICAgdGhpcy5leGNsdWRlVHlwZXMgPSBmaWVsZHMuZXhjbHVkZVR5cGVzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVUYWdzID0gZmllbGRzLmV4Y2x1ZGVUYWdzO1xuICAgIH1cbiAgICBpbmNsdWRlRXZlbnQoZXZlbnQsIHJvb3RUeXBlKSB7XG4gICAgICAgIGxldCBpbmNsdWRlID0gdGhpcy5pbmNsdWRlTmFtZXMgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlVHlwZXMgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlVGFncyA9PT0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBldmVudFRhZ3MgPSBldmVudC50YWdzID8/IFtdO1xuICAgICAgICBpZiAodGhpcy5pbmNsdWRlTmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgfHwgdGhpcy5pbmNsdWRlTmFtZXMuaW5jbHVkZXMoZXZlbnQubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZVR5cGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlIHx8IHRoaXMuaW5jbHVkZVR5cGVzLmluY2x1ZGVzKHJvb3RUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmNsdWRlVGFncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID1cbiAgICAgICAgICAgICAgICBpbmNsdWRlIHx8IGV2ZW50VGFncy5zb21lKCh0YWcpID0+IHRoaXMuaW5jbHVkZVRhZ3M/LmluY2x1ZGVzKHRhZykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVOYW1lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSAmJiAhdGhpcy5leGNsdWRlTmFtZXMuaW5jbHVkZXMoZXZlbnQubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhjbHVkZVR5cGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlICYmICF0aGlzLmV4Y2x1ZGVUeXBlcy5pbmNsdWRlcyhyb290VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhjbHVkZVRhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9XG4gICAgICAgICAgICAgICAgaW5jbHVkZSAmJiBldmVudFRhZ3MuZXZlcnkoKHRhZykgPT4gIXRoaXMuZXhjbHVkZVRhZ3M/LmluY2x1ZGVzKHRhZykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmNsdWRlO1xuICAgIH1cbn1cbmV4cG9ydHMuX1Jvb3RFdmVudEZpbHRlciA9IF9Sb290RXZlbnRGaWx0ZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/utils.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/wrappers.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.convertToHttpEventStream = convertToHttpEventStream;\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nfunction convertToHttpEventStream(stream) {\n    const encoder = new TextEncoder();\n    const finalStream = new ReadableStream({\n        async start(controller) {\n            for await (const chunk of stream) {\n                controller.enqueue(encoder.encode(`event: data\\ndata: ${JSON.stringify(chunk)}\\n\\n`));\n            }\n            controller.enqueue(encoder.encode(\"event: end\\n\\n\"));\n            controller.close();\n        },\n    });\n    return stream_js_1.IterableReadableStream.fromReadableStream(finalStream);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3dyYXBwZXJzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMsb0JBQW9CLG1CQUFPLENBQUMsdUZBQXFCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0Usc0JBQXNCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3dyYXBwZXJzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29udmVydFRvSHR0cEV2ZW50U3RyZWFtID0gY29udmVydFRvSHR0cEV2ZW50U3RyZWFtO1xuY29uc3Qgc3RyZWFtX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvc3RyZWFtLmNqc1wiKTtcbmZ1bmN0aW9uIGNvbnZlcnRUb0h0dHBFdmVudFN0cmVhbShzdHJlYW0pIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgY29uc3QgZmluYWxTdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICBhc3luYyBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShlbmNvZGVyLmVuY29kZShgZXZlbnQ6IGRhdGFcXG5kYXRhOiAke0pTT04uc3RyaW5naWZ5KGNodW5rKX1cXG5cXG5gKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZW5jb2Rlci5lbmNvZGUoXCJldmVudDogZW5kXFxuXFxuXCIpKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gc3RyZWFtX2pzXzEuSXRlcmFibGVSZWFkYWJsZVN0cmVhbS5mcm9tUmVhZGFibGVTdHJlYW0oZmluYWxTdHJlYW0pO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.cjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/context.cjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.registerConfigureHook = exports._getConfigureHooks = void 0;\nexports.setContextVariable = setContextVariable;\nexports.getContextVariable = getContextVariable;\nconst run_trees_1 = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.cjs\");\nconst globals_js_1 = __webpack_require__(/*! ./globals.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.cjs\");\n/**\n * Set a context variable. Context variables are scoped to any\n * child runnables called by the current runnable, or globally if set outside\n * of any runnable.\n *\n * @remarks\n * This function is only supported in environments that support AsyncLocalStorage,\n * including Node.js, Deno, and Cloudflare Workers.\n *\n * @example\n * ```ts\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n * import {\n *   getContextVariable,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const nested = RunnableLambda.from(() => {\n *   // \"bar\" because it was set by a parent\n *   console.log(getContextVariable(\"foo\"));\n *\n *   // Override to \"baz\", but only for child runnables\n *   setContextVariable(\"foo\", \"baz\");\n *\n *   // Now \"baz\", but only for child runnables\n *   return getContextVariable(\"foo\");\n * });\n *\n * const runnable = RunnableLambda.from(async () => {\n *   // Set a context variable named \"foo\"\n *   setContextVariable(\"foo\", \"bar\");\n *\n *   const res = await nested.invoke({});\n *\n *   // Still \"bar\" since child changes do not affect parents\n *   console.log(getContextVariable(\"foo\"));\n *\n *   return res;\n * });\n *\n * // undefined, because context variable has not been set yet\n * console.log(getContextVariable(\"foo\"));\n *\n * // Final return value is \"baz\"\n * const result = await runnable.invoke({});\n * ```\n *\n * @param name The name of the context variable.\n * @param value The value to set.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setContextVariable(name, value) {\n    // Avoid using global singleton due to circuluar dependency issues\n    const asyncLocalStorageInstance = (0, globals_js_1.getGlobalAsyncLocalStorageInstance)();\n    if (asyncLocalStorageInstance === undefined) {\n        throw new Error(`Internal error: Global shared async local storage instance has not been initialized.`);\n    }\n    const runTree = asyncLocalStorageInstance.getStore();\n    const contextVars = { ...runTree?.[globals_js_1._CONTEXT_VARIABLES_KEY] };\n    contextVars[name] = value;\n    let newValue = {};\n    if ((0, run_trees_1.isRunTree)(runTree)) {\n        newValue = new run_trees_1.RunTree(runTree);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newValue[globals_js_1._CONTEXT_VARIABLES_KEY] = contextVars;\n    asyncLocalStorageInstance.enterWith(newValue);\n}\n/**\n * Get the value of a previously set context variable. Context variables\n * are scoped to any child runnables called by the current runnable,\n * or globally if set outside of any runnable.\n *\n * @remarks\n * This function is only supported in environments that support AsyncLocalStorage,\n * including Node.js, Deno, and Cloudflare Workers.\n *\n * @example\n * ```ts\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n * import {\n *   getContextVariable,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const nested = RunnableLambda.from(() => {\n *   // \"bar\" because it was set by a parent\n *   console.log(getContextVariable(\"foo\"));\n *\n *   // Override to \"baz\", but only for child runnables\n *   setContextVariable(\"foo\", \"baz\");\n *\n *   // Now \"baz\", but only for child runnables\n *   return getContextVariable(\"foo\");\n * });\n *\n * const runnable = RunnableLambda.from(async () => {\n *   // Set a context variable named \"foo\"\n *   setContextVariable(\"foo\", \"bar\");\n *\n *   const res = await nested.invoke({});\n *\n *   // Still \"bar\" since child changes do not affect parents\n *   console.log(getContextVariable(\"foo\"));\n *\n *   return res;\n * });\n *\n * // undefined, because context variable has not been set yet\n * console.log(getContextVariable(\"foo\"));\n *\n * // Final return value is \"baz\"\n * const result = await runnable.invoke({});\n * ```\n *\n * @param name The name of the context variable.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getContextVariable(name) {\n    // Avoid using global singleton due to circuluar dependency issues\n    const asyncLocalStorageInstance = (0, globals_js_1.getGlobalAsyncLocalStorageInstance)();\n    if (asyncLocalStorageInstance === undefined) {\n        return undefined;\n    }\n    const runTree = asyncLocalStorageInstance.getStore();\n    return runTree?.[globals_js_1._CONTEXT_VARIABLES_KEY]?.[name];\n}\nconst LC_CONFIGURE_HOOKS_KEY = Symbol(\"lc:configure_hooks\");\nconst _getConfigureHooks = () => getContextVariable(LC_CONFIGURE_HOOKS_KEY) || [];\nexports._getConfigureHooks = _getConfigureHooks;\n/**\n * Register a callback configure hook to automatically add callback handlers to all runs.\n *\n * There are two ways to use this:\n *\n * 1. Using a context variable:\n *    - Set `contextVar` to specify the variable name\n *    - Use `setContextVariable()` to store your handler instance\n *\n * 2. Using an environment variable:\n *    - Set both `envVar` and `handlerClass`\n *    - The handler will be instantiated when the env var is set to \"true\".\n *\n * @example\n * ```typescript\n * // Method 1: Using context variable\n * import {\n *   registerConfigureHook,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const tracer = new MyCallbackHandler();\n * registerConfigureHook({\n *   contextVar: \"my_tracer\",\n * });\n * setContextVariable(\"my_tracer\", tracer);\n *\n * // ...run code here\n *\n * // Method 2: Using environment variable\n * registerConfigureHook({\n *   handlerClass: MyCallbackHandler,\n *   envVar: \"MY_TRACER_ENABLED\",\n * });\n * process.env.MY_TRACER_ENABLED = \"true\";\n *\n * // ...run code here\n * ```\n *\n * @param config Configuration object for the hook\n * @param config.contextVar Name of the context variable containing the handler instance\n * @param config.inheritable Whether child runs should inherit this handler\n * @param config.handlerClass Optional callback handler class (required if using envVar)\n * @param config.envVar Optional environment variable name to control handler activation\n */\nconst registerConfigureHook = (config) => {\n    if (config.envVar && !config.handlerClass) {\n        throw new Error(\"If envVar is set, handlerClass must also be set to a non-None value.\");\n    }\n    setContextVariable(LC_CONFIGURE_HOOKS_KEY, [...(0, exports._getConfigureHooks)(), config]);\n};\nexports.registerConfigureHook = registerConfigureHook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.cjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.cjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getGlobalAsyncLocalStorageInstance = exports.setGlobalAsyncLocalStorageInstance = exports._CONTEXT_VARIABLES_KEY = exports.TRACING_ALS_KEY = void 0;\nexports.TRACING_ALS_KEY = Symbol.for(\"ls:tracing_async_local_storage\");\nexports._CONTEXT_VARIABLES_KEY = Symbol.for(\"lc:context_variables\");\nconst setGlobalAsyncLocalStorageInstance = (instance) => {\n    globalThis[exports.TRACING_ALS_KEY] = instance;\n};\nexports.setGlobalAsyncLocalStorageInstance = setGlobalAsyncLocalStorageInstance;\nconst getGlobalAsyncLocalStorageInstance = () => {\n    return globalThis[exports.TRACING_ALS_KEY];\n};\nexports.getGlobalAsyncLocalStorageInstance = getGlobalAsyncLocalStorageInstance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9hc3luY19sb2NhbF9zdG9yYWdlL2dsb2JhbHMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBDQUEwQyxHQUFHLDBDQUEwQyxHQUFHLDhCQUE4QixHQUFHLHVCQUF1QjtBQUNsSix1QkFBdUI7QUFDdkIsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvYXN5bmNfbG9jYWxfc3RvcmFnZS9nbG9iYWxzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9IGV4cG9ydHMuc2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9IGV4cG9ydHMuX0NPTlRFWFRfVkFSSUFCTEVTX0tFWSA9IGV4cG9ydHMuVFJBQ0lOR19BTFNfS0VZID0gdm9pZCAwO1xuZXhwb3J0cy5UUkFDSU5HX0FMU19LRVkgPSBTeW1ib2wuZm9yKFwibHM6dHJhY2luZ19hc3luY19sb2NhbF9zdG9yYWdlXCIpO1xuZXhwb3J0cy5fQ09OVEVYVF9WQVJJQUJMRVNfS0VZID0gU3ltYm9sLmZvcihcImxjOmNvbnRleHRfdmFyaWFibGVzXCIpO1xuY29uc3Qgc2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9IChpbnN0YW5jZSkgPT4ge1xuICAgIGdsb2JhbFRoaXNbZXhwb3J0cy5UUkFDSU5HX0FMU19LRVldID0gaW5zdGFuY2U7XG59O1xuZXhwb3J0cy5zZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlID0gc2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZTtcbmNvbnN0IGdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGdsb2JhbFRoaXNbZXhwb3J0cy5UUkFDSU5HX0FMU19LRVldO1xufTtcbmV4cG9ydHMuZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9IGdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.cjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/index.cjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncLocalStorageProviderSingleton = exports.MockAsyncLocalStorage = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst langsmith_1 = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.cjs\");\nconst globals_js_1 = __webpack_require__(/*! ./globals.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.cjs\");\nconst manager_js_1 = __webpack_require__(/*! ../../callbacks/manager.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\");\nclass MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        return callback();\n    }\n    enterWith(_store) {\n        return undefined;\n    }\n}\nexports.MockAsyncLocalStorage = MockAsyncLocalStorage;\nconst mockAsyncLocalStorage = new MockAsyncLocalStorage();\nconst LC_CHILD_KEY = Symbol.for(\"lc:child_config\");\nclass AsyncLocalStorageProvider {\n    getInstance() {\n        return (0, globals_js_1.getGlobalAsyncLocalStorageInstance)() ?? mockAsyncLocalStorage;\n    }\n    getRunnableConfig() {\n        const storage = this.getInstance();\n        // this has the runnable config\n        // which means that we should also have an instance of a LangChainTracer\n        // with the run map prepopulated\n        return storage.getStore()?.extra?.[LC_CHILD_KEY];\n    }\n    runWithConfig(config, callback, avoidCreatingRootRunTree) {\n        const callbackManager = manager_js_1.CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n        const storage = this.getInstance();\n        const previousValue = storage.getStore();\n        const parentRunId = callbackManager?.getParentRunId();\n        const langChainTracer = callbackManager?.handlers?.find((handler) => handler?.name === \"langchain_tracer\");\n        let runTree;\n        if (langChainTracer && parentRunId) {\n            runTree = langChainTracer.getRunTreeWithTracingConfig(parentRunId);\n        }\n        else if (!avoidCreatingRootRunTree) {\n            runTree = new langsmith_1.RunTree({\n                name: \"<runnable_lambda>\",\n                tracingEnabled: false,\n            });\n        }\n        if (runTree) {\n            runTree.extra = { ...runTree.extra, [LC_CHILD_KEY]: config };\n        }\n        if (previousValue !== undefined &&\n            previousValue[globals_js_1._CONTEXT_VARIABLES_KEY] !== undefined) {\n            if (runTree === undefined) {\n                runTree = {};\n            }\n            runTree[globals_js_1._CONTEXT_VARIABLES_KEY] =\n                previousValue[globals_js_1._CONTEXT_VARIABLES_KEY];\n        }\n        return storage.run(runTree, callback);\n    }\n    initializeGlobalInstance(instance) {\n        if ((0, globals_js_1.getGlobalAsyncLocalStorageInstance)() === undefined) {\n            (0, globals_js_1.setGlobalAsyncLocalStorageInstance)(instance);\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\nexports.AsyncLocalStorageProviderSingleton = AsyncLocalStorageProviderSingleton;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9hc3luY19sb2NhbF9zdG9yYWdlL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQ0FBMEMsR0FBRyw2QkFBNkI7QUFDMUU7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQywyREFBVztBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQywyR0FBZTtBQUM1QyxxQkFBcUIsbUJBQU8sQ0FBQyxvR0FBNkI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvYXN5bmNfbG9jYWxfc3RvcmFnZS9pbmRleC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24gPSBleHBvcnRzLk1vY2tBc3luY0xvY2FsU3RvcmFnZSA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmNvbnN0IGxhbmdzbWl0aF8xID0gcmVxdWlyZShcImxhbmdzbWl0aFwiKTtcbmNvbnN0IGdsb2JhbHNfanNfMSA9IHJlcXVpcmUoXCIuL2dsb2JhbHMuY2pzXCIpO1xuY29uc3QgbWFuYWdlcl9qc18xID0gcmVxdWlyZShcIi4uLy4uL2NhbGxiYWNrcy9tYW5hZ2VyLmNqc1wiKTtcbmNsYXNzIE1vY2tBc3luY0xvY2FsU3RvcmFnZSB7XG4gICAgZ2V0U3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJ1bihfc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBlbnRlcldpdGgoX3N0b3JlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Nb2NrQXN5bmNMb2NhbFN0b3JhZ2UgPSBNb2NrQXN5bmNMb2NhbFN0b3JhZ2U7XG5jb25zdCBtb2NrQXN5bmNMb2NhbFN0b3JhZ2UgPSBuZXcgTW9ja0FzeW5jTG9jYWxTdG9yYWdlKCk7XG5jb25zdCBMQ19DSElMRF9LRVkgPSBTeW1ib2wuZm9yKFwibGM6Y2hpbGRfY29uZmlnXCIpO1xuY2xhc3MgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlciB7XG4gICAgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiAoMCwgZ2xvYmFsc19qc18xLmdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UpKCkgPz8gbW9ja0FzeW5jTG9jYWxTdG9yYWdlO1xuICAgIH1cbiAgICBnZXRSdW5uYWJsZUNvbmZpZygpIHtcbiAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgLy8gdGhpcyBoYXMgdGhlIHJ1bm5hYmxlIGNvbmZpZ1xuICAgICAgICAvLyB3aGljaCBtZWFucyB0aGF0IHdlIHNob3VsZCBhbHNvIGhhdmUgYW4gaW5zdGFuY2Ugb2YgYSBMYW5nQ2hhaW5UcmFjZXJcbiAgICAgICAgLy8gd2l0aCB0aGUgcnVuIG1hcCBwcmVwb3B1bGF0ZWRcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UuZ2V0U3RvcmUoKT8uZXh0cmE/LltMQ19DSElMRF9LRVldO1xuICAgIH1cbiAgICBydW5XaXRoQ29uZmlnKGNvbmZpZywgY2FsbGJhY2ssIGF2b2lkQ3JlYXRpbmdSb290UnVuVHJlZSkge1xuICAgICAgICBjb25zdCBjYWxsYmFja01hbmFnZXIgPSBtYW5hZ2VyX2pzXzEuQ2FsbGJhY2tNYW5hZ2VyLl9jb25maWd1cmVTeW5jKGNvbmZpZz8uY2FsbGJhY2tzLCB1bmRlZmluZWQsIGNvbmZpZz8udGFncywgdW5kZWZpbmVkLCBjb25maWc/Lm1ldGFkYXRhKTtcbiAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHN0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICAgICAgY29uc3QgcGFyZW50UnVuSWQgPSBjYWxsYmFja01hbmFnZXI/LmdldFBhcmVudFJ1bklkKCk7XG4gICAgICAgIGNvbnN0IGxhbmdDaGFpblRyYWNlciA9IGNhbGxiYWNrTWFuYWdlcj8uaGFuZGxlcnM/LmZpbmQoKGhhbmRsZXIpID0+IGhhbmRsZXI/Lm5hbWUgPT09IFwibGFuZ2NoYWluX3RyYWNlclwiKTtcbiAgICAgICAgbGV0IHJ1blRyZWU7XG4gICAgICAgIGlmIChsYW5nQ2hhaW5UcmFjZXIgJiYgcGFyZW50UnVuSWQpIHtcbiAgICAgICAgICAgIHJ1blRyZWUgPSBsYW5nQ2hhaW5UcmFjZXIuZ2V0UnVuVHJlZVdpdGhUcmFjaW5nQ29uZmlnKHBhcmVudFJ1bklkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghYXZvaWRDcmVhdGluZ1Jvb3RSdW5UcmVlKSB7XG4gICAgICAgICAgICBydW5UcmVlID0gbmV3IGxhbmdzbWl0aF8xLlJ1blRyZWUoe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiPHJ1bm5hYmxlX2xhbWJkYT5cIixcbiAgICAgICAgICAgICAgICB0cmFjaW5nRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVuVHJlZSkge1xuICAgICAgICAgICAgcnVuVHJlZS5leHRyYSA9IHsgLi4ucnVuVHJlZS5leHRyYSwgW0xDX0NISUxEX0tFWV06IGNvbmZpZyB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2aW91c1ZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWVbZ2xvYmFsc19qc18xLl9DT05URVhUX1ZBUklBQkxFU19LRVldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChydW5UcmVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBydW5UcmVlID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5UcmVlW2dsb2JhbHNfanNfMS5fQ09OVEVYVF9WQVJJQUJMRVNfS0VZXSA9XG4gICAgICAgICAgICAgICAgcHJldmlvdXNWYWx1ZVtnbG9iYWxzX2pzXzEuX0NPTlRFWFRfVkFSSUFCTEVTX0tFWV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UucnVuKHJ1blRyZWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZUdsb2JhbEluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgICAgIGlmICgoMCwgZ2xvYmFsc19qc18xLmdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UpKCkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgKDAsIGdsb2JhbHNfanNfMS5zZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlKShpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXIoKTtcbmV4cG9ydHMuQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiA9IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b247XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/callbacks.cjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getQueue = getQueue;\nexports.consumeCallback = consumeCallback;\nexports.awaitAllCallbacks = awaitAllCallbacks;\nconst p_queue_1 = __importDefault(__webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\"));\nconst globals_js_1 = __webpack_require__(/*! ./async_local_storage/globals.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.cjs\");\nconst tracer_js_1 = __webpack_require__(/*! ./tracer.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.cjs\");\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */\nfunction createQueue() {\n    const PQueue = \"default\" in p_queue_1.default ? p_queue_1.default.default : p_queue_1.default;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1,\n    });\n}\nfunction getQueue() {\n    if (typeof queue === \"undefined\") {\n        queue = createQueue();\n    }\n    return queue;\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promiseFn Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */\nasync function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        // Clear config since callbacks are not part of the root run\n        // Avoid using global singleton due to circuluar dependency issues\n        const asyncLocalStorageInstance = (0, globals_js_1.getGlobalAsyncLocalStorageInstance)();\n        if (asyncLocalStorageInstance !== undefined) {\n            await asyncLocalStorageInstance.run(undefined, async () => promiseFn());\n        }\n        else {\n            await promiseFn();\n        }\n    }\n    else {\n        queue = getQueue();\n        void queue.add(async () => {\n            const asyncLocalStorageInstance = (0, globals_js_1.getGlobalAsyncLocalStorageInstance)();\n            if (asyncLocalStorageInstance !== undefined) {\n                await asyncLocalStorageInstance.run(undefined, async () => promiseFn());\n            }\n            else {\n                await promiseFn();\n            }\n        });\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */\nasync function awaitAllCallbacks() {\n    const defaultClient = (0, tracer_js_1.getDefaultLangChainClientSingleton)();\n    await Promise.allSettled([\n        typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve(),\n        defaultClient.awaitPendingTraceBatches(),\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9jYWxsYmFja3MuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsdUJBQXVCO0FBQ3ZCLHlCQUF5QjtBQUN6QixrQ0FBa0MsbUJBQU8sQ0FBQywyREFBUztBQUNuRCxxQkFBcUIsbUJBQU8sQ0FBQywrSEFBbUM7QUFDaEUsb0JBQW9CLG1CQUFPLENBQUMscUZBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9jYWxsYmFja3MuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRRdWV1ZSA9IGdldFF1ZXVlO1xuZXhwb3J0cy5jb25zdW1lQ2FsbGJhY2sgPSBjb25zdW1lQ2FsbGJhY2s7XG5leHBvcnRzLmF3YWl0QWxsQ2FsbGJhY2tzID0gYXdhaXRBbGxDYWxsYmFja3M7XG5jb25zdCBwX3F1ZXVlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInAtcXVldWVcIikpO1xuY29uc3QgZ2xvYmFsc19qc18xID0gcmVxdWlyZShcIi4vYXN5bmNfbG9jYWxfc3RvcmFnZS9nbG9iYWxzLmNqc1wiKTtcbmNvbnN0IHRyYWNlcl9qc18xID0gcmVxdWlyZShcIi4vdHJhY2VyLmNqc1wiKTtcbmxldCBxdWV1ZTtcbi8qKlxuICogQ3JlYXRlcyBhIHF1ZXVlIHVzaW5nIHRoZSBwLXF1ZXVlIGxpYnJhcnkuIFRoZSBxdWV1ZSBpcyBjb25maWd1cmVkIHRvXG4gKiBhdXRvLXN0YXJ0IGFuZCBoYXMgYSBjb25jdXJyZW5jeSBvZiAxLCBtZWFuaW5nIGl0IHdpbGwgcHJvY2VzcyB0YXNrc1xuICogb25lIGF0IGEgdGltZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUXVldWUoKSB7XG4gICAgY29uc3QgUFF1ZXVlID0gXCJkZWZhdWx0XCIgaW4gcF9xdWV1ZV8xLmRlZmF1bHQgPyBwX3F1ZXVlXzEuZGVmYXVsdC5kZWZhdWx0IDogcF9xdWV1ZV8xLmRlZmF1bHQ7XG4gICAgcmV0dXJuIG5ldyBQUXVldWUoe1xuICAgICAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0UXVldWUoKSB7XG4gICAgaWYgKHR5cGVvZiBxdWV1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBxdWV1ZSA9IGNyZWF0ZVF1ZXVlKCk7XG4gICAgfVxuICAgIHJldHVybiBxdWV1ZTtcbn1cbi8qKlxuICogQ29uc3VtZSBhIHByb21pc2UsIGVpdGhlciBhZGRpbmcgaXQgdG8gdGhlIHF1ZXVlIG9yIHdhaXRpbmcgZm9yIGl0IHRvIHJlc29sdmVcbiAqIEBwYXJhbSBwcm9taXNlRm4gUHJvbWlzZSB0byBjb25zdW1lXG4gKiBAcGFyYW0gd2FpdCBXaGV0aGVyIHRvIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgb3IgcmVzb2x2ZSBpbW1lZGlhdGVseVxuICovXG5hc3luYyBmdW5jdGlvbiBjb25zdW1lQ2FsbGJhY2socHJvbWlzZUZuLCB3YWl0KSB7XG4gICAgaWYgKHdhaXQgPT09IHRydWUpIHtcbiAgICAgICAgLy8gQ2xlYXIgY29uZmlnIHNpbmNlIGNhbGxiYWNrcyBhcmUgbm90IHBhcnQgb2YgdGhlIHJvb3QgcnVuXG4gICAgICAgIC8vIEF2b2lkIHVzaW5nIGdsb2JhbCBzaW5nbGV0b24gZHVlIHRvIGNpcmN1bHVhciBkZXBlbmRlbmN5IGlzc3Vlc1xuICAgICAgICBjb25zdCBhc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlID0gKDAsIGdsb2JhbHNfanNfMS5nZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlKSgpO1xuICAgICAgICBpZiAoYXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhd2FpdCBhc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlLnJ1bih1bmRlZmluZWQsIGFzeW5jICgpID0+IHByb21pc2VGbigpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHByb21pc2VGbigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBxdWV1ZSA9IGdldFF1ZXVlKCk7XG4gICAgICAgIHZvaWQgcXVldWUuYWRkKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UgPSAoMCwgZ2xvYmFsc19qc18xLmdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UpKCk7XG4gICAgICAgICAgICBpZiAoYXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZS5ydW4odW5kZWZpbmVkLCBhc3luYyAoKSA9PiBwcm9taXNlRm4oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlRm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBXYWl0cyBmb3IgYWxsIHByb21pc2VzIGluIHRoZSBxdWV1ZSB0byByZXNvbHZlLiBJZiB0aGUgcXVldWUgaXNcbiAqIHVuZGVmaW5lZCwgaXQgaW1tZWRpYXRlbHkgcmVzb2x2ZXMgYSBwcm9taXNlLlxuICovXG5hc3luYyBmdW5jdGlvbiBhd2FpdEFsbENhbGxiYWNrcygpIHtcbiAgICBjb25zdCBkZWZhdWx0Q2xpZW50ID0gKDAsIHRyYWNlcl9qc18xLmdldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24pKCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFtcbiAgICAgICAgdHlwZW9mIHF1ZXVlICE9PSBcInVuZGVmaW5lZFwiID8gcXVldWUub25JZGxlKCkgOiBQcm9taXNlLnJlc29sdmUoKSxcbiAgICAgICAgZGVmYXVsdENsaWVudC5hd2FpdFBlbmRpbmdUcmFjZUJhdGNoZXMoKSxcbiAgICBdKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/index.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/index.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._CONTEXT_VARIABLES_KEY = exports.MockAsyncLocalStorage = exports.AsyncLocalStorageProviderSingleton = void 0;\nconst index_js_1 = __webpack_require__(/*! ./async_local_storage/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.cjs\");\nObject.defineProperty(exports, \"AsyncLocalStorageProviderSingleton\", ({ enumerable: true, get: function () { return index_js_1.AsyncLocalStorageProviderSingleton; } }));\nObject.defineProperty(exports, \"MockAsyncLocalStorage\", ({ enumerable: true, get: function () { return index_js_1.MockAsyncLocalStorage; } }));\nconst globals_js_1 = __webpack_require__(/*! ./async_local_storage/globals.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.cjs\");\nObject.defineProperty(exports, \"_CONTEXT_VARIABLES_KEY\", ({ enumerable: true, get: function () { return globals_js_1._CONTEXT_VARIABLES_KEY; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsNkJBQTZCLEdBQUcsMENBQTBDO0FBQzNHLG1CQUFtQixtQkFBTyxDQUFDLDJIQUFpQztBQUM1RCxzRUFBcUUsRUFBRSxxQ0FBcUMseURBQXlELEVBQUM7QUFDdEsseURBQXdELEVBQUUscUNBQXFDLDRDQUE0QyxFQUFDO0FBQzVJLHFCQUFxQixtQkFBTyxDQUFDLCtIQUFtQztBQUNoRSwwREFBeUQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5fQ09OVEVYVF9WQVJJQUJMRVNfS0VZID0gZXhwb3J0cy5Nb2NrQXN5bmNMb2NhbFN0b3JhZ2UgPSBleHBvcnRzLkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24gPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4vYXN5bmNfbG9jYWxfc3RvcmFnZS9pbmRleC5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18xLkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb2NrQXN5bmNMb2NhbFN0b3JhZ2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzEuTW9ja0FzeW5jTG9jYWxTdG9yYWdlOyB9IH0pO1xuY29uc3QgZ2xvYmFsc19qc18xID0gcmVxdWlyZShcIi4vYXN5bmNfbG9jYWxfc3RvcmFnZS9nbG9iYWxzLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9DT05URVhUX1ZBUklBQkxFU19LRVlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdsb2JhbHNfanNfMS5fQ09OVEVYVF9WQVJJQUJMRVNfS0VZOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/tracer.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setDefaultLangChainClientSingleton = exports.getDefaultLangChainClientSingleton = void 0;\nconst langsmith_1 = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.cjs\");\nconst env_js_1 = __webpack_require__(/*! ../utils/env.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs\");\nlet client;\nconst getDefaultLangChainClientSingleton = () => {\n    if (client === undefined) {\n        const clientParams = (0, env_js_1.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") === \"false\"\n            ? {\n                // LangSmith has its own backgrounding system\n                blockOnRootRunFinalization: true,\n            }\n            : {};\n        client = new langsmith_1.Client(clientParams);\n    }\n    return client;\n};\nexports.getDefaultLangChainClientSingleton = getDefaultLangChainClientSingleton;\nconst setDefaultLangChainClientSingleton = (newClient) => {\n    client = newClient;\n};\nexports.setDefaultLangChainClientSingleton = setDefaultLangChainClientSingleton;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy90cmFjZXIuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBDQUEwQyxHQUFHLDBDQUEwQztBQUN2RixvQkFBb0IsbUJBQU8sQ0FBQywyREFBVztBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQyxpRkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsMENBQTBDIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL3RyYWNlci5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24gPSBleHBvcnRzLmdldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24gPSB2b2lkIDA7XG5jb25zdCBsYW5nc21pdGhfMSA9IHJlcXVpcmUoXCJsYW5nc21pdGhcIik7XG5jb25zdCBlbnZfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9lbnYuY2pzXCIpO1xubGV0IGNsaWVudDtcbmNvbnN0IGdldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24gPSAoKSA9PiB7XG4gICAgaWYgKGNsaWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudFBhcmFtcyA9ICgwLCBlbnZfanNfMS5nZXRFbnZpcm9ubWVudFZhcmlhYmxlKShcIkxBTkdDSEFJTl9DQUxMQkFDS1NfQkFDS0dST1VORFwiKSA9PT0gXCJmYWxzZVwiXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAvLyBMYW5nU21pdGggaGFzIGl0cyBvd24gYmFja2dyb3VuZGluZyBzeXN0ZW1cbiAgICAgICAgICAgICAgICBibG9ja09uUm9vdFJ1bkZpbmFsaXphdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge307XG4gICAgICAgIGNsaWVudCA9IG5ldyBsYW5nc21pdGhfMS5DbGllbnQoY2xpZW50UGFyYW1zKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsaWVudDtcbn07XG5leHBvcnRzLmdldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24gPSBnZXREZWZhdWx0TGFuZ0NoYWluQ2xpZW50U2luZ2xldG9uO1xuY29uc3Qgc2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbiA9IChuZXdDbGllbnQpID0+IHtcbiAgICBjbGllbnQgPSBuZXdDbGllbnQ7XG59O1xuZXhwb3J0cy5zZXREZWZhdWx0TGFuZ0NoYWluQ2xpZW50U2luZ2xldG9uID0gc2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/stores.cjs":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/core/dist/stores.cjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InMemoryStore = exports.BaseStore = void 0;\nconst serializable_js_1 = __webpack_require__(/*! ./load/serializable.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs\");\n/**\n * Abstract interface for a key-value store.\n */\nclass BaseStore extends serializable_js_1.Serializable {\n}\nexports.BaseStore = BaseStore;\n/**\n * In-memory implementation of the BaseStore using a dictionary. Used for\n * storing key-value pairs in memory.\n * @example\n * ```typescript\n * const store = new InMemoryStore<BaseMessage>();\n * await store.mset(\n *   Array.from({ length: 5 }).map((_, index) => [\n *     `message:id:${index}`,\n *     index % 2 === 0\n *       ? new AIMessage(\"ai stuff...\")\n *       : new HumanMessage(\"human stuff...\"),\n *   ]),\n * );\n *\n * const retrievedMessages = await store.mget([\"message:id:0\", \"message:id:1\"]);\n * await store.mdelete(await store.yieldKeys(\"message:id:\").toArray());\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass InMemoryStore extends BaseStore {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"storage\"]\n        });\n        Object.defineProperty(this, \"store\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n    }\n    /**\n     * Retrieves the values associated with the given keys from the store.\n     * @param keys Keys to retrieve values for.\n     * @returns Array of values associated with the given keys.\n     */\n    async mget(keys) {\n        return keys.map((key) => this.store[key]);\n    }\n    /**\n     * Sets the values for the given keys in the store.\n     * @param keyValuePairs Array of key-value pairs to set in the store.\n     * @returns Promise that resolves when all key-value pairs have been set.\n     */\n    async mset(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.store[key] = value;\n        }\n    }\n    /**\n     * Deletes the given keys and their associated values from the store.\n     * @param keys Keys to delete from the store.\n     * @returns Promise that resolves when all keys have been deleted.\n     */\n    async mdelete(keys) {\n        for (const key of keys) {\n            delete this.store[key];\n        }\n    }\n    /**\n     * Asynchronous generator that yields keys from the store. If a prefix is\n     * provided, it only yields keys that start with the prefix.\n     * @param prefix Optional prefix to filter keys.\n     * @returns AsyncGenerator that yields keys from the store.\n     */\n    async *yieldKeys(prefix) {\n        const keys = Object.keys(this.store);\n        for (const key of keys) {\n            if (prefix === undefined || key.startsWith(prefix)) {\n                yield key;\n            }\n        }\n    }\n}\nexports.InMemoryStore = InMemoryStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc3RvcmVzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxpQkFBaUI7QUFDekMsMEJBQTBCLG1CQUFPLENBQUMsZ0dBQXlCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QixxQkFBcUIsTUFBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3N0b3Jlcy5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkluTWVtb3J5U3RvcmUgPSBleHBvcnRzLkJhc2VTdG9yZSA9IHZvaWQgMDtcbmNvbnN0IHNlcmlhbGl6YWJsZV9qc18xID0gcmVxdWlyZShcIi4vbG9hZC9zZXJpYWxpemFibGUuY2pzXCIpO1xuLyoqXG4gKiBBYnN0cmFjdCBpbnRlcmZhY2UgZm9yIGEga2V5LXZhbHVlIHN0b3JlLlxuICovXG5jbGFzcyBCYXNlU3RvcmUgZXh0ZW5kcyBzZXJpYWxpemFibGVfanNfMS5TZXJpYWxpemFibGUge1xufVxuZXhwb3J0cy5CYXNlU3RvcmUgPSBCYXNlU3RvcmU7XG4vKipcbiAqIEluLW1lbW9yeSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgQmFzZVN0b3JlIHVzaW5nIGEgZGljdGlvbmFyeS4gVXNlZCBmb3JcbiAqIHN0b3Jpbmcga2V5LXZhbHVlIHBhaXJzIGluIG1lbW9yeS5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBzdG9yZSA9IG5ldyBJbk1lbW9yeVN0b3JlPEJhc2VNZXNzYWdlPigpO1xuICogYXdhaXQgc3RvcmUubXNldChcbiAqICAgQXJyYXkuZnJvbSh7IGxlbmd0aDogNSB9KS5tYXAoKF8sIGluZGV4KSA9PiBbXG4gKiAgICAgYG1lc3NhZ2U6aWQ6JHtpbmRleH1gLFxuICogICAgIGluZGV4ICUgMiA9PT0gMFxuICogICAgICAgPyBuZXcgQUlNZXNzYWdlKFwiYWkgc3R1ZmYuLi5cIilcbiAqICAgICAgIDogbmV3IEh1bWFuTWVzc2FnZShcImh1bWFuIHN0dWZmLi4uXCIpLFxuICogICBdKSxcbiAqICk7XG4gKlxuICogY29uc3QgcmV0cmlldmVkTWVzc2FnZXMgPSBhd2FpdCBzdG9yZS5tZ2V0KFtcIm1lc3NhZ2U6aWQ6MFwiLCBcIm1lc3NhZ2U6aWQ6MVwiXSk7XG4gKiBhd2FpdCBzdG9yZS5tZGVsZXRlKGF3YWl0IHN0b3JlLnlpZWxkS2V5cyhcIm1lc3NhZ2U6aWQ6XCIpLnRvQXJyYXkoKSk7XG4gKiBgYGBcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNsYXNzIEluTWVtb3J5U3RvcmUgZXh0ZW5kcyBCYXNlU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpblwiLCBcInN0b3JhZ2VcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0b3JlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXlzIGZyb20gdGhlIHN0b3JlLlxuICAgICAqIEBwYXJhbSBrZXlzIEtleXMgdG8gcmV0cmlldmUgdmFsdWVzIGZvci5cbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXlzLlxuICAgICAqL1xuICAgIGFzeW5jIG1nZXQoa2V5cykge1xuICAgICAgICByZXR1cm4ga2V5cy5tYXAoKGtleSkgPT4gdGhpcy5zdG9yZVtrZXldKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWVzIGZvciB0aGUgZ2l2ZW4ga2V5cyBpbiB0aGUgc3RvcmUuXG4gICAgICogQHBhcmFtIGtleVZhbHVlUGFpcnMgQXJyYXkgb2Yga2V5LXZhbHVlIHBhaXJzIHRvIHNldCBpbiB0aGUgc3RvcmUuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGtleS12YWx1ZSBwYWlycyBoYXZlIGJlZW4gc2V0LlxuICAgICAqL1xuICAgIGFzeW5jIG1zZXQoa2V5VmFsdWVQYWlycykge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBrZXlWYWx1ZVBhaXJzKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIHRoZSBnaXZlbiBrZXlzIGFuZCB0aGVpciBhc3NvY2lhdGVkIHZhbHVlcyBmcm9tIHRoZSBzdG9yZS5cbiAgICAgKiBAcGFyYW0ga2V5cyBLZXlzIHRvIGRlbGV0ZSBmcm9tIHRoZSBzdG9yZS5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwga2V5cyBoYXZlIGJlZW4gZGVsZXRlZC5cbiAgICAgKi9cbiAgICBhc3luYyBtZGVsZXRlKGtleXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RvcmVba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXMgZ2VuZXJhdG9yIHRoYXQgeWllbGRzIGtleXMgZnJvbSB0aGUgc3RvcmUuIElmIGEgcHJlZml4IGlzXG4gICAgICogcHJvdmlkZWQsIGl0IG9ubHkgeWllbGRzIGtleXMgdGhhdCBzdGFydCB3aXRoIHRoZSBwcmVmaXguXG4gICAgICogQHBhcmFtIHByZWZpeCBPcHRpb25hbCBwcmVmaXggdG8gZmlsdGVyIGtleXMuXG4gICAgICogQHJldHVybnMgQXN5bmNHZW5lcmF0b3IgdGhhdCB5aWVsZHMga2V5cyBmcm9tIHRoZSBzdG9yZS5cbiAgICAgKi9cbiAgICBhc3luYyAqeWllbGRLZXlzKHByZWZpeCkge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5zdG9yZSk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCB8fCBrZXkuc3RhcnRzV2l0aChwcmVmaXgpKSB7XG4gICAgICAgICAgICAgICAgeWllbGQga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Jbk1lbW9yeVN0b3JlID0gSW5NZW1vcnlTdG9yZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/stores.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools/index.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools/index.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseToolkit = exports.DynamicStructuredTool = exports.DynamicTool = exports.Tool = exports.StructuredTool = exports.ToolInputParsingException = exports.isStructuredToolParams = exports.isStructuredTool = exports.isRunnableToolLike = exports.isLangChainTool = void 0;\nexports.tool = tool;\nconst v3_1 = __webpack_require__(/*! zod/v3 */ \"(rsc)/./node_modules/zod/v3/index.cjs\");\nconst json_schema_1 = __webpack_require__(/*! @cfworker/json-schema */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/commonjs/index.js\");\nconst manager_js_1 = __webpack_require__(/*! ../callbacks/manager.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.cjs\");\nconst base_js_1 = __webpack_require__(/*! ../language_models/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.cjs\");\nconst config_js_1 = __webpack_require__(/*! ../runnables/config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\nconst tool_js_1 = __webpack_require__(/*! ../messages/tool.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.cjs\");\nconst index_js_1 = __webpack_require__(/*! ../singletons/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.cjs\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.cjs\");\nObject.defineProperty(exports, \"ToolInputParsingException\", ({ enumerable: true, get: function () { return utils_js_1.ToolInputParsingException; } }));\nconst zod_js_1 = __webpack_require__(/*! ../utils/types/zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\");\nconst json_schema_js_1 = __webpack_require__(/*! ../utils/json_schema.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs\");\nvar types_js_1 = __webpack_require__(/*! ./types.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tools/types.cjs\");\nObject.defineProperty(exports, \"isLangChainTool\", ({ enumerable: true, get: function () { return types_js_1.isLangChainTool; } }));\nObject.defineProperty(exports, \"isRunnableToolLike\", ({ enumerable: true, get: function () { return types_js_1.isRunnableToolLike; } }));\nObject.defineProperty(exports, \"isStructuredTool\", ({ enumerable: true, get: function () { return types_js_1.isStructuredTool; } }));\nObject.defineProperty(exports, \"isStructuredToolParams\", ({ enumerable: true, get: function () { return types_js_1.isStructuredToolParams; } }));\n/**\n * Base class for Tools that accept input of any shape defined by a Zod schema.\n */\nclass StructuredTool extends base_js_1.BaseLangChain {\n    get lc_namespace() {\n        return [\"langchain\", \"tools\"];\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        /**\n         * Whether to return the tool's output directly.\n         *\n         * Setting this to true means that after the tool is called,\n         * an agent should stop looping.\n         */\n        Object.defineProperty(this, \"returnDirect\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"verboseParsingErrors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /**\n         * The tool response format.\n         *\n         * If \"content\" then the output of the tool is interpreted as the contents of a\n         * ToolMessage. If \"content_and_artifact\" then the output is expected to be a\n         * two-tuple corresponding to the (content, artifact) of a ToolMessage.\n         *\n         * @default \"content\"\n         */\n        Object.defineProperty(this, \"responseFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"content\"\n        });\n        /**\n         * Default config object for the tool runnable.\n         */\n        Object.defineProperty(this, \"defaultConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verboseParsingErrors =\n            fields?.verboseParsingErrors ?? this.verboseParsingErrors;\n        this.responseFormat = fields?.responseFormat ?? this.responseFormat;\n        this.defaultConfig = fields?.defaultConfig ?? this.defaultConfig;\n        this.metadata = fields?.metadata ?? this.metadata;\n    }\n    /**\n     * Invokes the tool with the provided input and configuration.\n     * @param input The input for the tool.\n     * @param config Optional configuration for the tool.\n     * @returns A Promise that resolves with the tool's output.\n     */\n    async invoke(input, config) {\n        let toolInput;\n        let enrichedConfig = (0, config_js_1.ensureConfig)((0, config_js_1.mergeConfigs)(this.defaultConfig, config));\n        if ((0, utils_js_1._isToolCall)(input)) {\n            toolInput = input.args;\n            enrichedConfig = {\n                ...enrichedConfig,\n                toolCall: input,\n            };\n        }\n        else {\n            toolInput = input;\n        }\n        return this.call(toolInput, enrichedConfig);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     *\n     * Calls the tool with the provided argument, configuration, and tags. It\n     * parses the input according to the schema, handles any errors, and\n     * manages callbacks.\n     * @param arg The input argument for the tool.\n     * @param configArg Optional configuration or callbacks for the tool.\n     * @param tags Optional tags for the tool.\n     * @returns A Promise that resolves with a string.\n     */\n    async call(arg, configArg, \n    /** @deprecated */\n    tags) {\n        // Determine the actual input that needs parsing/validation.\n        // If arg is a ToolCall, use its args; otherwise, use arg directly.\n        const inputForValidation = (0, utils_js_1._isToolCall)(arg) ? arg.args : arg;\n        let parsed; // This will hold the successfully parsed input of the expected output type.\n        if ((0, zod_js_1.isInteropZodSchema)(this.schema)) {\n            try {\n                // Validate the inputForValidation - TS needs help here as it can't exclude ToolCall based on the check\n                parsed = await (0, zod_js_1.interopParseAsync)(this.schema, inputForValidation);\n            }\n            catch (e) {\n                let message = `Received tool input did not match expected schema`;\n                if (this.verboseParsingErrors) {\n                    message = `${message}\\nDetails: ${e.message}`;\n                }\n                // Pass the original raw input arg to the exception\n                throw new utils_js_1.ToolInputParsingException(message, JSON.stringify(arg));\n            }\n        }\n        else {\n            const result = (0, json_schema_1.validate)(inputForValidation, this.schema);\n            if (!result.valid) {\n                let message = `Received tool input did not match expected schema`;\n                if (this.verboseParsingErrors) {\n                    message = `${message}\\nDetails: ${result.errors\n                        .map((e) => `${e.keywordLocation}: ${e.error}`)\n                        .join(\"\\n\")}`;\n                }\n                // Pass the original raw input arg to the exception\n                throw new utils_js_1.ToolInputParsingException(message, JSON.stringify(arg));\n            }\n            // Assign the validated input to parsed\n            // We cast here because validate() doesn't narrow the type sufficiently for TS, but we know it's valid.\n            parsed = inputForValidation;\n        }\n        const config = (0, manager_js_1.parseCallbackConfigArg)(configArg);\n        const callbackManager_ = manager_js_1.CallbackManager.configure(config.callbacks, this.callbacks, config.tags || tags, this.tags, config.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleToolStart(this.toJSON(), \n        // Log the original raw input arg\n        typeof arg === \"string\" ? arg : JSON.stringify(arg), config.runId, undefined, undefined, undefined, config.runName);\n        delete config.runId;\n        let result;\n        try {\n            // Pass the correctly typed parsed input to _call\n            result = await this._call(parsed, runManager, config);\n        }\n        catch (e) {\n            await runManager?.handleToolError(e);\n            throw e;\n        }\n        let content;\n        let artifact;\n        if (this.responseFormat === \"content_and_artifact\") {\n            if (Array.isArray(result) && result.length === 2) {\n                [content, artifact] = result;\n            }\n            else {\n                throw new Error(`Tool response format is \"content_and_artifact\" but the output was not a two-tuple.\\nResult: ${JSON.stringify(result)}`);\n            }\n        }\n        else {\n            content = result;\n        }\n        let toolCallId;\n        // Extract toolCallId ONLY if the original arg was a ToolCall\n        if ((0, utils_js_1._isToolCall)(arg)) {\n            toolCallId = arg.id;\n        }\n        // Or if it was provided in the config's toolCall property\n        if (!toolCallId && (0, utils_js_1._configHasToolCallId)(config)) {\n            toolCallId = config.toolCall.id;\n        }\n        const formattedOutput = _formatToolOutput({\n            content,\n            artifact,\n            toolCallId,\n            name: this.name,\n            metadata: this.metadata,\n        });\n        await runManager?.handleToolEnd(formattedOutput);\n        return formattedOutput;\n    }\n}\nexports.StructuredTool = StructuredTool;\n/**\n * Base class for Tools that accept input as a string.\n */\nclass Tool extends StructuredTool {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: v3_1.z\n                .object({ input: v3_1.z.string().optional() })\n                .transform((obj) => obj.input)\n        });\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     *\n     * Calls the tool with the provided argument and callbacks. It handles\n     * string inputs specifically.\n     * @param arg The input argument for the tool, which can be a string, undefined, or an input of the tool's schema.\n     * @param callbacks Optional callbacks for the tool.\n     * @returns A Promise that resolves with a string.\n     */\n    // Match the base class signature including the generics and conditional return type\n    call(arg, callbacks) {\n        // Prepare the input for the base class call method.\n        // If arg is string or undefined, wrap it; otherwise, pass ToolCall or { input: ... } directly.\n        const structuredArg = typeof arg === \"string\" || arg == null ? { input: arg } : arg;\n        // Ensure TConfig is passed to super.call\n        return super.call(structuredArg, callbacks);\n    }\n}\nexports.Tool = Tool;\n/**\n * A tool that can be created dynamically from a function, name, and description.\n */\nclass DynamicTool extends Tool {\n    static lc_name() {\n        return \"DynamicTool\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.func = fields.func;\n        this.returnDirect = fields.returnDirect ?? this.returnDirect;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     */\n    async call(arg, configArg) {\n        const config = (0, manager_js_1.parseCallbackConfigArg)(configArg);\n        if (config.runName === undefined) {\n            config.runName = this.name;\n        }\n        // Call the Tool class's call method, passing generics through\n        // Cast config to TConfig to satisfy the super.call signature\n        return super.call(arg, config);\n    }\n    /** @ignore */\n    async _call(input, // DynamicTool's _call specifically expects a string after schema transformation\n    runManager, parentConfig) {\n        return this.func(input, runManager, parentConfig);\n    }\n}\nexports.DynamicTool = DynamicTool;\n/**\n * A tool that can be created dynamically from a function, name, and\n * description, designed to work with structured data. It extends the\n * StructuredTool class and overrides the _call method to execute the\n * provided function when the tool is called.\n *\n * Schema can be passed as Zod or JSON schema. The tool will not validate\n * input if JSON schema is passed.\n */\nclass DynamicStructuredTool extends StructuredTool {\n    static lc_name() {\n        return \"DynamicStructuredTool\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.func = fields.func;\n        this.returnDirect = fields.returnDirect ?? this.returnDirect;\n        this.schema = fields.schema;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     */\n    // Match the base class signature\n    async call(arg, configArg, \n    /** @deprecated */\n    tags) {\n        const config = (0, manager_js_1.parseCallbackConfigArg)(configArg);\n        if (config.runName === undefined) {\n            config.runName = this.name;\n        }\n        // Call the base class method, passing generics through\n        // Cast config to TConfig to satisfy the super.call signature\n        return super.call(arg, config, tags);\n    }\n    _call(arg, runManager, parentConfig) {\n        return this.func(arg, runManager, parentConfig);\n    }\n}\nexports.DynamicStructuredTool = DynamicStructuredTool;\n/**\n * Abstract base class for toolkits in LangChain. Toolkits are collections\n * of tools that agents can use. Subclasses must implement the `tools`\n * property to provide the specific tools for the toolkit.\n */\nclass BaseToolkit {\n    getTools() {\n        return this.tools;\n    }\n}\nexports.BaseToolkit = BaseToolkit;\nfunction tool(func, fields) {\n    const isSimpleStringSchema = (0, zod_js_1.isSimpleStringZodSchema)(fields.schema);\n    const isStringJSONSchema = (0, json_schema_js_1.validatesOnlyStrings)(fields.schema);\n    // If the schema is not provided, or it's a simple string schema, create a DynamicTool\n    if (!fields.schema || isSimpleStringSchema || isStringJSONSchema) {\n        return new DynamicTool({\n            ...fields,\n            description: fields.description ??\n                (fields.schema && (0, zod_js_1.getSchemaDescription)(fields.schema)) ??\n                `${fields.name} tool`,\n            func: async (input, runManager, config) => {\n                return new Promise((resolve, reject) => {\n                    const childConfig = (0, config_js_1.patchConfig)(config, {\n                        callbacks: runManager?.getChild(),\n                    });\n                    void index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(childConfig), async () => {\n                        try {\n                            // TS doesn't restrict the type here based on the guard above\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            resolve(func(input, childConfig));\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    });\n                });\n            },\n        });\n    }\n    const schema = fields.schema;\n    const description = fields.description ??\n        fields.schema.description ??\n        `${fields.name} tool`;\n    return new DynamicStructuredTool({\n        ...fields,\n        description,\n        schema,\n        func: async (input, runManager, config) => {\n            return new Promise((resolve, reject) => {\n                const childConfig = (0, config_js_1.patchConfig)(config, {\n                    callbacks: runManager?.getChild(),\n                });\n                void index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(childConfig), async () => {\n                    try {\n                        resolve(func(input, childConfig));\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                });\n            });\n        },\n    });\n}\nfunction _formatToolOutput(params) {\n    const { content, artifact, toolCallId, metadata } = params;\n    if (toolCallId && !(0, tool_js_1.isDirectToolOutput)(content)) {\n        if (typeof content === \"string\" ||\n            (Array.isArray(content) &&\n                content.every((item) => typeof item === \"object\"))) {\n            return new tool_js_1.ToolMessage({\n                status: \"success\",\n                content,\n                artifact,\n                tool_call_id: toolCallId,\n                name: params.name,\n                metadata,\n            });\n        }\n        else {\n            return new tool_js_1.ToolMessage({\n                status: \"success\",\n                content: _stringify(content),\n                artifact,\n                tool_call_id: toolCallId,\n                name: params.name,\n                metadata,\n            });\n        }\n    }\n    else {\n        return content;\n    }\n}\nfunction _stringify(content) {\n    try {\n        return JSON.stringify(content, null, 2) ?? \"\";\n    }\n    catch (_noOp) {\n        return `${content}`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLDZCQUE2QixHQUFHLG1CQUFtQixHQUFHLFlBQVksR0FBRyxzQkFBc0IsR0FBRyxpQ0FBaUMsR0FBRyw4QkFBOEIsR0FBRyx3QkFBd0IsR0FBRywwQkFBMEIsR0FBRyx1QkFBdUI7QUFDeFEsWUFBWTtBQUNaLGFBQWEsbUJBQU8sQ0FBQyxxREFBUTtBQUM3QixzQkFBc0IsbUJBQU8sQ0FBQyxnR0FBdUI7QUFDckQscUJBQXFCLG1CQUFPLENBQUMsaUdBQTBCO0FBQ3ZELGtCQUFrQixtQkFBTyxDQUFDLHVHQUE2QjtBQUN2RCxvQkFBb0IsbUJBQU8sQ0FBQywrRkFBeUI7QUFDckQsa0JBQWtCLG1CQUFPLENBQUMseUZBQXNCO0FBQ2hELG1CQUFtQixtQkFBTyxDQUFDLCtGQUF5QjtBQUNwRCxtQkFBbUIsbUJBQU8sQ0FBQyw4RUFBYTtBQUN4Qyw2REFBNEQsRUFBRSxxQ0FBcUMsZ0RBQWdELEVBQUM7QUFDcEosaUJBQWlCLG1CQUFPLENBQUMsNkZBQXdCO0FBQ2pELHlCQUF5QixtQkFBTyxDQUFDLGlHQUEwQjtBQUMzRCxpQkFBaUIsbUJBQU8sQ0FBQyw4RUFBYTtBQUN0QyxtREFBa0QsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDaEksc0RBQXFELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ3RJLG9EQUFtRCxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUNsSSwwREFBeUQsRUFBRSxxQ0FBcUMsNkNBQTZDLEVBQUM7QUFDOUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFFBQVEsYUFBYSxVQUFVO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFFBQVEsYUFBYTtBQUN0RCx1Q0FBdUMsa0JBQWtCLElBQUksUUFBUTtBQUNyRSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEtBQTRLLHVCQUF1QjtBQUNuTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0hBQStILHVCQUF1QjtBQUN0SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUNBQW1DO0FBQzdEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELDhCQUE4QixhQUFhO0FBQzlGLHlFQUF5RSxhQUFhO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsYUFBYTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWSwwQ0FBMEM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3Rvb2xzL2luZGV4LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZVRvb2xraXQgPSBleHBvcnRzLkR5bmFtaWNTdHJ1Y3R1cmVkVG9vbCA9IGV4cG9ydHMuRHluYW1pY1Rvb2wgPSBleHBvcnRzLlRvb2wgPSBleHBvcnRzLlN0cnVjdHVyZWRUb29sID0gZXhwb3J0cy5Ub29sSW5wdXRQYXJzaW5nRXhjZXB0aW9uID0gZXhwb3J0cy5pc1N0cnVjdHVyZWRUb29sUGFyYW1zID0gZXhwb3J0cy5pc1N0cnVjdHVyZWRUb29sID0gZXhwb3J0cy5pc1J1bm5hYmxlVG9vbExpa2UgPSBleHBvcnRzLmlzTGFuZ0NoYWluVG9vbCA9IHZvaWQgMDtcbmV4cG9ydHMudG9vbCA9IHRvb2w7XG5jb25zdCB2M18xID0gcmVxdWlyZShcInpvZC92M1wiKTtcbmNvbnN0IGpzb25fc2NoZW1hXzEgPSByZXF1aXJlKFwiQGNmd29ya2VyL2pzb24tc2NoZW1hXCIpO1xuY29uc3QgbWFuYWdlcl9qc18xID0gcmVxdWlyZShcIi4uL2NhbGxiYWNrcy9tYW5hZ2VyLmNqc1wiKTtcbmNvbnN0IGJhc2VfanNfMSA9IHJlcXVpcmUoXCIuLi9sYW5ndWFnZV9tb2RlbHMvYmFzZS5janNcIik7XG5jb25zdCBjb25maWdfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW5uYWJsZXMvY29uZmlnLmNqc1wiKTtcbmNvbnN0IHRvb2xfanNfMSA9IHJlcXVpcmUoXCIuLi9tZXNzYWdlcy90b29sLmNqc1wiKTtcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vc2luZ2xldG9ucy9pbmRleC5janNcIik7XG5jb25zdCB1dGlsc19qc18xID0gcmVxdWlyZShcIi4vdXRpbHMuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9vbElucHV0UGFyc2luZ0V4Y2VwdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfanNfMS5Ub29sSW5wdXRQYXJzaW5nRXhjZXB0aW9uOyB9IH0pO1xuY29uc3Qgem9kX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvdHlwZXMvem9kLmNqc1wiKTtcbmNvbnN0IGpzb25fc2NoZW1hX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvanNvbl9zY2hlbWEuY2pzXCIpO1xudmFyIHR5cGVzX2pzXzEgPSByZXF1aXJlKFwiLi90eXBlcy5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0xhbmdDaGFpblRvb2xcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzX2pzXzEuaXNMYW5nQ2hhaW5Ub29sOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNSdW5uYWJsZVRvb2xMaWtlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc19qc18xLmlzUnVubmFibGVUb29sTGlrZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzU3RydWN0dXJlZFRvb2xcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzX2pzXzEuaXNTdHJ1Y3R1cmVkVG9vbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzU3RydWN0dXJlZFRvb2xQYXJhbXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzX2pzXzEuaXNTdHJ1Y3R1cmVkVG9vbFBhcmFtczsgfSB9KTtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgVG9vbHMgdGhhdCBhY2NlcHQgaW5wdXQgb2YgYW55IHNoYXBlIGRlZmluZWQgYnkgYSBab2Qgc2NoZW1hLlxuICovXG5jbGFzcyBTdHJ1Y3R1cmVkVG9vbCBleHRlbmRzIGJhc2VfanNfMS5CYXNlTGFuZ0NoYWluIHtcbiAgICBnZXQgbGNfbmFtZXNwYWNlKCkge1xuICAgICAgICByZXR1cm4gW1wibGFuZ2NoYWluXCIsIFwidG9vbHNcIl07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMgPz8ge30pO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0byByZXR1cm4gdGhlIHRvb2wncyBvdXRwdXQgZGlyZWN0bHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNldHRpbmcgdGhpcyB0byB0cnVlIG1lYW5zIHRoYXQgYWZ0ZXIgdGhlIHRvb2wgaXMgY2FsbGVkLFxuICAgICAgICAgKiBhbiBhZ2VudCBzaG91bGQgc3RvcCBsb29waW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmV0dXJuRGlyZWN0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidmVyYm9zZVBhcnNpbmdFcnJvcnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRvb2wgcmVzcG9uc2UgZm9ybWF0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiBcImNvbnRlbnRcIiB0aGVuIHRoZSBvdXRwdXQgb2YgdGhlIHRvb2wgaXMgaW50ZXJwcmV0ZWQgYXMgdGhlIGNvbnRlbnRzIG9mIGFcbiAgICAgICAgICogVG9vbE1lc3NhZ2UuIElmIFwiY29udGVudF9hbmRfYXJ0aWZhY3RcIiB0aGVuIHRoZSBvdXRwdXQgaXMgZXhwZWN0ZWQgdG8gYmUgYVxuICAgICAgICAgKiB0d28tdHVwbGUgY29ycmVzcG9uZGluZyB0byB0aGUgKGNvbnRlbnQsIGFydGlmYWN0KSBvZiBhIFRvb2xNZXNzYWdlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVmYXVsdCBcImNvbnRlbnRcIlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVzcG9uc2VGb3JtYXRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiY29udGVudFwiXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmYXVsdCBjb25maWcgb2JqZWN0IGZvciB0aGUgdG9vbCBydW5uYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRlZmF1bHRDb25maWdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52ZXJib3NlUGFyc2luZ0Vycm9ycyA9XG4gICAgICAgICAgICBmaWVsZHM/LnZlcmJvc2VQYXJzaW5nRXJyb3JzID8/IHRoaXMudmVyYm9zZVBhcnNpbmdFcnJvcnM7XG4gICAgICAgIHRoaXMucmVzcG9uc2VGb3JtYXQgPSBmaWVsZHM/LnJlc3BvbnNlRm9ybWF0ID8/IHRoaXMucmVzcG9uc2VGb3JtYXQ7XG4gICAgICAgIHRoaXMuZGVmYXVsdENvbmZpZyA9IGZpZWxkcz8uZGVmYXVsdENvbmZpZyA/PyB0aGlzLmRlZmF1bHRDb25maWc7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBmaWVsZHM/Lm1ldGFkYXRhID8/IHRoaXMubWV0YWRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIHRvb2wgd2l0aCB0aGUgcHJvdmlkZWQgaW5wdXQgYW5kIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCBmb3IgdGhlIHRvb2wuXG4gICAgICogQHBhcmFtIGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIGZvciB0aGUgdG9vbC5cbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0b29sJ3Mgb3V0cHV0LlxuICAgICAqL1xuICAgIGFzeW5jIGludm9rZShpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGxldCB0b29sSW5wdXQ7XG4gICAgICAgIGxldCBlbnJpY2hlZENvbmZpZyA9ICgwLCBjb25maWdfanNfMS5lbnN1cmVDb25maWcpKCgwLCBjb25maWdfanNfMS5tZXJnZUNvbmZpZ3MpKHRoaXMuZGVmYXVsdENvbmZpZywgY29uZmlnKSk7XG4gICAgICAgIGlmICgoMCwgdXRpbHNfanNfMS5faXNUb29sQ2FsbCkoaW5wdXQpKSB7XG4gICAgICAgICAgICB0b29sSW5wdXQgPSBpbnB1dC5hcmdzO1xuICAgICAgICAgICAgZW5yaWNoZWRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgLi4uZW5yaWNoZWRDb25maWcsXG4gICAgICAgICAgICAgICAgdG9vbENhbGw6IGlucHV0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRvb2xJbnB1dCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGwodG9vbElucHV0LCBlbnJpY2hlZENvbmZpZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSAuaW52b2tlKCkgaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIDAuMy4wLlxuICAgICAqXG4gICAgICogQ2FsbHMgdGhlIHRvb2wgd2l0aCB0aGUgcHJvdmlkZWQgYXJndW1lbnQsIGNvbmZpZ3VyYXRpb24sIGFuZCB0YWdzLiBJdFxuICAgICAqIHBhcnNlcyB0aGUgaW5wdXQgYWNjb3JkaW5nIHRvIHRoZSBzY2hlbWEsIGhhbmRsZXMgYW55IGVycm9ycywgYW5kXG4gICAgICogbWFuYWdlcyBjYWxsYmFja3MuXG4gICAgICogQHBhcmFtIGFyZyBUaGUgaW5wdXQgYXJndW1lbnQgZm9yIHRoZSB0b29sLlxuICAgICAqIEBwYXJhbSBjb25maWdBcmcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvciBjYWxsYmFja3MgZm9yIHRoZSB0b29sLlxuICAgICAqIEBwYXJhbSB0YWdzIE9wdGlvbmFsIHRhZ3MgZm9yIHRoZSB0b29sLlxuICAgICAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBzdHJpbmcuXG4gICAgICovXG4gICAgYXN5bmMgY2FsbChhcmcsIGNvbmZpZ0FyZywgXG4gICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAgdGFncykge1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGFjdHVhbCBpbnB1dCB0aGF0IG5lZWRzIHBhcnNpbmcvdmFsaWRhdGlvbi5cbiAgICAgICAgLy8gSWYgYXJnIGlzIGEgVG9vbENhbGwsIHVzZSBpdHMgYXJnczsgb3RoZXJ3aXNlLCB1c2UgYXJnIGRpcmVjdGx5LlxuICAgICAgICBjb25zdCBpbnB1dEZvclZhbGlkYXRpb24gPSAoMCwgdXRpbHNfanNfMS5faXNUb29sQ2FsbCkoYXJnKSA/IGFyZy5hcmdzIDogYXJnO1xuICAgICAgICBsZXQgcGFyc2VkOyAvLyBUaGlzIHdpbGwgaG9sZCB0aGUgc3VjY2Vzc2Z1bGx5IHBhcnNlZCBpbnB1dCBvZiB0aGUgZXhwZWN0ZWQgb3V0cHV0IHR5cGUuXG4gICAgICAgIGlmICgoMCwgem9kX2pzXzEuaXNJbnRlcm9wWm9kU2NoZW1hKSh0aGlzLnNjaGVtYSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgdGhlIGlucHV0Rm9yVmFsaWRhdGlvbiAtIFRTIG5lZWRzIGhlbHAgaGVyZSBhcyBpdCBjYW4ndCBleGNsdWRlIFRvb2xDYWxsIGJhc2VkIG9uIHRoZSBjaGVja1xuICAgICAgICAgICAgICAgIHBhcnNlZCA9IGF3YWl0ICgwLCB6b2RfanNfMS5pbnRlcm9wUGFyc2VBc3luYykodGhpcy5zY2hlbWEsIGlucHV0Rm9yVmFsaWRhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gYFJlY2VpdmVkIHRvb2wgaW5wdXQgZGlkIG5vdCBtYXRjaCBleHBlY3RlZCBzY2hlbWFgO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZlcmJvc2VQYXJzaW5nRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfVxcbkRldGFpbHM6ICR7ZS5tZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBhc3MgdGhlIG9yaWdpbmFsIHJhdyBpbnB1dCBhcmcgdG8gdGhlIGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyB1dGlsc19qc18xLlRvb2xJbnB1dFBhcnNpbmdFeGNlcHRpb24obWVzc2FnZSwgSlNPTi5zdHJpbmdpZnkoYXJnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSAoMCwganNvbl9zY2hlbWFfMS52YWxpZGF0ZSkoaW5wdXRGb3JWYWxpZGF0aW9uLCB0aGlzLnNjaGVtYSk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC52YWxpZCkge1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gYFJlY2VpdmVkIHRvb2wgaW5wdXQgZGlkIG5vdCBtYXRjaCBleHBlY3RlZCBzY2hlbWFgO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZlcmJvc2VQYXJzaW5nRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfVxcbkRldGFpbHM6ICR7cmVzdWx0LmVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoZSkgPT4gYCR7ZS5rZXl3b3JkTG9jYXRpb259OiAke2UuZXJyb3J9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBhc3MgdGhlIG9yaWdpbmFsIHJhdyBpbnB1dCBhcmcgdG8gdGhlIGV4Y2VwdGlvblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyB1dGlsc19qc18xLlRvb2xJbnB1dFBhcnNpbmdFeGNlcHRpb24obWVzc2FnZSwgSlNPTi5zdHJpbmdpZnkoYXJnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBc3NpZ24gdGhlIHZhbGlkYXRlZCBpbnB1dCB0byBwYXJzZWRcbiAgICAgICAgICAgIC8vIFdlIGNhc3QgaGVyZSBiZWNhdXNlIHZhbGlkYXRlKCkgZG9lc24ndCBuYXJyb3cgdGhlIHR5cGUgc3VmZmljaWVudGx5IGZvciBUUywgYnV0IHdlIGtub3cgaXQncyB2YWxpZC5cbiAgICAgICAgICAgIHBhcnNlZCA9IGlucHV0Rm9yVmFsaWRhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb25maWcgPSAoMCwgbWFuYWdlcl9qc18xLnBhcnNlQ2FsbGJhY2tDb25maWdBcmcpKGNvbmZpZ0FyZyk7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrTWFuYWdlcl8gPSBtYW5hZ2VyX2pzXzEuQ2FsbGJhY2tNYW5hZ2VyLmNvbmZpZ3VyZShjb25maWcuY2FsbGJhY2tzLCB0aGlzLmNhbGxiYWNrcywgY29uZmlnLnRhZ3MgfHwgdGFncywgdGhpcy50YWdzLCBjb25maWcubWV0YWRhdGEsIHRoaXMubWV0YWRhdGEsIHsgdmVyYm9zZTogdGhpcy52ZXJib3NlIH0pO1xuICAgICAgICBjb25zdCBydW5NYW5hZ2VyID0gYXdhaXQgY2FsbGJhY2tNYW5hZ2VyXz8uaGFuZGxlVG9vbFN0YXJ0KHRoaXMudG9KU09OKCksIFxuICAgICAgICAvLyBMb2cgdGhlIG9yaWdpbmFsIHJhdyBpbnB1dCBhcmdcbiAgICAgICAgdHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIiA/IGFyZyA6IEpTT04uc3RyaW5naWZ5KGFyZyksIGNvbmZpZy5ydW5JZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29uZmlnLnJ1bk5hbWUpO1xuICAgICAgICBkZWxldGUgY29uZmlnLnJ1bklkO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gUGFzcyB0aGUgY29ycmVjdGx5IHR5cGVkIHBhcnNlZCBpbnB1dCB0byBfY2FsbFxuICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5fY2FsbChwYXJzZWQsIHJ1bk1hbmFnZXIsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGF3YWl0IHJ1bk1hbmFnZXI/LmhhbmRsZVRvb2xFcnJvcihlKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnQ7XG4gICAgICAgIGxldCBhcnRpZmFjdDtcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uc2VGb3JtYXQgPT09IFwiY29udGVudF9hbmRfYXJ0aWZhY3RcIikge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgW2NvbnRlbnQsIGFydGlmYWN0XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVG9vbCByZXNwb25zZSBmb3JtYXQgaXMgXCJjb250ZW50X2FuZF9hcnRpZmFjdFwiIGJ1dCB0aGUgb3V0cHV0IHdhcyBub3QgYSB0d28tdHVwbGUuXFxuUmVzdWx0OiAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250ZW50ID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGxldCB0b29sQ2FsbElkO1xuICAgICAgICAvLyBFeHRyYWN0IHRvb2xDYWxsSWQgT05MWSBpZiB0aGUgb3JpZ2luYWwgYXJnIHdhcyBhIFRvb2xDYWxsXG4gICAgICAgIGlmICgoMCwgdXRpbHNfanNfMS5faXNUb29sQ2FsbCkoYXJnKSkge1xuICAgICAgICAgICAgdG9vbENhbGxJZCA9IGFyZy5pZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBPciBpZiBpdCB3YXMgcHJvdmlkZWQgaW4gdGhlIGNvbmZpZydzIHRvb2xDYWxsIHByb3BlcnR5XG4gICAgICAgIGlmICghdG9vbENhbGxJZCAmJiAoMCwgdXRpbHNfanNfMS5fY29uZmlnSGFzVG9vbENhbGxJZCkoY29uZmlnKSkge1xuICAgICAgICAgICAgdG9vbENhbGxJZCA9IGNvbmZpZy50b29sQ2FsbC5pZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRPdXRwdXQgPSBfZm9ybWF0VG9vbE91dHB1dCh7XG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgYXJ0aWZhY3QsXG4gICAgICAgICAgICB0b29sQ2FsbElkLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBydW5NYW5hZ2VyPy5oYW5kbGVUb29sRW5kKGZvcm1hdHRlZE91dHB1dCk7XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRPdXRwdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJ1Y3R1cmVkVG9vbCA9IFN0cnVjdHVyZWRUb29sO1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBUb29scyB0aGF0IGFjY2VwdCBpbnB1dCBhcyBhIHN0cmluZy5cbiAqL1xuY2xhc3MgVG9vbCBleHRlbmRzIFN0cnVjdHVyZWRUb29sIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2NoZW1hXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2M18xLnpcbiAgICAgICAgICAgICAgICAub2JqZWN0KHsgaW5wdXQ6IHYzXzEuei5zdHJpbmcoKS5vcHRpb25hbCgpIH0pXG4gICAgICAgICAgICAgICAgLnRyYW5zZm9ybSgob2JqKSA9PiBvYmouaW5wdXQpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgLmludm9rZSgpIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjMuMC5cbiAgICAgKlxuICAgICAqIENhbGxzIHRoZSB0b29sIHdpdGggdGhlIHByb3ZpZGVkIGFyZ3VtZW50IGFuZCBjYWxsYmFja3MuIEl0IGhhbmRsZXNcbiAgICAgKiBzdHJpbmcgaW5wdXRzIHNwZWNpZmljYWxseS5cbiAgICAgKiBAcGFyYW0gYXJnIFRoZSBpbnB1dCBhcmd1bWVudCBmb3IgdGhlIHRvb2wsIHdoaWNoIGNhbiBiZSBhIHN0cmluZywgdW5kZWZpbmVkLCBvciBhbiBpbnB1dCBvZiB0aGUgdG9vbCdzIHNjaGVtYS5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tzIE9wdGlvbmFsIGNhbGxiYWNrcyBmb3IgdGhlIHRvb2wuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHN0cmluZy5cbiAgICAgKi9cbiAgICAvLyBNYXRjaCB0aGUgYmFzZSBjbGFzcyBzaWduYXR1cmUgaW5jbHVkaW5nIHRoZSBnZW5lcmljcyBhbmQgY29uZGl0aW9uYWwgcmV0dXJuIHR5cGVcbiAgICBjYWxsKGFyZywgY2FsbGJhY2tzKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIGlucHV0IGZvciB0aGUgYmFzZSBjbGFzcyBjYWxsIG1ldGhvZC5cbiAgICAgICAgLy8gSWYgYXJnIGlzIHN0cmluZyBvciB1bmRlZmluZWQsIHdyYXAgaXQ7IG90aGVyd2lzZSwgcGFzcyBUb29sQ2FsbCBvciB7IGlucHV0OiAuLi4gfSBkaXJlY3RseS5cbiAgICAgICAgY29uc3Qgc3RydWN0dXJlZEFyZyA9IHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgfHwgYXJnID09IG51bGwgPyB7IGlucHV0OiBhcmcgfSA6IGFyZztcbiAgICAgICAgLy8gRW5zdXJlIFRDb25maWcgaXMgcGFzc2VkIHRvIHN1cGVyLmNhbGxcbiAgICAgICAgcmV0dXJuIHN1cGVyLmNhbGwoc3RydWN0dXJlZEFyZywgY2FsbGJhY2tzKTtcbiAgICB9XG59XG5leHBvcnRzLlRvb2wgPSBUb29sO1xuLyoqXG4gKiBBIHRvb2wgdGhhdCBjYW4gYmUgY3JlYXRlZCBkeW5hbWljYWxseSBmcm9tIGEgZnVuY3Rpb24sIG5hbWUsIGFuZCBkZXNjcmlwdGlvbi5cbiAqL1xuY2xhc3MgRHluYW1pY1Rvb2wgZXh0ZW5kcyBUb29sIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiRHluYW1pY1Rvb2xcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGVzY3JpcHRpb25cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZnVuY1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBmaWVsZHMubmFtZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGZpZWxkcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5mdW5jID0gZmllbGRzLmZ1bmM7XG4gICAgICAgIHRoaXMucmV0dXJuRGlyZWN0ID0gZmllbGRzLnJldHVybkRpcmVjdCA/PyB0aGlzLnJldHVybkRpcmVjdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIC5pbnZva2UoKSBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gMC4zLjAuXG4gICAgICovXG4gICAgYXN5bmMgY2FsbChhcmcsIGNvbmZpZ0FyZykge1xuICAgICAgICBjb25zdCBjb25maWcgPSAoMCwgbWFuYWdlcl9qc18xLnBhcnNlQ2FsbGJhY2tDb25maWdBcmcpKGNvbmZpZ0FyZyk7XG4gICAgICAgIGlmIChjb25maWcucnVuTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25maWcucnVuTmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxsIHRoZSBUb29sIGNsYXNzJ3MgY2FsbCBtZXRob2QsIHBhc3NpbmcgZ2VuZXJpY3MgdGhyb3VnaFxuICAgICAgICAvLyBDYXN0IGNvbmZpZyB0byBUQ29uZmlnIHRvIHNhdGlzZnkgdGhlIHN1cGVyLmNhbGwgc2lnbmF0dXJlXG4gICAgICAgIHJldHVybiBzdXBlci5jYWxsKGFyZywgY29uZmlnKTtcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBhc3luYyBfY2FsbChpbnB1dCwgLy8gRHluYW1pY1Rvb2wncyBfY2FsbCBzcGVjaWZpY2FsbHkgZXhwZWN0cyBhIHN0cmluZyBhZnRlciBzY2hlbWEgdHJhbnNmb3JtYXRpb25cbiAgICBydW5NYW5hZ2VyLCBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuYyhpbnB1dCwgcnVuTWFuYWdlciwgcGFyZW50Q29uZmlnKTtcbiAgICB9XG59XG5leHBvcnRzLkR5bmFtaWNUb29sID0gRHluYW1pY1Rvb2w7XG4vKipcbiAqIEEgdG9vbCB0aGF0IGNhbiBiZSBjcmVhdGVkIGR5bmFtaWNhbGx5IGZyb20gYSBmdW5jdGlvbiwgbmFtZSwgYW5kXG4gKiBkZXNjcmlwdGlvbiwgZGVzaWduZWQgdG8gd29yayB3aXRoIHN0cnVjdHVyZWQgZGF0YS4gSXQgZXh0ZW5kcyB0aGVcbiAqIFN0cnVjdHVyZWRUb29sIGNsYXNzIGFuZCBvdmVycmlkZXMgdGhlIF9jYWxsIG1ldGhvZCB0byBleGVjdXRlIHRoZVxuICogcHJvdmlkZWQgZnVuY3Rpb24gd2hlbiB0aGUgdG9vbCBpcyBjYWxsZWQuXG4gKlxuICogU2NoZW1hIGNhbiBiZSBwYXNzZWQgYXMgWm9kIG9yIEpTT04gc2NoZW1hLiBUaGUgdG9vbCB3aWxsIG5vdCB2YWxpZGF0ZVxuICogaW5wdXQgaWYgSlNPTiBzY2hlbWEgaXMgcGFzc2VkLlxuICovXG5jbGFzcyBEeW5hbWljU3RydWN0dXJlZFRvb2wgZXh0ZW5kcyBTdHJ1Y3R1cmVkVG9vbCB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkR5bmFtaWNTdHJ1Y3R1cmVkVG9vbFwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZXNjcmlwdGlvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmdW5jXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNjaGVtYVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5hbWUgPSBmaWVsZHMubmFtZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGZpZWxkcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5mdW5jID0gZmllbGRzLmZ1bmM7XG4gICAgICAgIHRoaXMucmV0dXJuRGlyZWN0ID0gZmllbGRzLnJldHVybkRpcmVjdCA/PyB0aGlzLnJldHVybkRpcmVjdDtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBmaWVsZHMuc2NoZW1hO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgLmludm9rZSgpIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjMuMC5cbiAgICAgKi9cbiAgICAvLyBNYXRjaCB0aGUgYmFzZSBjbGFzcyBzaWduYXR1cmVcbiAgICBhc3luYyBjYWxsKGFyZywgY29uZmlnQXJnLCBcbiAgICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgICB0YWdzKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9ICgwLCBtYW5hZ2VyX2pzXzEucGFyc2VDYWxsYmFja0NvbmZpZ0FyZykoY29uZmlnQXJnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5ydW5OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbmZpZy5ydW5OYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbGwgdGhlIGJhc2UgY2xhc3MgbWV0aG9kLCBwYXNzaW5nIGdlbmVyaWNzIHRocm91Z2hcbiAgICAgICAgLy8gQ2FzdCBjb25maWcgdG8gVENvbmZpZyB0byBzYXRpc2Z5IHRoZSBzdXBlci5jYWxsIHNpZ25hdHVyZVxuICAgICAgICByZXR1cm4gc3VwZXIuY2FsbChhcmcsIGNvbmZpZywgdGFncyk7XG4gICAgfVxuICAgIF9jYWxsKGFyZywgcnVuTWFuYWdlciwgcGFyZW50Q29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZ1bmMoYXJnLCBydW5NYW5hZ2VyLCBwYXJlbnRDb25maWcpO1xuICAgIH1cbn1cbmV4cG9ydHMuRHluYW1pY1N0cnVjdHVyZWRUb29sID0gRHluYW1pY1N0cnVjdHVyZWRUb29sO1xuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciB0b29sa2l0cyBpbiBMYW5nQ2hhaW4uIFRvb2xraXRzIGFyZSBjb2xsZWN0aW9uc1xuICogb2YgdG9vbHMgdGhhdCBhZ2VudHMgY2FuIHVzZS4gU3ViY2xhc3NlcyBtdXN0IGltcGxlbWVudCB0aGUgYHRvb2xzYFxuICogcHJvcGVydHkgdG8gcHJvdmlkZSB0aGUgc3BlY2lmaWMgdG9vbHMgZm9yIHRoZSB0b29sa2l0LlxuICovXG5jbGFzcyBCYXNlVG9vbGtpdCB7XG4gICAgZ2V0VG9vbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvb2xzO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFzZVRvb2xraXQgPSBCYXNlVG9vbGtpdDtcbmZ1bmN0aW9uIHRvb2woZnVuYywgZmllbGRzKSB7XG4gICAgY29uc3QgaXNTaW1wbGVTdHJpbmdTY2hlbWEgPSAoMCwgem9kX2pzXzEuaXNTaW1wbGVTdHJpbmdab2RTY2hlbWEpKGZpZWxkcy5zY2hlbWEpO1xuICAgIGNvbnN0IGlzU3RyaW5nSlNPTlNjaGVtYSA9ICgwLCBqc29uX3NjaGVtYV9qc18xLnZhbGlkYXRlc09ubHlTdHJpbmdzKShmaWVsZHMuc2NoZW1hKTtcbiAgICAvLyBJZiB0aGUgc2NoZW1hIGlzIG5vdCBwcm92aWRlZCwgb3IgaXQncyBhIHNpbXBsZSBzdHJpbmcgc2NoZW1hLCBjcmVhdGUgYSBEeW5hbWljVG9vbFxuICAgIGlmICghZmllbGRzLnNjaGVtYSB8fCBpc1NpbXBsZVN0cmluZ1NjaGVtYSB8fCBpc1N0cmluZ0pTT05TY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEeW5hbWljVG9vbCh7XG4gICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZmllbGRzLmRlc2NyaXB0aW9uID8/XG4gICAgICAgICAgICAgICAgKGZpZWxkcy5zY2hlbWEgJiYgKDAsIHpvZF9qc18xLmdldFNjaGVtYURlc2NyaXB0aW9uKShmaWVsZHMuc2NoZW1hKSkgPz9cbiAgICAgICAgICAgICAgICBgJHtmaWVsZHMubmFtZX0gdG9vbGAsXG4gICAgICAgICAgICBmdW5jOiBhc3luYyAoaW5wdXQsIHJ1bk1hbmFnZXIsIGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29uZmlnID0gKDAsIGNvbmZpZ19qc18xLnBhdGNoQ29uZmlnKShjb25maWcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrczogcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgaW5kZXhfanNfMS5Bc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uLnJ1bldpdGhDb25maWcoKDAsIGNvbmZpZ19qc18xLnBpY2tSdW5uYWJsZUNvbmZpZ0tleXMpKGNoaWxkQ29uZmlnKSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUUyBkb2Vzbid0IHJlc3RyaWN0IHRoZSB0eXBlIGhlcmUgYmFzZWQgb24gdGhlIGd1YXJkIGFib3ZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZ1bmMoaW5wdXQsIGNoaWxkQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc2NoZW1hID0gZmllbGRzLnNjaGVtYTtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGZpZWxkcy5kZXNjcmlwdGlvbiA/P1xuICAgICAgICBmaWVsZHMuc2NoZW1hLmRlc2NyaXB0aW9uID8/XG4gICAgICAgIGAke2ZpZWxkcy5uYW1lfSB0b29sYDtcbiAgICByZXR1cm4gbmV3IER5bmFtaWNTdHJ1Y3R1cmVkVG9vbCh7XG4gICAgICAgIC4uLmZpZWxkcyxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZnVuYzogYXN5bmMgKGlucHV0LCBydW5NYW5hZ2VyLCBjb25maWcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRDb25maWcgPSAoMCwgY29uZmlnX2pzXzEucGF0Y2hDb25maWcpKGNvbmZpZywge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3M6IHJ1bk1hbmFnZXI/LmdldENoaWxkKCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdm9pZCBpbmRleF9qc18xLkFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24ucnVuV2l0aENvbmZpZygoMCwgY29uZmlnX2pzXzEucGlja1J1bm5hYmxlQ29uZmlnS2V5cykoY2hpbGRDb25maWcpLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZ1bmMoaW5wdXQsIGNoaWxkQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBfZm9ybWF0VG9vbE91dHB1dChwYXJhbXMpIHtcbiAgICBjb25zdCB7IGNvbnRlbnQsIGFydGlmYWN0LCB0b29sQ2FsbElkLCBtZXRhZGF0YSB9ID0gcGFyYW1zO1xuICAgIGlmICh0b29sQ2FsbElkICYmICEoMCwgdG9vbF9qc18xLmlzRGlyZWN0VG9vbE91dHB1dCkoY29udGVudCkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICAgICAoQXJyYXkuaXNBcnJheShjb250ZW50KSAmJlxuICAgICAgICAgICAgICAgIGNvbnRlbnQuZXZlcnkoKGl0ZW0pID0+IHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdG9vbF9qc18xLlRvb2xNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgYXJ0aWZhY3QsXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsX2lkOiB0b29sQ2FsbElkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHBhcmFtcy5uYW1lLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRvb2xfanNfMS5Ub29sTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBfc3RyaW5naWZ5KGNvbnRlbnQpLFxuICAgICAgICAgICAgICAgIGFydGlmYWN0LFxuICAgICAgICAgICAgICAgIHRvb2xfY2FsbF9pZDogdG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbXMubmFtZSxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG59XG5mdW5jdGlvbiBfc3RyaW5naWZ5KGNvbnRlbnQpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoY29udGVudCwgbnVsbCwgMikgPz8gXCJcIjtcbiAgICB9XG4gICAgY2F0Y2ggKF9ub09wKSB7XG4gICAgICAgIHJldHVybiBgJHtjb250ZW50fWA7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools/types.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools/types.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isStructuredTool = isStructuredTool;\nexports.isRunnableToolLike = isRunnableToolLike;\nexports.isStructuredToolParams = isStructuredToolParams;\nexports.isLangChainTool = isLangChainTool;\nconst base_js_1 = __webpack_require__(/*! ../runnables/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.cjs\");\nconst zod_js_1 = __webpack_require__(/*! ../utils/types/zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\");\n/**\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\n *\n * @param {StructuredToolInterface | JSONSchema | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\n */\nfunction isStructuredTool(tool) {\n    return (tool !== undefined &&\n        Array.isArray(tool.lc_namespace));\n}\n/**\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\n *\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\n */\nfunction isRunnableToolLike(tool) {\n    return (tool !== undefined &&\n        base_js_1.Runnable.isRunnable(tool) &&\n        \"lc_name\" in tool.constructor &&\n        typeof tool.constructor.lc_name === \"function\" &&\n        tool.constructor.lc_name() === \"RunnableToolLike\");\n}\n/**\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\n *\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\n */\nfunction isStructuredToolParams(tool) {\n    return (!!tool &&\n        typeof tool === \"object\" &&\n        \"name\" in tool &&\n        \"schema\" in tool &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ((0, zod_js_1.isInteropZodSchema)(tool.schema) ||\n            (tool.schema != null &&\n                typeof tool.schema === \"object\" &&\n                \"type\" in tool.schema &&\n                typeof tool.schema.type === \"string\" &&\n                [\"null\", \"boolean\", \"object\", \"array\", \"number\", \"string\"].includes(tool.schema.type))));\n}\n/**\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\n * while still containing the necessary properties to be passed to a LLM for tool calling.\n *\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\n */\nfunction isLangChainTool(tool) {\n    return (isStructuredToolParams(tool) ||\n        isRunnableToolLike(tool) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        isStructuredTool(tool));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdHlwZXMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QiwwQkFBMEI7QUFDMUIsOEJBQThCO0FBQzlCLHVCQUF1QjtBQUN2QixrQkFBa0IsbUJBQU8sQ0FBQywyRkFBdUI7QUFDakQsaUJBQWlCLG1CQUFPLENBQUMsNkZBQXdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0RBQWtEO0FBQzdELGFBQWEsaUNBQWlDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQyxhQUFhLDBCQUEwQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsYUFBYSw4QkFBOEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQyxhQUFhLDhCQUE4QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdHlwZXMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1N0cnVjdHVyZWRUb29sID0gaXNTdHJ1Y3R1cmVkVG9vbDtcbmV4cG9ydHMuaXNSdW5uYWJsZVRvb2xMaWtlID0gaXNSdW5uYWJsZVRvb2xMaWtlO1xuZXhwb3J0cy5pc1N0cnVjdHVyZWRUb29sUGFyYW1zID0gaXNTdHJ1Y3R1cmVkVG9vbFBhcmFtcztcbmV4cG9ydHMuaXNMYW5nQ2hhaW5Ub29sID0gaXNMYW5nQ2hhaW5Ub29sO1xuY29uc3QgYmFzZV9qc18xID0gcmVxdWlyZShcIi4uL3J1bm5hYmxlcy9iYXNlLmNqc1wiKTtcbmNvbnN0IHpvZF9qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL3R5cGVzL3pvZC5janNcIik7XG4vKipcbiAqIENvbmZpcm0gd2hldGhlciB0aGUgaW5wdXR0ZWQgdG9vbCBpcyBhbiBpbnN0YW5jZSBvZiBgU3RydWN0dXJlZFRvb2xJbnRlcmZhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RydWN0dXJlZFRvb2xJbnRlcmZhY2UgfCBKU09OU2NoZW1hIHwgdW5kZWZpbmVkfSB0b29sIFRoZSB0b29sIHRvIGNoZWNrIGlmIGl0IGlzIGFuIGluc3RhbmNlIG9mIGBTdHJ1Y3R1cmVkVG9vbEludGVyZmFjZWAuXG4gKiBAcmV0dXJucyB7dG9vbCBpcyBTdHJ1Y3R1cmVkVG9vbEludGVyZmFjZX0gV2hldGhlciB0aGUgaW5wdXR0ZWQgdG9vbCBpcyBhbiBpbnN0YW5jZSBvZiBgU3RydWN0dXJlZFRvb2xJbnRlcmZhY2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cnVjdHVyZWRUb29sKHRvb2wpIHtcbiAgICByZXR1cm4gKHRvb2wgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KHRvb2wubGNfbmFtZXNwYWNlKSk7XG59XG4vKipcbiAqIENvbmZpcm0gd2hldGhlciB0aGUgaW5wdXR0ZWQgdG9vbCBpcyBhbiBpbnN0YW5jZSBvZiBgUnVubmFibGVUb29sTGlrZWAuXG4gKlxuICogQHBhcmFtIHt1bmtub3duIHwgdW5kZWZpbmVkfSB0b29sIFRoZSB0b29sIHRvIGNoZWNrIGlmIGl0IGlzIGFuIGluc3RhbmNlIG9mIGBSdW5uYWJsZVRvb2xMaWtlYC5cbiAqIEByZXR1cm5zIHt0b29sIGlzIFJ1bm5hYmxlVG9vbExpa2V9IFdoZXRoZXIgdGhlIGlucHV0dGVkIHRvb2wgaXMgYW4gaW5zdGFuY2Ugb2YgYFJ1bm5hYmxlVG9vbExpa2VgLlxuICovXG5mdW5jdGlvbiBpc1J1bm5hYmxlVG9vbExpa2UodG9vbCkge1xuICAgIHJldHVybiAodG9vbCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGJhc2VfanNfMS5SdW5uYWJsZS5pc1J1bm5hYmxlKHRvb2wpICYmXG4gICAgICAgIFwibGNfbmFtZVwiIGluIHRvb2wuY29uc3RydWN0b3IgJiZcbiAgICAgICAgdHlwZW9mIHRvb2wuY29uc3RydWN0b3IubGNfbmFtZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHRvb2wuY29uc3RydWN0b3IubGNfbmFtZSgpID09PSBcIlJ1bm5hYmxlVG9vbExpa2VcIik7XG59XG4vKipcbiAqIENvbmZpcm0gd2hldGhlciBvciBub3QgdGhlIHRvb2wgY29udGFpbnMgdGhlIG5lY2Vzc2FyeSBwcm9wZXJ0aWVzIHRvIGJlIGNvbnNpZGVyZWQgYSBgU3RydWN0dXJlZFRvb2xQYXJhbXNgLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93biB8IHVuZGVmaW5lZH0gdG9vbCBUaGUgb2JqZWN0IHRvIGNoZWNrIGlmIGl0IGlzIGEgYFN0cnVjdHVyZWRUb29sUGFyYW1zYC5cbiAqIEByZXR1cm5zIHt0b29sIGlzIFN0cnVjdHVyZWRUb29sUGFyYW1zfSBXaGV0aGVyIHRoZSBpbnB1dHRlZCBvYmplY3QgaXMgYSBgU3RydWN0dXJlZFRvb2xQYXJhbXNgLlxuICovXG5mdW5jdGlvbiBpc1N0cnVjdHVyZWRUb29sUGFyYW1zKHRvb2wpIHtcbiAgICByZXR1cm4gKCEhdG9vbCAmJlxuICAgICAgICB0eXBlb2YgdG9vbCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcIm5hbWVcIiBpbiB0b29sICYmXG4gICAgICAgIFwic2NoZW1hXCIgaW4gdG9vbCAmJlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAoKDAsIHpvZF9qc18xLmlzSW50ZXJvcFpvZFNjaGVtYSkodG9vbC5zY2hlbWEpIHx8XG4gICAgICAgICAgICAodG9vbC5zY2hlbWEgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0b29sLnNjaGVtYSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgIFwidHlwZVwiIGluIHRvb2wuc2NoZW1hICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRvb2wuc2NoZW1hLnR5cGUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBbXCJudWxsXCIsIFwiYm9vbGVhblwiLCBcIm9iamVjdFwiLCBcImFycmF5XCIsIFwibnVtYmVyXCIsIFwic3RyaW5nXCJdLmluY2x1ZGVzKHRvb2wuc2NoZW1hLnR5cGUpKSkpO1xufVxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGUgdG9vbCBpcyBvbmUgb2YgU3RydWN0dXJlZFRvb2wsIFJ1bm5hYmxlVG9vbCBvciBTdHJ1Y3R1cmVkVG9vbFBhcmFtcy5cbiAqIEl0IHJldHVybnMgYGlzIFN0cnVjdHVyZWRUb29sUGFyYW1zYCBzaW5jZSB0aGF0IGlzIHRoZSBtb3N0IG1pbmltYWwgaW50ZXJmYWNlIG9mIHRoZSB0aHJlZSxcbiAqIHdoaWxlIHN0aWxsIGNvbnRhaW5pbmcgdGhlIG5lY2Vzc2FyeSBwcm9wZXJ0aWVzIHRvIGJlIHBhc3NlZCB0byBhIExMTSBmb3IgdG9vbCBjYWxsaW5nLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93biB8IHVuZGVmaW5lZH0gdG9vbCBUaGUgdG9vbCB0byBjaGVjayBpZiBpdCBpcyBhIExhbmdDaGFpbiB0b29sLlxuICogQHJldHVybnMge3Rvb2wgaXMgU3RydWN0dXJlZFRvb2xQYXJhbXN9IFdoZXRoZXIgdGhlIGlucHV0dGVkIHRvb2wgaXMgYSBMYW5nQ2hhaW4gdG9vbC5cbiAqL1xuZnVuY3Rpb24gaXNMYW5nQ2hhaW5Ub29sKHRvb2wpIHtcbiAgICByZXR1cm4gKGlzU3RydWN0dXJlZFRvb2xQYXJhbXModG9vbCkgfHxcbiAgICAgICAgaXNSdW5uYWJsZVRvb2xMaWtlKHRvb2wpIHx8XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIGlzU3RydWN0dXJlZFRvb2wodG9vbCkpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools/types.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools/utils.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools/utils.cjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ToolInputParsingException = void 0;\nexports._isToolCall = _isToolCall;\nexports._configHasToolCallId = _configHasToolCallId;\nfunction _isToolCall(toolCall) {\n    return !!(toolCall &&\n        typeof toolCall === \"object\" &&\n        \"type\" in toolCall &&\n        toolCall.type === \"tool_call\");\n}\nfunction _configHasToolCallId(config) {\n    return !!(config &&\n        typeof config === \"object\" &&\n        \"toolCall\" in config &&\n        config.toolCall != null &&\n        typeof config.toolCall === \"object\" &&\n        \"id\" in config.toolCall &&\n        typeof config.toolCall.id === \"string\");\n}\n/**\n * Custom error class used to handle exceptions related to tool input parsing.\n * It extends the built-in `Error` class and adds an optional `output`\n * property that can hold the output that caused the exception.\n */\nclass ToolInputParsingException extends Error {\n    constructor(message, output) {\n        super(message);\n        Object.defineProperty(this, \"output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.output = output;\n    }\n}\nexports.ToolInputParsingException = ToolInputParsingException;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdXRpbHMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQztBQUNqQyxtQkFBbUI7QUFDbkIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdXRpbHMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub29sSW5wdXRQYXJzaW5nRXhjZXB0aW9uID0gdm9pZCAwO1xuZXhwb3J0cy5faXNUb29sQ2FsbCA9IF9pc1Rvb2xDYWxsO1xuZXhwb3J0cy5fY29uZmlnSGFzVG9vbENhbGxJZCA9IF9jb25maWdIYXNUb29sQ2FsbElkO1xuZnVuY3Rpb24gX2lzVG9vbENhbGwodG9vbENhbGwpIHtcbiAgICByZXR1cm4gISEodG9vbENhbGwgJiZcbiAgICAgICAgdHlwZW9mIHRvb2xDYWxsID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIFwidHlwZVwiIGluIHRvb2xDYWxsICYmXG4gICAgICAgIHRvb2xDYWxsLnR5cGUgPT09IFwidG9vbF9jYWxsXCIpO1xufVxuZnVuY3Rpb24gX2NvbmZpZ0hhc1Rvb2xDYWxsSWQoY29uZmlnKSB7XG4gICAgcmV0dXJuICEhKGNvbmZpZyAmJlxuICAgICAgICB0eXBlb2YgY29uZmlnID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIFwidG9vbENhbGxcIiBpbiBjb25maWcgJiZcbiAgICAgICAgY29uZmlnLnRvb2xDYWxsICE9IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIGNvbmZpZy50b29sQ2FsbCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcImlkXCIgaW4gY29uZmlnLnRvb2xDYWxsICYmXG4gICAgICAgIHR5cGVvZiBjb25maWcudG9vbENhbGwuaWQgPT09IFwic3RyaW5nXCIpO1xufVxuLyoqXG4gKiBDdXN0b20gZXJyb3IgY2xhc3MgdXNlZCB0byBoYW5kbGUgZXhjZXB0aW9ucyByZWxhdGVkIHRvIHRvb2wgaW5wdXQgcGFyc2luZy5cbiAqIEl0IGV4dGVuZHMgdGhlIGJ1aWx0LWluIGBFcnJvcmAgY2xhc3MgYW5kIGFkZHMgYW4gb3B0aW9uYWwgYG91dHB1dGBcbiAqIHByb3BlcnR5IHRoYXQgY2FuIGhvbGQgdGhlIG91dHB1dCB0aGF0IGNhdXNlZCB0aGUgZXhjZXB0aW9uLlxuICovXG5jbGFzcyBUb29sSW5wdXRQYXJzaW5nRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG91dHB1dCkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3V0cHV0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuICAgIH1cbn1cbmV4cG9ydHMuVG9vbElucHV0UGFyc2luZ0V4Y2VwdGlvbiA9IFRvb2xJbnB1dFBhcnNpbmdFeGNlcHRpb247XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools/utils.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/base.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseTracer = void 0;\nexports.isBaseTracer = isBaseTracer;\nconst run_trees_1 = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.cjs\");\nconst base_js_1 = __webpack_require__(/*! ../callbacks/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.cjs\");\nconst env_js_1 = __webpack_require__(/*! ../utils/env.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs\");\n// TODO: Remove and just use base LangSmith Run type\nconst convertRunTreeToRun = (runTree) => {\n    if (!runTree) {\n        return undefined;\n    }\n    // Important that we return the raw run tree object since the reference\n    // is mutated in other places.\n    // TODO: Remove places where this is being done.\n    // eslint-disable-next-line no-param-reassign\n    runTree.events = runTree.events ?? [];\n    // eslint-disable-next-line no-param-reassign\n    runTree.child_runs = runTree.child_runs ?? [];\n    // TODO: Remove this cast and just use the LangSmith RunTree type.\n    return runTree;\n};\nfunction convertRunToRunTree(run, parentRun) {\n    if (!run) {\n        return undefined;\n    }\n    return new run_trees_1.RunTree({\n        ...run,\n        start_time: run._serialized_start_time ?? run.start_time,\n        parent_run: convertRunToRunTree(parentRun),\n        child_runs: run.child_runs\n            .map((r) => convertRunToRunTree(r))\n            .filter((r) => r !== undefined),\n        extra: {\n            ...run.extra,\n            runtime: (0, env_js_1.getRuntimeEnvironmentSync)(),\n        },\n        tracingEnabled: false,\n    });\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\"\n        ? value\n        : { [defaultKey]: value };\n}\nfunction isBaseTracer(x) {\n    return typeof x._addRunToRunMap === \"function\";\n}\nclass BaseTracer extends base_js_1.BaseCallbackHandler {\n    constructor(_fields) {\n        super(...arguments);\n        /** @deprecated Use `runTreeMap` instead. */\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"runTreeMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"usesRunTreeMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    copy() {\n        return this;\n    }\n    getRunById(runId) {\n        if (runId === undefined) {\n            return undefined;\n        }\n        return this.usesRunTreeMap\n            ? convertRunTreeToRun(this.runTreeMap.get(runId))\n            : this.runMap.get(runId);\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    _addRunToRunMap(run) {\n        const { dottedOrder: currentDottedOrder, microsecondPrecisionDatestring } = (0, run_trees_1.convertToDottedOrderFormat)(new Date(run.start_time).getTime(), run.id, run.execution_order);\n        const storedRun = { ...run };\n        const parentRun = this.getRunById(storedRun.parent_run_id);\n        if (storedRun.parent_run_id !== undefined) {\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder,\n                    ].join(\".\");\n                    storedRun._serialized_start_time = microsecondPrecisionDatestring;\n                }\n                else {\n                    // This can happen naturally for callbacks added within a run\n                    // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            }\n            else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(\n                //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n                // );\n            }\n        }\n        else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n            storedRun._serialized_start_time = microsecondPrecisionDatestring;\n        }\n        if (this.usesRunTreeMap) {\n            const runTree = convertRunToRunTree(storedRun, parentRun);\n            if (runTree !== undefined) {\n                this.runTreeMap.set(storedRun.id, runTree);\n            }\n        }\n        else {\n            this.runMap.set(storedRun.id, storedRun);\n        }\n        return storedRun;\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.getRunById(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        }\n        else {\n            await this.persistRun(run);\n        }\n        await this.onRunUpdate?.(run);\n        if (this.usesRunTreeMap) {\n            this.runTreeMap.delete(run.id);\n        }\n        else {\n            this.runMap.delete(run.id);\n        }\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.getRunById(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    /**\n     * Create and add a run to the run map for LLM start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata\n            ? { ...extraParams, metadata }\n            : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { prompts },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.getRunById(runId) ??\n            this._createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chat model start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata\n            ? { ...extraParams, metadata }\n            : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { messages },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.getRunById(runId) ??\n            this._createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId, _parentRunId, _tags, extraParams) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        run.extra = { ...run.extra, ...extraParams };\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId, _parentRunId, _tags, extraParams) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        run.extra = { ...run.extra, ...extraParams };\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chain start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? { metadata } : {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const run = this.getRunById(runId) ??\n            this._createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name);\n        await this.onRunCreate?.(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.getRunById(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.getRunById(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for tool start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { input },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? { metadata } : {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const run = this.getRunById(runId) ??\n            this._createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleToolEnd(output, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = { output };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: { action },\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: { action },\n        });\n        await this.onAgentEnd?.(run);\n    }\n    /**\n     * Create and add a run to the run map for retriever start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */\n    _createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString(),\n                },\n            ],\n            inputs: { query },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? { metadata } : {},\n            tags: tags || [],\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const run = this.getRunById(runId) ??\n            this._createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = { documents };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString(),\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: { text },\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.getRunById(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: { token, idx, chunk: fields?.chunk },\n        });\n        await this.onLLMNewToken?.(run, token, { chunk: fields?.chunk });\n        return run;\n    }\n}\nexports.BaseTracer = BaseTracer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/console.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/console.cjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConsoleCallbackHandler = void 0;\nconst ansi_styles_1 = __importDefault(__webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/ansi-styles/index.js\"));\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs\");\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    }\n    catch (err) {\n        return fallback;\n    }\n}\nfunction formatKVMapItem(value) {\n    if (typeof value === \"string\") {\n        return value.trim();\n    }\n    if (value === null || value === undefined) {\n        return value;\n    }\n    return tryJsonStringify(value, value.toString());\n}\nfunction elapsed(run) {\n    if (!run.end_time)\n        return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles_1.default;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n * @example\n * ```typescript\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n *   tags: [\"example\", \"callbacks\", \"constructor\"],\n *   callbacks: [new ConsoleCallbackHandler()],\n * });\n *\n * ```\n */\nclass ConsoleCallbackHandler extends base_js_1.BaseTracer {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */\n    persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */\n    getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while (currentRun.parent_run_id) {\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            }\n            else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */\n    getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [...parents, run]\n            .map((parent, i, arr) => {\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles_1.default.bold, name) : name;\n        })\n            .join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */\n    onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */\n    onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */\n    onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */\n    onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs\n            ? { prompts: run.inputs.prompts.map((p) => p.trim()) }\n            : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */\n    onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */\n    onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */\n    onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${formatKVMapItem(run.inputs.input)}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */\n    onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${formatKVMapItem(run.outputs?.output)}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */\n    onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */\n    onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */\n    onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */\n    onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */\n    onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\nexports.ConsoleCallbackHandler = ConsoleCallbackHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/console.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/event_stream.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventStreamCallbackHandler = exports.isStreamEventsHandler = void 0;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nconst ai_js_1 = __webpack_require__(/*! ../messages/ai.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs\");\nconst outputs_js_1 = __webpack_require__(/*! ../outputs.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.cjs\");\nfunction assignName({ name, serialized, }) {\n    if (name !== undefined) {\n        return name;\n    }\n    if (serialized?.name !== undefined) {\n        return serialized.name;\n    }\n    else if (serialized?.id !== undefined && Array.isArray(serialized?.id)) {\n        return serialized.id[serialized.id.length - 1];\n    }\n    return \"Unnamed\";\n}\nconst isStreamEventsHandler = (handler) => handler.name === \"event_stream_tracer\";\nexports.isStreamEventsHandler = isStreamEventsHandler;\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */\nclass EventStreamCallbackHandler extends base_js_1.BaseTracer {\n    constructor(fields) {\n        super({ _awaitHandler: true, ...fields });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"runInfoMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"tappedPromises\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"event_stream_tracer\"\n        });\n        Object.defineProperty(this, \"lc_prefer_streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = stream_js_1.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n        // This is a legacy method only called once for an entire run tree\n        // and is therefore not useful here\n    }\n    _includeRun(run) {\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined &&\n            this.includeTags === undefined &&\n            this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.runType);\n        }\n        if (this.includeTags !== undefined) {\n            include =\n                include ||\n                    runTags.find((tag) => this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.runType);\n        }\n        if (this.excludeTags !== undefined) {\n            include =\n                include && runTags.every((tag) => !this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, outputStream) {\n        const firstChunk = await outputStream.next();\n        if (firstChunk.done) {\n            return;\n        }\n        const runInfo = this.runInfoMap.get(runId);\n        // Run has finished, don't issue any stream events.\n        // An example of this is for runnables that use the default\n        // implementation of .stream(), which delegates to .invoke()\n        // and calls .onChainEnd() before passing it to the iterator.\n        if (runInfo === undefined) {\n            yield firstChunk.value;\n            return;\n        }\n        // Match format from handlers below\n        function _formatOutputChunk(eventType, data) {\n            if (eventType === \"llm\" && typeof data === \"string\") {\n                return new outputs_js_1.GenerationChunk({ text: data });\n            }\n            return data;\n        }\n        let tappedPromise = this.tappedPromises.get(runId);\n        // if we are the first to tap, issue stream events\n        if (tappedPromise === undefined) {\n            let tappedPromiseResolver;\n            tappedPromise = new Promise((resolve) => {\n                tappedPromiseResolver = resolve;\n            });\n            this.tappedPromises.set(runId, tappedPromise);\n            try {\n                const event = {\n                    event: `on_${runInfo.runType}_stream`,\n                    run_id: runId,\n                    name: runInfo.name,\n                    tags: runInfo.tags,\n                    metadata: runInfo.metadata,\n                    data: {},\n                };\n                await this.send({\n                    ...event,\n                    data: {\n                        chunk: _formatOutputChunk(runInfo.runType, firstChunk.value),\n                    },\n                }, runInfo);\n                yield firstChunk.value;\n                for await (const chunk of outputStream) {\n                    // Don't yield tool and retriever stream events\n                    if (runInfo.runType !== \"tool\" && runInfo.runType !== \"retriever\") {\n                        await this.send({\n                            ...event,\n                            data: {\n                                chunk: _formatOutputChunk(runInfo.runType, chunk),\n                            },\n                        }, runInfo);\n                    }\n                    yield chunk;\n                }\n            }\n            finally {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tappedPromiseResolver();\n                // Don't delete from the promises map to keep track of which runs have been tapped.\n            }\n        }\n        else {\n            // otherwise just pass through\n            yield firstChunk.value;\n            for await (const chunk of outputStream) {\n                yield chunk;\n            }\n        }\n    }\n    async send(payload, run) {\n        if (this._includeRun(run)) {\n            await this.writer.write(payload);\n        }\n    }\n    async sendEndEvent(payload, run) {\n        const tappedPromise = this.tappedPromises.get(payload.run_id);\n        if (tappedPromise !== undefined) {\n            void tappedPromise.then(() => {\n                void this.send(payload, run);\n            });\n        }\n        else {\n            await this.send(payload, run);\n        }\n    }\n    async onLLMStart(run) {\n        const runName = assignName(run);\n        const runType = run.inputs.messages !== undefined ? \"chat_model\" : \"llm\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType,\n            inputs: run.inputs,\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        const eventName = `on_${runType}_start`;\n        await this.send({\n            event: eventName,\n            data: {\n                input: run.inputs,\n            },\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {},\n        }, runInfo);\n    }\n    async onLLMNewToken(run, token, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    kwargs) {\n        const runInfo = this.runInfoMap.get(run.id);\n        let chunk;\n        let eventName;\n        if (runInfo === undefined) {\n            throw new Error(`onLLMNewToken: Run ID ${run.id} not found in run map.`);\n        }\n        // Top-level streaming events are covered by tapOutputIterable\n        if (this.runInfoMap.size === 1) {\n            return;\n        }\n        if (runInfo.runType === \"chat_model\") {\n            eventName = \"on_chat_model_stream\";\n            if (kwargs?.chunk === undefined) {\n                chunk = new ai_js_1.AIMessageChunk({ content: token, id: `run-${run.id}` });\n            }\n            else {\n                chunk = kwargs.chunk.message;\n            }\n        }\n        else if (runInfo.runType === \"llm\") {\n            eventName = \"on_llm_stream\";\n            if (kwargs?.chunk === undefined) {\n                chunk = new outputs_js_1.GenerationChunk({ text: token });\n            }\n            else {\n                chunk = kwargs.chunk;\n            }\n        }\n        else {\n            throw new Error(`Unexpected run type ${runInfo.runType}`);\n        }\n        await this.send({\n            event: eventName,\n            data: {\n                chunk,\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata,\n        }, runInfo);\n    }\n    async onLLMEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        let eventName;\n        if (runInfo === undefined) {\n            throw new Error(`onLLMEnd: Run ID ${run.id} not found in run map.`);\n        }\n        const generations = run.outputs?.generations;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let output;\n        if (runInfo.runType === \"chat_model\") {\n            for (const generation of generations ?? []) {\n                if (output !== undefined) {\n                    break;\n                }\n                output = generation[0]?.message;\n            }\n            eventName = \"on_chat_model_end\";\n        }\n        else if (runInfo.runType === \"llm\") {\n            output = {\n                generations: generations?.map((generation) => {\n                    return generation.map((chunk) => {\n                        return {\n                            text: chunk.text,\n                            generationInfo: chunk.generationInfo,\n                        };\n                    });\n                }),\n                llmOutput: run.outputs?.llmOutput ?? {},\n            };\n            eventName = \"on_llm_end\";\n        }\n        else {\n            throw new Error(`onLLMEnd: Unexpected run type: ${runInfo.runType}`);\n        }\n        await this.sendEndEvent({\n            event: eventName,\n            data: {\n                output,\n                input: runInfo.inputs,\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata,\n        }, runInfo);\n    }\n    async onChainStart(run) {\n        const runName = assignName(run);\n        const runType = run.run_type ?? \"chain\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType: run.run_type,\n        };\n        let eventData = {};\n        // Workaround Runnable core code not sending input when transform streaming.\n        if (run.inputs.input === \"\" && Object.keys(run.inputs).length === 1) {\n            eventData = {};\n            runInfo.inputs = {};\n        }\n        else if (run.inputs.input !== undefined) {\n            eventData.input = run.inputs.input;\n            runInfo.inputs = run.inputs.input;\n        }\n        else {\n            eventData.input = run.inputs;\n            runInfo.inputs = run.inputs;\n        }\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: `on_${runType}_start`,\n            data: eventData,\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {},\n        }, runInfo);\n    }\n    async onChainEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onChainEnd: Run ID ${run.id} not found in run map.`);\n        }\n        const eventName = `on_${run.run_type}_end`;\n        const inputs = run.inputs ?? runInfo.inputs ?? {};\n        const outputs = run.outputs?.output ?? run.outputs;\n        const data = {\n            output: outputs,\n            input: inputs,\n        };\n        if (inputs.input && Object.keys(inputs).length === 1) {\n            data.input = inputs.input;\n            runInfo.inputs = inputs.input;\n        }\n        await this.sendEndEvent({\n            event: eventName,\n            data,\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata ?? {},\n        }, runInfo);\n    }\n    async onToolStart(run) {\n        const runName = assignName(run);\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType: \"tool\",\n            inputs: run.inputs ?? {},\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: \"on_tool_start\",\n            data: {\n                input: run.inputs ?? {},\n            },\n            name: runName,\n            run_id: run.id,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n        }, runInfo);\n    }\n    async onToolEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onToolEnd: Run ID ${run.id} not found in run map.`);\n        }\n        if (runInfo.inputs === undefined) {\n            throw new Error(`onToolEnd: Run ID ${run.id} is a tool call, and is expected to have traced inputs.`);\n        }\n        const output = run.outputs?.output === undefined ? run.outputs : run.outputs.output;\n        await this.sendEndEvent({\n            event: \"on_tool_end\",\n            data: {\n                output,\n                input: runInfo.inputs,\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata,\n        }, runInfo);\n    }\n    async onRetrieverStart(run) {\n        const runName = assignName(run);\n        const runType = \"retriever\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType,\n            inputs: {\n                query: run.inputs.query,\n            },\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: \"on_retriever_start\",\n            data: {\n                input: {\n                    query: run.inputs.query,\n                },\n            },\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {},\n        }, runInfo);\n    }\n    async onRetrieverEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onRetrieverEnd: Run ID ${run.id} not found in run map.`);\n        }\n        await this.sendEndEvent({\n            event: \"on_retriever_end\",\n            data: {\n                output: run.outputs?.documents ?? run.outputs,\n                input: runInfo.inputs,\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata,\n        }, runInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleCustomEvent(eventName, data, runId) {\n        const runInfo = this.runInfoMap.get(runId);\n        if (runInfo === undefined) {\n            throw new Error(`handleCustomEvent: Run ID ${runId} not found in run map.`);\n        }\n        await this.send({\n            event: \"on_custom_event\",\n            run_id: runId,\n            name: eventName,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata,\n            data,\n        }, runInfo);\n    }\n    async finish() {\n        const pendingPromises = [...this.tappedPromises.values()];\n        void Promise.all(pendingPromises).finally(() => {\n            void this.writer.close();\n        });\n    }\n}\nexports.EventStreamCallbackHandler = EventStreamCallbackHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/log_stream.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LogStreamCallbackHandler = exports.isLogStreamHandler = exports.RunLog = exports.RunLogPatch = void 0;\nconst index_js_1 = __webpack_require__(/*! ../utils/fast-json-patch/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ../utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nconst ai_js_1 = __webpack_require__(/*! ../messages/ai.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.cjs\");\n/**\n * List of jsonpatch JSONPatchOperations, which describe how to create the run state\n * from an empty dict. This is the minimal representation of the log, designed to\n * be serialized as JSON and sent over the wire to reconstruct the log on the other\n * side. Reconstruction of the state can be done with any jsonpatch-compliant library,\n * see https://jsonpatch.com for more information.\n */\nclass RunLogPatch {\n    constructor(fields) {\n        Object.defineProperty(this, \"ops\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ops = fields.ops ?? [];\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0, index_js_1.applyPatch)({}, ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument,\n        });\n    }\n}\nexports.RunLogPatch = RunLogPatch;\nclass RunLog extends RunLogPatch {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.state = fields.state;\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0, index_js_1.applyPatch)(this.state, other.ops);\n        return new RunLog({ ops, state: states[states.length - 1].newDocument });\n    }\n    static fromRunLogPatch(patch) {\n        const states = (0, index_js_1.applyPatch)({}, patch.ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops: patch.ops,\n            state: states[states.length - 1].newDocument,\n        });\n    }\n}\nexports.RunLog = RunLog;\nconst isLogStreamHandler = (handler) => handler.name === \"log_stream_tracer\";\nexports.isLogStreamHandler = isLogStreamHandler;\n/**\n * Extract standardized inputs from a run.\n *\n * Standardizes the inputs based on the type of the runnable used.\n *\n * @param run - Run object\n * @param schemaFormat - The schema format to use.\n *\n * @returns Valid inputs are only dict. By conventions, inputs always represented\n * invocation using named arguments.\n * A null means that the input is not yet known!\n */\nasync function _getStandardizedInputs(run, schemaFormat) {\n    if (schemaFormat === \"original\") {\n        throw new Error(\"Do not assign inputs with original schema drop the key for now. \" +\n            \"When inputs are added to streamLog they should be added with \" +\n            \"standardized schema for streaming events.\");\n    }\n    const { inputs } = run;\n    if ([\"retriever\", \"llm\", \"prompt\"].includes(run.run_type)) {\n        return inputs;\n    }\n    if (Object.keys(inputs).length === 1 && inputs?.input === \"\") {\n        return undefined;\n    }\n    // new style chains\n    // These nest an additional 'input' key inside the 'inputs' to make sure\n    // the input is always a dict. We need to unpack and user the inner value.\n    // We should try to fix this in Runnables and callbacks/tracers\n    // Runnables should be using a null type here not a placeholder\n    // dict.\n    return inputs.input;\n}\nasync function _getStandardizedOutputs(run, schemaFormat) {\n    const { outputs } = run;\n    if (schemaFormat === \"original\") {\n        // Return the old schema, without standardizing anything\n        return outputs;\n    }\n    if ([\"retriever\", \"llm\", \"prompt\"].includes(run.run_type)) {\n        return outputs;\n    }\n    // TODO: Remove this hacky check\n    if (outputs !== undefined &&\n        Object.keys(outputs).length === 1 &&\n        outputs?.output !== undefined) {\n        return outputs.output;\n    }\n    return outputs;\n}\nfunction isChatGenerationChunk(x) {\n    return x !== undefined && x.message !== undefined;\n}\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */\nclass LogStreamCallbackHandler extends base_js_1.BaseTracer {\n    constructor(fields) {\n        super({ _awaitHandler: true, ...fields });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_schemaFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"original\"\n        });\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyMapByRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"counterMapByRunName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"log_stream_tracer\"\n        });\n        Object.defineProperty(this, \"lc_prefer_streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this._schemaFormat = fields?._schemaFormat ?? this._schemaFormat;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = stream_js_1.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n        // This is a legacy method only called once for an entire run tree\n        // and is therefore not useful here\n    }\n    _includeRun(run) {\n        if (run.id === this.rootId) {\n            return false;\n        }\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined &&\n            this.includeTags === undefined &&\n            this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.run_type);\n        }\n        if (this.includeTags !== undefined) {\n            include =\n                include ||\n                    runTags.find((tag) => this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.run_type);\n        }\n        if (this.excludeTags !== undefined) {\n            include =\n                include && runTags.every((tag) => !this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, output) {\n        // Tap an output async iterator to stream its values to the log.\n        for await (const chunk of output) {\n            // root run is handled in .streamLog()\n            if (runId !== this.rootId) {\n                // if we can't find the run silently ignore\n                // eg. because this run wasn't included in the log\n                const key = this.keyMapByRunId[runId];\n                if (key) {\n                    await this.writer.write(new RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: `/logs/${key}/streamed_output/-`,\n                                value: chunk,\n                            },\n                        ],\n                    }));\n                }\n            }\n            yield chunk;\n        }\n    }\n    async onRunCreate(run) {\n        if (this.rootId === undefined) {\n            this.rootId = run.id;\n            await this.writer.write(new RunLogPatch({\n                ops: [\n                    {\n                        op: \"replace\",\n                        path: \"\",\n                        value: {\n                            id: run.id,\n                            name: run.name,\n                            type: run.run_type,\n                            streamed_output: [],\n                            final_output: undefined,\n                            logs: {},\n                        },\n                    },\n                ],\n            }));\n        }\n        if (!this._includeRun(run)) {\n            return;\n        }\n        if (this.counterMapByRunName[run.name] === undefined) {\n            this.counterMapByRunName[run.name] = 0;\n        }\n        this.counterMapByRunName[run.name] += 1;\n        const count = this.counterMapByRunName[run.name];\n        this.keyMapByRunId[run.id] =\n            count === 1 ? run.name : `${run.name}:${count}`;\n        const logEntry = {\n            id: run.id,\n            name: run.name,\n            type: run.run_type,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            start_time: new Date(run.start_time).toISOString(),\n            streamed_output: [],\n            streamed_output_str: [],\n            final_output: undefined,\n            end_time: undefined,\n        };\n        if (this._schemaFormat === \"streaming_events\") {\n            logEntry.inputs = await _getStandardizedInputs(run, this._schemaFormat);\n        }\n        await this.writer.write(new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${this.keyMapByRunId[run.id]}`,\n                    value: logEntry,\n                },\n            ],\n        }));\n    }\n    async onRunUpdate(run) {\n        try {\n            const runName = this.keyMapByRunId[run.id];\n            if (runName === undefined) {\n                return;\n            }\n            const ops = [];\n            if (this._schemaFormat === \"streaming_events\") {\n                ops.push({\n                    op: \"replace\",\n                    path: `/logs/${runName}/inputs`,\n                    value: await _getStandardizedInputs(run, this._schemaFormat),\n                });\n            }\n            ops.push({\n                op: \"add\",\n                path: `/logs/${runName}/final_output`,\n                value: await _getStandardizedOutputs(run, this._schemaFormat),\n            });\n            if (run.end_time !== undefined) {\n                ops.push({\n                    op: \"add\",\n                    path: `/logs/${runName}/end_time`,\n                    value: new Date(run.end_time).toISOString(),\n                });\n            }\n            const patch = new RunLogPatch({ ops });\n            await this.writer.write(patch);\n        }\n        finally {\n            if (run.id === this.rootId) {\n                const patch = new RunLogPatch({\n                    ops: [\n                        {\n                            op: \"replace\",\n                            path: \"/final_output\",\n                            value: await _getStandardizedOutputs(run, this._schemaFormat),\n                        },\n                    ],\n                });\n                await this.writer.write(patch);\n                if (this.autoClose) {\n                    await this.writer.close();\n                }\n            }\n        }\n    }\n    async onLLMNewToken(run, token, kwargs) {\n        const runName = this.keyMapByRunId[run.id];\n        if (runName === undefined) {\n            return;\n        }\n        // TODO: Remove hack\n        const isChatModel = run.inputs.messages !== undefined;\n        let streamedOutputValue;\n        if (isChatModel) {\n            if (isChatGenerationChunk(kwargs?.chunk)) {\n                streamedOutputValue = kwargs?.chunk;\n            }\n            else {\n                streamedOutputValue = new ai_js_1.AIMessageChunk({\n                    id: `run-${run.id}`,\n                    content: token,\n                });\n            }\n        }\n        else {\n            streamedOutputValue = token;\n        }\n        const patch = new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output_str/-`,\n                    value: token,\n                },\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output/-`,\n                    value: streamedOutputValue,\n                },\n            ],\n        });\n        await this.writer.write(patch);\n    }\n}\nexports.LogStreamCallbackHandler = LogStreamCallbackHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/root_listener.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RootListenersTracer = void 0;\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs\");\nclass RootListenersTracer extends base_js_1.BaseTracer {\n    constructor({ config, onStart, onEnd, onError, }) {\n        super({ _awaitHandler: true });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"RootListenersTracer\"\n        });\n        /** The Run's ID. Type UUID */\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnStart\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnEnd\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.config = config;\n        this.argOnStart = onStart;\n        this.argOnEnd = onEnd;\n        this.argOnError = onError;\n    }\n    /**\n     * This is a legacy method only called once for an entire run tree\n     * therefore not useful here\n     * @param {Run} _ Not used\n     */\n    persistRun(_) {\n        return Promise.resolve();\n    }\n    async onRunCreate(run) {\n        if (this.rootId) {\n            return;\n        }\n        this.rootId = run.id;\n        if (this.argOnStart) {\n            await this.argOnStart(run, this.config);\n        }\n    }\n    async onRunUpdate(run) {\n        if (run.id !== this.rootId) {\n            return;\n        }\n        if (!run.error) {\n            if (this.argOnEnd) {\n                await this.argOnEnd(run, this.config);\n            }\n        }\n        else if (this.argOnError) {\n            await this.argOnError(run, this.config);\n        }\n    }\n}\nexports.RootListenersTracer = RootListenersTracer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0Isa0JBQWtCLG1CQUFPLENBQUMsOEVBQVk7QUFDdEM7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BELGdCQUFnQixxQkFBcUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxLQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUm9vdExpc3RlbmVyc1RyYWNlciA9IHZvaWQgMDtcbmNvbnN0IGJhc2VfanNfMSA9IHJlcXVpcmUoXCIuL2Jhc2UuY2pzXCIpO1xuY2xhc3MgUm9vdExpc3RlbmVyc1RyYWNlciBleHRlbmRzIGJhc2VfanNfMS5CYXNlVHJhY2VyIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNvbmZpZywgb25TdGFydCwgb25FbmQsIG9uRXJyb3IsIH0pIHtcbiAgICAgICAgc3VwZXIoeyBfYXdhaXRIYW5kbGVyOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIlJvb3RMaXN0ZW5lcnNUcmFjZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgLyoqIFRoZSBSdW4ncyBJRC4gVHlwZSBVVUlEICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvb3RJZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25TdGFydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVuZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVycm9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmFyZ09uU3RhcnQgPSBvblN0YXJ0O1xuICAgICAgICB0aGlzLmFyZ09uRW5kID0gb25FbmQ7XG4gICAgICAgIHRoaXMuYXJnT25FcnJvciA9IG9uRXJyb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgbWV0aG9kIG9ubHkgY2FsbGVkIG9uY2UgZm9yIGFuIGVudGlyZSBydW4gdHJlZVxuICAgICAqIHRoZXJlZm9yZSBub3QgdXNlZnVsIGhlcmVcbiAgICAgKiBAcGFyYW0ge1J1bn0gXyBOb3QgdXNlZFxuICAgICAqL1xuICAgIHBlcnNpc3RSdW4oXykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuQ3JlYXRlKHJ1bikge1xuICAgICAgICBpZiAodGhpcy5yb290SWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3RJZCA9IHJ1bi5pZDtcbiAgICAgICAgaWYgKHRoaXMuYXJnT25TdGFydCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPblN0YXJ0KHJ1biwgdGhpcy5jb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuVXBkYXRlKHJ1bikge1xuICAgICAgICBpZiAocnVuLmlkICE9PSB0aGlzLnJvb3RJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVuLmVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcmdPbkVuZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FbmQocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVycm9yKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uRXJyb3IocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJvb3RMaXN0ZW5lcnNUcmFjZXIgPSBSb290TGlzdGVuZXJzVHJhY2VyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.cjs":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/tracer_langchain.cjs ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LangChainTracer = void 0;\nconst langsmith_1 = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.cjs\");\nconst run_trees_1 = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.cjs\");\nconst traceable_1 = __webpack_require__(/*! langsmith/singletons/traceable */ \"(rsc)/./node_modules/langsmith/singletons/traceable.cjs\");\nconst base_js_1 = __webpack_require__(/*! ./base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.cjs\");\nconst tracer_js_1 = __webpack_require__(/*! ../singletons/tracer.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.cjs\");\nclass LangChainTracer extends base_js_1.BaseTracer {\n    constructor(fields = {}) {\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"replicas\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"usesRunTreeMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        const { exampleId, projectName, client, replicas } = fields;\n        this.projectName = projectName ?? (0, langsmith_1.getDefaultProjectName)();\n        this.replicas = replicas;\n        this.exampleId = exampleId;\n        this.client = client ?? (0, tracer_js_1.getDefaultLangChainClientSingleton)();\n        const traceableTree = LangChainTracer.getTraceableRunTree();\n        if (traceableTree) {\n            this.updateFromRunTree(traceableTree);\n        }\n    }\n    async persistRun(_run) { }\n    async onRunCreate(run) {\n        const runTree = this.getRunTreeWithTracingConfig(run.id);\n        await runTree?.postRun();\n    }\n    async onRunUpdate(run) {\n        const runTree = this.getRunTreeWithTracingConfig(run.id);\n        await runTree?.patchRun();\n    }\n    getRun(id) {\n        return this.runTreeMap.get(id);\n    }\n    updateFromRunTree(runTree) {\n        this.runTreeMap.set(runTree.id, runTree);\n        let rootRun = runTree;\n        const visited = new Set();\n        while (rootRun.parent_run) {\n            if (visited.has(rootRun.id))\n                break;\n            visited.add(rootRun.id);\n            if (!rootRun.parent_run)\n                break;\n            rootRun = rootRun.parent_run;\n        }\n        visited.clear();\n        const queue = [rootRun];\n        while (queue.length > 0) {\n            const current = queue.shift();\n            if (!current || visited.has(current.id))\n                continue;\n            visited.add(current.id);\n            this.runTreeMap.set(current.id, current);\n            if (current.child_runs) {\n                queue.push(...current.child_runs);\n            }\n        }\n        this.client = runTree.client ?? this.client;\n        this.replicas = runTree.replicas ?? this.replicas;\n        this.projectName = runTree.project_name ?? this.projectName;\n        this.exampleId = runTree.reference_example_id ?? this.exampleId;\n    }\n    getRunTreeWithTracingConfig(id) {\n        const runTree = this.runTreeMap.get(id);\n        if (!runTree)\n            return undefined;\n        return new run_trees_1.RunTree({\n            ...runTree,\n            client: this.client,\n            project_name: this.projectName,\n            replicas: this.replicas,\n            reference_example_id: this.exampleId,\n            tracingEnabled: true,\n        });\n    }\n    static getTraceableRunTree() {\n        try {\n            return (\n            // The type cast here provides forward compatibility. Old versions of LangSmith will just\n            // ignore the permitAbsentRunTree arg.\n            traceable_1.getCurrentRunTree(true));\n        }\n        catch {\n            return undefined;\n        }\n    }\n}\nexports.LangChainTracer = LangChainTracer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy90cmFjZXJfbGFuZ2NoYWluLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsb0JBQW9CLG1CQUFPLENBQUMsMkRBQVc7QUFDdkMsb0JBQW9CLG1CQUFPLENBQUMseUVBQXFCO0FBQ2pELG9CQUFvQixtQkFBTyxDQUFDLCtGQUFnQztBQUM1RCxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBWTtBQUN0QyxvQkFBb0IsbUJBQU8sQ0FBQyxpR0FBMEI7QUFDdEQ7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxnQkFBZ0IsMkNBQTJDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3RyYWNlcl9sYW5nY2hhaW4uY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MYW5nQ2hhaW5UcmFjZXIgPSB2b2lkIDA7XG5jb25zdCBsYW5nc21pdGhfMSA9IHJlcXVpcmUoXCJsYW5nc21pdGhcIik7XG5jb25zdCBydW5fdHJlZXNfMSA9IHJlcXVpcmUoXCJsYW5nc21pdGgvcnVuX3RyZWVzXCIpO1xuY29uc3QgdHJhY2VhYmxlXzEgPSByZXF1aXJlKFwibGFuZ3NtaXRoL3NpbmdsZXRvbnMvdHJhY2VhYmxlXCIpO1xuY29uc3QgYmFzZV9qc18xID0gcmVxdWlyZShcIi4vYmFzZS5janNcIik7XG5jb25zdCB0cmFjZXJfanNfMSA9IHJlcXVpcmUoXCIuLi9zaW5nbGV0b25zL3RyYWNlci5janNcIik7XG5jbGFzcyBMYW5nQ2hhaW5UcmFjZXIgZXh0ZW5kcyBiYXNlX2pzXzEuQmFzZVRyYWNlciB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzID0ge30pIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJsYW5nY2hhaW5fdHJhY2VyXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInByb2plY3ROYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4YW1wbGVJZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjbGllbnRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVwbGljYXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidXNlc1J1blRyZWVNYXBcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgZXhhbXBsZUlkLCBwcm9qZWN0TmFtZSwgY2xpZW50LCByZXBsaWNhcyB9ID0gZmllbGRzO1xuICAgICAgICB0aGlzLnByb2plY3ROYW1lID0gcHJvamVjdE5hbWUgPz8gKDAsIGxhbmdzbWl0aF8xLmdldERlZmF1bHRQcm9qZWN0TmFtZSkoKTtcbiAgICAgICAgdGhpcy5yZXBsaWNhcyA9IHJlcGxpY2FzO1xuICAgICAgICB0aGlzLmV4YW1wbGVJZCA9IGV4YW1wbGVJZDtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQgPz8gKDAsIHRyYWNlcl9qc18xLmdldERlZmF1bHRMYW5nQ2hhaW5DbGllbnRTaW5nbGV0b24pKCk7XG4gICAgICAgIGNvbnN0IHRyYWNlYWJsZVRyZWUgPSBMYW5nQ2hhaW5UcmFjZXIuZ2V0VHJhY2VhYmxlUnVuVHJlZSgpO1xuICAgICAgICBpZiAodHJhY2VhYmxlVHJlZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVGcm9tUnVuVHJlZSh0cmFjZWFibGVUcmVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBwZXJzaXN0UnVuKF9ydW4pIHsgfVxuICAgIGFzeW5jIG9uUnVuQ3JlYXRlKHJ1bikge1xuICAgICAgICBjb25zdCBydW5UcmVlID0gdGhpcy5nZXRSdW5UcmVlV2l0aFRyYWNpbmdDb25maWcocnVuLmlkKTtcbiAgICAgICAgYXdhaXQgcnVuVHJlZT8ucG9zdFJ1bigpO1xuICAgIH1cbiAgICBhc3luYyBvblJ1blVwZGF0ZShydW4pIHtcbiAgICAgICAgY29uc3QgcnVuVHJlZSA9IHRoaXMuZ2V0UnVuVHJlZVdpdGhUcmFjaW5nQ29uZmlnKHJ1bi5pZCk7XG4gICAgICAgIGF3YWl0IHJ1blRyZWU/LnBhdGNoUnVuKCk7XG4gICAgfVxuICAgIGdldFJ1bihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ydW5UcmVlTWFwLmdldChpZCk7XG4gICAgfVxuICAgIHVwZGF0ZUZyb21SdW5UcmVlKHJ1blRyZWUpIHtcbiAgICAgICAgdGhpcy5ydW5UcmVlTWFwLnNldChydW5UcmVlLmlkLCBydW5UcmVlKTtcbiAgICAgICAgbGV0IHJvb3RSdW4gPSBydW5UcmVlO1xuICAgICAgICBjb25zdCB2aXNpdGVkID0gbmV3IFNldCgpO1xuICAgICAgICB3aGlsZSAocm9vdFJ1bi5wYXJlbnRfcnVuKSB7XG4gICAgICAgICAgICBpZiAodmlzaXRlZC5oYXMocm9vdFJ1bi5pZCkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB2aXNpdGVkLmFkZChyb290UnVuLmlkKTtcbiAgICAgICAgICAgIGlmICghcm9vdFJ1bi5wYXJlbnRfcnVuKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgcm9vdFJ1biA9IHJvb3RSdW4ucGFyZW50X3J1bjtcbiAgICAgICAgfVxuICAgICAgICB2aXNpdGVkLmNsZWFyKCk7XG4gICAgICAgIGNvbnN0IHF1ZXVlID0gW3Jvb3RSdW5dO1xuICAgICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQgfHwgdmlzaXRlZC5oYXMoY3VycmVudC5pZCkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB2aXNpdGVkLmFkZChjdXJyZW50LmlkKTtcbiAgICAgICAgICAgIHRoaXMucnVuVHJlZU1hcC5zZXQoY3VycmVudC5pZCwgY3VycmVudCk7XG4gICAgICAgICAgICBpZiAoY3VycmVudC5jaGlsZF9ydW5zKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCguLi5jdXJyZW50LmNoaWxkX3J1bnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xpZW50ID0gcnVuVHJlZS5jbGllbnQgPz8gdGhpcy5jbGllbnQ7XG4gICAgICAgIHRoaXMucmVwbGljYXMgPSBydW5UcmVlLnJlcGxpY2FzID8/IHRoaXMucmVwbGljYXM7XG4gICAgICAgIHRoaXMucHJvamVjdE5hbWUgPSBydW5UcmVlLnByb2plY3RfbmFtZSA/PyB0aGlzLnByb2plY3ROYW1lO1xuICAgICAgICB0aGlzLmV4YW1wbGVJZCA9IHJ1blRyZWUucmVmZXJlbmNlX2V4YW1wbGVfaWQgPz8gdGhpcy5leGFtcGxlSWQ7XG4gICAgfVxuICAgIGdldFJ1blRyZWVXaXRoVHJhY2luZ0NvbmZpZyhpZCkge1xuICAgICAgICBjb25zdCBydW5UcmVlID0gdGhpcy5ydW5UcmVlTWFwLmdldChpZCk7XG4gICAgICAgIGlmICghcnVuVHJlZSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBuZXcgcnVuX3RyZWVzXzEuUnVuVHJlZSh7XG4gICAgICAgICAgICAuLi5ydW5UcmVlLFxuICAgICAgICAgICAgY2xpZW50OiB0aGlzLmNsaWVudCxcbiAgICAgICAgICAgIHByb2plY3RfbmFtZTogdGhpcy5wcm9qZWN0TmFtZSxcbiAgICAgICAgICAgIHJlcGxpY2FzOiB0aGlzLnJlcGxpY2FzLFxuICAgICAgICAgICAgcmVmZXJlbmNlX2V4YW1wbGVfaWQ6IHRoaXMuZXhhbXBsZUlkLFxuICAgICAgICAgICAgdHJhY2luZ0VuYWJsZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VHJhY2VhYmxlUnVuVHJlZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAvLyBUaGUgdHlwZSBjYXN0IGhlcmUgcHJvdmlkZXMgZm9yd2FyZCBjb21wYXRpYmlsaXR5LiBPbGQgdmVyc2lvbnMgb2YgTGFuZ1NtaXRoIHdpbGwganVzdFxuICAgICAgICAgICAgLy8gaWdub3JlIHRoZSBwZXJtaXRBYnNlbnRSdW5UcmVlIGFyZy5cbiAgICAgICAgICAgIHRyYWNlYWJsZV8xLmdldEN1cnJlbnRSdW5UcmVlKHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5MYW5nQ2hhaW5UcmFjZXIgPSBMYW5nQ2hhaW5UcmFjZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/async_caller.cjs ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncCaller = void 0;\nconst p_retry_1 = __importDefault(__webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\"));\nconst p_queue_1 = __importDefault(__webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\"));\nconst STATUS_NO_RETRY = [\n    400, // Bad Request\n    401, // Unauthorized\n    402, // Payment Required\n    403, // Forbidden\n    404, // Not Found\n    405, // Method Not Allowed\n    406, // Not Acceptable\n    407, // Proxy Authentication Required\n    409, // Conflict\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error) => {\n    if (error.message.startsWith(\"Cancel\") ||\n        error.message.startsWith(\"AbortError\") ||\n        error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nclass AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt =\n            params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue = (\"default\" in p_queue_1.default ? p_queue_1.default.default : p_queue_1.default);\n        this.queue = new PQueue({ concurrency: this.maxConcurrency });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(() => (0, p_retry_1.default)(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            onFailedAttempt: this.onFailedAttempt,\n            retries: this.maxRetries,\n            randomize: true,\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(() => fetch(...args).then((res) => (res.ok ? res : Promise.reject(res))));\n    }\n}\nexports.AsyncCaller = AsyncCaller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/callbacks.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isTracingEnabled = void 0;\nconst env_js_1 = __webpack_require__(/*! ./env.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs\");\nconst isTracingEnabled = (tracingEnabled) => {\n    if (tracingEnabled !== undefined) {\n        return tracingEnabled;\n    }\n    const envVars = [\n        \"LANGSMITH_TRACING_V2\",\n        \"LANGCHAIN_TRACING_V2\",\n        \"LANGSMITH_TRACING\",\n        \"LANGCHAIN_TRACING\",\n    ];\n    return !!envVars.find((envVar) => (0, env_js_1.getEnvironmentVariable)(envVar) === \"true\");\n};\nexports.isTracingEnabled = isTracingEnabled;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2FsbGJhY2tzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsaUJBQWlCLG1CQUFPLENBQUMsMEVBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9jYWxsYmFja3MuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1RyYWNpbmdFbmFibGVkID0gdm9pZCAwO1xuY29uc3QgZW52X2pzXzEgPSByZXF1aXJlKFwiLi9lbnYuY2pzXCIpO1xuY29uc3QgaXNUcmFjaW5nRW5hYmxlZCA9ICh0cmFjaW5nRW5hYmxlZCkgPT4ge1xuICAgIGlmICh0cmFjaW5nRW5hYmxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nRW5hYmxlZDtcbiAgICB9XG4gICAgY29uc3QgZW52VmFycyA9IFtcbiAgICAgICAgXCJMQU5HU01JVEhfVFJBQ0lOR19WMlwiLFxuICAgICAgICBcIkxBTkdDSEFJTl9UUkFDSU5HX1YyXCIsXG4gICAgICAgIFwiTEFOR1NNSVRIX1RSQUNJTkdcIixcbiAgICAgICAgXCJMQU5HQ0hBSU5fVFJBQ0lOR1wiLFxuICAgIF07XG4gICAgcmV0dXJuICEhZW52VmFycy5maW5kKChlbnZWYXIpID0+ICgwLCBlbnZfanNfMS5nZXRFbnZpcm9ubWVudFZhcmlhYmxlKShlbnZWYXIpID09PSBcInRydWVcIik7XG59O1xuZXhwb3J0cy5pc1RyYWNpbmdFbmFibGVkID0gaXNUcmFjaW5nRW5hYmxlZDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/chunk_array.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.chunkArray = void 0;\nconst chunkArray = (arr, chunkSize) => arr.reduce((chunks, elem, index) => {\n    const chunkIndex = Math.floor(index / chunkSize);\n    const chunk = chunks[chunkIndex] || [];\n    // eslint-disable-next-line no-param-reassign\n    chunks[chunkIndex] = chunk.concat([elem]);\n    return chunks;\n}, []);\nexports.chunkArray = chunkArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2h1bmtfYXJyYXkuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9jaHVua19hcnJheS5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNodW5rQXJyYXkgPSB2b2lkIDA7XG5jb25zdCBjaHVua0FycmF5ID0gKGFyciwgY2h1bmtTaXplKSA9PiBhcnIucmVkdWNlKChjaHVua3MsIGVsZW0sIGluZGV4KSA9PiB7XG4gICAgY29uc3QgY2h1bmtJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyBjaHVua1NpemUpO1xuICAgIGNvbnN0IGNodW5rID0gY2h1bmtzW2NodW5rSW5kZXhdIHx8IFtdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGNodW5rc1tjaHVua0luZGV4XSA9IGNodW5rLmNvbmNhdChbZWxlbV0pO1xuICAgIHJldHVybiBjaHVua3M7XG59LCBbXSk7XG5leHBvcnRzLmNodW5rQXJyYXkgPSBjaHVua0FycmF5O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/env.cjs ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getEnv = exports.isNode = exports.isDeno = exports.isJsDom = exports.isWebWorker = exports.isBrowser = void 0;\nexports.getRuntimeEnvironment = getRuntimeEnvironment;\nexports.getRuntimeEnvironmentSync = getRuntimeEnvironmentSync;\nexports.getEnvironmentVariable = getEnvironmentVariable;\nconst isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexports.isBrowser = isBrowser;\nconst isWebWorker = () => typeof globalThis === \"object\" &&\n    globalThis.constructor &&\n    globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexports.isWebWorker = isWebWorker;\nconst isJsDom = () => (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n    (typeof navigator !== \"undefined\" && navigator.userAgent.includes(\"jsdom\"));\nexports.isJsDom = isJsDom;\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = () => typeof Deno !== \"undefined\";\nexports.isDeno = isDeno;\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = () => typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\" &&\n    !(0, exports.isDeno)();\nexports.isNode = isNode;\nconst getEnv = () => {\n    let env;\n    if ((0, exports.isBrowser)()) {\n        env = \"browser\";\n    }\n    else if ((0, exports.isNode)()) {\n        env = \"node\";\n    }\n    else if ((0, exports.isWebWorker)()) {\n        env = \"webworker\";\n    }\n    else if ((0, exports.isJsDom)()) {\n        env = \"jsdom\";\n    }\n    else if ((0, exports.isDeno)()) {\n        env = \"deno\";\n    }\n    else {\n        env = \"other\";\n    }\n    return env;\n};\nexports.getEnv = getEnv;\nlet runtimeEnvironment;\n/**\n * @deprecated Use getRuntimeEnvironmentSync instead\n */\nasync function getRuntimeEnvironment() {\n    return getRuntimeEnvironmentSync();\n}\nfunction getRuntimeEnvironmentSync() {\n    if (runtimeEnvironment === undefined) {\n        const env = (0, exports.getEnv)();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env,\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        if (typeof process !== \"undefined\") {\n            // eslint-disable-next-line no-process-env\n            return process.env?.[name];\n        }\n        else if ((0, exports.isDeno)()) {\n            return Deno?.env.get(name);\n        }\n        else {\n            return undefined;\n        }\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsY0FBYyxHQUFHLGNBQWMsR0FBRyxlQUFlLEdBQUcsbUJBQW1CLEdBQUcsaUJBQWlCO0FBQzVHLDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFDakMsOEJBQThCO0FBQzlCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RW52ID0gZXhwb3J0cy5pc05vZGUgPSBleHBvcnRzLmlzRGVubyA9IGV4cG9ydHMuaXNKc0RvbSA9IGV4cG9ydHMuaXNXZWJXb3JrZXIgPSBleHBvcnRzLmlzQnJvd3NlciA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0UnVudGltZUVudmlyb25tZW50ID0gZ2V0UnVudGltZUVudmlyb25tZW50O1xuZXhwb3J0cy5nZXRSdW50aW1lRW52aXJvbm1lbnRTeW5jID0gZ2V0UnVudGltZUVudmlyb25tZW50U3luYztcbmV4cG9ydHMuZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSA9IGdldEVudmlyb25tZW50VmFyaWFibGU7XG5jb25zdCBpc0Jyb3dzZXIgPSAoKSA9PiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3NlcjtcbmNvbnN0IGlzV2ViV29ya2VyID0gKCkgPT4gdHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIgJiZcbiAgICBnbG9iYWxUaGlzLmNvbnN0cnVjdG9yICYmXG4gICAgZ2xvYmFsVGhpcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkRlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXCI7XG5leHBvcnRzLmlzV2ViV29ya2VyID0gaXNXZWJXb3JrZXI7XG5jb25zdCBpc0pzRG9tID0gKCkgPT4gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Lm5hbWUgPT09IFwibm9kZWpzXCIpIHx8XG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcImpzZG9tXCIpKTtcbmV4cG9ydHMuaXNKc0RvbSA9IGlzSnNEb207XG4vLyBTdXBhYmFzZSBFZGdlIEZ1bmN0aW9uIHByb3ZpZGVzIGEgYERlbm9gIGdsb2JhbCBvYmplY3Rcbi8vIHdpdGhvdXQgYHZlcnNpb25gIHByb3BlcnR5XG5jb25zdCBpc0Rlbm8gPSAoKSA9PiB0eXBlb2YgRGVubyAhPT0gXCJ1bmRlZmluZWRcIjtcbmV4cG9ydHMuaXNEZW5vID0gaXNEZW5vO1xuLy8gTWFyayBub3QtYXMtbm9kZSBpZiBpbiBTdXBhYmFzZSBFZGdlIEZ1bmN0aW9uXG5jb25zdCBpc05vZGUgPSAoKSA9PiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICEoMCwgZXhwb3J0cy5pc0Rlbm8pKCk7XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcbmNvbnN0IGdldEVudiA9ICgpID0+IHtcbiAgICBsZXQgZW52O1xuICAgIGlmICgoMCwgZXhwb3J0cy5pc0Jyb3dzZXIpKCkpIHtcbiAgICAgICAgZW52ID0gXCJicm93c2VyXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBleHBvcnRzLmlzTm9kZSkoKSkge1xuICAgICAgICBlbnYgPSBcIm5vZGVcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIGV4cG9ydHMuaXNXZWJXb3JrZXIpKCkpIHtcbiAgICAgICAgZW52ID0gXCJ3ZWJ3b3JrZXJcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIGV4cG9ydHMuaXNKc0RvbSkoKSkge1xuICAgICAgICBlbnYgPSBcImpzZG9tXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBleHBvcnRzLmlzRGVubykoKSkge1xuICAgICAgICBlbnYgPSBcImRlbm9cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVudiA9IFwib3RoZXJcIjtcbiAgICB9XG4gICAgcmV0dXJuIGVudjtcbn07XG5leHBvcnRzLmdldEVudiA9IGdldEVudjtcbmxldCBydW50aW1lRW52aXJvbm1lbnQ7XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBnZXRSdW50aW1lRW52aXJvbm1lbnRTeW5jIGluc3RlYWRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0UnVudGltZUVudmlyb25tZW50KCkge1xuICAgIHJldHVybiBnZXRSdW50aW1lRW52aXJvbm1lbnRTeW5jKCk7XG59XG5mdW5jdGlvbiBnZXRSdW50aW1lRW52aXJvbm1lbnRTeW5jKCkge1xuICAgIGlmIChydW50aW1lRW52aXJvbm1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBlbnYgPSAoMCwgZXhwb3J0cy5nZXRFbnYpKCk7XG4gICAgICAgIHJ1bnRpbWVFbnZpcm9ubWVudCA9IHtcbiAgICAgICAgICAgIGxpYnJhcnk6IFwibGFuZ2NoYWluLWpzXCIsXG4gICAgICAgICAgICBydW50aW1lOiBlbnYsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBydW50aW1lRW52aXJvbm1lbnQ7XG59XG5mdW5jdGlvbiBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKG5hbWUpIHtcbiAgICAvLyBDZXJ0YWluIERlbm8gc2V0dXBzIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgeW91IHRyeSB0byBhY2Nlc3MgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2xhbmdjaGFpbi1haS9sYW5nY2hhaW5qcy9pc3N1ZXMvMTQxMlxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZW52XG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnY/LltuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoMCwgZXhwb3J0cy5pc0Rlbm8pKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBEZW5vPy5lbnYuZ2V0KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/event_source_parse.cjs":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/event_source_parse.cjs ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventStreamContentType = void 0;\nexports.getBytes = getBytes;\nexports.getLines = getLines;\nexports.getMessages = getMessages;\nexports.convertEventStreamToIterableReadableDataStream = convertEventStreamToIterableReadableDataStream;\n/* eslint-disable prefer-template */\n/* eslint-disable default-case */\n/* eslint-disable no-plusplus */\n// Adapted from https://github.com/gfortaine/fetch-event-source/blob/main/src/parse.ts\n// due to a packaging issue in the original.\n// MIT License\nconst stream_js_1 = __webpack_require__(/*! ./stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");\nexports.EventStreamContentType = \"text/event-stream\";\n/**\n * Converts a ReadableStream into a callback pattern.\n * @param stream The input ReadableStream.\n * @param onChunk A function that will be called on each new byte chunk in the stream.\n * @returns {Promise<void>} A promise that will be resolved when the stream closes.\n */\nasync function getBytes(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nstream, onChunk) {\n    // TODO: Use Async iteration for both cases?\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (stream instanceof ReadableStream) {\n        const reader = stream.getReader();\n        // CHANGED: Introduced a \"flush\" mechanism to process potential pending messages when the stream ends.\n        //          This change is essential to ensure that we capture every last piece of information from streams,\n        //          such as those from Azure OpenAI, which may not terminate with a blank line. Without this\n        //          mechanism, we risk ignoring a possibly significant last message.\n        //          See https://github.com/langchain-ai/langchainjs/issues/1299 for details.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                onChunk(new Uint8Array(), true);\n                break;\n            }\n            onChunk(result.value);\n        }\n    }\n    else {\n        try {\n            // Handle Node.js Readable streams with async iteration\n            for await (const chunk of stream) {\n                onChunk(new Uint8Array(chunk));\n            }\n            onChunk(new Uint8Array(), true);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            throw new Error([\n                \"Parsing event source stream failed.\",\n                \"Ensure your implementation of fetch returns a web or Node readable stream.\",\n                `Error: ${e.message}`,\n            ].join(\"\\n\"));\n        }\n    }\n}\n/**\n * Parses arbitary byte chunks into EventSource line buffers.\n * Each line should be of the format \"field: value\" and ends with \\r, \\n, or \\r\\n.\n * @param onLine A function that will be called on each new EventSource line.\n * @returns A function that should be called for each incoming byte chunk.\n */\nfunction getLines(onLine) {\n    let buffer;\n    let position; // current read position\n    let fieldLength; // length of the `field` portion of the line\n    let discardTrailingNewline = false;\n    // return a function that can process each incoming byte chunk:\n    return function onChunk(arr, flush) {\n        if (flush) {\n            onLine(arr, 0, true);\n            return;\n        }\n        if (buffer === undefined) {\n            buffer = arr;\n            position = 0;\n            fieldLength = -1;\n        }\n        else {\n            // we're still parsing the old line. Append the new bytes into buffer:\n            buffer = concat(buffer, arr);\n        }\n        const bufLength = buffer.length;\n        let lineStart = 0; // index where the current line starts\n        while (position < bufLength) {\n            if (discardTrailingNewline) {\n                if (buffer[position] === 10 /* ControlChars.NewLine */) {\n                    lineStart = ++position; // skip to next char\n                }\n                discardTrailingNewline = false;\n            }\n            // start looking forward till the end of line:\n            let lineEnd = -1; // index of the \\r or \\n char\n            for (; position < bufLength && lineEnd === -1; ++position) {\n                switch (buffer[position]) {\n                    case 58 /* ControlChars.Colon */:\n                        if (fieldLength === -1) {\n                            // first colon in line\n                            fieldLength = position - lineStart;\n                        }\n                        break;\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore:7029 \\r case below should fallthrough to \\n:\n                    case 13 /* ControlChars.CarriageReturn */:\n                        discardTrailingNewline = true;\n                    // eslint-disable-next-line no-fallthrough\n                    case 10 /* ControlChars.NewLine */:\n                        lineEnd = position;\n                        break;\n                }\n            }\n            if (lineEnd === -1) {\n                // We reached the end of the buffer but the line hasn't ended.\n                // Wait for the next arr and then continue parsing:\n                break;\n            }\n            // we've reached the line end, send it out:\n            onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n            lineStart = position; // we're now on the next line\n            fieldLength = -1;\n        }\n        if (lineStart === bufLength) {\n            buffer = undefined; // we've finished reading it\n        }\n        else if (lineStart !== 0) {\n            // Create a new view into buffer beginning at lineStart so we don't\n            // need to copy over the previous lines when we get the new arr:\n            buffer = buffer.subarray(lineStart);\n            position -= lineStart;\n        }\n    };\n}\n/**\n * Parses line buffers into EventSourceMessages.\n * @param onId A function that will be called on each `id` field.\n * @param onRetry A function that will be called on each `retry` field.\n * @param onMessage A function that will be called on each message.\n * @returns A function that should be called for each incoming line buffer.\n */\nfunction getMessages(onMessage, onId, onRetry) {\n    let message = newMessage();\n    const decoder = new TextDecoder();\n    // return a function that can process each incoming line buffer:\n    return function onLine(line, fieldLength, flush) {\n        if (flush) {\n            if (!isEmpty(message)) {\n                onMessage?.(message);\n                message = newMessage();\n            }\n            return;\n        }\n        if (line.length === 0) {\n            // empty line denotes end of message. Trigger the callback and start a new message:\n            onMessage?.(message);\n            message = newMessage();\n        }\n        else if (fieldLength > 0) {\n            // exclude comments and lines with no values\n            // line is of format \"<field>:<value>\" or \"<field>: <value>\"\n            // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n            const field = decoder.decode(line.subarray(0, fieldLength));\n            const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* ControlChars.Space */ ? 2 : 1);\n            const value = decoder.decode(line.subarray(valueOffset));\n            switch (field) {\n                case \"data\":\n                    // if this message already has data, append the new value to the old.\n                    // otherwise, just set to the new value:\n                    message.data = message.data ? message.data + \"\\n\" + value : value; // otherwise,\n                    break;\n                case \"event\":\n                    message.event = value;\n                    break;\n                case \"id\":\n                    onId?.((message.id = value));\n                    break;\n                case \"retry\": {\n                    const retry = parseInt(value, 10);\n                    if (!Number.isNaN(retry)) {\n                        // per spec, ignore non-integers\n                        onRetry?.((message.retry = retry));\n                    }\n                    break;\n                }\n            }\n        }\n    };\n}\nfunction concat(a, b) {\n    const res = new Uint8Array(a.length + b.length);\n    res.set(a);\n    res.set(b, a.length);\n    return res;\n}\nfunction newMessage() {\n    // data, event, and id must be initialized to empty strings:\n    // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n    // retry should be initialized to undefined so we return a consistent shape\n    // to the js engine all the time: https://mathiasbynens.be/notes/shapes-ics#takeaways\n    return {\n        data: \"\",\n        event: \"\",\n        id: \"\",\n        retry: undefined,\n    };\n}\nfunction convertEventStreamToIterableReadableDataStream(stream, onMetadataEvent) {\n    const dataStream = new ReadableStream({\n        async start(controller) {\n            const enqueueLine = getMessages((msg) => {\n                if (msg.event === \"error\") {\n                    throw new Error(msg.data ?? \"Unspecified event streaming error.\");\n                }\n                else if (msg.event === \"metadata\") {\n                    onMetadataEvent?.(msg);\n                }\n                else {\n                    if (msg.data)\n                        controller.enqueue(msg.data);\n                }\n            });\n            const onLine = (line, fieldLength, flush) => {\n                enqueueLine(line, fieldLength, flush);\n                if (flush)\n                    controller.close();\n            };\n            await getBytes(stream, getLines(onLine));\n        },\n    });\n    return stream_js_1.IterableReadableStream.fromReadableStream(dataStream);\n}\nfunction isEmpty(message) {\n    return (message.data === \"\" &&\n        message.event === \"\" &&\n        message.id === \"\" &&\n        message.retry === undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/event_source_parse.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.cjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/index.cjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unescapePathComponent = exports.escapePathComponent = exports.deepClone = exports.JsonPatchError = void 0;\n__exportStar(__webpack_require__(/*! ./src/core.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./src/duplex.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.cjs\"), exports);\nvar helpers_js_1 = __webpack_require__(/*! ./src/helpers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.cjs\");\nObject.defineProperty(exports, \"JsonPatchError\", ({ enumerable: true, get: function () { return helpers_js_1.PatchError; } }));\nObject.defineProperty(exports, \"deepClone\", ({ enumerable: true, get: function () { return helpers_js_1._deepClone; } }));\nObject.defineProperty(exports, \"escapePathComponent\", ({ enumerable: true, get: function () { return helpers_js_1.escapePathComponent; } }));\nObject.defineProperty(exports, \"unescapePathComponent\", ({ enumerable: true, get: function () { return helpers_js_1.unescapePathComponent; } }));\n/**\n * Default export for backwards compat\n */\nconst core = __importStar(__webpack_require__(/*! ./src/core.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.cjs\"));\nconst helpers_js_2 = __webpack_require__(/*! ./src/helpers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.cjs\");\nexports[\"default\"] = {\n    ...core,\n    // ...duplex,\n    JsonPatchError: helpers_js_2.PatchError,\n    deepClone: helpers_js_2._deepClone,\n    escapePathComponent: helpers_js_2.escapePathComponent,\n    unescapePathComponent: helpers_js_2.unescapePathComponent,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRywyQkFBMkIsR0FBRyxpQkFBaUIsR0FBRyxzQkFBc0I7QUFDeEcsYUFBYSxtQkFBTyxDQUFDLG9HQUFnQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMsd0dBQWtCO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLDBHQUFtQjtBQUM5QyxrREFBaUQsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDNUgsNkNBQTRDLEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQ3ZILHVEQUFzRCxFQUFFLHFDQUFxQyw0Q0FBNEMsRUFBQztBQUMxSSx5REFBd0QsRUFBRSxxQ0FBcUMsOENBQThDLEVBQUM7QUFDOUk7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFPLENBQUMsb0dBQWdCO0FBQ2xELHFCQUFxQixtQkFBTyxDQUFDLDBHQUFtQjtBQUNoRCxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9mYXN0LWpzb24tcGF0Y2gvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3duS2V5cyA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICB2YXIgYXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgICAgICAgICByZXR1cm4gYXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvd25LZXlzKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2QpIHtcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgPSBvd25LZXlzKG1vZCksIGkgPSAwOyBpIDwgay5sZW5ndGg7IGkrKykgaWYgKGtbaV0gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaV0pO1xuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51bmVzY2FwZVBhdGhDb21wb25lbnQgPSBleHBvcnRzLmVzY2FwZVBhdGhDb21wb25lbnQgPSBleHBvcnRzLmRlZXBDbG9uZSA9IGV4cG9ydHMuSnNvblBhdGNoRXJyb3IgPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3JjL2NvcmUuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zcmMvZHVwbGV4LmNqc1wiKSwgZXhwb3J0cyk7XG52YXIgaGVscGVyc19qc18xID0gcmVxdWlyZShcIi4vc3JjL2hlbHBlcnMuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSnNvblBhdGNoRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlbHBlcnNfanNfMS5QYXRjaEVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVlcENsb25lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzX2pzXzEuX2RlZXBDbG9uZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVzY2FwZVBhdGhDb21wb25lbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGhlbHBlcnNfanNfMS5lc2NhcGVQYXRoQ29tcG9uZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidW5lc2NhcGVQYXRoQ29tcG9uZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoZWxwZXJzX2pzXzEudW5lc2NhcGVQYXRoQ29tcG9uZW50OyB9IH0pO1xuLyoqXG4gKiBEZWZhdWx0IGV4cG9ydCBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5jb25zdCBjb3JlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3NyYy9jb3JlLmNqc1wiKSk7XG5jb25zdCBoZWxwZXJzX2pzXzIgPSByZXF1aXJlKFwiLi9zcmMvaGVscGVycy5janNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgLi4uY29yZSxcbiAgICAvLyAuLi5kdXBsZXgsXG4gICAgSnNvblBhdGNoRXJyb3I6IGhlbHBlcnNfanNfMi5QYXRjaEVycm9yLFxuICAgIGRlZXBDbG9uZTogaGVscGVyc19qc18yLl9kZWVwQ2xvbmUsXG4gICAgZXNjYXBlUGF0aENvbXBvbmVudDogaGVscGVyc19qc18yLmVzY2FwZVBhdGhDb21wb25lbnQsXG4gICAgdW5lc2NhcGVQYXRoQ29tcG9uZW50OiBoZWxwZXJzX2pzXzIudW5lc2NhcGVQYXRoQ29tcG9uZW50LFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.cjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.cjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// @ts-nocheck\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deepClone = exports.JsonPatchError = void 0;\nexports.getValueByPointer = getValueByPointer;\nexports.applyOperation = applyOperation;\nexports.applyPatch = applyPatch;\nexports.applyReducer = applyReducer;\nexports.validator = validator;\nexports.validate = validate;\nexports._areEquals = _areEquals;\nconst helpers_js_1 = __webpack_require__(/*! ./helpers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.cjs\");\nexports.JsonPatchError = helpers_js_1.PatchError;\nexports.deepClone = helpers_js_1._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */\n/* The operations applicable to an object */\nconst objOps = {\n    add: function (obj, key, document) {\n        obj[key] = this.value;\n        return { newDocument: document };\n    },\n    remove: function (obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return { newDocument: document, removed };\n    },\n    replace: function (obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return { newDocument: document, removed };\n    },\n    move: function (obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */\n        let removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = (0, helpers_js_1._deepClone)(removed);\n        }\n        const originalValue = applyOperation(document, {\n            op: \"remove\",\n            path: this.from,\n        }).removed;\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: originalValue,\n        });\n        return { newDocument: document, removed };\n    },\n    copy: function (obj, key, document) {\n        const valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: (0, helpers_js_1._deepClone)(valueToCopy),\n        });\n        return { newDocument: document };\n    },\n    test: function (obj, key, document) {\n        return { newDocument: document, test: _areEquals(obj[key], this.value) };\n    },\n    _get: function (obj, key, document) {\n        this.value = obj[key];\n        return { newDocument: document };\n    },\n};\n/* The operations applicable to an array. Many are the same as for the object */\nvar arrOps = {\n    add: function (arr, i, document) {\n        if ((0, helpers_js_1.isInteger)(i)) {\n            arr.splice(i, 0, this.value);\n        }\n        else {\n            // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return { newDocument: document, index: i };\n    },\n    remove: function (arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return { newDocument: document, removed: removedList[0] };\n    },\n    replace: function (arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return { newDocument: document, removed };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get,\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */\nfunction getValueByPointer(document, pointer) {\n    if (pointer == \"\") {\n        return document;\n    }\n    var getOriginalDestination = { op: \"_get\", path: pointer };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */\nfunction applyOperation(document, operation, validateOperation = false, mutateDocument = true, banPrototypeModifications = true, index = 0) {\n    if (validateOperation) {\n        if (typeof validateOperation == \"function\") {\n            validateOperation(operation, 0, document, operation.path);\n        }\n        else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */\n    if (operation.path === \"\") {\n        let returnValue = { newDocument: document };\n        if (operation.op === \"add\") {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        }\n        else if (operation.op === \"replace\") {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        }\n        else if (operation.op === \"move\" || operation.op === \"copy\") {\n            // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === \"move\") {\n                // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        }\n        else if (operation.op === \"test\") {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new exports.JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        }\n        else if (operation.op === \"remove\") {\n            // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        }\n        else if (operation.op === \"_get\") {\n            operation.value = document;\n            return returnValue;\n        }\n        else {\n            /* bad operation */\n            if (validateOperation) {\n                throw new exports.JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n            }\n            else {\n                return returnValue;\n            }\n        }\n    } /* END ROOT OPERATIONS */\n    else {\n        if (!mutateDocument) {\n            document = (0, helpers_js_1._deepClone)(document);\n        }\n        const path = operation.path || \"\";\n        const keys = path.split(\"/\");\n        let obj = document;\n        let t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        let len = keys.length;\n        let existingPathFragment = undefined;\n        let key;\n        let validateFunction;\n        if (typeof validateOperation == \"function\") {\n            validateFunction = validateOperation;\n        }\n        else {\n            validateFunction = validator;\n        }\n        while (true) {\n            key = keys[t];\n            if (key && key.indexOf(\"~\") != -1) {\n                key = (0, helpers_js_1.unescapePathComponent)(key);\n            }\n            if (banPrototypeModifications &&\n                (key == \"__proto__\" ||\n                    (key == \"prototype\" && t > 0 && keys[t - 1] == \"constructor\"))) {\n                throw new TypeError(\"JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README\");\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join(\"/\");\n                    }\n                    else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === \"-\") {\n                    key = obj.length;\n                }\n                else {\n                    if (validateOperation && !(0, helpers_js_1.isInteger)(key)) {\n                        throw new exports.JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } // only parse key when it's an integer for `arr.prop` to work\n                    else if ((0, helpers_js_1.isInteger)(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new exports.JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    const returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new exports.JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            else {\n                if (t >= len) {\n                    const returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new exports.JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new exports.JsonPatchError(\"Cannot perform operation at the desired path\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */\nfunction applyPatch(document, patch, validateOperation, mutateDocument = true, banPrototypeModifications = true) {\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new exports.JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n    }\n    if (!mutateDocument) {\n        document = (0, helpers_js_1._deepClone)(document);\n    }\n    const results = new Array(patch.length);\n    for (let i = 0, length = patch.length; i < length; i++) {\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */\nfunction applyReducer(document, operation, index) {\n    const operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) {\n        // failed test\n        throw new exports.JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */\nfunction validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== \"object\" ||\n        operation === null ||\n        Array.isArray(operation)) {\n        throw new exports.JsonPatchError(\"Operation is not an object\", \"OPERATION_NOT_AN_OBJECT\", index, operation, document);\n    }\n    else if (!objOps[operation.op]) {\n        throw new exports.JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n    }\n    else if (typeof operation.path !== \"string\") {\n        throw new exports.JsonPatchError(\"Operation `path` property is not a string\", \"OPERATION_PATH_INVALID\", index, operation, document);\n    }\n    else if (operation.path.indexOf(\"/\") !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new exports.JsonPatchError('Operation `path` property must start with \"/\"', \"OPERATION_PATH_INVALID\", index, operation, document);\n    }\n    else if ((operation.op === \"move\" || operation.op === \"copy\") &&\n        typeof operation.from !== \"string\") {\n        throw new exports.JsonPatchError(\"Operation `from` property is not present (applicable in `move` and `copy` operations)\", \"OPERATION_FROM_REQUIRED\", index, operation, document);\n    }\n    else if ((operation.op === \"add\" ||\n        operation.op === \"replace\" ||\n        operation.op === \"test\") &&\n        operation.value === undefined) {\n        throw new exports.JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_REQUIRED\", index, operation, document);\n    }\n    else if ((operation.op === \"add\" ||\n        operation.op === \"replace\" ||\n        operation.op === \"test\") &&\n        (0, helpers_js_1.hasUndefined)(operation.value)) {\n        throw new exports.JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED\", index, operation, document);\n    }\n    else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new exports.JsonPatchError(\"Cannot perform an `add` operation at the desired path\", \"OPERATION_PATH_CANNOT_ADD\", index, operation, document);\n            }\n        }\n        else if (operation.op === \"replace\" ||\n            operation.op === \"remove\" ||\n            operation.op === \"_get\") {\n            if (operation.path !== existingPathFragment) {\n                throw new exports.JsonPatchError(\"Cannot perform the operation at a path that does not exist\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n        else if (operation.op === \"move\" || operation.op === \"copy\") {\n            var existingValue = {\n                op: \"_get\",\n                path: operation.from,\n                value: undefined,\n            };\n            var error = validate([existingValue], document);\n            if (error && error.name === \"OPERATION_PATH_UNRESOLVABLE\") {\n                throw new exports.JsonPatchError(\"Cannot perform the operation from a path that does not exist\", \"OPERATION_FROM_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */\nfunction validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new exports.JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch((0, helpers_js_1._deepClone)(document), (0, helpers_js_1._deepClone)(sequence), externalValidator || true);\n        }\n        else {\n            externalValidator = externalValidator || validator;\n            for (var i = 0; i < sequence.length; i++) {\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    }\n    catch (e) {\n        if (e instanceof exports.JsonPatchError) {\n            return e;\n        }\n        else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction _areEquals(a, b) {\n    if (a === b)\n        return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (!_areEquals(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (arrA != arrB)\n            return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length)\n            return false;\n        for (i = length; i-- !== 0;)\n            if (!b.hasOwnProperty(keys[i]))\n                return false;\n        for (i = length; i-- !== 0;) {\n            key = keys[i];\n            if (!_areEquals(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.cjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.cjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// @ts-nocheck\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unobserve = unobserve;\nexports.observe = observe;\nexports.generate = generate;\nexports.compare = compare;\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2013-2021 Joachim Wester\n * MIT license\n */\nconst helpers_js_1 = __webpack_require__(/*! ./helpers.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.cjs\");\nconst core_js_1 = __webpack_require__(/*! ./core.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.cjs\");\nvar beforeDict = new WeakMap();\nclass Mirror {\n    constructor(obj) {\n        Object.defineProperty(this, \"obj\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.obj = obj;\n    }\n}\nclass ObserverInfo {\n    constructor(callback, observer) {\n        Object.defineProperty(this, \"callback\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callback = callback;\n        this.observer = observer;\n    }\n}\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */\nfunction unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */\nfunction observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    }\n    else {\n        const observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = (0, helpers_js_1._deepClone)(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = () => {\n            generate(observer);\n        };\n        var fastCheck = () => {\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (typeof window !== \"undefined\") {\n            //not Node\n            window.addEventListener(\"mouseup\", fastCheck);\n            window.addEventListener(\"keyup\", fastCheck);\n            window.addEventListener(\"mousedown\", fastCheck);\n            window.addEventListener(\"keydown\", fastCheck);\n            window.addEventListener(\"change\", fastCheck);\n        }\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = () => {\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (typeof window !== \"undefined\") {\n            window.removeEventListener(\"mouseup\", fastCheck);\n            window.removeEventListener(\"keyup\", fastCheck);\n            window.removeEventListener(\"mousedown\", fastCheck);\n            window.removeEventListener(\"keydown\", fastCheck);\n            window.removeEventListener(\"change\", fastCheck);\n        }\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */\nfunction generate(observer, invertible = false) {\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        (0, core_js_1.applyPatch)(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = (0, helpers_js_1._objectKeys)(obj);\n    var oldKeys = (0, helpers_js_1._objectKeys)(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for (var t = oldKeys.length - 1; t >= 0; t--) {\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if ((0, helpers_js_1.hasOwnProperty)(obj, key) &&\n            !(obj[key] === undefined &&\n                oldVal !== undefined &&\n                Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" &&\n                oldVal != null &&\n                typeof newVal == \"object\" &&\n                newVal != null &&\n                Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + (0, helpers_js_1.escapePathComponent)(key), invertible);\n            }\n            else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({\n                            op: \"test\",\n                            path: path + \"/\" + (0, helpers_js_1.escapePathComponent)(key),\n                            value: (0, helpers_js_1._deepClone)(oldVal),\n                        });\n                    }\n                    patches.push({\n                        op: \"replace\",\n                        path: path + \"/\" + (0, helpers_js_1.escapePathComponent)(key),\n                        value: (0, helpers_js_1._deepClone)(newVal),\n                    });\n                }\n            }\n        }\n        else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path: path + \"/\" + (0, helpers_js_1.escapePathComponent)(key),\n                    value: (0, helpers_js_1._deepClone)(oldVal),\n                });\n            }\n            patches.push({\n                op: \"remove\",\n                path: path + \"/\" + (0, helpers_js_1.escapePathComponent)(key),\n            });\n            deleted = true; // property has been deleted\n        }\n        else {\n            if (invertible) {\n                patches.push({ op: \"test\", path, value: mirror });\n            }\n            patches.push({ op: \"replace\", path, value: obj });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for (var t = 0; t < newKeys.length; t++) {\n        var key = newKeys[t];\n        if (!(0, helpers_js_1.hasOwnProperty)(mirror, key) && obj[key] !== undefined) {\n            patches.push({\n                op: \"add\",\n                path: path + \"/\" + (0, helpers_js_1.escapePathComponent)(key),\n                value: (0, helpers_js_1._deepClone)(obj[key]),\n            });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */\nfunction compare(tree1, tree2, invertible = false) {\n    var patches = [];\n    _generate(tree1, tree2, patches, \"\", invertible);\n    return patches;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.cjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.cjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// @ts-nocheck\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PatchError = void 0;\nexports.hasOwnProperty = hasOwnProperty;\nexports._objectKeys = _objectKeys;\nexports._deepClone = _deepClone;\nexports.isInteger = isInteger;\nexports.escapePathComponent = escapePathComponent;\nexports.unescapePathComponent = unescapePathComponent;\nexports._getPathRecursive = _getPathRecursive;\nexports.getPath = getPath;\nexports.hasUndefined = hasUndefined;\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        const keys = new Array(obj.length);\n        for (let k = 0; k < keys.length; k++) {\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    let keys = [];\n    for (let i in obj) {\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n/**\n * Deeply clone the object.\n * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n * @param  {any} obj value to clone\n * @return {any} cloned obj\n */\nfunction _deepClone(obj) {\n    switch (typeof obj) {\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    let i = 0;\n    const len = str.length;\n    let charCode;\n    while (i < len) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n * Escapes a json pointer path\n * @param path The raw pointer\n * @return the Escaped path\n */\nfunction escapePathComponent(path) {\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1)\n        return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */\nfunction unescapePathComponent(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction _getPathRecursive(root, obj) {\n    let found;\n    for (let key in root) {\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + \"/\";\n            }\n            else if (typeof root[key] === \"object\") {\n                found = _getPathRecursive(root[key], obj);\n                if (found != \"\") {\n                    return escapePathComponent(key) + \"/\" + found;\n                }\n            }\n        }\n    }\n    return \"\";\n}\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return \"/\";\n    }\n    const path = _getPathRecursive(root, obj);\n    if (path === \"\") {\n        throw new Error(\"Object not found in root\");\n    }\n    return `/${path}`;\n}\n/**\n * Recursively checks whether an object has any undefined values inside.\n */\nfunction hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for (let i = 0, len = obj.length; i < len; i++) {\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        }\n        else if (typeof obj === \"object\") {\n            const objKeys = _objectKeys(obj);\n            const objKeysLength = objKeys.length;\n            for (var i = 0; i < objKeysLength; i++) {\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    const messageParts = [message];\n    for (const key in args) {\n        const value = typeof args[key] === \"object\"\n            ? JSON.stringify(args[key], null, 2)\n            : args[key]; // pretty print\n        if (typeof value !== \"undefined\") {\n            messageParts.push(`${key}: ${value}`);\n        }\n    }\n    return messageParts.join(\"\\n\");\n}\nclass PatchError extends Error {\n    constructor(message, name, index, operation, tree) {\n        super(patchErrorMessageFormatter(message, { name, index, operation, tree }));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: name\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: index\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: operation\n        });\n        Object.defineProperty(this, \"tree\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tree\n        });\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        this.message = patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree,\n        });\n    }\n}\nexports.PatchError = PatchError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/function_calling.cjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isLangChainTool = exports.isRunnableToolLike = exports.isStructuredToolParams = exports.isStructuredTool = void 0;\nexports.convertToOpenAIFunction = convertToOpenAIFunction;\nexports.convertToOpenAITool = convertToOpenAITool;\nconst types_js_1 = __webpack_require__(/*! ../tools/types.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tools/types.cjs\");\nconst json_schema_js_1 = __webpack_require__(/*! ./json_schema.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs\");\n// These utility functions were moved to a more appropriate location,\n// but we still export them here for backwards compatibility.\nvar types_js_2 = __webpack_require__(/*! ../tools/types.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tools/types.cjs\");\nObject.defineProperty(exports, \"isStructuredTool\", ({ enumerable: true, get: function () { return types_js_2.isStructuredTool; } }));\nObject.defineProperty(exports, \"isStructuredToolParams\", ({ enumerable: true, get: function () { return types_js_2.isStructuredToolParams; } }));\nObject.defineProperty(exports, \"isRunnableToolLike\", ({ enumerable: true, get: function () { return types_js_2.isRunnableToolLike; } }));\nObject.defineProperty(exports, \"isLangChainTool\", ({ enumerable: true, get: function () { return types_js_2.isLangChainTool; } }));\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a format\n * that is compatible with OpenAI function calling. If `StructuredTool` or\n * `RunnableToolLike` has a zod schema, the output will be converted into a\n * JSON schema, which is then used as the parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | RunnableToolLike} tool The tool to convert to an OpenAI function.\n * @returns {FunctionDefinition} The inputted tool in OpenAI function format.\n */\nfunction convertToOpenAIFunction(tool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters: (0, json_schema_js_1.toJsonSchema)(tool.schema),\n        // Do not include the `strict` field if it is `undefined`.\n        ...(fieldsCopy?.strict !== undefined ? { strict: fieldsCopy.strict } : {}),\n    };\n}\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a\n * format that is compatible with OpenAI tool calling. If `StructuredTool` or\n * `RunnableToolLike` has a zod schema, the output will be converted into a\n * JSON schema, which is then used as the parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | Record<string, any> | RunnableToolLike} tool The tool to convert to an OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */\nfunction convertToOpenAITool(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    let toolDef;\n    if ((0, types_js_1.isLangChainTool)(tool)) {\n        toolDef = {\n            type: \"function\",\n            function: convertToOpenAIFunction(tool),\n        };\n    }\n    else {\n        toolDef = tool;\n    }\n    if (fieldsCopy?.strict !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        toolDef.function.strict = fieldsCopy.strict;\n    }\n    return toolDef;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZnVuY3Rpb25fY2FsbGluZy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsMEJBQTBCLEdBQUcsOEJBQThCLEdBQUcsd0JBQXdCO0FBQ2hILCtCQUErQjtBQUMvQiwyQkFBMkI7QUFDM0IsbUJBQW1CLG1CQUFPLENBQUMscUZBQW9CO0FBQy9DLHlCQUF5QixtQkFBTyxDQUFDLDBGQUFtQjtBQUNwRDtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMscUZBQW9CO0FBQzdDLG9EQUFtRCxFQUFFLHFDQUFxQyx1Q0FBdUMsRUFBQztBQUNsSSwwREFBeUQsRUFBRSxxQ0FBcUMsNkNBQTZDLEVBQUM7QUFDOUksc0RBQXFELEVBQUUscUNBQXFDLHlDQUF5QyxFQUFDO0FBQ3RJLG1EQUFrRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRDQUE0QztBQUN2RCxhQUFhLG9CQUFvQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsNEJBQTRCLElBQUk7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0VBQWtFO0FBQzdFLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9mdW5jdGlvbl9jYWxsaW5nLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNMYW5nQ2hhaW5Ub29sID0gZXhwb3J0cy5pc1J1bm5hYmxlVG9vbExpa2UgPSBleHBvcnRzLmlzU3RydWN0dXJlZFRvb2xQYXJhbXMgPSBleHBvcnRzLmlzU3RydWN0dXJlZFRvb2wgPSB2b2lkIDA7XG5leHBvcnRzLmNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uID0gY29udmVydFRvT3BlbkFJRnVuY3Rpb247XG5leHBvcnRzLmNvbnZlcnRUb09wZW5BSVRvb2wgPSBjb252ZXJ0VG9PcGVuQUlUb29sO1xuY29uc3QgdHlwZXNfanNfMSA9IHJlcXVpcmUoXCIuLi90b29scy90eXBlcy5janNcIik7XG5jb25zdCBqc29uX3NjaGVtYV9qc18xID0gcmVxdWlyZShcIi4vanNvbl9zY2hlbWEuY2pzXCIpO1xuLy8gVGhlc2UgdXRpbGl0eSBmdW5jdGlvbnMgd2VyZSBtb3ZlZCB0byBhIG1vcmUgYXBwcm9wcmlhdGUgbG9jYXRpb24sXG4vLyBidXQgd2Ugc3RpbGwgZXhwb3J0IHRoZW0gaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG52YXIgdHlwZXNfanNfMiA9IHJlcXVpcmUoXCIuLi90b29scy90eXBlcy5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1N0cnVjdHVyZWRUb29sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc19qc18yLmlzU3RydWN0dXJlZFRvb2w7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1N0cnVjdHVyZWRUb29sUGFyYW1zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc19qc18yLmlzU3RydWN0dXJlZFRvb2xQYXJhbXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1J1bm5hYmxlVG9vbExpa2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR5cGVzX2pzXzIuaXNSdW5uYWJsZVRvb2xMaWtlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNMYW5nQ2hhaW5Ub29sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlc19qc18yLmlzTGFuZ0NoYWluVG9vbDsgfSB9KTtcbi8qKlxuICogRm9ybWF0cyBhIGBTdHJ1Y3R1cmVkVG9vbGAgb3IgYFJ1bm5hYmxlVG9vbExpa2VgIGluc3RhbmNlIGludG8gYSBmb3JtYXRcbiAqIHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIE9wZW5BSSBmdW5jdGlvbiBjYWxsaW5nLiBJZiBgU3RydWN0dXJlZFRvb2xgIG9yXG4gKiBgUnVubmFibGVUb29sTGlrZWAgaGFzIGEgem9kIHNjaGVtYSwgdGhlIG91dHB1dCB3aWxsIGJlIGNvbnZlcnRlZCBpbnRvIGFcbiAqIEpTT04gc2NoZW1hLCB3aGljaCBpcyB0aGVuIHVzZWQgYXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBPcGVuQUkgdG9vbC5cbiAqXG4gKiBAcGFyYW0ge1N0cnVjdHVyZWRUb29sSW50ZXJmYWNlIHwgUnVubmFibGVUb29sTGlrZX0gdG9vbCBUaGUgdG9vbCB0byBjb252ZXJ0IHRvIGFuIE9wZW5BSSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbkRlZmluaXRpb259IFRoZSBpbnB1dHRlZCB0b29sIGluIE9wZW5BSSBmdW5jdGlvbiBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uKHRvb2wsIGZpZWxkcykge1xuICAgIC8vIEBUT0RPIDAuMy4wIFJlbW92ZSB0aGUgYG51bWJlcmAgdHlwaW5nXG4gICAgY29uc3QgZmllbGRzQ29weSA9IHR5cGVvZiBmaWVsZHMgPT09IFwibnVtYmVyXCIgPyB1bmRlZmluZWQgOiBmaWVsZHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvbixcbiAgICAgICAgcGFyYW1ldGVyczogKDAsIGpzb25fc2NoZW1hX2pzXzEudG9Kc29uU2NoZW1hKSh0b29sLnNjaGVtYSksXG4gICAgICAgIC8vIERvIG5vdCBpbmNsdWRlIHRoZSBgc3RyaWN0YCBmaWVsZCBpZiBpdCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgICAgLi4uKGZpZWxkc0NvcHk/LnN0cmljdCAhPT0gdW5kZWZpbmVkID8geyBzdHJpY3Q6IGZpZWxkc0NvcHkuc3RyaWN0IH0gOiB7fSksXG4gICAgfTtcbn1cbi8qKlxuICogRm9ybWF0cyBhIGBTdHJ1Y3R1cmVkVG9vbGAgb3IgYFJ1bm5hYmxlVG9vbExpa2VgIGluc3RhbmNlIGludG8gYVxuICogZm9ybWF0IHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIE9wZW5BSSB0b29sIGNhbGxpbmcuIElmIGBTdHJ1Y3R1cmVkVG9vbGAgb3JcbiAqIGBSdW5uYWJsZVRvb2xMaWtlYCBoYXMgYSB6b2Qgc2NoZW1hLCB0aGUgb3V0cHV0IHdpbGwgYmUgY29udmVydGVkIGludG8gYVxuICogSlNPTiBzY2hlbWEsIHdoaWNoIGlzIHRoZW4gdXNlZCBhcyB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIE9wZW5BSSB0b29sLlxuICpcbiAqIEBwYXJhbSB7U3RydWN0dXJlZFRvb2xJbnRlcmZhY2UgfCBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgUnVubmFibGVUb29sTGlrZX0gdG9vbCBUaGUgdG9vbCB0byBjb252ZXJ0IHRvIGFuIE9wZW5BSSB0b29sLlxuICogQHJldHVybnMge1Rvb2xEZWZpbml0aW9ufSBUaGUgaW5wdXR0ZWQgdG9vbCBpbiBPcGVuQUkgdG9vbCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUb09wZW5BSVRvb2woXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudG9vbCwgZmllbGRzKSB7XG4gICAgLy8gQFRPRE8gMC4zLjAgUmVtb3ZlIHRoZSBgbnVtYmVyYCB0eXBpbmdcbiAgICBjb25zdCBmaWVsZHNDb3B5ID0gdHlwZW9mIGZpZWxkcyA9PT0gXCJudW1iZXJcIiA/IHVuZGVmaW5lZCA6IGZpZWxkcztcbiAgICBsZXQgdG9vbERlZjtcbiAgICBpZiAoKDAsIHR5cGVzX2pzXzEuaXNMYW5nQ2hhaW5Ub29sKSh0b29sKSkge1xuICAgICAgICB0b29sRGVmID0ge1xuICAgICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgICAgZnVuY3Rpb246IGNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uKHRvb2wpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdG9vbERlZiA9IHRvb2w7XG4gICAgfVxuICAgIGlmIChmaWVsZHNDb3B5Py5zdHJpY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB0b29sRGVmLmZ1bmN0aW9uLnN0cmljdCA9IGZpZWxkc0NvcHkuc3RyaWN0O1xuICAgIH1cbiAgICByZXR1cm4gdG9vbERlZjtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/hash.cjs":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/hash.cjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sha256 = exports.insecureHash = void 0;\nvar hash_js_1 = __webpack_require__(/*! ./js-sha1/hash.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.cjs\");\nObject.defineProperty(exports, \"insecureHash\", ({ enumerable: true, get: function () { return hash_js_1.insecureHash; } }));\nvar hash_js_2 = __webpack_require__(/*! ./js-sha256/hash.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/js-sha256/hash.cjs\");\nObject.defineProperty(exports, \"sha256\", ({ enumerable: true, get: function () { return hash_js_2.sha256; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvaGFzaC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxHQUFHLG9CQUFvQjtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQyw0RkFBb0I7QUFDNUMsZ0RBQStDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3pILGdCQUFnQixtQkFBTyxDQUFDLGdHQUFzQjtBQUM5QywwQ0FBeUMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2hhc2guY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaGEyNTYgPSBleHBvcnRzLmluc2VjdXJlSGFzaCA9IHZvaWQgMDtcbnZhciBoYXNoX2pzXzEgPSByZXF1aXJlKFwiLi9qcy1zaGExL2hhc2guY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW5zZWN1cmVIYXNoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoYXNoX2pzXzEuaW5zZWN1cmVIYXNoOyB9IH0pO1xudmFyIGhhc2hfanNfMiA9IHJlcXVpcmUoXCIuL2pzLXNoYTI1Ni9oYXNoLmNqc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNoYTI1NlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaGFzaF9qc18yLnNoYTI1NjsgfSB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/hash.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/js-sha1/hash.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.insecureHash = void 0;\nvar root = typeof window === \"object\" ? window : {};\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [-2147483648, 8388608, 32768, 128];\nvar SHIFT = [24, 16, 8, 0];\nvar OUTPUT_TYPES = [\"hex\", \"array\", \"digest\", \"arrayBuffer\"];\nvar blocks = [];\nfunction Sha1(sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] =\n            blocks[16] =\n                blocks[1] =\n                    blocks[2] =\n                        blocks[3] =\n                            blocks[4] =\n                                blocks[5] =\n                                    blocks[6] =\n                                        blocks[7] =\n                                            blocks[8] =\n                                                blocks[9] =\n                                                    blocks[10] =\n                                                        blocks[11] =\n                                                            blocks[12] =\n                                                                blocks[13] =\n                                                                    blocks[14] =\n                                                                        blocks[15] =\n                                                                            0;\n        this.blocks = blocks;\n    }\n    else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n    this.h0 = 0x67452301;\n    this.h1 = 0xefcdab89;\n    this.h2 = 0x98badcfe;\n    this.h3 = 0x10325476;\n    this.h4 = 0xc3d2e1f0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n}\nSha1.prototype.update = function (message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString = typeof message !== \"string\";\n    if (notString && message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n    while (index < length) {\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            blocks[16] =\n                blocks[1] =\n                    blocks[2] =\n                        blocks[3] =\n                            blocks[4] =\n                                blocks[5] =\n                                    blocks[6] =\n                                        blocks[7] =\n                                            blocks[8] =\n                                                blocks[9] =\n                                                    blocks[10] =\n                                                        blocks[11] =\n                                                            blocks[12] =\n                                                                blocks[13] =\n                                                                    blocks[14] =\n                                                                        blocks[15] =\n                                                                            0;\n        }\n        if (notString) {\n            for (i = this.start; index < length && i < 64; ++index) {\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        }\n        else {\n            for (i = this.start; index < length && i < 64; ++index) {\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                }\n                else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n                else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n                else {\n                    code =\n                        0x10000 +\n                            (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        }\n        else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += (this.bytes / 4294967296) << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha1.prototype.finalize = function () {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] =\n            blocks[1] =\n                blocks[2] =\n                    blocks[3] =\n                        blocks[4] =\n                            blocks[5] =\n                                blocks[6] =\n                                    blocks[7] =\n                                        blocks[8] =\n                                            blocks[9] =\n                                                blocks[10] =\n                                                    blocks[11] =\n                                                        blocks[12] =\n                                                            blocks[13] =\n                                                                blocks[14] =\n                                                                    blocks[15] =\n                                                                        0;\n    }\n    blocks[14] = (this.hBytes << 3) | (this.bytes >>> 29);\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha1.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n    for (j = 16; j < 80; ++j) {\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n        blocks[j] = (t << 1) | (t >>> 31);\n    }\n    for (j = 0; j < 20; j += 5) {\n        f = (b & c) | (~b & d);\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e + 1518500249 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = (a & b) | (~a & c);\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d + 1518500249 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = (e & a) | (~e & b);\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c + 1518500249 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = (d & e) | (~d & a);\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b + 1518500249 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = (c & d) | (~c & e);\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a + 1518500249 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    for (; j < 40; j += 5) {\n        f = b ^ c ^ d;\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e + 1859775393 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = a ^ b ^ c;\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d + 1859775393 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = e ^ a ^ b;\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c + 1859775393 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = d ^ e ^ a;\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b + 1859775393 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = c ^ d ^ e;\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a + 1859775393 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    for (; j < 60; j += 5) {\n        f = (b & c) | (b & d) | (c & d);\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e - 1894007588 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = (a & b) | (a & c) | (b & c);\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d - 1894007588 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = (e & a) | (e & b) | (a & b);\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c - 1894007588 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = (d & e) | (d & a) | (e & a);\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b - 1894007588 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = (c & d) | (c & e) | (d & e);\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a - 1894007588 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    for (; j < 80; j += 5) {\n        f = b ^ c ^ d;\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e - 899497514 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = a ^ b ^ c;\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d - 899497514 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = e ^ a ^ b;\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c - 899497514 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = d ^ e ^ a;\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b - 899497514 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = c ^ d ^ e;\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a - 899497514 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    this.h0 = (this.h0 + a) << 0;\n    this.h1 = (this.h1 + b) << 0;\n    this.h2 = (this.h2 + c) << 0;\n    this.h3 = (this.h3 + d) << 0;\n    this.h4 = (this.h4 + e) << 0;\n};\nSha1.prototype.hex = function () {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return (HEX_CHARS[(h0 >> 28) & 0x0f] +\n        HEX_CHARS[(h0 >> 24) & 0x0f] +\n        HEX_CHARS[(h0 >> 20) & 0x0f] +\n        HEX_CHARS[(h0 >> 16) & 0x0f] +\n        HEX_CHARS[(h0 >> 12) & 0x0f] +\n        HEX_CHARS[(h0 >> 8) & 0x0f] +\n        HEX_CHARS[(h0 >> 4) & 0x0f] +\n        HEX_CHARS[h0 & 0x0f] +\n        HEX_CHARS[(h1 >> 28) & 0x0f] +\n        HEX_CHARS[(h1 >> 24) & 0x0f] +\n        HEX_CHARS[(h1 >> 20) & 0x0f] +\n        HEX_CHARS[(h1 >> 16) & 0x0f] +\n        HEX_CHARS[(h1 >> 12) & 0x0f] +\n        HEX_CHARS[(h1 >> 8) & 0x0f] +\n        HEX_CHARS[(h1 >> 4) & 0x0f] +\n        HEX_CHARS[h1 & 0x0f] +\n        HEX_CHARS[(h2 >> 28) & 0x0f] +\n        HEX_CHARS[(h2 >> 24) & 0x0f] +\n        HEX_CHARS[(h2 >> 20) & 0x0f] +\n        HEX_CHARS[(h2 >> 16) & 0x0f] +\n        HEX_CHARS[(h2 >> 12) & 0x0f] +\n        HEX_CHARS[(h2 >> 8) & 0x0f] +\n        HEX_CHARS[(h2 >> 4) & 0x0f] +\n        HEX_CHARS[h2 & 0x0f] +\n        HEX_CHARS[(h3 >> 28) & 0x0f] +\n        HEX_CHARS[(h3 >> 24) & 0x0f] +\n        HEX_CHARS[(h3 >> 20) & 0x0f] +\n        HEX_CHARS[(h3 >> 16) & 0x0f] +\n        HEX_CHARS[(h3 >> 12) & 0x0f] +\n        HEX_CHARS[(h3 >> 8) & 0x0f] +\n        HEX_CHARS[(h3 >> 4) & 0x0f] +\n        HEX_CHARS[h3 & 0x0f] +\n        HEX_CHARS[(h4 >> 28) & 0x0f] +\n        HEX_CHARS[(h4 >> 24) & 0x0f] +\n        HEX_CHARS[(h4 >> 20) & 0x0f] +\n        HEX_CHARS[(h4 >> 16) & 0x0f] +\n        HEX_CHARS[(h4 >> 12) & 0x0f] +\n        HEX_CHARS[(h4 >> 8) & 0x0f] +\n        HEX_CHARS[(h4 >> 4) & 0x0f] +\n        HEX_CHARS[h4 & 0x0f]);\n};\nSha1.prototype.toString = Sha1.prototype.hex;\nSha1.prototype.digest = function () {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return [\n        (h0 >> 24) & 0xff,\n        (h0 >> 16) & 0xff,\n        (h0 >> 8) & 0xff,\n        h0 & 0xff,\n        (h1 >> 24) & 0xff,\n        (h1 >> 16) & 0xff,\n        (h1 >> 8) & 0xff,\n        h1 & 0xff,\n        (h2 >> 24) & 0xff,\n        (h2 >> 16) & 0xff,\n        (h2 >> 8) & 0xff,\n        h2 & 0xff,\n        (h3 >> 24) & 0xff,\n        (h3 >> 16) & 0xff,\n        (h3 >> 8) & 0xff,\n        h3 & 0xff,\n        (h4 >> 24) & 0xff,\n        (h4 >> 16) & 0xff,\n        (h4 >> 8) & 0xff,\n        h4 & 0xff,\n    ];\n};\nSha1.prototype.array = Sha1.prototype.digest;\nSha1.prototype.arrayBuffer = function () {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n};\nlet hasLoggedWarning = false;\n/**\n * @deprecated Use `makeDefaultKeyEncoder()` to create a custom key encoder.\n * This function will be removed in a future version.\n */\nconst insecureHash = (message) => {\n    if (!hasLoggedWarning) {\n        console.warn([\n            `The default method for hashing keys is insecure and will be replaced in a future version,`,\n            `but hasn't been replaced yet as to not break existing caches. It's recommended that you use`,\n            `a more secure hashing algorithm to avoid cache poisoning.`,\n            ``,\n            `See this page for more information:`,\n            `|`,\n            `└> https://js.langchain.com/docs/troubleshooting/warnings/insecure-cache-algorithm`,\n        ].join(\"\\n\"));\n        hasLoggedWarning = true;\n    }\n    return new Sha1(true).update(message)[\"hex\"]();\n};\nexports.insecureHash = insecureHash;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanMtc2hhMS9oYXNoLmNqcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDBCQUEwQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywwQkFBMEI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2pzLXNoYTEvaGFzaC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLW5vY2hlY2tcbi8vIElubGluZWQgdG8gZGVhbCB3aXRoIHBvcnRhYmlsaXR5IGlzc3VlcyB3aXRoIGltcG9ydGluZyBjcnlwdG8gbW9kdWxlXG4vKlxuICogW2pzLXNoYTFde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW4xNzgvanMtc2hhMX1cbiAqXG4gKiBAdmVyc2lvbiAwLjYuMFxuICogQGF1dGhvciBDaGVuLCBZaS1DeXVhbiBbZW1uMTc4QGdtYWlsLmNvbV1cbiAqIEBjb3B5cmlnaHQgQ2hlbiwgWWktQ3l1YW4gMjAxNC0yMDE3XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmluc2VjdXJlSGFzaCA9IHZvaWQgMDtcbnZhciByb290ID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6IHt9O1xudmFyIEhFWF9DSEFSUyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiLnNwbGl0KFwiXCIpO1xudmFyIEVYVFJBID0gWy0yMTQ3NDgzNjQ4LCA4Mzg4NjA4LCAzMjc2OCwgMTI4XTtcbnZhciBTSElGVCA9IFsyNCwgMTYsIDgsIDBdO1xudmFyIE9VVFBVVF9UWVBFUyA9IFtcImhleFwiLCBcImFycmF5XCIsIFwiZGlnZXN0XCIsIFwiYXJyYXlCdWZmZXJcIl07XG52YXIgYmxvY2tzID0gW107XG5mdW5jdGlvbiBTaGExKHNoYXJlZE1lbW9yeSkge1xuICAgIGlmIChzaGFyZWRNZW1vcnkpIHtcbiAgICAgICAgYmxvY2tzWzBdID1cbiAgICAgICAgICAgIGJsb2Nrc1sxNl0gPVxuICAgICAgICAgICAgICAgIGJsb2Nrc1sxXSA9XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1syXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbM10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s0XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s1XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbNl0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s3XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s4XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbOV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxMF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbMTFdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxMl0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxM10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbMTRdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxNV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgIHRoaXMuYmxvY2tzID0gYmxvY2tzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgfVxuICAgIHRoaXMuaDAgPSAweDY3NDUyMzAxO1xuICAgIHRoaXMuaDEgPSAweGVmY2RhYjg5O1xuICAgIHRoaXMuaDIgPSAweDk4YmFkY2ZlO1xuICAgIHRoaXMuaDMgPSAweDEwMzI1NDc2O1xuICAgIHRoaXMuaDQgPSAweGMzZDJlMWYwO1xuICAgIHRoaXMuYmxvY2sgPSB0aGlzLnN0YXJ0ID0gdGhpcy5ieXRlcyA9IHRoaXMuaEJ5dGVzID0gMDtcbiAgICB0aGlzLmZpbmFsaXplZCA9IHRoaXMuaGFzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5maXJzdCA9IHRydWU7XG59XG5TaGExLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBub3RTdHJpbmcgPSB0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIjtcbiAgICBpZiAobm90U3RyaW5nICYmIG1lc3NhZ2UuY29uc3RydWN0b3IgPT09IHJvb3QuQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgbWVzc2FnZSA9IG5ldyBVaW50OEFycmF5KG1lc3NhZ2UpO1xuICAgIH1cbiAgICB2YXIgY29kZSwgaW5kZXggPSAwLCBpLCBsZW5ndGggPSBtZXNzYWdlLmxlbmd0aCB8fCAwLCBibG9ja3MgPSB0aGlzLmJsb2NrcztcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzaGVkKSB7XG4gICAgICAgICAgICB0aGlzLmhhc2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgYmxvY2tzWzBdID0gdGhpcy5ibG9jaztcbiAgICAgICAgICAgIGJsb2Nrc1sxNl0gPVxuICAgICAgICAgICAgICAgIGJsb2Nrc1sxXSA9XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1syXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbM10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s0XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s1XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbNl0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s3XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s4XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbOV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxMF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbMTFdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxMl0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxM10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbMTRdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxNV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdFN0cmluZykge1xuICAgICAgICAgICAgZm9yIChpID0gdGhpcy5zdGFydDsgaW5kZXggPCBsZW5ndGggJiYgaSA8IDY0OyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gbWVzc2FnZVtpbmRleF0gPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgPSB0aGlzLnN0YXJ0OyBpbmRleCA8IGxlbmd0aCAmJiBpIDwgNjQ7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gbWVzc2FnZS5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gY29kZSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29kZSA8IDB4ODAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweGMwIHwgKGNvZGUgPj4gNikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IChjb2RlICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb2RlIDwgMHhkODAwIHx8IGNvZGUgPj0gMHhlMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweGUwIHwgKGNvZGUgPj4gMTIpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoKGNvZGUgPj4gNikgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweDgwIHwgKGNvZGUgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb2RlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIDB4MTAwMDAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoKGNvZGUgJiAweDNmZikgPDwgMTApIHwgKG1lc3NhZ2UuY2hhckNvZGVBdCgrK2luZGV4KSAmIDB4M2ZmKSk7XG4gICAgICAgICAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweGYwIHwgKGNvZGUgPj4gMTgpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoKGNvZGUgPj4gMTIpICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8ICgoY29kZSA+PiA2KSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoY29kZSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0Qnl0ZUluZGV4ID0gaTtcbiAgICAgICAgdGhpcy5ieXRlcyArPSBpIC0gdGhpcy5zdGFydDtcbiAgICAgICAgaWYgKGkgPj0gNjQpIHtcbiAgICAgICAgICAgIHRoaXMuYmxvY2sgPSBibG9ja3NbMTZdO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IGkgLSA2NDtcbiAgICAgICAgICAgIHRoaXMuaGFzaCgpO1xuICAgICAgICAgICAgdGhpcy5oYXNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuYnl0ZXMgPiA0Mjk0OTY3Mjk1KSB7XG4gICAgICAgIHRoaXMuaEJ5dGVzICs9ICh0aGlzLmJ5dGVzIC8gNDI5NDk2NzI5NikgPDwgMDtcbiAgICAgICAgdGhpcy5ieXRlcyA9IHRoaXMuYnl0ZXMgJSA0Mjk0OTY3Mjk2O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5TaGExLnByb3RvdHlwZS5maW5hbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XG4gICAgdmFyIGJsb2NrcyA9IHRoaXMuYmxvY2tzLCBpID0gdGhpcy5sYXN0Qnl0ZUluZGV4O1xuICAgIGJsb2Nrc1sxNl0gPSB0aGlzLmJsb2NrO1xuICAgIGJsb2Nrc1tpID4+IDJdIHw9IEVYVFJBW2kgJiAzXTtcbiAgICB0aGlzLmJsb2NrID0gYmxvY2tzWzE2XTtcbiAgICBpZiAoaSA+PSA1Nikge1xuICAgICAgICBpZiAoIXRoaXMuaGFzaGVkKSB7XG4gICAgICAgICAgICB0aGlzLmhhc2goKTtcbiAgICAgICAgfVxuICAgICAgICBibG9ja3NbMF0gPSB0aGlzLmJsb2NrO1xuICAgICAgICBibG9ja3NbMTZdID1cbiAgICAgICAgICAgIGJsb2Nrc1sxXSA9XG4gICAgICAgICAgICAgICAgYmxvY2tzWzJdID1cbiAgICAgICAgICAgICAgICAgICAgYmxvY2tzWzNdID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s0XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzWzVdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzWzZdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1s3XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzWzhdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzWzldID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxMF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxMV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbMTJdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxM10gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1sxNF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja3NbMTVdID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA7XG4gICAgfVxuICAgIGJsb2Nrc1sxNF0gPSAodGhpcy5oQnl0ZXMgPDwgMykgfCAodGhpcy5ieXRlcyA+Pj4gMjkpO1xuICAgIGJsb2Nrc1sxNV0gPSB0aGlzLmJ5dGVzIDw8IDM7XG4gICAgdGhpcy5oYXNoKCk7XG59O1xuU2hhMS5wcm90b3R5cGUuaGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYSA9IHRoaXMuaDAsIGIgPSB0aGlzLmgxLCBjID0gdGhpcy5oMiwgZCA9IHRoaXMuaDMsIGUgPSB0aGlzLmg0O1xuICAgIHZhciBmLCBqLCB0LCBibG9ja3MgPSB0aGlzLmJsb2NrcztcbiAgICBmb3IgKGogPSAxNjsgaiA8IDgwOyArK2opIHtcbiAgICAgICAgdCA9IGJsb2Nrc1tqIC0gM10gXiBibG9ja3NbaiAtIDhdIF4gYmxvY2tzW2ogLSAxNF0gXiBibG9ja3NbaiAtIDE2XTtcbiAgICAgICAgYmxvY2tzW2pdID0gKHQgPDwgMSkgfCAodCA+Pj4gMzEpO1xuICAgIH1cbiAgICBmb3IgKGogPSAwOyBqIDwgMjA7IGogKz0gNSkge1xuICAgICAgICBmID0gKGIgJiBjKSB8ICh+YiAmIGQpO1xuICAgICAgICB0ID0gKGEgPDwgNSkgfCAoYSA+Pj4gMjcpO1xuICAgICAgICBlID0gKHQgKyBmICsgZSArIDE1MTg1MDAyNDkgKyBibG9ja3Nbal0pIDw8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAzMCkgfCAoYiA+Pj4gMik7XG4gICAgICAgIGYgPSAoYSAmIGIpIHwgKH5hICYgYyk7XG4gICAgICAgIHQgPSAoZSA8PCA1KSB8IChlID4+PiAyNyk7XG4gICAgICAgIGQgPSAodCArIGYgKyBkICsgMTUxODUwMDI0OSArIGJsb2Nrc1tqICsgMV0pIDw8IDA7XG4gICAgICAgIGEgPSAoYSA8PCAzMCkgfCAoYSA+Pj4gMik7XG4gICAgICAgIGYgPSAoZSAmIGEpIHwgKH5lICYgYik7XG4gICAgICAgIHQgPSAoZCA8PCA1KSB8IChkID4+PiAyNyk7XG4gICAgICAgIGMgPSAodCArIGYgKyBjICsgMTUxODUwMDI0OSArIGJsb2Nrc1tqICsgMl0pIDw8IDA7XG4gICAgICAgIGUgPSAoZSA8PCAzMCkgfCAoZSA+Pj4gMik7XG4gICAgICAgIGYgPSAoZCAmIGUpIHwgKH5kICYgYSk7XG4gICAgICAgIHQgPSAoYyA8PCA1KSB8IChjID4+PiAyNyk7XG4gICAgICAgIGIgPSAodCArIGYgKyBiICsgMTUxODUwMDI0OSArIGJsb2Nrc1tqICsgM10pIDw8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAzMCkgfCAoZCA+Pj4gMik7XG4gICAgICAgIGYgPSAoYyAmIGQpIHwgKH5jICYgZSk7XG4gICAgICAgIHQgPSAoYiA8PCA1KSB8IChiID4+PiAyNyk7XG4gICAgICAgIGEgPSAodCArIGYgKyBhICsgMTUxODUwMDI0OSArIGJsb2Nrc1tqICsgNF0pIDw8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAzMCkgfCAoYyA+Pj4gMik7XG4gICAgfVxuICAgIGZvciAoOyBqIDwgNDA7IGogKz0gNSkge1xuICAgICAgICBmID0gYiBeIGMgXiBkO1xuICAgICAgICB0ID0gKGEgPDwgNSkgfCAoYSA+Pj4gMjcpO1xuICAgICAgICBlID0gKHQgKyBmICsgZSArIDE4NTk3NzUzOTMgKyBibG9ja3Nbal0pIDw8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAzMCkgfCAoYiA+Pj4gMik7XG4gICAgICAgIGYgPSBhIF4gYiBeIGM7XG4gICAgICAgIHQgPSAoZSA8PCA1KSB8IChlID4+PiAyNyk7XG4gICAgICAgIGQgPSAodCArIGYgKyBkICsgMTg1OTc3NTM5MyArIGJsb2Nrc1tqICsgMV0pIDw8IDA7XG4gICAgICAgIGEgPSAoYSA8PCAzMCkgfCAoYSA+Pj4gMik7XG4gICAgICAgIGYgPSBlIF4gYSBeIGI7XG4gICAgICAgIHQgPSAoZCA8PCA1KSB8IChkID4+PiAyNyk7XG4gICAgICAgIGMgPSAodCArIGYgKyBjICsgMTg1OTc3NTM5MyArIGJsb2Nrc1tqICsgMl0pIDw8IDA7XG4gICAgICAgIGUgPSAoZSA8PCAzMCkgfCAoZSA+Pj4gMik7XG4gICAgICAgIGYgPSBkIF4gZSBeIGE7XG4gICAgICAgIHQgPSAoYyA8PCA1KSB8IChjID4+PiAyNyk7XG4gICAgICAgIGIgPSAodCArIGYgKyBiICsgMTg1OTc3NTM5MyArIGJsb2Nrc1tqICsgM10pIDw8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAzMCkgfCAoZCA+Pj4gMik7XG4gICAgICAgIGYgPSBjIF4gZCBeIGU7XG4gICAgICAgIHQgPSAoYiA8PCA1KSB8IChiID4+PiAyNyk7XG4gICAgICAgIGEgPSAodCArIGYgKyBhICsgMTg1OTc3NTM5MyArIGJsb2Nrc1tqICsgNF0pIDw8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAzMCkgfCAoYyA+Pj4gMik7XG4gICAgfVxuICAgIGZvciAoOyBqIDwgNjA7IGogKz0gNSkge1xuICAgICAgICBmID0gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpO1xuICAgICAgICB0ID0gKGEgPDwgNSkgfCAoYSA+Pj4gMjcpO1xuICAgICAgICBlID0gKHQgKyBmICsgZSAtIDE4OTQwMDc1ODggKyBibG9ja3Nbal0pIDw8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAzMCkgfCAoYiA+Pj4gMik7XG4gICAgICAgIGYgPSAoYSAmIGIpIHwgKGEgJiBjKSB8IChiICYgYyk7XG4gICAgICAgIHQgPSAoZSA8PCA1KSB8IChlID4+PiAyNyk7XG4gICAgICAgIGQgPSAodCArIGYgKyBkIC0gMTg5NDAwNzU4OCArIGJsb2Nrc1tqICsgMV0pIDw8IDA7XG4gICAgICAgIGEgPSAoYSA8PCAzMCkgfCAoYSA+Pj4gMik7XG4gICAgICAgIGYgPSAoZSAmIGEpIHwgKGUgJiBiKSB8IChhICYgYik7XG4gICAgICAgIHQgPSAoZCA8PCA1KSB8IChkID4+PiAyNyk7XG4gICAgICAgIGMgPSAodCArIGYgKyBjIC0gMTg5NDAwNzU4OCArIGJsb2Nrc1tqICsgMl0pIDw8IDA7XG4gICAgICAgIGUgPSAoZSA8PCAzMCkgfCAoZSA+Pj4gMik7XG4gICAgICAgIGYgPSAoZCAmIGUpIHwgKGQgJiBhKSB8IChlICYgYSk7XG4gICAgICAgIHQgPSAoYyA8PCA1KSB8IChjID4+PiAyNyk7XG4gICAgICAgIGIgPSAodCArIGYgKyBiIC0gMTg5NDAwNzU4OCArIGJsb2Nrc1tqICsgM10pIDw8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAzMCkgfCAoZCA+Pj4gMik7XG4gICAgICAgIGYgPSAoYyAmIGQpIHwgKGMgJiBlKSB8IChkICYgZSk7XG4gICAgICAgIHQgPSAoYiA8PCA1KSB8IChiID4+PiAyNyk7XG4gICAgICAgIGEgPSAodCArIGYgKyBhIC0gMTg5NDAwNzU4OCArIGJsb2Nrc1tqICsgNF0pIDw8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAzMCkgfCAoYyA+Pj4gMik7XG4gICAgfVxuICAgIGZvciAoOyBqIDwgODA7IGogKz0gNSkge1xuICAgICAgICBmID0gYiBeIGMgXiBkO1xuICAgICAgICB0ID0gKGEgPDwgNSkgfCAoYSA+Pj4gMjcpO1xuICAgICAgICBlID0gKHQgKyBmICsgZSAtIDg5OTQ5NzUxNCArIGJsb2Nrc1tqXSkgPDwgMDtcbiAgICAgICAgYiA9IChiIDw8IDMwKSB8IChiID4+PiAyKTtcbiAgICAgICAgZiA9IGEgXiBiIF4gYztcbiAgICAgICAgdCA9IChlIDw8IDUpIHwgKGUgPj4+IDI3KTtcbiAgICAgICAgZCA9ICh0ICsgZiArIGQgLSA4OTk0OTc1MTQgKyBibG9ja3NbaiArIDFdKSA8PCAwO1xuICAgICAgICBhID0gKGEgPDwgMzApIHwgKGEgPj4+IDIpO1xuICAgICAgICBmID0gZSBeIGEgXiBiO1xuICAgICAgICB0ID0gKGQgPDwgNSkgfCAoZCA+Pj4gMjcpO1xuICAgICAgICBjID0gKHQgKyBmICsgYyAtIDg5OTQ5NzUxNCArIGJsb2Nrc1tqICsgMl0pIDw8IDA7XG4gICAgICAgIGUgPSAoZSA8PCAzMCkgfCAoZSA+Pj4gMik7XG4gICAgICAgIGYgPSBkIF4gZSBeIGE7XG4gICAgICAgIHQgPSAoYyA8PCA1KSB8IChjID4+PiAyNyk7XG4gICAgICAgIGIgPSAodCArIGYgKyBiIC0gODk5NDk3NTE0ICsgYmxvY2tzW2ogKyAzXSkgPDwgMDtcbiAgICAgICAgZCA9IChkIDw8IDMwKSB8IChkID4+PiAyKTtcbiAgICAgICAgZiA9IGMgXiBkIF4gZTtcbiAgICAgICAgdCA9IChiIDw8IDUpIHwgKGIgPj4+IDI3KTtcbiAgICAgICAgYSA9ICh0ICsgZiArIGEgLSA4OTk0OTc1MTQgKyBibG9ja3NbaiArIDRdKSA8PCAwO1xuICAgICAgICBjID0gKGMgPDwgMzApIHwgKGMgPj4+IDIpO1xuICAgIH1cbiAgICB0aGlzLmgwID0gKHRoaXMuaDAgKyBhKSA8PCAwO1xuICAgIHRoaXMuaDEgPSAodGhpcy5oMSArIGIpIDw8IDA7XG4gICAgdGhpcy5oMiA9ICh0aGlzLmgyICsgYykgPDwgMDtcbiAgICB0aGlzLmgzID0gKHRoaXMuaDMgKyBkKSA8PCAwO1xuICAgIHRoaXMuaDQgPSAodGhpcy5oNCArIGUpIDw8IDA7XG59O1xuU2hhMS5wcm90b3R5cGUuaGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmluYWxpemUoKTtcbiAgICB2YXIgaDAgPSB0aGlzLmgwLCBoMSA9IHRoaXMuaDEsIGgyID0gdGhpcy5oMiwgaDMgPSB0aGlzLmgzLCBoNCA9IHRoaXMuaDQ7XG4gICAgcmV0dXJuIChIRVhfQ0hBUlNbKGgwID4+IDI4KSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMCA+PiAyNCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDAgPj4gMjApICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgwID4+IDE2KSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMCA+PiAxMikgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDAgPj4gOCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDAgPj4gNCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1toMCAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMSA+PiAyOCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDEgPj4gMjQpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgxID4+IDIwKSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMSA+PiAxNikgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDEgPj4gMTIpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgxID4+IDgpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgxID4+IDQpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbaDEgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDIgPj4gMjgpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgyID4+IDI0KSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMiA+PiAyMCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDIgPj4gMTYpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgyID4+IDEyKSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMiA+PiA4KSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMiA+PiA0KSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTW2gyICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgzID4+IDI4KSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMyA+PiAyNCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDMgPj4gMjApICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGgzID4+IDE2KSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoMyA+PiAxMikgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDMgPj4gOCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDMgPj4gNCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1toMyAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoNCA+PiAyOCkgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDQgPj4gMjQpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGg0ID4+IDIwKSAmIDB4MGZdICtcbiAgICAgICAgSEVYX0NIQVJTWyhoNCA+PiAxNikgJiAweDBmXSArXG4gICAgICAgIEhFWF9DSEFSU1soaDQgPj4gMTIpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGg0ID4+IDgpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbKGg0ID4+IDQpICYgMHgwZl0gK1xuICAgICAgICBIRVhfQ0hBUlNbaDQgJiAweDBmXSk7XG59O1xuU2hhMS5wcm90b3R5cGUudG9TdHJpbmcgPSBTaGExLnByb3RvdHlwZS5oZXg7XG5TaGExLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5maW5hbGl6ZSgpO1xuICAgIHZhciBoMCA9IHRoaXMuaDAsIGgxID0gdGhpcy5oMSwgaDIgPSB0aGlzLmgyLCBoMyA9IHRoaXMuaDMsIGg0ID0gdGhpcy5oNDtcbiAgICByZXR1cm4gW1xuICAgICAgICAoaDAgPj4gMjQpICYgMHhmZixcbiAgICAgICAgKGgwID4+IDE2KSAmIDB4ZmYsXG4gICAgICAgIChoMCA+PiA4KSAmIDB4ZmYsXG4gICAgICAgIGgwICYgMHhmZixcbiAgICAgICAgKGgxID4+IDI0KSAmIDB4ZmYsXG4gICAgICAgIChoMSA+PiAxNikgJiAweGZmLFxuICAgICAgICAoaDEgPj4gOCkgJiAweGZmLFxuICAgICAgICBoMSAmIDB4ZmYsXG4gICAgICAgIChoMiA+PiAyNCkgJiAweGZmLFxuICAgICAgICAoaDIgPj4gMTYpICYgMHhmZixcbiAgICAgICAgKGgyID4+IDgpICYgMHhmZixcbiAgICAgICAgaDIgJiAweGZmLFxuICAgICAgICAoaDMgPj4gMjQpICYgMHhmZixcbiAgICAgICAgKGgzID4+IDE2KSAmIDB4ZmYsXG4gICAgICAgIChoMyA+PiA4KSAmIDB4ZmYsXG4gICAgICAgIGgzICYgMHhmZixcbiAgICAgICAgKGg0ID4+IDI0KSAmIDB4ZmYsXG4gICAgICAgIChoNCA+PiAxNikgJiAweGZmLFxuICAgICAgICAoaDQgPj4gOCkgJiAweGZmLFxuICAgICAgICBoNCAmIDB4ZmYsXG4gICAgXTtcbn07XG5TaGExLnByb3RvdHlwZS5hcnJheSA9IFNoYTEucHJvdG90eXBlLmRpZ2VzdDtcblNoYTEucHJvdG90eXBlLmFycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmluYWxpemUoKTtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDIwKTtcbiAgICB2YXIgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICBkYXRhVmlldy5zZXRVaW50MzIoMCwgdGhpcy5oMCk7XG4gICAgZGF0YVZpZXcuc2V0VWludDMyKDQsIHRoaXMuaDEpO1xuICAgIGRhdGFWaWV3LnNldFVpbnQzMig4LCB0aGlzLmgyKTtcbiAgICBkYXRhVmlldy5zZXRVaW50MzIoMTIsIHRoaXMuaDMpO1xuICAgIGRhdGFWaWV3LnNldFVpbnQzMigxNiwgdGhpcy5oNCk7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5sZXQgaGFzTG9nZ2VkV2FybmluZyA9IGZhbHNlO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYG1ha2VEZWZhdWx0S2V5RW5jb2RlcigpYCB0byBjcmVhdGUgYSBjdXN0b20ga2V5IGVuY29kZXIuXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLlxuICovXG5jb25zdCBpbnNlY3VyZUhhc2ggPSAobWVzc2FnZSkgPT4ge1xuICAgIGlmICghaGFzTG9nZ2VkV2FybmluZykge1xuICAgICAgICBjb25zb2xlLndhcm4oW1xuICAgICAgICAgICAgYFRoZSBkZWZhdWx0IG1ldGhvZCBmb3IgaGFzaGluZyBrZXlzIGlzIGluc2VjdXJlIGFuZCB3aWxsIGJlIHJlcGxhY2VkIGluIGEgZnV0dXJlIHZlcnNpb24sYCxcbiAgICAgICAgICAgIGBidXQgaGFzbid0IGJlZW4gcmVwbGFjZWQgeWV0IGFzIHRvIG5vdCBicmVhayBleGlzdGluZyBjYWNoZXMuIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgdXNlYCxcbiAgICAgICAgICAgIGBhIG1vcmUgc2VjdXJlIGhhc2hpbmcgYWxnb3JpdGhtIHRvIGF2b2lkIGNhY2hlIHBvaXNvbmluZy5gLFxuICAgICAgICAgICAgYGAsXG4gICAgICAgICAgICBgU2VlIHRoaXMgcGFnZSBmb3IgbW9yZSBpbmZvcm1hdGlvbjpgLFxuICAgICAgICAgICAgYHxgLFxuICAgICAgICAgICAgYOKUlD4gaHR0cHM6Ly9qcy5sYW5nY2hhaW4uY29tL2RvY3MvdHJvdWJsZXNob290aW5nL3dhcm5pbmdzL2luc2VjdXJlLWNhY2hlLWFsZ29yaXRobWAsXG4gICAgICAgIF0uam9pbihcIlxcblwiKSk7XG4gICAgICAgIGhhc0xvZ2dlZFdhcm5pbmcgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNoYTEodHJ1ZSkudXBkYXRlKG1lc3NhZ2UpW1wiaGV4XCJdKCk7XG59O1xuZXhwb3J0cy5pbnNlY3VyZUhhc2ggPSBpbnNlY3VyZUhhc2g7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/js-sha256/hash.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/js-sha256/hash.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.11.1\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2025\n * @license MIT\n */\n/*jslint bitwise: true */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sha256 = void 0;\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [-2147483648, 8388608, 32768, 128];\nvar SHIFT = [24, 16, 8, 0];\nvar K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,\n    0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\n    0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\n    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\n    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,\n];\nvar OUTPUT_TYPES = [\"hex\", \"array\", \"digest\", \"arrayBuffer\"];\nvar blocks = [];\nfunction Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] =\n            blocks[16] =\n                blocks[1] =\n                    blocks[2] =\n                        blocks[3] =\n                            blocks[4] =\n                                blocks[5] =\n                                    blocks[6] =\n                                        blocks[7] =\n                                            blocks[8] =\n                                                blocks[9] =\n                                                    blocks[10] =\n                                                        blocks[11] =\n                                                            blocks[12] =\n                                                                blocks[13] =\n                                                                    blocks[14] =\n                                                                        blocks[15] =\n                                                                            0;\n        this.blocks = blocks;\n    }\n    else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n    if (is224) {\n        this.h0 = 0xc1059ed8;\n        this.h1 = 0x367cd507;\n        this.h2 = 0x3070dd17;\n        this.h3 = 0xf70e5939;\n        this.h4 = 0xffc00b31;\n        this.h5 = 0x68581511;\n        this.h6 = 0x64f98fa7;\n        this.h7 = 0xbefa4fa4;\n    }\n    else {\n        // 256\n        this.h0 = 0x6a09e667;\n        this.h1 = 0xbb67ae85;\n        this.h2 = 0x3c6ef372;\n        this.h3 = 0xa54ff53a;\n        this.h4 = 0x510e527f;\n        this.h5 = 0x9b05688c;\n        this.h6 = 0x1f83d9ab;\n        this.h7 = 0x5be0cd19;\n    }\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n}\nSha256.prototype.update = function (message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString, type = typeof message;\n    if (type !== \"string\") {\n        if (type === \"object\") {\n            if (message === null) {\n                throw new Error(ERROR);\n            }\n            else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n                message = new Uint8Array(message);\n            }\n            else if (!Array.isArray(message)) {\n                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                    throw new Error(ERROR);\n                }\n            }\n        }\n        else {\n            throw new Error(ERROR);\n        }\n        notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    while (index < length) {\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            this.block =\n                blocks[16] =\n                    blocks[1] =\n                        blocks[2] =\n                            blocks[3] =\n                                blocks[4] =\n                                    blocks[5] =\n                                        blocks[6] =\n                                            blocks[7] =\n                                                blocks[8] =\n                                                    blocks[9] =\n                                                        blocks[10] =\n                                                            blocks[11] =\n                                                                blocks[12] =\n                                                                    blocks[13] =\n                                                                        blocks[14] =\n                                                                            blocks[15] =\n                                                                                0;\n        }\n        if (notString) {\n            for (i = this.start; index < length && i < 64; ++index) {\n                blocks[i >>> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        }\n        else {\n            for (i = this.start; index < length && i < 64; ++index) {\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >>> 2] |= code << SHIFT[i++ & 3];\n                }\n                else if (code < 0x800) {\n                    blocks[i >>> 2] |= (0xc0 | (code >>> 6)) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n                else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >>> 2] |= (0xe0 | (code >>> 12)) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | ((code >>> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n                else {\n                    code =\n                        0x10000 +\n                            (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n                    blocks[i >>> 2] |= (0xf0 | (code >>> 18)) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | ((code >>> 12) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | ((code >>> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >>> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        }\n        else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += (this.bytes / 4294967296) << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha256.prototype.finalize = function () {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >>> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] =\n            blocks[1] =\n                blocks[2] =\n                    blocks[3] =\n                        blocks[4] =\n                            blocks[5] =\n                                blocks[6] =\n                                    blocks[7] =\n                                        blocks[8] =\n                                            blocks[9] =\n                                                blocks[10] =\n                                                    blocks[11] =\n                                                        blocks[12] =\n                                                            blocks[13] =\n                                                                blocks[14] =\n                                                                    blocks[15] =\n                                                                        0;\n    }\n    blocks[14] = (this.hBytes << 3) | (this.bytes >>> 29);\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6, h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n    for (j = 16; j < 64; ++j) {\n        // rightrotate\n        t1 = blocks[j - 15];\n        s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n        t1 = blocks[j - 2];\n        s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n        blocks[j] = (blocks[j - 16] + s0 + blocks[j - 7] + s1) << 0;\n    }\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n        if (this.first) {\n            if (this.is224) {\n                ab = 300032;\n                t1 = blocks[0] - 1413257819;\n                h = (t1 - 150054599) << 0;\n                d = (t1 + 24177077) << 0;\n            }\n            else {\n                ab = 704751109;\n                t1 = blocks[0] - 210244248;\n                h = (t1 - 1521486534) << 0;\n                d = (t1 + 143694565) << 0;\n            }\n            this.first = false;\n        }\n        else {\n            s0 =\n                ((a >>> 2) | (a << 30)) ^\n                    ((a >>> 13) | (a << 19)) ^\n                    ((a >>> 22) | (a << 10));\n            s1 =\n                ((e >>> 6) | (e << 26)) ^\n                    ((e >>> 11) | (e << 21)) ^\n                    ((e >>> 25) | (e << 7));\n            ab = a & b;\n            maj = ab ^ (a & c) ^ bc;\n            ch = (e & f) ^ (~e & g);\n            t1 = h + s1 + ch + K[j] + blocks[j];\n            t2 = s0 + maj;\n            h = (d + t1) << 0;\n            d = (t1 + t2) << 0;\n        }\n        s0 =\n            ((d >>> 2) | (d << 30)) ^\n                ((d >>> 13) | (d << 19)) ^\n                ((d >>> 22) | (d << 10));\n        s1 =\n            ((h >>> 6) | (h << 26)) ^\n                ((h >>> 11) | (h << 21)) ^\n                ((h >>> 25) | (h << 7));\n        da = d & a;\n        maj = da ^ (d & b) ^ ab;\n        ch = (g & h) ^ (~g & e);\n        t1 = f + s1 + ch + K[j + 1] + blocks[j + 1];\n        t2 = s0 + maj;\n        g = (c + t1) << 0;\n        c = (t1 + t2) << 0;\n        s0 =\n            ((c >>> 2) | (c << 30)) ^\n                ((c >>> 13) | (c << 19)) ^\n                ((c >>> 22) | (c << 10));\n        s1 =\n            ((g >>> 6) | (g << 26)) ^\n                ((g >>> 11) | (g << 21)) ^\n                ((g >>> 25) | (g << 7));\n        cd = c & d;\n        maj = cd ^ (c & a) ^ da;\n        ch = (f & g) ^ (~f & h);\n        t1 = e + s1 + ch + K[j + 2] + blocks[j + 2];\n        t2 = s0 + maj;\n        f = (b + t1) << 0;\n        b = (t1 + t2) << 0;\n        s0 =\n            ((b >>> 2) | (b << 30)) ^\n                ((b >>> 13) | (b << 19)) ^\n                ((b >>> 22) | (b << 10));\n        s1 =\n            ((f >>> 6) | (f << 26)) ^\n                ((f >>> 11) | (f << 21)) ^\n                ((f >>> 25) | (f << 7));\n        bc = b & c;\n        maj = bc ^ (b & d) ^ cd;\n        ch = (f & g) ^ (~f & h);\n        t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n        t2 = s0 + maj;\n        e = (a + t1) << 0;\n        a = (t1 + t2) << 0;\n        this.chromeBugWorkAround = true;\n    }\n    this.h0 = (this.h0 + a) << 0;\n    this.h1 = (this.h1 + b) << 0;\n    this.h2 = (this.h2 + c) << 0;\n    this.h3 = (this.h3 + d) << 0;\n    this.h4 = (this.h4 + e) << 0;\n    this.h5 = (this.h5 + f) << 0;\n    this.h6 = (this.h6 + g) << 0;\n    this.h7 = (this.h7 + h) << 0;\n};\nSha256.prototype.hex = function () {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n    var hex = HEX_CHARS[(h0 >>> 28) & 0x0f] +\n        HEX_CHARS[(h0 >>> 24) & 0x0f] +\n        HEX_CHARS[(h0 >>> 20) & 0x0f] +\n        HEX_CHARS[(h0 >>> 16) & 0x0f] +\n        HEX_CHARS[(h0 >>> 12) & 0x0f] +\n        HEX_CHARS[(h0 >>> 8) & 0x0f] +\n        HEX_CHARS[(h0 >>> 4) & 0x0f] +\n        HEX_CHARS[h0 & 0x0f] +\n        HEX_CHARS[(h1 >>> 28) & 0x0f] +\n        HEX_CHARS[(h1 >>> 24) & 0x0f] +\n        HEX_CHARS[(h1 >>> 20) & 0x0f] +\n        HEX_CHARS[(h1 >>> 16) & 0x0f] +\n        HEX_CHARS[(h1 >>> 12) & 0x0f] +\n        HEX_CHARS[(h1 >>> 8) & 0x0f] +\n        HEX_CHARS[(h1 >>> 4) & 0x0f] +\n        HEX_CHARS[h1 & 0x0f] +\n        HEX_CHARS[(h2 >>> 28) & 0x0f] +\n        HEX_CHARS[(h2 >>> 24) & 0x0f] +\n        HEX_CHARS[(h2 >>> 20) & 0x0f] +\n        HEX_CHARS[(h2 >>> 16) & 0x0f] +\n        HEX_CHARS[(h2 >>> 12) & 0x0f] +\n        HEX_CHARS[(h2 >>> 8) & 0x0f] +\n        HEX_CHARS[(h2 >>> 4) & 0x0f] +\n        HEX_CHARS[h2 & 0x0f] +\n        HEX_CHARS[(h3 >>> 28) & 0x0f] +\n        HEX_CHARS[(h3 >>> 24) & 0x0f] +\n        HEX_CHARS[(h3 >>> 20) & 0x0f] +\n        HEX_CHARS[(h3 >>> 16) & 0x0f] +\n        HEX_CHARS[(h3 >>> 12) & 0x0f] +\n        HEX_CHARS[(h3 >>> 8) & 0x0f] +\n        HEX_CHARS[(h3 >>> 4) & 0x0f] +\n        HEX_CHARS[h3 & 0x0f] +\n        HEX_CHARS[(h4 >>> 28) & 0x0f] +\n        HEX_CHARS[(h4 >>> 24) & 0x0f] +\n        HEX_CHARS[(h4 >>> 20) & 0x0f] +\n        HEX_CHARS[(h4 >>> 16) & 0x0f] +\n        HEX_CHARS[(h4 >>> 12) & 0x0f] +\n        HEX_CHARS[(h4 >>> 8) & 0x0f] +\n        HEX_CHARS[(h4 >>> 4) & 0x0f] +\n        HEX_CHARS[h4 & 0x0f] +\n        HEX_CHARS[(h5 >>> 28) & 0x0f] +\n        HEX_CHARS[(h5 >>> 24) & 0x0f] +\n        HEX_CHARS[(h5 >>> 20) & 0x0f] +\n        HEX_CHARS[(h5 >>> 16) & 0x0f] +\n        HEX_CHARS[(h5 >>> 12) & 0x0f] +\n        HEX_CHARS[(h5 >>> 8) & 0x0f] +\n        HEX_CHARS[(h5 >>> 4) & 0x0f] +\n        HEX_CHARS[h5 & 0x0f] +\n        HEX_CHARS[(h6 >>> 28) & 0x0f] +\n        HEX_CHARS[(h6 >>> 24) & 0x0f] +\n        HEX_CHARS[(h6 >>> 20) & 0x0f] +\n        HEX_CHARS[(h6 >>> 16) & 0x0f] +\n        HEX_CHARS[(h6 >>> 12) & 0x0f] +\n        HEX_CHARS[(h6 >>> 8) & 0x0f] +\n        HEX_CHARS[(h6 >>> 4) & 0x0f] +\n        HEX_CHARS[h6 & 0x0f];\n    if (!this.is224) {\n        hex +=\n            HEX_CHARS[(h7 >>> 28) & 0x0f] +\n                HEX_CHARS[(h7 >>> 24) & 0x0f] +\n                HEX_CHARS[(h7 >>> 20) & 0x0f] +\n                HEX_CHARS[(h7 >>> 16) & 0x0f] +\n                HEX_CHARS[(h7 >>> 12) & 0x0f] +\n                HEX_CHARS[(h7 >>> 8) & 0x0f] +\n                HEX_CHARS[(h7 >>> 4) & 0x0f] +\n                HEX_CHARS[h7 & 0x0f];\n    }\n    return hex;\n};\nSha256.prototype.toString = Sha256.prototype.hex;\nSha256.prototype.digest = function () {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n    var arr = [\n        (h0 >>> 24) & 0xff,\n        (h0 >>> 16) & 0xff,\n        (h0 >>> 8) & 0xff,\n        h0 & 0xff,\n        (h1 >>> 24) & 0xff,\n        (h1 >>> 16) & 0xff,\n        (h1 >>> 8) & 0xff,\n        h1 & 0xff,\n        (h2 >>> 24) & 0xff,\n        (h2 >>> 16) & 0xff,\n        (h2 >>> 8) & 0xff,\n        h2 & 0xff,\n        (h3 >>> 24) & 0xff,\n        (h3 >>> 16) & 0xff,\n        (h3 >>> 8) & 0xff,\n        h3 & 0xff,\n        (h4 >>> 24) & 0xff,\n        (h4 >>> 16) & 0xff,\n        (h4 >>> 8) & 0xff,\n        h4 & 0xff,\n        (h5 >>> 24) & 0xff,\n        (h5 >>> 16) & 0xff,\n        (h5 >>> 8) & 0xff,\n        h5 & 0xff,\n        (h6 >>> 24) & 0xff,\n        (h6 >>> 16) & 0xff,\n        (h6 >>> 8) & 0xff,\n        h6 & 0xff,\n    ];\n    if (!this.is224) {\n        arr.push((h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, h7 & 0xff);\n    }\n    return arr;\n};\nSha256.prototype.array = Sha256.prototype.digest;\nSha256.prototype.arrayBuffer = function () {\n    this.finalize();\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n        dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n};\nconst sha256 = (...strings) => {\n    return new Sha256(false, true).update(strings.join(\"\")).hex();\n};\nexports.sha256 = sha256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/js-sha256/hash.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json.cjs":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json.cjs ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseJsonMarkdown = parseJsonMarkdown;\nexports.parsePartialJson = parsePartialJson;\nfunction parseJsonMarkdown(s, parser = parsePartialJson) {\n    // eslint-disable-next-line no-param-reassign\n    s = s.trim();\n    const firstFenceIndex = s.indexOf(\"```\");\n    if (firstFenceIndex === -1) {\n        return parser(s);\n    }\n    let contentAfterFence = s.substring(firstFenceIndex + 3);\n    if (contentAfterFence.startsWith(\"json\\n\")) {\n        contentAfterFence = contentAfterFence.substring(5);\n    }\n    else if (contentAfterFence.startsWith(\"json\")) {\n        contentAfterFence = contentAfterFence.substring(4);\n    }\n    else if (contentAfterFence.startsWith(\"\\n\")) {\n        contentAfterFence = contentAfterFence.substring(1);\n    }\n    const closingFenceIndex = contentAfterFence.indexOf(\"```\");\n    let finalContent = contentAfterFence;\n    if (closingFenceIndex !== -1) {\n        finalContent = contentAfterFence.substring(0, closingFenceIndex);\n    }\n    return parser(finalContent.trim());\n}\n// Adapted from https://github.com/KillianLucas/open-interpreter/blob/main/interpreter/core/llm/utils/parse_partial_json.py\n// MIT License\nfunction parsePartialJson(s) {\n    // If the input is undefined, return null to indicate failure.\n    if (typeof s === \"undefined\") {\n        return null;\n    }\n    // Attempt to parse the string as-is.\n    try {\n        return JSON.parse(s);\n    }\n    catch (error) {\n        // Pass\n    }\n    // Initialize variables.\n    let new_s = \"\";\n    const stack = [];\n    let isInsideString = false;\n    let escaped = false;\n    // Process each character in the string one at a time.\n    for (let char of s) {\n        if (isInsideString) {\n            if (char === '\"' && !escaped) {\n                isInsideString = false;\n            }\n            else if (char === \"\\n\" && !escaped) {\n                char = \"\\\\n\"; // Replace the newline character with the escape sequence.\n            }\n            else if (char === \"\\\\\") {\n                escaped = !escaped;\n            }\n            else {\n                escaped = false;\n            }\n        }\n        else {\n            if (char === '\"') {\n                isInsideString = true;\n                escaped = false;\n            }\n            else if (char === \"{\") {\n                stack.push(\"}\");\n            }\n            else if (char === \"[\") {\n                stack.push(\"]\");\n            }\n            else if (char === \"}\" || char === \"]\") {\n                if (stack && stack[stack.length - 1] === char) {\n                    stack.pop();\n                }\n                else {\n                    // Mismatched closing character; the input is malformed.\n                    return null;\n                }\n            }\n        }\n        // Append the processed character to the new string.\n        new_s += char;\n    }\n    // If we're still inside a string at the end of processing,\n    // we need to close the string.\n    if (isInsideString) {\n        new_s += '\"';\n    }\n    // Close any remaining open structures in the reverse order that they were opened.\n    for (let i = stack.length - 1; i >= 0; i -= 1) {\n        new_s += stack[i];\n    }\n    // Attempt to parse the modified string as JSON.\n    try {\n        return JSON.parse(new_s);\n    }\n    catch (error) {\n        // If we still can't parse the string as JSON, return null to indicate failure.\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbi5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxRQUFRO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2pzb24uY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUpzb25NYXJrZG93biA9IHBhcnNlSnNvbk1hcmtkb3duO1xuZXhwb3J0cy5wYXJzZVBhcnRpYWxKc29uID0gcGFyc2VQYXJ0aWFsSnNvbjtcbmZ1bmN0aW9uIHBhcnNlSnNvbk1hcmtkb3duKHMsIHBhcnNlciA9IHBhcnNlUGFydGlhbEpzb24pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBzID0gcy50cmltKCk7XG4gICAgY29uc3QgZmlyc3RGZW5jZUluZGV4ID0gcy5pbmRleE9mKFwiYGBgXCIpO1xuICAgIGlmIChmaXJzdEZlbmNlSW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIocyk7XG4gICAgfVxuICAgIGxldCBjb250ZW50QWZ0ZXJGZW5jZSA9IHMuc3Vic3RyaW5nKGZpcnN0RmVuY2VJbmRleCArIDMpO1xuICAgIGlmIChjb250ZW50QWZ0ZXJGZW5jZS5zdGFydHNXaXRoKFwianNvblxcblwiKSkge1xuICAgICAgICBjb250ZW50QWZ0ZXJGZW5jZSA9IGNvbnRlbnRBZnRlckZlbmNlLnN1YnN0cmluZyg1KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29udGVudEFmdGVyRmVuY2Uuc3RhcnRzV2l0aChcImpzb25cIikpIHtcbiAgICAgICAgY29udGVudEFmdGVyRmVuY2UgPSBjb250ZW50QWZ0ZXJGZW5jZS5zdWJzdHJpbmcoNCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbnRlbnRBZnRlckZlbmNlLnN0YXJ0c1dpdGgoXCJcXG5cIikpIHtcbiAgICAgICAgY29udGVudEFmdGVyRmVuY2UgPSBjb250ZW50QWZ0ZXJGZW5jZS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIGNvbnN0IGNsb3NpbmdGZW5jZUluZGV4ID0gY29udGVudEFmdGVyRmVuY2UuaW5kZXhPZihcImBgYFwiKTtcbiAgICBsZXQgZmluYWxDb250ZW50ID0gY29udGVudEFmdGVyRmVuY2U7XG4gICAgaWYgKGNsb3NpbmdGZW5jZUluZGV4ICE9PSAtMSkge1xuICAgICAgICBmaW5hbENvbnRlbnQgPSBjb250ZW50QWZ0ZXJGZW5jZS5zdWJzdHJpbmcoMCwgY2xvc2luZ0ZlbmNlSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VyKGZpbmFsQ29udGVudC50cmltKCkpO1xufVxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9LaWxsaWFuTHVjYXMvb3Blbi1pbnRlcnByZXRlci9ibG9iL21haW4vaW50ZXJwcmV0ZXIvY29yZS9sbG0vdXRpbHMvcGFyc2VfcGFydGlhbF9qc29uLnB5XG4vLyBNSVQgTGljZW5zZVxuZnVuY3Rpb24gcGFyc2VQYXJ0aWFsSnNvbihzKSB7XG4gICAgLy8gSWYgdGhlIGlucHV0IGlzIHVuZGVmaW5lZCwgcmV0dXJuIG51bGwgdG8gaW5kaWNhdGUgZmFpbHVyZS5cbiAgICBpZiAodHlwZW9mIHMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIEF0dGVtcHQgdG8gcGFyc2UgdGhlIHN0cmluZyBhcy1pcy5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFBhc3NcbiAgICB9XG4gICAgLy8gSW5pdGlhbGl6ZSB2YXJpYWJsZXMuXG4gICAgbGV0IG5ld19zID0gXCJcIjtcbiAgICBjb25zdCBzdGFjayA9IFtdO1xuICAgIGxldCBpc0luc2lkZVN0cmluZyA9IGZhbHNlO1xuICAgIGxldCBlc2NhcGVkID0gZmFsc2U7XG4gICAgLy8gUHJvY2VzcyBlYWNoIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nIG9uZSBhdCBhIHRpbWUuXG4gICAgZm9yIChsZXQgY2hhciBvZiBzKSB7XG4gICAgICAgIGlmIChpc0luc2lkZVN0cmluZykge1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcIicgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICBpc0luc2lkZVN0cmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJcXG5cIiAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgIGNoYXIgPSBcIlxcXFxuXCI7IC8vIFJlcGxhY2UgdGhlIG5ld2xpbmUgY2hhcmFjdGVyIHdpdGggdGhlIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiXFxcXFwiKSB7XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICBpc0luc2lkZVN0cmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKFwifVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiW1wiKSB7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChcIl1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIn1cIiB8fCBjaGFyID09PSBcIl1cIikge1xuICAgICAgICAgICAgICAgIGlmIChzdGFjayAmJiBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA9PT0gY2hhcikge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1pc21hdGNoZWQgY2xvc2luZyBjaGFyYWN0ZXI7IHRoZSBpbnB1dCBpcyBtYWxmb3JtZWQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBcHBlbmQgdGhlIHByb2Nlc3NlZCBjaGFyYWN0ZXIgdG8gdGhlIG5ldyBzdHJpbmcuXG4gICAgICAgIG5ld19zICs9IGNoYXI7XG4gICAgfVxuICAgIC8vIElmIHdlJ3JlIHN0aWxsIGluc2lkZSBhIHN0cmluZyBhdCB0aGUgZW5kIG9mIHByb2Nlc3NpbmcsXG4gICAgLy8gd2UgbmVlZCB0byBjbG9zZSB0aGUgc3RyaW5nLlxuICAgIGlmIChpc0luc2lkZVN0cmluZykge1xuICAgICAgICBuZXdfcyArPSAnXCInO1xuICAgIH1cbiAgICAvLyBDbG9zZSBhbnkgcmVtYWluaW5nIG9wZW4gc3RydWN0dXJlcyBpbiB0aGUgcmV2ZXJzZSBvcmRlciB0aGF0IHRoZXkgd2VyZSBvcGVuZWQuXG4gICAgZm9yIChsZXQgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIG5ld19zICs9IHN0YWNrW2ldO1xuICAgIH1cbiAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIHRoZSBtb2RpZmllZCBzdHJpbmcgYXMgSlNPTi5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShuZXdfcyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiB3ZSBzdGlsbCBjYW4ndCBwYXJzZSB0aGUgc3RyaW5nIGFzIEpTT04sIHJldHVybiBudWxsIHRvIGluZGljYXRlIGZhaWx1cmUuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json_patch.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.applyPatch = exports.compare = void 0;\nvar index_js_1 = __webpack_require__(/*! ./fast-json-patch/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.cjs\");\nObject.defineProperty(exports, \"compare\", ({ enumerable: true, get: function () { return index_js_1.compare; } }));\nObject.defineProperty(exports, \"applyPatch\", ({ enumerable: true, get: function () { return index_js_1.applyPatch; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9wYXRjaC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLEdBQUcsZUFBZTtBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQyw4R0FBNkI7QUFDdEQsMkNBQTBDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ2hILDhDQUE2QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9wYXRjaC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFwcGx5UGF0Y2ggPSBleHBvcnRzLmNvbXBhcmUgPSB2b2lkIDA7XG52YXIgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL2Zhc3QtanNvbi1wYXRjaC9pbmRleC5janNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21wYXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18xLmNvbXBhcmU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhcHBseVBhdGNoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18xLmFwcGx5UGF0Y2g7IH0gfSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json_schema.cjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Validator = exports.deepCompareStrict = void 0;\nexports.toJsonSchema = toJsonSchema;\nexports.validatesOnlyStrings = validatesOnlyStrings;\nconst core_1 = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/index.cjs\");\nconst zod_to_json_schema_1 = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/cjs/index.js\");\nconst json_schema_1 = __webpack_require__(/*! @cfworker/json-schema */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/commonjs/index.js\");\nconst zod_js_1 = __webpack_require__(/*! ./types/zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\");\nvar json_schema_2 = __webpack_require__(/*! @cfworker/json-schema */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/commonjs/index.js\");\nObject.defineProperty(exports, \"deepCompareStrict\", ({ enumerable: true, get: function () { return json_schema_2.deepCompareStrict; } }));\nObject.defineProperty(exports, \"Validator\", ({ enumerable: true, get: function () { return json_schema_2.Validator; } }));\n/**\n * Converts a Zod schema or JSON schema to a JSON schema.\n * @param schema - The schema to convert.\n * @returns The converted schema.\n */\nfunction toJsonSchema(schema) {\n    if ((0, zod_js_1.isZodSchemaV4)(schema)) {\n        const inputSchema = (0, zod_js_1.interopZodTransformInputSchema)(schema, true);\n        if ((0, zod_js_1.isZodObjectV4)(inputSchema)) {\n            const strictSchema = (0, zod_js_1.interopZodObjectStrict)(inputSchema, true);\n            return (0, core_1.toJSONSchema)(strictSchema);\n        }\n        else {\n            return (0, core_1.toJSONSchema)(schema);\n        }\n    }\n    if ((0, zod_js_1.isZodSchemaV3)(schema)) {\n        return (0, zod_to_json_schema_1.zodToJsonSchema)(schema);\n    }\n    return schema;\n}\n/**\n * Validates if a JSON schema validates only strings. May return false negatives in some edge cases\n * (like recursive or unresolvable refs).\n *\n * @param schema - The schema to validate.\n * @returns `true` if the schema validates only strings, `false` otherwise.\n */\nfunction validatesOnlyStrings(schema) {\n    // Null, undefined, or empty schema\n    if (!schema ||\n        typeof schema !== \"object\" ||\n        Object.keys(schema).length === 0 ||\n        Array.isArray(schema)) {\n        return false; // Validates anything, not just strings\n    }\n    // Explicit type constraint\n    if (\"type\" in schema) {\n        if (typeof schema.type === \"string\") {\n            return schema.type === \"string\";\n        }\n        if (Array.isArray(schema.type)) {\n            // not sure why someone would do `\"type\": [\"string\"]` or especially `\"type\": [\"string\",\n            // \"string\", \"string\", ...]` but we're not here to judge\n            return schema.type.every((t) => t === \"string\");\n        }\n        return false; // Invalid or non-string type\n    }\n    // Enum with only string values\n    if (\"enum\" in schema) {\n        return (Array.isArray(schema.enum) &&\n            schema.enum.length > 0 &&\n            schema.enum.every((val) => typeof val === \"string\"));\n    }\n    // String constant\n    if (\"const\" in schema) {\n        return typeof schema.const === \"string\";\n    }\n    // Schema combinations\n    if (\"allOf\" in schema && Array.isArray(schema.allOf)) {\n        // If any subschema validates only strings, then the overall schema validates only strings\n        return schema.allOf.some((subschema) => validatesOnlyStrings(subschema));\n    }\n    if ((\"anyOf\" in schema && Array.isArray(schema.anyOf)) ||\n        (\"oneOf\" in schema && Array.isArray(schema.oneOf))) {\n        const subschemas = (\"anyOf\" in schema ? schema.anyOf : schema.oneOf);\n        // All subschemas must validate only strings\n        return (subschemas.length > 0 &&\n            subschemas.every((subschema) => validatesOnlyStrings(subschema)));\n    }\n    // We're not going to try on this one, it's too complex - we just assume if it has a \"not\" key and hasn't matched one of the above checks, it's not a string schema.\n    if (\"not\" in schema) {\n        return false; // The not case can validate non-strings\n    }\n    if (\"$ref\" in schema && typeof schema.$ref === \"string\") {\n        const ref = schema.$ref;\n        const resolved = (0, json_schema_1.dereference)(schema);\n        if (resolved[ref]) {\n            return validatesOnlyStrings(resolved[ref]);\n        }\n        return false;\n    }\n    // ignore recursive refs and other cases where type is omitted for now\n    // ignore other cases for now where type is omitted\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9zY2hlbWEuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLHlCQUF5QjtBQUM3QyxvQkFBb0I7QUFDcEIsNEJBQTRCO0FBQzVCLGVBQWUsbUJBQU8sQ0FBQywrREFBYTtBQUNwQyw2QkFBNkIsbUJBQU8sQ0FBQyxxRkFBb0I7QUFDekQsc0JBQXNCLG1CQUFPLENBQUMsZ0dBQXVCO0FBQ3JELGlCQUFpQixtQkFBTyxDQUFDLHNGQUFpQjtBQUMxQyxvQkFBb0IsbUJBQU8sQ0FBQyxnR0FBdUI7QUFDbkQscURBQW9ELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3ZJLDZDQUE0QyxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUN2SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9qc29uX3NjaGVtYS5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZhbGlkYXRvciA9IGV4cG9ydHMuZGVlcENvbXBhcmVTdHJpY3QgPSB2b2lkIDA7XG5leHBvcnRzLnRvSnNvblNjaGVtYSA9IHRvSnNvblNjaGVtYTtcbmV4cG9ydHMudmFsaWRhdGVzT25seVN0cmluZ3MgPSB2YWxpZGF0ZXNPbmx5U3RyaW5ncztcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCJ6b2QvdjQvY29yZVwiKTtcbmNvbnN0IHpvZF90b19qc29uX3NjaGVtYV8xID0gcmVxdWlyZShcInpvZC10by1qc29uLXNjaGVtYVwiKTtcbmNvbnN0IGpzb25fc2NoZW1hXzEgPSByZXF1aXJlKFwiQGNmd29ya2VyL2pzb24tc2NoZW1hXCIpO1xuY29uc3Qgem9kX2pzXzEgPSByZXF1aXJlKFwiLi90eXBlcy96b2QuY2pzXCIpO1xudmFyIGpzb25fc2NoZW1hXzIgPSByZXF1aXJlKFwiQGNmd29ya2VyL2pzb24tc2NoZW1hXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVlcENvbXBhcmVTdHJpY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzb25fc2NoZW1hXzIuZGVlcENvbXBhcmVTdHJpY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWYWxpZGF0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGpzb25fc2NoZW1hXzIuVmFsaWRhdG9yOyB9IH0pO1xuLyoqXG4gKiBDb252ZXJ0cyBhIFpvZCBzY2hlbWEgb3IgSlNPTiBzY2hlbWEgdG8gYSBKU09OIHNjaGVtYS5cbiAqIEBwYXJhbSBzY2hlbWEgLSBUaGUgc2NoZW1hIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyBUaGUgY29udmVydGVkIHNjaGVtYS5cbiAqL1xuZnVuY3Rpb24gdG9Kc29uU2NoZW1hKHNjaGVtYSkge1xuICAgIGlmICgoMCwgem9kX2pzXzEuaXNab2RTY2hlbWFWNCkoc2NoZW1hKSkge1xuICAgICAgICBjb25zdCBpbnB1dFNjaGVtYSA9ICgwLCB6b2RfanNfMS5pbnRlcm9wWm9kVHJhbnNmb3JtSW5wdXRTY2hlbWEpKHNjaGVtYSwgdHJ1ZSk7XG4gICAgICAgIGlmICgoMCwgem9kX2pzXzEuaXNab2RPYmplY3RWNCkoaW5wdXRTY2hlbWEpKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpY3RTY2hlbWEgPSAoMCwgem9kX2pzXzEuaW50ZXJvcFpvZE9iamVjdFN0cmljdCkoaW5wdXRTY2hlbWEsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBjb3JlXzEudG9KU09OU2NoZW1hKShzdHJpY3RTY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBjb3JlXzEudG9KU09OU2NoZW1hKShzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgoMCwgem9kX2pzXzEuaXNab2RTY2hlbWFWMykoc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gKDAsIHpvZF90b19qc29uX3NjaGVtYV8xLnpvZFRvSnNvblNjaGVtYSkoc2NoZW1hKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYTtcbn1cbi8qKlxuICogVmFsaWRhdGVzIGlmIGEgSlNPTiBzY2hlbWEgdmFsaWRhdGVzIG9ubHkgc3RyaW5ncy4gTWF5IHJldHVybiBmYWxzZSBuZWdhdGl2ZXMgaW4gc29tZSBlZGdlIGNhc2VzXG4gKiAobGlrZSByZWN1cnNpdmUgb3IgdW5yZXNvbHZhYmxlIHJlZnMpLlxuICpcbiAqIEBwYXJhbSBzY2hlbWEgLSBUaGUgc2NoZW1hIHRvIHZhbGlkYXRlLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBzY2hlbWEgdmFsaWRhdGVzIG9ubHkgc3RyaW5ncywgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlc09ubHlTdHJpbmdzKHNjaGVtYSkge1xuICAgIC8vIE51bGwsIHVuZGVmaW5lZCwgb3IgZW1wdHkgc2NoZW1hXG4gICAgaWYgKCFzY2hlbWEgfHxcbiAgICAgICAgdHlwZW9mIHNjaGVtYSAhPT0gXCJvYmplY3RcIiB8fFxuICAgICAgICBPYmplY3Qua2V5cyhzY2hlbWEpLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICBBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBWYWxpZGF0ZXMgYW55dGhpbmcsIG5vdCBqdXN0IHN0cmluZ3NcbiAgICB9XG4gICAgLy8gRXhwbGljaXQgdHlwZSBjb25zdHJhaW50XG4gICAgaWYgKFwidHlwZVwiIGluIHNjaGVtYSkge1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLnR5cGUgPT09IFwic3RyaW5nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLnR5cGUpKSB7XG4gICAgICAgICAgICAvLyBub3Qgc3VyZSB3aHkgc29tZW9uZSB3b3VsZCBkbyBgXCJ0eXBlXCI6IFtcInN0cmluZ1wiXWAgb3IgZXNwZWNpYWxseSBgXCJ0eXBlXCI6IFtcInN0cmluZ1wiLFxuICAgICAgICAgICAgLy8gXCJzdHJpbmdcIiwgXCJzdHJpbmdcIiwgLi4uXWAgYnV0IHdlJ3JlIG5vdCBoZXJlIHRvIGp1ZGdlXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLnR5cGUuZXZlcnkoKHQpID0+IHQgPT09IFwic3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gSW52YWxpZCBvciBub24tc3RyaW5nIHR5cGVcbiAgICB9XG4gICAgLy8gRW51bSB3aXRoIG9ubHkgc3RyaW5nIHZhbHVlc1xuICAgIGlmIChcImVudW1cIiBpbiBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHNjaGVtYS5lbnVtKSAmJlxuICAgICAgICAgICAgc2NoZW1hLmVudW0ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgc2NoZW1hLmVudW0uZXZlcnkoKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIikpO1xuICAgIH1cbiAgICAvLyBTdHJpbmcgY29uc3RhbnRcbiAgICBpZiAoXCJjb25zdFwiIGluIHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHNjaGVtYS5jb25zdCA9PT0gXCJzdHJpbmdcIjtcbiAgICB9XG4gICAgLy8gU2NoZW1hIGNvbWJpbmF0aW9uc1xuICAgIGlmIChcImFsbE9mXCIgaW4gc2NoZW1hICYmIEFycmF5LmlzQXJyYXkoc2NoZW1hLmFsbE9mKSkge1xuICAgICAgICAvLyBJZiBhbnkgc3Vic2NoZW1hIHZhbGlkYXRlcyBvbmx5IHN0cmluZ3MsIHRoZW4gdGhlIG92ZXJhbGwgc2NoZW1hIHZhbGlkYXRlcyBvbmx5IHN0cmluZ3NcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5hbGxPZi5zb21lKChzdWJzY2hlbWEpID0+IHZhbGlkYXRlc09ubHlTdHJpbmdzKHN1YnNjaGVtYSkpO1xuICAgIH1cbiAgICBpZiAoKFwiYW55T2ZcIiBpbiBzY2hlbWEgJiYgQXJyYXkuaXNBcnJheShzY2hlbWEuYW55T2YpKSB8fFxuICAgICAgICAoXCJvbmVPZlwiIGluIHNjaGVtYSAmJiBBcnJheS5pc0FycmF5KHNjaGVtYS5vbmVPZikpKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjaGVtYXMgPSAoXCJhbnlPZlwiIGluIHNjaGVtYSA/IHNjaGVtYS5hbnlPZiA6IHNjaGVtYS5vbmVPZik7XG4gICAgICAgIC8vIEFsbCBzdWJzY2hlbWFzIG11c3QgdmFsaWRhdGUgb25seSBzdHJpbmdzXG4gICAgICAgIHJldHVybiAoc3Vic2NoZW1hcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICBzdWJzY2hlbWFzLmV2ZXJ5KChzdWJzY2hlbWEpID0+IHZhbGlkYXRlc09ubHlTdHJpbmdzKHN1YnNjaGVtYSkpKTtcbiAgICB9XG4gICAgLy8gV2UncmUgbm90IGdvaW5nIHRvIHRyeSBvbiB0aGlzIG9uZSwgaXQncyB0b28gY29tcGxleCAtIHdlIGp1c3QgYXNzdW1lIGlmIGl0IGhhcyBhIFwibm90XCIga2V5IGFuZCBoYXNuJ3QgbWF0Y2hlZCBvbmUgb2YgdGhlIGFib3ZlIGNoZWNrcywgaXQncyBub3QgYSBzdHJpbmcgc2NoZW1hLlxuICAgIGlmIChcIm5vdFwiIGluIHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFRoZSBub3QgY2FzZSBjYW4gdmFsaWRhdGUgbm9uLXN0cmluZ3NcbiAgICB9XG4gICAgaWYgKFwiJHJlZlwiIGluIHNjaGVtYSAmJiB0eXBlb2Ygc2NoZW1hLiRyZWYgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgcmVmID0gc2NoZW1hLiRyZWY7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gKDAsIGpzb25fc2NoZW1hXzEuZGVyZWZlcmVuY2UpKHNjaGVtYSk7XG4gICAgICAgIGlmIChyZXNvbHZlZFtyZWZdKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVzT25seVN0cmluZ3MocmVzb2x2ZWRbcmVmXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBpZ25vcmUgcmVjdXJzaXZlIHJlZnMgYW5kIG90aGVyIGNhc2VzIHdoZXJlIHR5cGUgaXMgb21pdHRlZCBmb3Igbm93XG4gICAgLy8gaWdub3JlIG90aGVyIGNhc2VzIGZvciBub3cgd2hlcmUgdHlwZSBpcyBvbWl0dGVkXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.cjs":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/sax-js/sax.cjs ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// @ts-nocheck\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sax = void 0;\n// Inlined to deal with portability issues\n// Originally from: https://github.com/isaacs/sax-js\nconst initializeSax = function () {\n    const sax = {};\n    sax.parser = function (strict, opt) {\n        return new SAXParser(strict, opt);\n    };\n    sax.SAXParser = SAXParser;\n    sax.SAXStream = SAXStream;\n    sax.createStream = createStream;\n    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n    // since that's the earliest that a buffer overrun could occur.  This way, checks are\n    // as rare as required, but as often as necessary to ensure never crossing this bound.\n    // Furthermore, buffers are only tested at most once per write(), so passing a very\n    // large string into write() might have undesirable effects, but this is manageable by\n    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n    // edge case, result in creating at most one complete copy of the string passed in.\n    // Set to Infinity to have unlimited buffers.\n    sax.MAX_BUFFER_LENGTH = 64 * 1024;\n    const buffers = [\n        \"comment\",\n        \"sgmlDecl\",\n        \"textNode\",\n        \"tagName\",\n        \"doctype\",\n        \"procInstName\",\n        \"procInstBody\",\n        \"entity\",\n        \"attribName\",\n        \"attribValue\",\n        \"cdata\",\n        \"script\",\n    ];\n    sax.EVENTS = [\n        \"text\",\n        \"processinginstruction\",\n        \"sgmldeclaration\",\n        \"doctype\",\n        \"comment\",\n        \"opentagstart\",\n        \"attribute\",\n        \"opentag\",\n        \"closetag\",\n        \"opencdata\",\n        \"cdata\",\n        \"closecdata\",\n        \"error\",\n        \"end\",\n        \"ready\",\n        \"script\",\n        \"opennamespace\",\n        \"closenamespace\",\n    ];\n    function SAXParser(strict, opt) {\n        if (!(this instanceof SAXParser)) {\n            return new SAXParser(strict, opt);\n        }\n        var parser = this;\n        clearBuffers(parser);\n        parser.q = parser.c = \"\";\n        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n        parser.opt = opt || {};\n        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n        parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n        parser.tags = [];\n        parser.closed = parser.closedRoot = parser.sawRoot = false;\n        parser.tag = parser.error = null;\n        parser.strict = !!strict;\n        parser.noscript = !!(strict || parser.opt.noscript);\n        parser.state = S.BEGIN;\n        parser.strictEntities = parser.opt.strictEntities;\n        parser.ENTITIES = parser.strictEntities\n            ? Object.create(sax.XML_ENTITIES)\n            : Object.create(sax.ENTITIES);\n        parser.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (parser.opt.xmlns) {\n            parser.ns = Object.create(rootNS);\n        }\n        // mostly just for error reporting\n        parser.trackPosition = parser.opt.position !== false;\n        if (parser.trackPosition) {\n            parser.position = parser.line = parser.column = 0;\n        }\n        emit(parser, \"onready\");\n    }\n    if (!Object.create) {\n        Object.create = function (o) {\n            function F() { }\n            F.prototype = o;\n            var newf = new F();\n            return newf;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function (o) {\n            var a = [];\n            for (var i in o)\n                if (o.hasOwnProperty(i))\n                    a.push(i);\n            return a;\n        };\n    }\n    function checkBufferLength(parser) {\n        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n        var maxActual = 0;\n        for (var i = 0, l = buffers.length; i < l; i++) {\n            var len = parser[buffers[i]].length;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch (buffers[i]) {\n                    case \"textNode\":\n                        closeText(parser);\n                        break;\n                    case \"cdata\":\n                        emitNode(parser, \"oncdata\", parser.cdata);\n                        parser.cdata = \"\";\n                        break;\n                    case \"script\":\n                        emitNode(parser, \"onscript\", parser.script);\n                        parser.script = \"\";\n                        break;\n                    default:\n                        error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        var m = sax.MAX_BUFFER_LENGTH - maxActual;\n        parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n        for (var i = 0, l = buffers.length; i < l; i++) {\n            parser[buffers[i]] = \"\";\n        }\n    }\n    function flushBuffers(parser) {\n        closeText(parser);\n        if (parser.cdata !== \"\") {\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n        }\n        if (parser.script !== \"\") {\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n    }\n    SAXParser.prototype = {\n        end: function () {\n            end(this);\n        },\n        write: write,\n        resume: function () {\n            this.error = null;\n            return this;\n        },\n        close: function () {\n            return this.write(null);\n        },\n        flush: function () {\n            flushBuffers(this);\n        },\n    };\n    var Stream = ReadableStream;\n    if (!Stream)\n        Stream = function () { };\n    var streamWraps = sax.EVENTS.filter(function (ev) {\n        return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n        return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n        if (!(this instanceof SAXStream)) {\n            return new SAXStream(strict, opt);\n        }\n        Stream.apply(this);\n        this._parser = new SAXParser(strict, opt);\n        this.writable = true;\n        this.readable = true;\n        var me = this;\n        this._parser.onend = function () {\n            me.emit(\"end\");\n        };\n        this._parser.onerror = function (er) {\n            me.emit(\"error\", er);\n            // if didn't throw, then means error was handled.\n            // go ahead and clear error, so we can write again.\n            me._parser.error = null;\n        };\n        this._decoder = null;\n        streamWraps.forEach(function (ev) {\n            Object.defineProperty(me, \"on\" + ev, {\n                get: function () {\n                    return me._parser[\"on\" + ev];\n                },\n                set: function (h) {\n                    if (!h) {\n                        me.removeAllListeners(ev);\n                        me._parser[\"on\" + ev] = h;\n                        return h;\n                    }\n                    me.on(ev, h);\n                },\n                enumerable: true,\n                configurable: false,\n            });\n        });\n    }\n    SAXStream.prototype = Object.create(Stream.prototype, {\n        constructor: {\n            value: SAXStream,\n        },\n    });\n    SAXStream.prototype.write = function (data) {\n        this._parser.write(data.toString());\n        this.emit(\"data\", data);\n        return true;\n    };\n    SAXStream.prototype.end = function (chunk) {\n        if (chunk && chunk.length) {\n            this.write(chunk);\n        }\n        this._parser.end();\n        return true;\n    };\n    SAXStream.prototype.on = function (ev, handler) {\n        var me = this;\n        if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n            me._parser[\"on\" + ev] = function () {\n                var args = arguments.length === 1\n                    ? [arguments[0]]\n                    : Array.apply(null, arguments);\n                args.splice(0, 0, ev);\n                me.emit.apply(me, args);\n            };\n        }\n        return Stream.prototype.on.call(me, ev, handler);\n    };\n    // this really needs to be replaced with character classes.\n    // XML allows all manner of ridiculous numbers and digits.\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };\n    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n    // This implementation works on strings, a single character at a time\n    // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n    // without a significant breaking change to either this  parser, or the\n    // JavaScript language.  Implementation of an emoji-capable xml parser\n    // is left as an exercise for the reader.\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n        return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\\t\";\n    }\n    function isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n        return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n        return regex.test(c);\n    }\n    function notMatch(regex, c) {\n        return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax.STATE = {\n        BEGIN: S++, // leading byte order mark or whitespace\n        BEGIN_WHITESPACE: S++, // leading whitespace\n        TEXT: S++, // general stuff\n        TEXT_ENTITY: S++, // &amp and such.\n        OPEN_WAKA: S++, // <\n        SGML_DECL: S++, // <!BLARG\n        SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n        DOCTYPE: S++, // <!DOCTYPE\n        DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n        DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n        DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n        COMMENT_STARTING: S++, // <!-\n        COMMENT: S++, // <!--\n        COMMENT_ENDING: S++, // <!-- blah -\n        COMMENT_ENDED: S++, // <!-- blah --\n        CDATA: S++, // <![CDATA[ something\n        CDATA_ENDING: S++, // ]\n        CDATA_ENDING_2: S++, // ]]\n        PROC_INST: S++, // <?hi\n        PROC_INST_BODY: S++, // <?hi there\n        PROC_INST_ENDING: S++, // <?hi \"there\" ?\n        OPEN_TAG: S++, // <strong\n        OPEN_TAG_SLASH: S++, // <strong /\n        ATTRIB: S++, // <a\n        ATTRIB_NAME: S++, // <a foo\n        ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n        ATTRIB_VALUE: S++, // <a foo=\n        ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n        ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n        ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n        ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n        ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n        CLOSE_TAG: S++, // </a\n        CLOSE_TAG_SAW_WHITE: S++, // </a   >\n        SCRIPT: S++, // <script> ...\n        SCRIPT_ENDING: S++, // <script> ... <\n    };\n    sax.XML_ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\",\n    };\n    sax.ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\",\n        AElig: 198,\n        Aacute: 193,\n        Acirc: 194,\n        Agrave: 192,\n        Aring: 197,\n        Atilde: 195,\n        Auml: 196,\n        Ccedil: 199,\n        ETH: 208,\n        Eacute: 201,\n        Ecirc: 202,\n        Egrave: 200,\n        Euml: 203,\n        Iacute: 205,\n        Icirc: 206,\n        Igrave: 204,\n        Iuml: 207,\n        Ntilde: 209,\n        Oacute: 211,\n        Ocirc: 212,\n        Ograve: 210,\n        Oslash: 216,\n        Otilde: 213,\n        Ouml: 214,\n        THORN: 222,\n        Uacute: 218,\n        Ucirc: 219,\n        Ugrave: 217,\n        Uuml: 220,\n        Yacute: 221,\n        aacute: 225,\n        acirc: 226,\n        aelig: 230,\n        agrave: 224,\n        aring: 229,\n        atilde: 227,\n        auml: 228,\n        ccedil: 231,\n        eacute: 233,\n        ecirc: 234,\n        egrave: 232,\n        eth: 240,\n        euml: 235,\n        iacute: 237,\n        icirc: 238,\n        igrave: 236,\n        iuml: 239,\n        ntilde: 241,\n        oacute: 243,\n        ocirc: 244,\n        ograve: 242,\n        oslash: 248,\n        otilde: 245,\n        ouml: 246,\n        szlig: 223,\n        thorn: 254,\n        uacute: 250,\n        ucirc: 251,\n        ugrave: 249,\n        uuml: 252,\n        yacute: 253,\n        yuml: 255,\n        copy: 169,\n        reg: 174,\n        nbsp: 160,\n        iexcl: 161,\n        cent: 162,\n        pound: 163,\n        curren: 164,\n        yen: 165,\n        brvbar: 166,\n        sect: 167,\n        uml: 168,\n        ordf: 170,\n        laquo: 171,\n        not: 172,\n        shy: 173,\n        macr: 175,\n        deg: 176,\n        plusmn: 177,\n        sup1: 185,\n        sup2: 178,\n        sup3: 179,\n        acute: 180,\n        micro: 181,\n        para: 182,\n        middot: 183,\n        cedil: 184,\n        ordm: 186,\n        raquo: 187,\n        frac14: 188,\n        frac12: 189,\n        frac34: 190,\n        iquest: 191,\n        times: 215,\n        divide: 247,\n        OElig: 338,\n        oelig: 339,\n        Scaron: 352,\n        scaron: 353,\n        Yuml: 376,\n        fnof: 402,\n        circ: 710,\n        tilde: 732,\n        Alpha: 913,\n        Beta: 914,\n        Gamma: 915,\n        Delta: 916,\n        Epsilon: 917,\n        Zeta: 918,\n        Eta: 919,\n        Theta: 920,\n        Iota: 921,\n        Kappa: 922,\n        Lambda: 923,\n        Mu: 924,\n        Nu: 925,\n        Xi: 926,\n        Omicron: 927,\n        Pi: 928,\n        Rho: 929,\n        Sigma: 931,\n        Tau: 932,\n        Upsilon: 933,\n        Phi: 934,\n        Chi: 935,\n        Psi: 936,\n        Omega: 937,\n        alpha: 945,\n        beta: 946,\n        gamma: 947,\n        delta: 948,\n        epsilon: 949,\n        zeta: 950,\n        eta: 951,\n        theta: 952,\n        iota: 953,\n        kappa: 954,\n        lambda: 955,\n        mu: 956,\n        nu: 957,\n        xi: 958,\n        omicron: 959,\n        pi: 960,\n        rho: 961,\n        sigmaf: 962,\n        sigma: 963,\n        tau: 964,\n        upsilon: 965,\n        phi: 966,\n        chi: 967,\n        psi: 968,\n        omega: 969,\n        thetasym: 977,\n        upsih: 978,\n        piv: 982,\n        ensp: 8194,\n        emsp: 8195,\n        thinsp: 8201,\n        zwnj: 8204,\n        zwj: 8205,\n        lrm: 8206,\n        rlm: 8207,\n        ndash: 8211,\n        mdash: 8212,\n        lsquo: 8216,\n        rsquo: 8217,\n        sbquo: 8218,\n        ldquo: 8220,\n        rdquo: 8221,\n        bdquo: 8222,\n        dagger: 8224,\n        Dagger: 8225,\n        bull: 8226,\n        hellip: 8230,\n        permil: 8240,\n        prime: 8242,\n        Prime: 8243,\n        lsaquo: 8249,\n        rsaquo: 8250,\n        oline: 8254,\n        frasl: 8260,\n        euro: 8364,\n        image: 8465,\n        weierp: 8472,\n        real: 8476,\n        trade: 8482,\n        alefsym: 8501,\n        larr: 8592,\n        uarr: 8593,\n        rarr: 8594,\n        darr: 8595,\n        harr: 8596,\n        crarr: 8629,\n        lArr: 8656,\n        uArr: 8657,\n        rArr: 8658,\n        dArr: 8659,\n        hArr: 8660,\n        forall: 8704,\n        part: 8706,\n        exist: 8707,\n        empty: 8709,\n        nabla: 8711,\n        isin: 8712,\n        notin: 8713,\n        ni: 8715,\n        prod: 8719,\n        sum: 8721,\n        minus: 8722,\n        lowast: 8727,\n        radic: 8730,\n        prop: 8733,\n        infin: 8734,\n        ang: 8736,\n        and: 8743,\n        or: 8744,\n        cap: 8745,\n        cup: 8746,\n        int: 8747,\n        there4: 8756,\n        sim: 8764,\n        cong: 8773,\n        asymp: 8776,\n        ne: 8800,\n        equiv: 8801,\n        le: 8804,\n        ge: 8805,\n        sub: 8834,\n        sup: 8835,\n        nsub: 8836,\n        sube: 8838,\n        supe: 8839,\n        oplus: 8853,\n        otimes: 8855,\n        perp: 8869,\n        sdot: 8901,\n        lceil: 8968,\n        rceil: 8969,\n        lfloor: 8970,\n        rfloor: 8971,\n        lang: 9001,\n        rang: 9002,\n        loz: 9674,\n        spades: 9824,\n        clubs: 9827,\n        hearts: 9829,\n        diams: 9830,\n    };\n    Object.keys(sax.ENTITIES).forEach(function (key) {\n        var e = sax.ENTITIES[key];\n        var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n        sax.ENTITIES[key] = s;\n    });\n    for (var s in sax.STATE) {\n        sax.STATE[sax.STATE[s]] = s;\n    }\n    // shorthand\n    S = sax.STATE;\n    function emit(parser, event, data) {\n        parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n        if (parser.textNode)\n            closeText(parser);\n        emit(parser, nodeType, data);\n    }\n    function closeText(parser) {\n        parser.textNode = textopts(parser.opt, parser.textNode);\n        if (parser.textNode)\n            emit(parser, \"ontext\", parser.textNode);\n        parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n        if (opt.trim)\n            text = text.trim();\n        if (opt.normalize)\n            text = text.replace(/\\s+/g, \" \");\n        return text;\n    }\n    function error(parser, er) {\n        closeText(parser);\n        if (parser.trackPosition) {\n            er +=\n                \"\\nLine: \" +\n                    parser.line +\n                    \"\\nColumn: \" +\n                    parser.column +\n                    \"\\nChar: \" +\n                    parser.c;\n        }\n        er = new Error(er);\n        parser.error = er;\n        emit(parser, \"onerror\", er);\n        return parser;\n    }\n    function end(parser) {\n        if (parser.sawRoot && !parser.closedRoot)\n            strictFail(parser, \"Unclosed root tag\");\n        if (parser.state !== S.BEGIN &&\n            parser.state !== S.BEGIN_WHITESPACE &&\n            parser.state !== S.TEXT) {\n            error(parser, \"Unexpected end\");\n        }\n        closeText(parser);\n        parser.c = \"\";\n        parser.closed = true;\n        emit(parser, \"onend\");\n        SAXParser.call(parser, parser.strict, parser.opt);\n        return parser;\n    }\n    function strictFail(parser, message) {\n        if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n            throw new Error(\"bad call to strictFail\");\n        }\n        if (parser.strict) {\n            error(parser, message);\n        }\n    }\n    function newTag(parser) {\n        if (!parser.strict)\n            parser.tagName = parser.tagName[parser.looseCase]();\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        var tag = (parser.tag = { name: parser.tagName, attributes: {} });\n        // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (parser.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        parser.attribList.length = 0;\n        emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute) {\n        var i = name.indexOf(\":\");\n        var qualName = i < 0 ? [\"\", name] : name.split(\":\");\n        var prefix = qualName[0];\n        var local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === \"xmlns\") {\n            prefix = \"xmlns\";\n            local = \"\";\n        }\n        return { prefix: prefix, local: local };\n    }\n    function attrib(parser) {\n        if (!parser.strict) {\n            parser.attribName = parser.attribName[parser.looseCase]();\n        }\n        if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n            parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n            parser.attribName = parser.attribValue = \"\";\n            return;\n        }\n        if (parser.opt.xmlns) {\n            var qn = qname(parser.attribName, true);\n            var prefix = qn.prefix;\n            var local = qn.local;\n            if (prefix === \"xmlns\") {\n                // namespace binding attribute. push the binding into scope\n                if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                    strictFail(parser, \"xml: prefix must be bound to \" +\n                        XML_NAMESPACE +\n                        \"\\n\" +\n                        \"Actual: \" +\n                        parser.attribValue);\n                }\n                else if (local === \"xmlns\" &&\n                    parser.attribValue !== XMLNS_NAMESPACE) {\n                    strictFail(parser, \"xmlns: prefix must be bound to \" +\n                        XMLNS_NAMESPACE +\n                        \"\\n\" +\n                        \"Actual: \" +\n                        parser.attribValue);\n                }\n                else {\n                    var tag = parser.tag;\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = parser.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            parser.attribList.push([parser.attribName, parser.attribValue]);\n        }\n        else {\n            // in non-xmlns mode, we can emit the event right away\n            parser.tag.attributes[parser.attribName] = parser.attribValue;\n            emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: parser.attribValue,\n            });\n        }\n        parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n        if (parser.opt.xmlns) {\n            // emit namespace binding events\n            var tag = parser.tag;\n            // add namespace info to tag\n            var qn = qname(parser.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || \"\";\n            if (tag.prefix && !tag.uri) {\n                strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                tag.uri = qn.prefix;\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns && parent.ns !== tag.ns) {\n                Object.keys(tag.ns).forEach(function (p) {\n                    emitNode(parser, \"onopennamespace\", {\n                        prefix: p,\n                        uri: tag.ns[p],\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for (var i = 0, l = parser.attribList.length; i < l; i++) {\n                var nv = parser.attribList[i];\n                var name = nv[0];\n                var value = nv[1];\n                var qualName = qname(name, true);\n                var prefix = qualName.prefix;\n                var local = qualName.local;\n                var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                var a = {\n                    name: name,\n                    value: value,\n                    prefix: prefix,\n                    local: local,\n                    uri: uri,\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== \"xmlns\" && !uri) {\n                    strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                    a.uri = prefix;\n                }\n                parser.tag.attributes[name] = a;\n                emitNode(parser, \"onattribute\", a);\n            }\n            parser.attribList.length = 0;\n        }\n        parser.tag.isSelfClosing = !!selfClosing;\n        // process the tag\n        parser.sawRoot = true;\n        parser.tags.push(parser.tag);\n        emitNode(parser, \"onopentag\", parser.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                parser.state = S.SCRIPT;\n            }\n            else {\n                parser.state = S.TEXT;\n            }\n            parser.tag = null;\n            parser.tagName = \"\";\n        }\n        parser.attribName = parser.attribValue = \"\";\n        parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n        if (!parser.tagName) {\n            strictFail(parser, \"Weird empty close tag.\");\n            parser.textNode += \"</>\";\n            parser.state = S.TEXT;\n            return;\n        }\n        if (parser.script) {\n            if (parser.tagName !== \"script\") {\n                parser.script += \"</\" + parser.tagName + \">\";\n                parser.tagName = \"\";\n                parser.state = S.SCRIPT;\n                return;\n            }\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        var t = parser.tags.length;\n        var tagName = parser.tagName;\n        if (!parser.strict) {\n            tagName = tagName[parser.looseCase]();\n        }\n        var closeTo = tagName;\n        while (t--) {\n            var close = parser.tags[t];\n            if (close.name !== closeTo) {\n                // fail the first time in strict mode\n                strictFail(parser, \"Unexpected close tag\");\n            }\n            else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n            parser.textNode += \"</\" + parser.tagName + \">\";\n            parser.state = S.TEXT;\n            return;\n        }\n        parser.tagName = tagName;\n        var s = parser.tags.length;\n        while (s-- > t) {\n            var tag = (parser.tag = parser.tags.pop());\n            parser.tagName = parser.tag.name;\n            emitNode(parser, \"onclosetag\", parser.tagName);\n            var x = {};\n            for (var i in tag.ns) {\n                x[i] = tag.ns[i];\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                Object.keys(tag.ns).forEach(function (p) {\n                    var n = tag.ns[p];\n                    emitNode(parser, \"onclosenamespace\", { prefix: p, uri: n });\n                });\n            }\n        }\n        if (t === 0)\n            parser.closedRoot = true;\n        parser.tagName = parser.attribValue = parser.attribName = \"\";\n        parser.attribList.length = 0;\n        parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n        var entity = parser.entity;\n        var entityLC = entity.toLowerCase();\n        var num;\n        var numStr = \"\";\n        if (parser.ENTITIES[entity]) {\n            return parser.ENTITIES[entity];\n        }\n        if (parser.ENTITIES[entityLC]) {\n            return parser.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === \"#\") {\n            if (entity.charAt(1) === \"x\") {\n                entity = entity.slice(2);\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            }\n            else {\n                entity = entity.slice(1);\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, \"\");\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            strictFail(parser, \"Invalid character entity\");\n            return \"&\" + parser.entity + \";\";\n        }\n        return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n        if (c === \"<\") {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n        }\n        else if (!isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            strictFail(parser, \"Non-whitespace before first tag.\");\n            parser.textNode = c;\n            parser.state = S.TEXT;\n        }\n    }\n    function charAt(chunk, i) {\n        var result = \"\";\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    function write(chunk) {\n        var parser = this;\n        if (this.error) {\n            throw this.error;\n        }\n        if (parser.closed) {\n            return error(parser, \"Cannot write after close. Assign an onready handler.\");\n        }\n        if (chunk === null) {\n            return end(parser);\n        }\n        if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        var i = 0;\n        var c = \"\";\n        while (true) {\n            c = charAt(chunk, i++);\n            parser.c = c;\n            if (!c) {\n                break;\n            }\n            if (parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                }\n                else {\n                    parser.column++;\n                }\n            }\n            switch (parser.state) {\n                case S.BEGIN:\n                    parser.state = S.BEGIN_WHITESPACE;\n                    if (c === \"\\uFEFF\") {\n                        continue;\n                    }\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.BEGIN_WHITESPACE:\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.TEXT:\n                    if (parser.sawRoot && !parser.closedRoot) {\n                        var starti = i - 1;\n                        while (c && c !== \"<\" && c !== \"&\") {\n                            c = charAt(chunk, i++);\n                            if (c && parser.trackPosition) {\n                                parser.position++;\n                                if (c === \"\\n\") {\n                                    parser.line++;\n                                    parser.column = 0;\n                                }\n                                else {\n                                    parser.column++;\n                                }\n                            }\n                        }\n                        parser.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === \"<\" &&\n                        !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    }\n                    else {\n                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                            strictFail(parser, \"Text data outside of root node.\");\n                        }\n                        if (c === \"&\") {\n                            parser.state = S.TEXT_ENTITY;\n                        }\n                        else {\n                            parser.textNode += c;\n                        }\n                    }\n                    continue;\n                case S.SCRIPT:\n                    // only non-strict\n                    if (c === \"<\") {\n                        parser.state = S.SCRIPT_ENDING;\n                    }\n                    else {\n                        parser.script += c;\n                    }\n                    continue;\n                case S.SCRIPT_ENDING:\n                    if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                    }\n                    else {\n                        parser.script += \"<\" + c;\n                        parser.state = S.SCRIPT;\n                    }\n                    continue;\n                case S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === \"!\") {\n                        parser.state = S.SGML_DECL;\n                        parser.sgmlDecl = \"\";\n                    }\n                    else if (isWhitespace(c)) {\n                        // wait for it...\n                    }\n                    else if (isMatch(nameStart, c)) {\n                        parser.state = S.OPEN_TAG;\n                        parser.tagName = c;\n                    }\n                    else if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                        parser.tagName = \"\";\n                    }\n                    else if (c === \"?\") {\n                        parser.state = S.PROC_INST;\n                        parser.procInstName = parser.procInstBody = \"\";\n                    }\n                    else {\n                        strictFail(parser, \"Unencoded <\");\n                        // if there was some whitespace, then add that in.\n                        if (parser.startTagPosition + 1 < parser.position) {\n                            var pad = parser.position - parser.startTagPosition;\n                            c = new Array(pad).join(\" \") + c;\n                        }\n                        parser.textNode += \"<\" + c;\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.SGML_DECL:\n                    if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                        emitNode(parser, \"onopencdata\");\n                        parser.state = S.CDATA;\n                        parser.sgmlDecl = \"\";\n                        parser.cdata = \"\";\n                    }\n                    else if (parser.sgmlDecl + c === \"--\") {\n                        parser.state = S.COMMENT;\n                        parser.comment = \"\";\n                        parser.sgmlDecl = \"\";\n                    }\n                    else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                        parser.state = S.DOCTYPE;\n                        if (parser.doctype || parser.sawRoot) {\n                            strictFail(parser, \"Inappropriately located doctype declaration\");\n                        }\n                        parser.doctype = \"\";\n                        parser.sgmlDecl = \"\";\n                    }\n                    else if (c === \">\") {\n                        emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                        parser.sgmlDecl = \"\";\n                        parser.state = S.TEXT;\n                    }\n                    else if (isQuote(c)) {\n                        parser.state = S.SGML_DECL_QUOTED;\n                        parser.sgmlDecl += c;\n                    }\n                    else {\n                        parser.sgmlDecl += c;\n                    }\n                    continue;\n                case S.SGML_DECL_QUOTED:\n                    if (c === parser.q) {\n                        parser.state = S.SGML_DECL;\n                        parser.q = \"\";\n                    }\n                    parser.sgmlDecl += c;\n                    continue;\n                case S.DOCTYPE:\n                    if (c === \">\") {\n                        parser.state = S.TEXT;\n                        emitNode(parser, \"ondoctype\", parser.doctype);\n                        parser.doctype = true; // just remember that we saw it.\n                    }\n                    else {\n                        parser.doctype += c;\n                        if (c === \"[\") {\n                            parser.state = S.DOCTYPE_DTD;\n                        }\n                        else if (isQuote(c)) {\n                            parser.state = S.DOCTYPE_QUOTED;\n                            parser.q = c;\n                        }\n                    }\n                    continue;\n                case S.DOCTYPE_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.q = \"\";\n                        parser.state = S.DOCTYPE;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD:\n                    parser.doctype += c;\n                    if (c === \"]\") {\n                        parser.state = S.DOCTYPE;\n                    }\n                    else if (isQuote(c)) {\n                        parser.state = S.DOCTYPE_DTD_QUOTED;\n                        parser.q = c;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.q = \"\";\n                    }\n                    continue;\n                case S.COMMENT:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDING;\n                    }\n                    else {\n                        parser.comment += c;\n                    }\n                    continue;\n                case S.COMMENT_ENDING:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDED;\n                        parser.comment = textopts(parser.opt, parser.comment);\n                        if (parser.comment) {\n                            emitNode(parser, \"oncomment\", parser.comment);\n                        }\n                        parser.comment = \"\";\n                    }\n                    else {\n                        parser.comment += \"-\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    continue;\n                case S.COMMENT_ENDED:\n                    if (c !== \">\") {\n                        strictFail(parser, \"Malformed comment\");\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        parser.comment += \"--\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    else {\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.CDATA:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING;\n                    }\n                    else {\n                        parser.cdata += c;\n                    }\n                    continue;\n                case S.CDATA_ENDING:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING_2;\n                    }\n                    else {\n                        parser.cdata += \"]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.CDATA_ENDING_2:\n                    if (c === \">\") {\n                        if (parser.cdata) {\n                            emitNode(parser, \"oncdata\", parser.cdata);\n                        }\n                        emitNode(parser, \"onclosecdata\");\n                        parser.cdata = \"\";\n                        parser.state = S.TEXT;\n                    }\n                    else if (c === \"]\") {\n                        parser.cdata += \"]\";\n                    }\n                    else {\n                        parser.cdata += \"]]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.PROC_INST:\n                    if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    }\n                    else if (isWhitespace(c)) {\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    else {\n                        parser.procInstName += c;\n                    }\n                    continue;\n                case S.PROC_INST_BODY:\n                    if (!parser.procInstBody && isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    }\n                    else {\n                        parser.procInstBody += c;\n                    }\n                    continue;\n                case S.PROC_INST_ENDING:\n                    if (c === \">\") {\n                        emitNode(parser, \"onprocessinginstruction\", {\n                            name: parser.procInstName,\n                            body: parser.procInstBody,\n                        });\n                        parser.procInstName = parser.procInstBody = \"\";\n                        parser.state = S.TEXT;\n                    }\n                    else {\n                        parser.procInstBody += \"?\" + c;\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    continue;\n                case S.OPEN_TAG:\n                    if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    }\n                    else {\n                        newTag(parser);\n                        if (c === \">\") {\n                            openTag(parser);\n                        }\n                        else if (c === \"/\") {\n                            parser.state = S.OPEN_TAG_SLASH;\n                        }\n                        else {\n                            if (!isWhitespace(c)) {\n                                strictFail(parser, \"Invalid character in tag name\");\n                            }\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.OPEN_TAG_SLASH:\n                    if (c === \">\") {\n                        openTag(parser, true);\n                        closeTag(parser);\n                    }\n                    else {\n                        strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (c === \">\") {\n                        openTag(parser);\n                    }\n                    else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    }\n                    else if (isMatch(nameStart, c)) {\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    }\n                    else if (c === \">\") {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.attribValue = parser.attribName;\n                        attrib(parser);\n                        openTag(parser);\n                    }\n                    else if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                    }\n                    else if (isMatch(nameBody, c)) {\n                        parser.attribName += c;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    }\n                    else if (isWhitespace(c)) {\n                        continue;\n                    }\n                    else {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.tag.attributes[parser.attribName] = \"\";\n                        parser.attribValue = \"\";\n                        emitNode(parser, \"onattribute\", {\n                            name: parser.attribName,\n                            value: \"\",\n                        });\n                        parser.attribName = \"\";\n                        if (c === \">\") {\n                            openTag(parser);\n                        }\n                        else if (isMatch(nameStart, c)) {\n                            parser.attribName = c;\n                            parser.state = S.ATTRIB_NAME;\n                        }\n                        else {\n                            strictFail(parser, \"Invalid attribute name\");\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.ATTRIB_VALUE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    else if (isQuote(c)) {\n                        parser.q = c;\n                        parser.state = S.ATTRIB_VALUE_QUOTED;\n                    }\n                    else {\n                        strictFail(parser, \"Unquoted attribute value\");\n                        parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                        parser.attribValue = c;\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_QUOTED:\n                    if (c !== parser.q) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                        }\n                        else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    parser.q = \"\";\n                    parser.state = S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case S.ATTRIB_VALUE_CLOSED:\n                    if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB;\n                    }\n                    else if (c === \">\") {\n                        openTag(parser);\n                    }\n                    else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    }\n                    else if (isMatch(nameStart, c)) {\n                        strictFail(parser, \"No whitespace between attributes\");\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_UNQUOTED:\n                    if (!isAttribEnd(c)) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                        }\n                        else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    if (c === \">\") {\n                        openTag(parser);\n                    }\n                    else {\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.CLOSE_TAG:\n                    if (!parser.tagName) {\n                        if (isWhitespace(c)) {\n                            continue;\n                        }\n                        else if (notMatch(nameStart, c)) {\n                            if (parser.script) {\n                                parser.script += \"</\" + c;\n                                parser.state = S.SCRIPT;\n                            }\n                            else {\n                                strictFail(parser, \"Invalid tagname in closing tag.\");\n                            }\n                        }\n                        else {\n                            parser.tagName = c;\n                        }\n                    }\n                    else if (c === \">\") {\n                        closeTag(parser);\n                    }\n                    else if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    }\n                    else if (parser.script) {\n                        parser.script += \"</\" + parser.tagName;\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                    }\n                    else {\n                        if (!isWhitespace(c)) {\n                            strictFail(parser, \"Invalid tagname in closing tag\");\n                        }\n                        parser.state = S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case S.CLOSE_TAG_SAW_WHITE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === \">\") {\n                        closeTag(parser);\n                    }\n                    else {\n                        strictFail(parser, \"Invalid characters in closing tag\");\n                    }\n                    continue;\n                case S.TEXT_ENTITY:\n                case S.ATTRIB_VALUE_ENTITY_Q:\n                case S.ATTRIB_VALUE_ENTITY_U:\n                    var returnState;\n                    var buffer;\n                    switch (parser.state) {\n                        case S.TEXT_ENTITY:\n                            returnState = S.TEXT;\n                            buffer = \"textNode\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = S.ATTRIB_VALUE_QUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                    }\n                    if (c === \";\") {\n                        if (parser.opt.unparsedEntities) {\n                            var parsedEntity = parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                            parser.write(parsedEntity);\n                        }\n                        else {\n                            parser[buffer] += parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                        }\n                    }\n                    else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                        parser.entity += c;\n                    }\n                    else {\n                        strictFail(parser, \"Invalid character in entity name\");\n                        parser[buffer] += \"&\" + parser.entity + c;\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    }\n                    continue;\n                default: /* istanbul ignore next */ {\n                    throw new Error(parser, \"Unknown state: \" + parser.state);\n                }\n            }\n        } // while\n        if (parser.position >= parser.bufferCheckPosition) {\n            checkBufferLength(parser);\n        }\n        return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n    /* istanbul ignore next */\n    if (!String.fromCodePoint) {\n        (function () {\n            var stringFromCharCode = String.fromCharCode;\n            var floor = Math.floor;\n            var fromCodePoint = function () {\n                var MAX_SIZE = 0x4000;\n                var codeUnits = [];\n                var highSurrogate;\n                var lowSurrogate;\n                var index = -1;\n                var length = arguments.length;\n                if (!length) {\n                    return \"\";\n                }\n                var result = \"\";\n                while (++index < length) {\n                    var codePoint = Number(arguments[index]);\n                    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                        codePoint < 0 || // not a valid Unicode code point\n                        codePoint > 0x10ffff || // not a valid Unicode code point\n                        floor(codePoint) !== codePoint // not an integer\n                    ) {\n                        throw RangeError(\"Invalid code point: \" + codePoint);\n                    }\n                    if (codePoint <= 0xffff) {\n                        // BMP code point\n                        codeUnits.push(codePoint);\n                    }\n                    else {\n                        // Astral code point; split in surrogate halves\n                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        codePoint -= 0x10000;\n                        highSurrogate = (codePoint >> 10) + 0xd800;\n                        lowSurrogate = (codePoint % 0x400) + 0xdc00;\n                        codeUnits.push(highSurrogate, lowSurrogate);\n                    }\n                    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                        result += stringFromCharCode.apply(null, codeUnits);\n                        codeUnits.length = 0;\n                    }\n                }\n                return result;\n            };\n            /* istanbul ignore next */\n            if (Object.defineProperty) {\n                Object.defineProperty(String, \"fromCodePoint\", {\n                    value: fromCodePoint,\n                    configurable: true,\n                    writable: true,\n                });\n            }\n            else {\n                String.fromCodePoint = fromCodePoint;\n            }\n        })();\n    }\n    return sax;\n};\nconst sax = /** #__PURE__ */ initializeSax();\nexports.sax = sax;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/signal.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/signal.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.raceWithSignal = raceWithSignal;\nasync function raceWithSignal(promise, signal) {\n    if (signal === undefined) {\n        return promise;\n    }\n    let listener;\n    return Promise.race([\n        promise.catch((err) => {\n            if (!signal?.aborted) {\n                throw err;\n            }\n            else {\n                return undefined;\n            }\n        }),\n        new Promise((_, reject) => {\n            listener = () => {\n                reject(new Error(\"Aborted\"));\n            };\n            signal.addEventListener(\"abort\", listener);\n            // Must be here inside the promise to avoid a race condition\n            if (signal.aborted) {\n                reject(new Error(\"Aborted\"));\n            }\n        }),\n    ]).finally(() => signal.removeEventListener(\"abort\", listener));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvc2lnbmFsLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3NpZ25hbC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhY2VXaXRoU2lnbmFsID0gcmFjZVdpdGhTaWduYWw7XG5hc3luYyBmdW5jdGlvbiByYWNlV2l0aFNpZ25hbChwcm9taXNlLCBzaWduYWwpIHtcbiAgICBpZiAoc2lnbmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIGxldCBsaXN0ZW5lcjtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgcHJvbWlzZS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiQWJvcnRlZFwiKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAvLyBNdXN0IGJlIGhlcmUgaW5zaWRlIHRoZSBwcm9taXNlIHRvIGF2b2lkIGEgcmFjZSBjb25kaXRpb25cbiAgICAgICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJBYm9ydGVkXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgXSkuZmluYWxseSgoKSA9PiBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGxpc3RlbmVyKSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/signal.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/stream.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncGeneratorWithSetup = exports.IterableReadableStream = void 0;\nexports.atee = atee;\nexports.concat = concat;\nexports.pipeGeneratorWithSetup = pipeGeneratorWithSetup;\nconst config_js_1 = __webpack_require__(/*! ../runnables/config.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.cjs\");\nconst index_js_1 = __webpack_require__(/*! ../singletons/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.cjs\");\nconst signal_js_1 = __webpack_require__(/*! ./signal.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/signal.cjs\");\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nclass IterableReadableStream extends ReadableStream {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined,\n                };\n            }\n            else {\n                return {\n                    done: false,\n                    value: result.value,\n                };\n            }\n        }\n        catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return { done: true, value: undefined };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start(controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value }) => {\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel() {\n                reader.releaseLock();\n            },\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull(controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel(reason) {\n                await generator.return(reason);\n            },\n        });\n    }\n}\nexports.IterableReadableStream = IterableReadableStream;\nfunction atee(iter, length = 2) {\n    const buffers = Array.from({ length }, () => []);\n    return buffers.map(async function* makeIter(buffer) {\n        while (true) {\n            if (buffer.length === 0) {\n                const result = await iter.next();\n                for (const buffer of buffers) {\n                    buffer.push(result);\n                }\n            }\n            else if (buffer[0].done) {\n                return;\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                yield buffer.shift().value;\n            }\n        }\n    });\n}\nfunction concat(first, second) {\n    if (Array.isArray(first) && Array.isArray(second)) {\n        return first.concat(second);\n    }\n    else if (typeof first === \"string\" && typeof second === \"string\") {\n        return (first + second);\n    }\n    else if (typeof first === \"number\" && typeof second === \"number\") {\n        return (first + second);\n    }\n    else if (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"concat\" in first &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof first.concat === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return first.concat(second);\n    }\n    else if (typeof first === \"object\" && typeof second === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const chunk = { ...first };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (const [key, value] of Object.entries(second)) {\n            if (key in chunk && !Array.isArray(chunk[key])) {\n                chunk[key] = concat(chunk[key], value);\n            }\n            else {\n                chunk[key] = value;\n            }\n        }\n        return chunk;\n    }\n    else {\n        throw new Error(`Cannot concat ${typeof first} and ${typeof second}`);\n    }\n}\nclass AsyncGeneratorWithSetup {\n    constructor(params) {\n        Object.defineProperty(this, \"generator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"setup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"signal\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResultUsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.generator = params.generator;\n        this.config = params.config;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.signal = params.signal ?? this.config?.signal;\n        // setup is a promise that resolves only after the first iterator value\n        // is available. this is useful when setup of several piped generators\n        // needs to happen in logical order, ie. in the order in which input to\n        // to each generator is available.\n        this.setup = new Promise((resolve, reject) => {\n            void index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(params.config), async () => {\n                this.firstResult = params.generator.next();\n                if (params.startSetup) {\n                    this.firstResult.then(params.startSetup).then(resolve, reject);\n                }\n                else {\n                    this.firstResult.then((_result) => resolve(undefined), reject);\n                }\n            }, true);\n        });\n    }\n    async next(...args) {\n        this.signal?.throwIfAborted();\n        if (!this.firstResultUsed) {\n            this.firstResultUsed = true;\n            return this.firstResult;\n        }\n        return index_js_1.AsyncLocalStorageProviderSingleton.runWithConfig((0, config_js_1.pickRunnableConfigKeys)(this.config), this.signal\n            ? async () => {\n                return (0, signal_js_1.raceWithSignal)(this.generator.next(...args), this.signal);\n            }\n            : async () => {\n                return this.generator.next(...args);\n            }, true);\n    }\n    async return(value) {\n        return this.generator.return(value);\n    }\n    async throw(e) {\n        return this.generator.throw(e);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n}\nexports.AsyncGeneratorWithSetup = AsyncGeneratorWithSetup;\nasync function pipeGeneratorWithSetup(to, generator, startSetup, signal, ...args) {\n    const gen = new AsyncGeneratorWithSetup({\n        generator,\n        startSetup,\n        signal,\n    });\n    const setup = await gen.setup;\n    return { output: to(gen, setup, ...args), setup };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/tiktoken.cjs ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getEncoding = getEncoding;\nexports.encodingForModel = encodingForModel;\nconst lite_1 = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.cjs\");\nconst async_caller_js_1 = __webpack_require__(/*! ./async_caller.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.cjs\");\nconst cache = {};\nconst caller = /* #__PURE__ */ new async_caller_js_1.AsyncCaller({});\nasync function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller\n            .fetch(`https://tiktoken.pages.dev/js/${encoding}.json`)\n            .then((res) => res.json())\n            .then((data) => new lite_1.Tiktoken(data))\n            .catch((e) => {\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nasync function encodingForModel(model) {\n    return getEncoding((0, lite_1.getEncodingNameForModel)(model));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdGlrdG9rZW4uY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQix3QkFBd0I7QUFDeEIsZUFBZSxtQkFBTyxDQUFDLHdFQUFrQjtBQUN6QywwQkFBMEIsbUJBQU8sQ0FBQyw0RkFBb0I7QUFDdEQ7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFNBQVM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3Rpa3Rva2VuLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RW5jb2RpbmcgPSBnZXRFbmNvZGluZztcbmV4cG9ydHMuZW5jb2RpbmdGb3JNb2RlbCA9IGVuY29kaW5nRm9yTW9kZWw7XG5jb25zdCBsaXRlXzEgPSByZXF1aXJlKFwianMtdGlrdG9rZW4vbGl0ZVwiKTtcbmNvbnN0IGFzeW5jX2NhbGxlcl9qc18xID0gcmVxdWlyZShcIi4vYXN5bmNfY2FsbGVyLmNqc1wiKTtcbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWxsZXIgPSAvKiAjX19QVVJFX18gKi8gbmV3IGFzeW5jX2NhbGxlcl9qc18xLkFzeW5jQ2FsbGVyKHt9KTtcbmFzeW5jIGZ1bmN0aW9uIGdldEVuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgaWYgKCEoZW5jb2RpbmcgaW4gY2FjaGUpKSB7XG4gICAgICAgIGNhY2hlW2VuY29kaW5nXSA9IGNhbGxlclxuICAgICAgICAgICAgLmZldGNoKGBodHRwczovL3Rpa3Rva2VuLnBhZ2VzLmRldi9qcy8ke2VuY29kaW5nfS5qc29uYClcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAudGhlbigoZGF0YSkgPT4gbmV3IGxpdGVfMS5UaWt0b2tlbihkYXRhKSlcbiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIGNhY2hlW2VuY29kaW5nXTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgY2FjaGVbZW5jb2RpbmddO1xufVxuYXN5bmMgZnVuY3Rpb24gZW5jb2RpbmdGb3JNb2RlbChtb2RlbCkge1xuICAgIHJldHVybiBnZXRFbmNvZGluZygoMCwgbGl0ZV8xLmdldEVuY29kaW5nTmFtZUZvck1vZGVsKShtb2RlbCkpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/types/index.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/types/index.cjs ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./zod.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdHlwZXMvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyxnRkFBVyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdHlwZXMvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vem9kLmNqc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/types/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/types/zod.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isZodSchemaV4 = isZodSchemaV4;\nexports.isZodSchemaV3 = isZodSchemaV3;\nexports.isZodSchema = isZodSchema;\nexports.isInteropZodSchema = isInteropZodSchema;\nexports.interopSafeParseAsync = interopSafeParseAsync;\nexports.interopParseAsync = interopParseAsync;\nexports.interopSafeParse = interopSafeParse;\nexports.interopParse = interopParse;\nexports.getSchemaDescription = getSchemaDescription;\nexports.isShapelessZodSchema = isShapelessZodSchema;\nexports.isSimpleStringZodSchema = isSimpleStringZodSchema;\nexports.isZodObjectV3 = isZodObjectV3;\nexports.isZodObjectV4 = isZodObjectV4;\nexports.isZodArrayV4 = isZodArrayV4;\nexports.isInteropZodObject = isInteropZodObject;\nexports.getInteropZodObjectShape = getInteropZodObjectShape;\nexports.extendInteropZodObject = extendInteropZodObject;\nexports.interopZodObjectPartial = interopZodObjectPartial;\nexports.interopZodObjectStrict = interopZodObjectStrict;\nexports.interopZodObjectPassthrough = interopZodObjectPassthrough;\nexports.getInteropZodDefaultGetter = getInteropZodDefaultGetter;\nexports.interopZodTransformInputSchema = interopZodTransformInputSchema;\nconst core_1 = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/zod/v4/core/index.cjs\");\nfunction isZodSchemaV4(schema) {\n    if (typeof schema !== \"object\" || schema === null) {\n        return false;\n    }\n    const obj = schema;\n    if (!(\"_zod\" in obj)) {\n        return false;\n    }\n    const zod = obj._zod;\n    return (typeof zod === \"object\" &&\n        zod !== null &&\n        \"def\" in zod);\n}\nfunction isZodSchemaV3(schema) {\n    if (typeof schema !== \"object\" || schema === null) {\n        return false;\n    }\n    const obj = schema;\n    if (!(\"_def\" in obj) || \"_zod\" in obj) {\n        return false;\n    }\n    const def = obj._def;\n    return (typeof def === \"object\" &&\n        def != null &&\n        \"typeName\" in def);\n}\n/** Backward compatible isZodSchema for Zod 3 */\nfunction isZodSchema(schema) {\n    if (isZodSchemaV4(schema)) {\n        console.warn(\"[WARNING] Attempting to use Zod 4 schema in a context where Zod 3 schema is expected. This may cause unexpected behavior.\");\n    }\n    return isZodSchemaV3(schema);\n}\n/**\n * Given either a Zod schema, or plain object, determine if the input is a Zod schema.\n *\n * @param {unknown} input\n * @returns {boolean} Whether or not the provided input is a Zod schema.\n */\nfunction isInteropZodSchema(input) {\n    if (!input) {\n        return false;\n    }\n    if (typeof input !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(input)) {\n        return false;\n    }\n    if (isZodSchemaV4(input) ||\n        isZodSchemaV3(input)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Asynchronously parses the input using the provided Zod schema (v3 or v4) and returns a safe parse result.\n * This function handles both Zod v3 and v4 schemas, returning a result object indicating success or failure.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {Promise<InteropZodSafeParseResult<T>>} A promise that resolves to a safe parse result object.\n * @throws {Error} If the schema is not a recognized Zod v3 or v4 schema.\n */\nasync function interopSafeParseAsync(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        try {\n            const data = await (0, core_1.parseAsync)(schema, input);\n            return {\n                success: true,\n                data,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error,\n            };\n        }\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.safeParse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Asynchronously parses the input using the provided Zod schema (v3 or v4) and returns the parsed value.\n * Throws an error if parsing fails or if the schema is not a recognized Zod v3 or v4 schema.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {Promise<T>} A promise that resolves to the parsed value.\n * @throws {Error} If parsing fails or the schema is not a recognized Zod v3 or v4 schema.\n */\nasync function interopParseAsync(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        return (0, core_1.parse)(schema, input);\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.parse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Safely parses the input using the provided Zod schema (v3 or v4) and returns a result object\n * indicating success or failure. This function is compatible with both Zod v3 and v4 schemas.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {InteropZodSafeParseResult<T>} An object with either the parsed data (on success)\n *   or the error (on failure).\n * @throws {Error} If the schema is not a recognized Zod v3 or v4 schema.\n */\nfunction interopSafeParse(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        try {\n            const data = (0, core_1.parse)(schema, input);\n            return {\n                success: true,\n                data,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error,\n            };\n        }\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.safeParse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Parses the input using the provided Zod schema (v3 or v4) and returns the parsed value.\n * Throws an error if parsing fails or if the schema is not a recognized Zod v3 or v4 schema.\n *\n * @template T - The expected output type of the schema.\n * @param {InteropZodType<T>} schema - The Zod schema (v3 or v4) to use for parsing.\n * @param {unknown} input - The input value to parse.\n * @returns {T} The parsed value.\n * @throws {Error} If parsing fails or the schema is not a recognized Zod v3 or v4 schema.\n */\nfunction interopParse(schema, input) {\n    if (isZodSchemaV4(schema)) {\n        return (0, core_1.parse)(schema, input);\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.parse(input);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n/**\n * Retrieves the description from a schema definition (v3, v4, or plain object), if available.\n *\n * @param {unknown} schema - The schema to extract the description from.\n * @returns {string | undefined} The description of the schema, or undefined if not present.\n */\nfunction getSchemaDescription(schema) {\n    if (isZodSchemaV4(schema)) {\n        return core_1.globalRegistry.get(schema)?.description;\n    }\n    if (isZodSchemaV3(schema)) {\n        return schema.description;\n    }\n    if (\"description\" in schema && typeof schema.description === \"string\") {\n        return schema.description;\n    }\n    return undefined;\n}\n/**\n * Determines if the provided Zod schema is \"shapeless\".\n * A shapeless schema is one that does not define any object shape,\n * such as ZodString, ZodNumber, ZodBoolean, ZodAny, etc.\n * For ZodObject, it must have no shape keys to be considered shapeless.\n * ZodRecord schemas are considered shapeless since they define dynamic\n * key-value mappings without fixed keys.\n *\n * @param schema The Zod schema to check.\n * @returns {boolean} True if the schema is shapeless, false otherwise.\n */\nfunction isShapelessZodSchema(schema) {\n    if (!isInteropZodSchema(schema)) {\n        return false;\n    }\n    // Check for v3 schemas\n    if (isZodSchemaV3(schema)) {\n        // @ts-expect-error - zod v3 types are not compatible with zod v4 types\n        const def = schema._def;\n        // ZodObject is only shaped if it has actual shape keys\n        if (def.typeName === \"ZodObject\") {\n            const obj = schema;\n            return !obj.shape || Object.keys(obj.shape).length === 0;\n        }\n        // ZodRecord is shapeless (dynamic key-value mapping)\n        if (def.typeName === \"ZodRecord\") {\n            return true;\n        }\n    }\n    // Check for v4 schemas\n    if (isZodSchemaV4(schema)) {\n        const def = schema._zod.def;\n        // Object type is only shaped if it has actual shape keys\n        if (def.type === \"object\") {\n            const obj = schema;\n            return !obj.shape || Object.keys(obj.shape).length === 0;\n        }\n        // Record type is shapeless (dynamic key-value mapping)\n        if (def.type === \"record\") {\n            return true;\n        }\n    }\n    // For other schemas, check if they have a `shape` property\n    // If they don't have shape, they're likely shapeless\n    if (typeof schema === \"object\" && schema !== null && !(\"shape\" in schema)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if the provided Zod schema should be treated as a simple string schema\n * that maps to DynamicTool. This aligns with the type-level constraint of\n * InteropZodType<string | undefined> which only matches basic string schemas.\n * If the provided schema is just z.string(), we can make the determination that\n * the tool is just a generic string tool that doesn't require any input validation.\n *\n * This function only returns true for basic ZodString schemas, including:\n * - Basic string schemas (z.string())\n * - String schemas with validations (z.string().min(1), z.string().email(), etc.)\n *\n * This function returns false for everything else, including:\n * - String schemas with defaults (z.string().default(\"value\"))\n * - Branded string schemas (z.string().brand<\"UserId\">())\n * - String schemas with catch operations (z.string().catch(\"default\"))\n * - Optional/nullable string schemas (z.string().optional())\n * - Transformed schemas (z.string().transform() or z.object().transform())\n * - Object or record schemas, even if they're empty\n * - Any other schema type\n *\n * @param schema The Zod schema to check.\n * @returns {boolean} True if the schema is a basic ZodString, false otherwise.\n */\nfunction isSimpleStringZodSchema(schema) {\n    if (!isInteropZodSchema(schema)) {\n        return false;\n    }\n    // For v3 schemas\n    if (isZodSchemaV3(schema)) {\n        // @ts-expect-error - zod v3 types are not compatible with zod v4 types\n        const def = schema._def;\n        // Only accept basic ZodString\n        return def.typeName === \"ZodString\";\n    }\n    // For v4 schemas\n    if (isZodSchemaV4(schema)) {\n        const def = schema._zod.def;\n        // Only accept basic string type\n        return def.type === \"string\";\n    }\n    return false;\n}\nfunction isZodObjectV3(obj) {\n    // Zod v3 object schemas have _def.typeName === \"ZodObject\"\n    if (typeof obj === \"object\" &&\n        obj !== null &&\n        \"_def\" in obj &&\n        typeof obj._def === \"object\" &&\n        obj._def !== null &&\n        \"typeName\" in obj._def &&\n        obj._def.typeName === \"ZodObject\") {\n        return true;\n    }\n    return false;\n}\nfunction isZodObjectV4(obj) {\n    if (!isZodSchemaV4(obj))\n        return false;\n    // Zod v4 object schemas have _zod.def.type === \"object\"\n    if (typeof obj === \"object\" &&\n        obj !== null &&\n        \"_zod\" in obj &&\n        typeof obj._zod === \"object\" &&\n        obj._zod !== null &&\n        \"def\" in obj._zod &&\n        typeof obj._zod.def === \"object\" &&\n        obj._zod.def !== null &&\n        \"type\" in obj._zod.def &&\n        obj._zod.def.type === \"object\") {\n        return true;\n    }\n    return false;\n}\nfunction isZodArrayV4(obj) {\n    if (!isZodSchemaV4(obj))\n        return false;\n    // Zod v4 array schemas have _zod.def.type === \"array\"\n    if (typeof obj === \"object\" &&\n        obj !== null &&\n        \"_zod\" in obj &&\n        typeof obj._zod === \"object\" &&\n        obj._zod !== null &&\n        \"def\" in obj._zod &&\n        typeof obj._zod.def === \"object\" &&\n        obj._zod.def !== null &&\n        \"type\" in obj._zod.def &&\n        obj._zod.def.type === \"array\") {\n        return true;\n    }\n    return false;\n}\n/**\n * Determines if the provided value is an InteropZodObject (Zod v3 or v4 object schema).\n *\n * @param obj The value to check.\n * @returns {boolean} True if the value is a Zod v3 or v4 object schema, false otherwise.\n */\nfunction isInteropZodObject(obj) {\n    if (isZodObjectV3(obj))\n        return true;\n    if (isZodObjectV4(obj))\n        return true;\n    return false;\n}\n/**\n * Retrieves the shape (fields) of a Zod object schema, supporting both Zod v3 and v4.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @returns {InteropZodObjectShape<T>} The shape of the object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */\nfunction getInteropZodObjectShape(schema) {\n    if (isZodSchemaV3(schema)) {\n        return schema.shape;\n    }\n    if (isZodSchemaV4(schema)) {\n        return schema._zod.def.shape;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Extends a Zod object schema with additional fields, supporting both Zod v3 and v4.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @param {InteropZodObjectShape} extension - The fields to add to the schema.\n * @returns {InteropZodObject} The extended Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */\nfunction extendInteropZodObject(schema, extension) {\n    if (isZodSchemaV3(schema)) {\n        return schema.extend(extension);\n    }\n    if (isZodSchemaV4(schema)) {\n        return core_1.util.extend(schema, extension);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a partial version of a Zod object schema, making all fields optional.\n * Supports both Zod v3 and v4.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @returns {InteropZodObject} The partial Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */\nfunction interopZodObjectPartial(schema) {\n    if (isZodSchemaV3(schema)) {\n        // z3: .partial() exists and works as expected\n        return schema.partial();\n    }\n    if (isZodSchemaV4(schema)) {\n        // z4: util.partial exists and works as expected\n        return core_1.util.partial(core_1.$ZodOptional, schema, undefined);\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a strict version of a Zod object schema, disallowing unknown keys.\n * Supports both Zod v3 and v4 object schemas. If `recursive` is true, applies strictness\n * recursively to all nested object schemas and arrays of object schemas.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @param {boolean} [recursive=false] - Whether to apply strictness recursively to nested objects/arrays.\n * @returns {InteropZodObject} The strict Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */\nfunction interopZodObjectStrict(schema, recursive = false) {\n    if (isZodSchemaV3(schema)) {\n        // TODO: v3 schemas aren't recursively handled here\n        // (currently not necessary since zodToJsonSchema handles this)\n        return schema.strict();\n    }\n    if (isZodObjectV4(schema)) {\n        const outputShape = schema._zod.def.shape;\n        if (recursive) {\n            for (const [key, keySchema] of Object.entries(schema._zod.def.shape)) {\n                // If the shape key is a v4 object schema, we need to make it strict\n                if (isZodObjectV4(keySchema)) {\n                    const outputSchema = interopZodObjectStrict(keySchema, recursive);\n                    outputShape[key] = outputSchema;\n                }\n                // If the shape key is a v4 array schema, we need to make the element\n                // schema strict if it's an object schema\n                else if (isZodArrayV4(keySchema)) {\n                    let elementSchema = keySchema._zod.def.element;\n                    if (isZodObjectV4(elementSchema)) {\n                        elementSchema = interopZodObjectStrict(elementSchema, recursive);\n                    }\n                    outputShape[key] = (0, core_1.clone)(keySchema, {\n                        ...keySchema._zod.def,\n                        element: elementSchema,\n                    });\n                }\n                // Otherwise, just use the keySchema\n                else {\n                    outputShape[key] = keySchema;\n                }\n                // Assign meta fields to the keySchema\n                const meta = core_1.globalRegistry.get(keySchema);\n                if (meta)\n                    core_1.globalRegistry.add(outputShape[key], meta);\n            }\n        }\n        const modifiedSchema = (0, core_1.clone)(schema, {\n            ...schema._zod.def,\n            shape: outputShape,\n            catchall: (0, core_1._never)(core_1.$ZodNever),\n        });\n        const meta = core_1.globalRegistry.get(schema);\n        if (meta)\n            core_1.globalRegistry.add(modifiedSchema, meta);\n        return modifiedSchema;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a passthrough version of a Zod object schema, allowing unknown keys.\n * Supports both Zod v3 and v4 object schemas. If `recursive` is true, applies passthrough\n * recursively to all nested object schemas and arrays of object schemas.\n *\n * @template T - The type of the Zod object schema.\n * @param {T} schema - The Zod object schema instance (either v3 or v4).\n * @param {boolean} [recursive=false] - Whether to apply passthrough recursively to nested objects/arrays.\n * @returns {InteropZodObject} The passthrough Zod object schema.\n * @throws {Error} If the schema is not a Zod v3 or v4 object.\n */\nfunction interopZodObjectPassthrough(schema, recursive = false) {\n    if (isZodObjectV3(schema)) {\n        // TODO: v3 schemas aren't recursively handled here\n        // (currently not necessary since zodToJsonSchema handles this)\n        return schema.passthrough();\n    }\n    if (isZodObjectV4(schema)) {\n        const outputShape = schema._zod.def.shape;\n        if (recursive) {\n            for (const [key, keySchema] of Object.entries(schema._zod.def.shape)) {\n                // If the shape key is a v4 object schema, we need to make it passthrough\n                if (isZodObjectV4(keySchema)) {\n                    const outputSchema = interopZodObjectPassthrough(keySchema, recursive);\n                    outputShape[key] = outputSchema;\n                }\n                // If the shape key is a v4 array schema, we need to make the element\n                // schema passthrough if it's an object schema\n                else if (isZodArrayV4(keySchema)) {\n                    let elementSchema = keySchema._zod.def.element;\n                    if (isZodObjectV4(elementSchema)) {\n                        elementSchema = interopZodObjectPassthrough(elementSchema, recursive);\n                    }\n                    outputShape[key] = (0, core_1.clone)(keySchema, {\n                        ...keySchema._zod.def,\n                        element: elementSchema,\n                    });\n                }\n                // Otherwise, just use the keySchema\n                else {\n                    outputShape[key] = keySchema;\n                }\n                // Assign meta fields to the keySchema\n                const meta = core_1.globalRegistry.get(keySchema);\n                if (meta)\n                    core_1.globalRegistry.add(outputShape[key], meta);\n            }\n        }\n        const modifiedSchema = (0, core_1.clone)(schema, {\n            ...schema._zod.def,\n            shape: outputShape,\n            catchall: (0, core_1._unknown)(core_1.$ZodUnknown),\n        });\n        const meta = core_1.globalRegistry.get(schema);\n        if (meta)\n            core_1.globalRegistry.add(modifiedSchema, meta);\n        return modifiedSchema;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodObject or z4.$ZodObject\");\n}\n/**\n * Returns a getter function for the default value of a Zod schema, if one is defined.\n * Supports both Zod v3 and v4 schemas. If the schema has a default value,\n * the returned function will return that value when called. If no default is defined,\n * returns undefined.\n *\n * @template T - The type of the Zod schema.\n * @param {T} schema - The Zod schema instance (either v3 or v4).\n * @returns {(() => InferInteropZodOutput<T>) | undefined} A function that returns the default value, or undefined if no default is set.\n */\nfunction getInteropZodDefaultGetter(schema) {\n    if (isZodSchemaV3(schema)) {\n        try {\n            const defaultValue = schema.parse(undefined);\n            return () => defaultValue;\n        }\n        catch {\n            return undefined;\n        }\n    }\n    if (isZodSchemaV4(schema)) {\n        try {\n            const defaultValue = (0, core_1.parse)(schema, undefined);\n            return () => defaultValue;\n        }\n        catch {\n            return undefined;\n        }\n    }\n    return undefined;\n}\nfunction isZodTransformV3(schema) {\n    return (isZodSchemaV3(schema) &&\n        \"typeName\" in schema._def &&\n        schema._def.typeName === \"ZodEffects\");\n}\nfunction isZodTransformV4(schema) {\n    return isZodSchemaV4(schema) && schema._zod.def.type === \"pipe\";\n}\n/**\n * Returns the input type of a Zod transform schema, for both v3 and v4.\n * If the schema is not a transform, returns undefined. If `recursive` is true,\n * recursively processes nested object schemas and arrays of object schemas.\n *\n * @param schema - The Zod schema instance (v3 or v4)\n * @param {boolean} [recursive=false] - Whether to recursively process nested objects/arrays.\n * @returns The input Zod schema of the transform, or undefined if not a transform\n */\nfunction interopZodTransformInputSchema(schema, recursive = false) {\n    // Zod v3: ._def.schema is the input schema for ZodEffects (transform)\n    if (isZodSchemaV3(schema)) {\n        if (isZodTransformV3(schema)) {\n            return interopZodTransformInputSchema(schema._def.schema, recursive);\n        }\n        // TODO: v3 schemas aren't recursively handled here\n        // (currently not necessary since zodToJsonSchema handles this)\n        return schema;\n    }\n    // Zod v4: _def.type is the input schema for ZodEffects (transform)\n    if (isZodSchemaV4(schema)) {\n        let outputSchema = schema;\n        if (isZodTransformV4(schema)) {\n            outputSchema = interopZodTransformInputSchema(schema._zod.def.in, recursive);\n        }\n        if (recursive) {\n            // Handle nested object schemas\n            if (isZodObjectV4(outputSchema)) {\n                const outputShape = outputSchema._zod.def.shape;\n                for (const [key, keySchema] of Object.entries(outputSchema._zod.def.shape)) {\n                    outputShape[key] = interopZodTransformInputSchema(keySchema, recursive);\n                }\n                outputSchema = (0, core_1.clone)(outputSchema, {\n                    ...outputSchema._zod.def,\n                    shape: outputShape,\n                });\n            }\n            // Handle nested array schemas\n            else if (isZodArrayV4(outputSchema)) {\n                const elementSchema = interopZodTransformInputSchema(outputSchema._zod.def.element, recursive);\n                outputSchema = (0, core_1.clone)(outputSchema, {\n                    ...outputSchema._zod.def,\n                    element: elementSchema,\n                });\n            }\n        }\n        const meta = core_1.globalRegistry.get(schema);\n        if (meta)\n            core_1.globalRegistry.add(outputSchema, meta);\n        return outputSchema;\n    }\n    throw new Error(\"Schema must be an instance of z3.ZodType or z4.$ZodType\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdHlwZXMvem9kLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCLG1CQUFtQjtBQUNuQiwwQkFBMEI7QUFDMUIsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIsb0JBQW9CO0FBQ3BCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsK0JBQStCO0FBQy9CLHFCQUFxQjtBQUNyQixxQkFBcUI7QUFDckIsb0JBQW9CO0FBQ3BCLDBCQUEwQjtBQUMxQixnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCLCtCQUErQjtBQUMvQiw4QkFBOEI7QUFDOUIsbUNBQW1DO0FBQ25DLGtDQUFrQztBQUNsQyxzQ0FBc0M7QUFDdEMsZUFBZSxtQkFBTyxDQUFDLCtEQUFhO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QixXQUFXLFNBQVM7QUFDcEIsYUFBYSx1Q0FBdUM7QUFDcEQsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCLFdBQVcsU0FBUztBQUNwQixhQUFhLFlBQVk7QUFDekIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCLFdBQVcsU0FBUztBQUNwQixhQUFhLDhCQUE4QjtBQUMzQztBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QixXQUFXLFNBQVM7QUFDcEIsYUFBYSxHQUFHO0FBQ2hCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLG9CQUFvQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSwwQkFBMEI7QUFDdkMsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLHVCQUF1QjtBQUNsQyxhQUFhLGtCQUFrQjtBQUMvQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxrQkFBa0I7QUFDL0IsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsU0FBUztBQUNwQixhQUFhLGtCQUFrQjtBQUMvQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLFNBQVM7QUFDcEIsYUFBYSxrQkFBa0I7QUFDL0IsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLDhDQUE4QztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy90eXBlcy96b2QuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1pvZFNjaGVtYVY0ID0gaXNab2RTY2hlbWFWNDtcbmV4cG9ydHMuaXNab2RTY2hlbWFWMyA9IGlzWm9kU2NoZW1hVjM7XG5leHBvcnRzLmlzWm9kU2NoZW1hID0gaXNab2RTY2hlbWE7XG5leHBvcnRzLmlzSW50ZXJvcFpvZFNjaGVtYSA9IGlzSW50ZXJvcFpvZFNjaGVtYTtcbmV4cG9ydHMuaW50ZXJvcFNhZmVQYXJzZUFzeW5jID0gaW50ZXJvcFNhZmVQYXJzZUFzeW5jO1xuZXhwb3J0cy5pbnRlcm9wUGFyc2VBc3luYyA9IGludGVyb3BQYXJzZUFzeW5jO1xuZXhwb3J0cy5pbnRlcm9wU2FmZVBhcnNlID0gaW50ZXJvcFNhZmVQYXJzZTtcbmV4cG9ydHMuaW50ZXJvcFBhcnNlID0gaW50ZXJvcFBhcnNlO1xuZXhwb3J0cy5nZXRTY2hlbWFEZXNjcmlwdGlvbiA9IGdldFNjaGVtYURlc2NyaXB0aW9uO1xuZXhwb3J0cy5pc1NoYXBlbGVzc1pvZFNjaGVtYSA9IGlzU2hhcGVsZXNzWm9kU2NoZW1hO1xuZXhwb3J0cy5pc1NpbXBsZVN0cmluZ1pvZFNjaGVtYSA9IGlzU2ltcGxlU3RyaW5nWm9kU2NoZW1hO1xuZXhwb3J0cy5pc1pvZE9iamVjdFYzID0gaXNab2RPYmplY3RWMztcbmV4cG9ydHMuaXNab2RPYmplY3RWNCA9IGlzWm9kT2JqZWN0VjQ7XG5leHBvcnRzLmlzWm9kQXJyYXlWNCA9IGlzWm9kQXJyYXlWNDtcbmV4cG9ydHMuaXNJbnRlcm9wWm9kT2JqZWN0ID0gaXNJbnRlcm9wWm9kT2JqZWN0O1xuZXhwb3J0cy5nZXRJbnRlcm9wWm9kT2JqZWN0U2hhcGUgPSBnZXRJbnRlcm9wWm9kT2JqZWN0U2hhcGU7XG5leHBvcnRzLmV4dGVuZEludGVyb3Bab2RPYmplY3QgPSBleHRlbmRJbnRlcm9wWm9kT2JqZWN0O1xuZXhwb3J0cy5pbnRlcm9wWm9kT2JqZWN0UGFydGlhbCA9IGludGVyb3Bab2RPYmplY3RQYXJ0aWFsO1xuZXhwb3J0cy5pbnRlcm9wWm9kT2JqZWN0U3RyaWN0ID0gaW50ZXJvcFpvZE9iamVjdFN0cmljdDtcbmV4cG9ydHMuaW50ZXJvcFpvZE9iamVjdFBhc3N0aHJvdWdoID0gaW50ZXJvcFpvZE9iamVjdFBhc3N0aHJvdWdoO1xuZXhwb3J0cy5nZXRJbnRlcm9wWm9kRGVmYXVsdEdldHRlciA9IGdldEludGVyb3Bab2REZWZhdWx0R2V0dGVyO1xuZXhwb3J0cy5pbnRlcm9wWm9kVHJhbnNmb3JtSW5wdXRTY2hlbWEgPSBpbnRlcm9wWm9kVHJhbnNmb3JtSW5wdXRTY2hlbWE7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiem9kL3Y0L2NvcmVcIik7XG5mdW5jdGlvbiBpc1pvZFNjaGVtYVY0KHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hICE9PSBcIm9iamVjdFwiIHx8IHNjaGVtYSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IHNjaGVtYTtcbiAgICBpZiAoIShcIl96b2RcIiBpbiBvYmopKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgem9kID0gb2JqLl96b2Q7XG4gICAgcmV0dXJuICh0eXBlb2Ygem9kID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIHpvZCAhPT0gbnVsbCAmJlxuICAgICAgICBcImRlZlwiIGluIHpvZCk7XG59XG5mdW5jdGlvbiBpc1pvZFNjaGVtYVYzKHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hICE9PSBcIm9iamVjdFwiIHx8IHNjaGVtYSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IHNjaGVtYTtcbiAgICBpZiAoIShcIl9kZWZcIiBpbiBvYmopIHx8IFwiX3pvZFwiIGluIG9iaikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGRlZiA9IG9iai5fZGVmO1xuICAgIHJldHVybiAodHlwZW9mIGRlZiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBkZWYgIT0gbnVsbCAmJlxuICAgICAgICBcInR5cGVOYW1lXCIgaW4gZGVmKTtcbn1cbi8qKiBCYWNrd2FyZCBjb21wYXRpYmxlIGlzWm9kU2NoZW1hIGZvciBab2QgMyAqL1xuZnVuY3Rpb24gaXNab2RTY2hlbWEoc2NoZW1hKSB7XG4gICAgaWYgKGlzWm9kU2NoZW1hVjQoc2NoZW1hKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbV0FSTklOR10gQXR0ZW1wdGluZyB0byB1c2UgWm9kIDQgc2NoZW1hIGluIGEgY29udGV4dCB3aGVyZSBab2QgMyBzY2hlbWEgaXMgZXhwZWN0ZWQuIFRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3IuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gaXNab2RTY2hlbWFWMyhzY2hlbWEpO1xufVxuLyoqXG4gKiBHaXZlbiBlaXRoZXIgYSBab2Qgc2NoZW1hLCBvciBwbGFpbiBvYmplY3QsIGRldGVybWluZSBpZiB0aGUgaW5wdXQgaXMgYSBab2Qgc2NoZW1hLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gaW5wdXRcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvdmlkZWQgaW5wdXQgaXMgYSBab2Qgc2NoZW1hLlxuICovXG5mdW5jdGlvbiBpc0ludGVyb3Bab2RTY2hlbWEoaW5wdXQpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc1pvZFNjaGVtYVY0KGlucHV0KSB8fFxuICAgICAgICBpc1pvZFNjaGVtYVYzKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBwYXJzZXMgdGhlIGlucHV0IHVzaW5nIHRoZSBwcm92aWRlZCBab2Qgc2NoZW1hICh2MyBvciB2NCkgYW5kIHJldHVybnMgYSBzYWZlIHBhcnNlIHJlc3VsdC5cbiAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyBib3RoIFpvZCB2MyBhbmQgdjQgc2NoZW1hcywgcmV0dXJuaW5nIGEgcmVzdWx0IG9iamVjdCBpbmRpY2F0aW5nIHN1Y2Nlc3Mgb3IgZmFpbHVyZS5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSBleHBlY3RlZCBvdXRwdXQgdHlwZSBvZiB0aGUgc2NoZW1hLlxuICogQHBhcmFtIHtJbnRlcm9wWm9kVHlwZTxUPn0gc2NoZW1hIC0gVGhlIFpvZCBzY2hlbWEgKHYzIG9yIHY0KSB0byB1c2UgZm9yIHBhcnNpbmcuXG4gKiBAcGFyYW0ge3Vua25vd259IGlucHV0IC0gVGhlIGlucHV0IHZhbHVlIHRvIHBhcnNlLlxuICogQHJldHVybnMge1Byb21pc2U8SW50ZXJvcFpvZFNhZmVQYXJzZVJlc3VsdDxUPj59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgc2FmZSBwYXJzZSByZXN1bHQgb2JqZWN0LlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBzY2hlbWEgaXMgbm90IGEgcmVjb2duaXplZCBab2QgdjMgb3IgdjQgc2NoZW1hLlxuICovXG5hc3luYyBmdW5jdGlvbiBpbnRlcm9wU2FmZVBhcnNlQXN5bmMoc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChpc1pvZFNjaGVtYVY0KHNjaGVtYSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgY29yZV8xLnBhcnNlQXN5bmMpKHNjaGVtYSwgaW5wdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5zYWZlUGFyc2UoaW5wdXQpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTY2hlbWEgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiB6My5ab2RUeXBlIG9yIHo0LiRab2RUeXBlXCIpO1xufVxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBwYXJzZXMgdGhlIGlucHV0IHVzaW5nIHRoZSBwcm92aWRlZCBab2Qgc2NoZW1hICh2MyBvciB2NCkgYW5kIHJldHVybnMgdGhlIHBhcnNlZCB2YWx1ZS5cbiAqIFRocm93cyBhbiBlcnJvciBpZiBwYXJzaW5nIGZhaWxzIG9yIGlmIHRoZSBzY2hlbWEgaXMgbm90IGEgcmVjb2duaXplZCBab2QgdjMgb3IgdjQgc2NoZW1hLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIGV4cGVjdGVkIG91dHB1dCB0eXBlIG9mIHRoZSBzY2hlbWEuXG4gKiBAcGFyYW0ge0ludGVyb3Bab2RUeXBlPFQ+fSBzY2hlbWEgLSBUaGUgWm9kIHNjaGVtYSAodjMgb3IgdjQpIHRvIHVzZSBmb3IgcGFyc2luZy5cbiAqIEBwYXJhbSB7dW5rbm93bn0gaW5wdXQgLSBUaGUgaW5wdXQgdmFsdWUgdG8gcGFyc2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxUPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHBhcnNlZCB2YWx1ZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBwYXJzaW5nIGZhaWxzIG9yIHRoZSBzY2hlbWEgaXMgbm90IGEgcmVjb2duaXplZCBab2QgdjMgb3IgdjQgc2NoZW1hLlxuICovXG5hc3luYyBmdW5jdGlvbiBpbnRlcm9wUGFyc2VBc3luYyhzY2hlbWEsIGlucHV0KSB7XG4gICAgaWYgKGlzWm9kU2NoZW1hVjQoc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gKDAsIGNvcmVfMS5wYXJzZSkoc2NoZW1hLCBpbnB1dCk7XG4gICAgfVxuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5wYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlNjaGVtYSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHozLlpvZFR5cGUgb3IgejQuJFpvZFR5cGVcIik7XG59XG4vKipcbiAqIFNhZmVseSBwYXJzZXMgdGhlIGlucHV0IHVzaW5nIHRoZSBwcm92aWRlZCBab2Qgc2NoZW1hICh2MyBvciB2NCkgYW5kIHJldHVybnMgYSByZXN1bHQgb2JqZWN0XG4gKiBpbmRpY2F0aW5nIHN1Y2Nlc3Mgb3IgZmFpbHVyZS4gVGhpcyBmdW5jdGlvbiBpcyBjb21wYXRpYmxlIHdpdGggYm90aCBab2QgdjMgYW5kIHY0IHNjaGVtYXMuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgZXhwZWN0ZWQgb3V0cHV0IHR5cGUgb2YgdGhlIHNjaGVtYS5cbiAqIEBwYXJhbSB7SW50ZXJvcFpvZFR5cGU8VD59IHNjaGVtYSAtIFRoZSBab2Qgc2NoZW1hICh2MyBvciB2NCkgdG8gdXNlIGZvciBwYXJzaW5nLlxuICogQHBhcmFtIHt1bmtub3dufSBpbnB1dCAtIFRoZSBpbnB1dCB2YWx1ZSB0byBwYXJzZS5cbiAqIEByZXR1cm5zIHtJbnRlcm9wWm9kU2FmZVBhcnNlUmVzdWx0PFQ+fSBBbiBvYmplY3Qgd2l0aCBlaXRoZXIgdGhlIHBhcnNlZCBkYXRhIChvbiBzdWNjZXNzKVxuICogICBvciB0aGUgZXJyb3IgKG9uIGZhaWx1cmUpLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBzY2hlbWEgaXMgbm90IGEgcmVjb2duaXplZCBab2QgdjMgb3IgdjQgc2NoZW1hLlxuICovXG5mdW5jdGlvbiBpbnRlcm9wU2FmZVBhcnNlKHNjaGVtYSwgaW5wdXQpIHtcbiAgICBpZiAoaXNab2RTY2hlbWFWNChzY2hlbWEpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gKDAsIGNvcmVfMS5wYXJzZSkoc2NoZW1hLCBpbnB1dCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzWm9kU2NoZW1hVjMoc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gc2NoZW1hLnNhZmVQYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlNjaGVtYSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHozLlpvZFR5cGUgb3IgejQuJFpvZFR5cGVcIik7XG59XG4vKipcbiAqIFBhcnNlcyB0aGUgaW5wdXQgdXNpbmcgdGhlIHByb3ZpZGVkIFpvZCBzY2hlbWEgKHYzIG9yIHY0KSBhbmQgcmV0dXJucyB0aGUgcGFyc2VkIHZhbHVlLlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHBhcnNpbmcgZmFpbHMgb3IgaWYgdGhlIHNjaGVtYSBpcyBub3QgYSByZWNvZ25pemVkIFpvZCB2MyBvciB2NCBzY2hlbWEuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgZXhwZWN0ZWQgb3V0cHV0IHR5cGUgb2YgdGhlIHNjaGVtYS5cbiAqIEBwYXJhbSB7SW50ZXJvcFpvZFR5cGU8VD59IHNjaGVtYSAtIFRoZSBab2Qgc2NoZW1hICh2MyBvciB2NCkgdG8gdXNlIGZvciBwYXJzaW5nLlxuICogQHBhcmFtIHt1bmtub3dufSBpbnB1dCAtIFRoZSBpbnB1dCB2YWx1ZSB0byBwYXJzZS5cbiAqIEByZXR1cm5zIHtUfSBUaGUgcGFyc2VkIHZhbHVlLlxuICogQHRocm93cyB7RXJyb3J9IElmIHBhcnNpbmcgZmFpbHMgb3IgdGhlIHNjaGVtYSBpcyBub3QgYSByZWNvZ25pemVkIFpvZCB2MyBvciB2NCBzY2hlbWEuXG4gKi9cbmZ1bmN0aW9uIGludGVyb3BQYXJzZShzY2hlbWEsIGlucHV0KSB7XG4gICAgaWYgKGlzWm9kU2NoZW1hVjQoc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gKDAsIGNvcmVfMS5wYXJzZSkoc2NoZW1hLCBpbnB1dCk7XG4gICAgfVxuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5wYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlNjaGVtYSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHozLlpvZFR5cGUgb3IgejQuJFpvZFR5cGVcIik7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgZGVzY3JpcHRpb24gZnJvbSBhIHNjaGVtYSBkZWZpbml0aW9uICh2MywgdjQsIG9yIHBsYWluIG9iamVjdCksIGlmIGF2YWlsYWJsZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHNjaGVtYSAtIFRoZSBzY2hlbWEgdG8gZXh0cmFjdCB0aGUgZGVzY3JpcHRpb24gZnJvbS5cbiAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9IFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgc2NoZW1hLCBvciB1bmRlZmluZWQgaWYgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldFNjaGVtYURlc2NyaXB0aW9uKHNjaGVtYSkge1xuICAgIGlmIChpc1pvZFNjaGVtYVY0KHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIGNvcmVfMS5nbG9iYWxSZWdpc3RyeS5nZXQoc2NoZW1hKT8uZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgaWYgKFwiZGVzY3JpcHRpb25cIiBpbiBzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYS5kZXNjcmlwdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gc2NoZW1hLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm92aWRlZCBab2Qgc2NoZW1hIGlzIFwic2hhcGVsZXNzXCIuXG4gKiBBIHNoYXBlbGVzcyBzY2hlbWEgaXMgb25lIHRoYXQgZG9lcyBub3QgZGVmaW5lIGFueSBvYmplY3Qgc2hhcGUsXG4gKiBzdWNoIGFzIFpvZFN0cmluZywgWm9kTnVtYmVyLCBab2RCb29sZWFuLCBab2RBbnksIGV0Yy5cbiAqIEZvciBab2RPYmplY3QsIGl0IG11c3QgaGF2ZSBubyBzaGFwZSBrZXlzIHRvIGJlIGNvbnNpZGVyZWQgc2hhcGVsZXNzLlxuICogWm9kUmVjb3JkIHNjaGVtYXMgYXJlIGNvbnNpZGVyZWQgc2hhcGVsZXNzIHNpbmNlIHRoZXkgZGVmaW5lIGR5bmFtaWNcbiAqIGtleS12YWx1ZSBtYXBwaW5ncyB3aXRob3V0IGZpeGVkIGtleXMuXG4gKlxuICogQHBhcmFtIHNjaGVtYSBUaGUgWm9kIHNjaGVtYSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzY2hlbWEgaXMgc2hhcGVsZXNzLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzU2hhcGVsZXNzWm9kU2NoZW1hKHNjaGVtYSkge1xuICAgIGlmICghaXNJbnRlcm9wWm9kU2NoZW1hKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBDaGVjayBmb3IgdjMgc2NoZW1hc1xuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIHpvZCB2MyB0eXBlcyBhcmUgbm90IGNvbXBhdGlibGUgd2l0aCB6b2QgdjQgdHlwZXNcbiAgICAgICAgY29uc3QgZGVmID0gc2NoZW1hLl9kZWY7XG4gICAgICAgIC8vIFpvZE9iamVjdCBpcyBvbmx5IHNoYXBlZCBpZiBpdCBoYXMgYWN0dWFsIHNoYXBlIGtleXNcbiAgICAgICAgaWYgKGRlZi50eXBlTmFtZSA9PT0gXCJab2RPYmplY3RcIikge1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gc2NoZW1hO1xuICAgICAgICAgICAgcmV0dXJuICFvYmouc2hhcGUgfHwgT2JqZWN0LmtleXMob2JqLnNoYXBlKS5sZW5ndGggPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gWm9kUmVjb3JkIGlzIHNoYXBlbGVzcyAoZHluYW1pYyBrZXktdmFsdWUgbWFwcGluZylcbiAgICAgICAgaWYgKGRlZi50eXBlTmFtZSA9PT0gXCJab2RSZWNvcmRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2hlY2sgZm9yIHY0IHNjaGVtYXNcbiAgICBpZiAoaXNab2RTY2hlbWFWNChzY2hlbWEpKSB7XG4gICAgICAgIGNvbnN0IGRlZiA9IHNjaGVtYS5fem9kLmRlZjtcbiAgICAgICAgLy8gT2JqZWN0IHR5cGUgaXMgb25seSBzaGFwZWQgaWYgaXQgaGFzIGFjdHVhbCBzaGFwZSBrZXlzXG4gICAgICAgIGlmIChkZWYudHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gc2NoZW1hO1xuICAgICAgICAgICAgcmV0dXJuICFvYmouc2hhcGUgfHwgT2JqZWN0LmtleXMob2JqLnNoYXBlKS5sZW5ndGggPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjb3JkIHR5cGUgaXMgc2hhcGVsZXNzIChkeW5hbWljIGtleS12YWx1ZSBtYXBwaW5nKVxuICAgICAgICBpZiAoZGVmLnR5cGUgPT09IFwicmVjb3JkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEZvciBvdGhlciBzY2hlbWFzLCBjaGVjayBpZiB0aGV5IGhhdmUgYSBgc2hhcGVgIHByb3BlcnR5XG4gICAgLy8gSWYgdGhleSBkb24ndCBoYXZlIHNoYXBlLCB0aGV5J3JlIGxpa2VseSBzaGFwZWxlc3NcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIiAmJiBzY2hlbWEgIT09IG51bGwgJiYgIShcInNoYXBlXCIgaW4gc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm92aWRlZCBab2Qgc2NoZW1hIHNob3VsZCBiZSB0cmVhdGVkIGFzIGEgc2ltcGxlIHN0cmluZyBzY2hlbWFcbiAqIHRoYXQgbWFwcyB0byBEeW5hbWljVG9vbC4gVGhpcyBhbGlnbnMgd2l0aCB0aGUgdHlwZS1sZXZlbCBjb25zdHJhaW50IG9mXG4gKiBJbnRlcm9wWm9kVHlwZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHdoaWNoIG9ubHkgbWF0Y2hlcyBiYXNpYyBzdHJpbmcgc2NoZW1hcy5cbiAqIElmIHRoZSBwcm92aWRlZCBzY2hlbWEgaXMganVzdCB6LnN0cmluZygpLCB3ZSBjYW4gbWFrZSB0aGUgZGV0ZXJtaW5hdGlvbiB0aGF0XG4gKiB0aGUgdG9vbCBpcyBqdXN0IGEgZ2VuZXJpYyBzdHJpbmcgdG9vbCB0aGF0IGRvZXNuJ3QgcmVxdWlyZSBhbnkgaW5wdXQgdmFsaWRhdGlvbi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIG9ubHkgcmV0dXJucyB0cnVlIGZvciBiYXNpYyBab2RTdHJpbmcgc2NoZW1hcywgaW5jbHVkaW5nOlxuICogLSBCYXNpYyBzdHJpbmcgc2NoZW1hcyAoei5zdHJpbmcoKSlcbiAqIC0gU3RyaW5nIHNjaGVtYXMgd2l0aCB2YWxpZGF0aW9ucyAoei5zdHJpbmcoKS5taW4oMSksIHouc3RyaW5nKCkuZW1haWwoKSwgZXRjLilcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgZmFsc2UgZm9yIGV2ZXJ5dGhpbmcgZWxzZSwgaW5jbHVkaW5nOlxuICogLSBTdHJpbmcgc2NoZW1hcyB3aXRoIGRlZmF1bHRzICh6LnN0cmluZygpLmRlZmF1bHQoXCJ2YWx1ZVwiKSlcbiAqIC0gQnJhbmRlZCBzdHJpbmcgc2NoZW1hcyAoei5zdHJpbmcoKS5icmFuZDxcIlVzZXJJZFwiPigpKVxuICogLSBTdHJpbmcgc2NoZW1hcyB3aXRoIGNhdGNoIG9wZXJhdGlvbnMgKHouc3RyaW5nKCkuY2F0Y2goXCJkZWZhdWx0XCIpKVxuICogLSBPcHRpb25hbC9udWxsYWJsZSBzdHJpbmcgc2NoZW1hcyAoei5zdHJpbmcoKS5vcHRpb25hbCgpKVxuICogLSBUcmFuc2Zvcm1lZCBzY2hlbWFzICh6LnN0cmluZygpLnRyYW5zZm9ybSgpIG9yIHoub2JqZWN0KCkudHJhbnNmb3JtKCkpXG4gKiAtIE9iamVjdCBvciByZWNvcmQgc2NoZW1hcywgZXZlbiBpZiB0aGV5J3JlIGVtcHR5XG4gKiAtIEFueSBvdGhlciBzY2hlbWEgdHlwZVxuICpcbiAqIEBwYXJhbSBzY2hlbWEgVGhlIFpvZCBzY2hlbWEgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc2NoZW1hIGlzIGEgYmFzaWMgWm9kU3RyaW5nLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzU2ltcGxlU3RyaW5nWm9kU2NoZW1hKHNjaGVtYSkge1xuICAgIGlmICghaXNJbnRlcm9wWm9kU2NoZW1hKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBGb3IgdjMgc2NoZW1hc1xuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIHpvZCB2MyB0eXBlcyBhcmUgbm90IGNvbXBhdGlibGUgd2l0aCB6b2QgdjQgdHlwZXNcbiAgICAgICAgY29uc3QgZGVmID0gc2NoZW1hLl9kZWY7XG4gICAgICAgIC8vIE9ubHkgYWNjZXB0IGJhc2ljIFpvZFN0cmluZ1xuICAgICAgICByZXR1cm4gZGVmLnR5cGVOYW1lID09PSBcIlpvZFN0cmluZ1wiO1xuICAgIH1cbiAgICAvLyBGb3IgdjQgc2NoZW1hc1xuICAgIGlmIChpc1pvZFNjaGVtYVY0KHNjaGVtYSkpIHtcbiAgICAgICAgY29uc3QgZGVmID0gc2NoZW1hLl96b2QuZGVmO1xuICAgICAgICAvLyBPbmx5IGFjY2VwdCBiYXNpYyBzdHJpbmcgdHlwZVxuICAgICAgICByZXR1cm4gZGVmLnR5cGUgPT09IFwic3RyaW5nXCI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzWm9kT2JqZWN0VjMob2JqKSB7XG4gICAgLy8gWm9kIHYzIG9iamVjdCBzY2hlbWFzIGhhdmUgX2RlZi50eXBlTmFtZSA9PT0gXCJab2RPYmplY3RcIlxuICAgIGlmICh0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIG9iaiAhPT0gbnVsbCAmJlxuICAgICAgICBcIl9kZWZcIiBpbiBvYmogJiZcbiAgICAgICAgdHlwZW9mIG9iai5fZGVmID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIG9iai5fZGVmICE9PSBudWxsICYmXG4gICAgICAgIFwidHlwZU5hbWVcIiBpbiBvYmouX2RlZiAmJlxuICAgICAgICBvYmouX2RlZi50eXBlTmFtZSA9PT0gXCJab2RPYmplY3RcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNab2RPYmplY3RWNChvYmopIHtcbiAgICBpZiAoIWlzWm9kU2NoZW1hVjQob2JqKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIFpvZCB2NCBvYmplY3Qgc2NoZW1hcyBoYXZlIF96b2QuZGVmLnR5cGUgPT09IFwib2JqZWN0XCJcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBvYmogIT09IG51bGwgJiZcbiAgICAgICAgXCJfem9kXCIgaW4gb2JqICYmXG4gICAgICAgIHR5cGVvZiBvYmouX3pvZCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBvYmouX3pvZCAhPT0gbnVsbCAmJlxuICAgICAgICBcImRlZlwiIGluIG9iai5fem9kICYmXG4gICAgICAgIHR5cGVvZiBvYmouX3pvZC5kZWYgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgb2JqLl96b2QuZGVmICE9PSBudWxsICYmXG4gICAgICAgIFwidHlwZVwiIGluIG9iai5fem9kLmRlZiAmJlxuICAgICAgICBvYmouX3pvZC5kZWYudHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNab2RBcnJheVY0KG9iaikge1xuICAgIGlmICghaXNab2RTY2hlbWFWNChvYmopKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gWm9kIHY0IGFycmF5IHNjaGVtYXMgaGF2ZSBfem9kLmRlZi50eXBlID09PSBcImFycmF5XCJcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBvYmogIT09IG51bGwgJiZcbiAgICAgICAgXCJfem9kXCIgaW4gb2JqICYmXG4gICAgICAgIHR5cGVvZiBvYmouX3pvZCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBvYmouX3pvZCAhPT0gbnVsbCAmJlxuICAgICAgICBcImRlZlwiIGluIG9iai5fem9kICYmXG4gICAgICAgIHR5cGVvZiBvYmouX3pvZC5kZWYgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgb2JqLl96b2QuZGVmICE9PSBudWxsICYmXG4gICAgICAgIFwidHlwZVwiIGluIG9iai5fem9kLmRlZiAmJlxuICAgICAgICBvYmouX3pvZC5kZWYudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGFuIEludGVyb3Bab2RPYmplY3QgKFpvZCB2MyBvciB2NCBvYmplY3Qgc2NoZW1hKS5cbiAqXG4gKiBAcGFyYW0gb2JqIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyBhIFpvZCB2MyBvciB2NCBvYmplY3Qgc2NoZW1hLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzSW50ZXJvcFpvZE9iamVjdChvYmopIHtcbiAgICBpZiAoaXNab2RPYmplY3RWMyhvYmopKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNab2RPYmplY3RWNChvYmopKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgc2hhcGUgKGZpZWxkcykgb2YgYSBab2Qgb2JqZWN0IHNjaGVtYSwgc3VwcG9ydGluZyBib3RoIFpvZCB2MyBhbmQgdjQuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgWm9kIG9iamVjdCBzY2hlbWEuXG4gKiBAcGFyYW0ge1R9IHNjaGVtYSAtIFRoZSBab2Qgb2JqZWN0IHNjaGVtYSBpbnN0YW5jZSAoZWl0aGVyIHYzIG9yIHY0KS5cbiAqIEByZXR1cm5zIHtJbnRlcm9wWm9kT2JqZWN0U2hhcGU8VD59IFRoZSBzaGFwZSBvZiB0aGUgb2JqZWN0IHNjaGVtYS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgc2NoZW1hIGlzIG5vdCBhIFpvZCB2MyBvciB2NCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGdldEludGVyb3Bab2RPYmplY3RTaGFwZShzY2hlbWEpIHtcbiAgICBpZiAoaXNab2RTY2hlbWFWMyhzY2hlbWEpKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuc2hhcGU7XG4gICAgfVxuICAgIGlmIChpc1pvZFNjaGVtYVY0KHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5fem9kLmRlZi5zaGFwZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU2NoZW1hIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgejMuWm9kT2JqZWN0IG9yIHo0LiRab2RPYmplY3RcIik7XG59XG4vKipcbiAqIEV4dGVuZHMgYSBab2Qgb2JqZWN0IHNjaGVtYSB3aXRoIGFkZGl0aW9uYWwgZmllbGRzLCBzdXBwb3J0aW5nIGJvdGggWm9kIHYzIGFuZCB2NC5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSBab2Qgb2JqZWN0IHNjaGVtYS5cbiAqIEBwYXJhbSB7VH0gc2NoZW1hIC0gVGhlIFpvZCBvYmplY3Qgc2NoZW1hIGluc3RhbmNlIChlaXRoZXIgdjMgb3IgdjQpLlxuICogQHBhcmFtIHtJbnRlcm9wWm9kT2JqZWN0U2hhcGV9IGV4dGVuc2lvbiAtIFRoZSBmaWVsZHMgdG8gYWRkIHRvIHRoZSBzY2hlbWEuXG4gKiBAcmV0dXJucyB7SW50ZXJvcFpvZE9iamVjdH0gVGhlIGV4dGVuZGVkIFpvZCBvYmplY3Qgc2NoZW1hLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBzY2hlbWEgaXMgbm90IGEgWm9kIHYzIG9yIHY0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kSW50ZXJvcFpvZE9iamVjdChzY2hlbWEsIGV4dGVuc2lvbikge1xuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5leHRlbmQoZXh0ZW5zaW9uKTtcbiAgICB9XG4gICAgaWYgKGlzWm9kU2NoZW1hVjQoc2NoZW1hKSkge1xuICAgICAgICByZXR1cm4gY29yZV8xLnV0aWwuZXh0ZW5kKHNjaGVtYSwgZXh0ZW5zaW9uKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU2NoZW1hIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgejMuWm9kT2JqZWN0IG9yIHo0LiRab2RPYmplY3RcIik7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXJ0aWFsIHZlcnNpb24gb2YgYSBab2Qgb2JqZWN0IHNjaGVtYSwgbWFraW5nIGFsbCBmaWVsZHMgb3B0aW9uYWwuXG4gKiBTdXBwb3J0cyBib3RoIFpvZCB2MyBhbmQgdjQuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgWm9kIG9iamVjdCBzY2hlbWEuXG4gKiBAcGFyYW0ge1R9IHNjaGVtYSAtIFRoZSBab2Qgb2JqZWN0IHNjaGVtYSBpbnN0YW5jZSAoZWl0aGVyIHYzIG9yIHY0KS5cbiAqIEByZXR1cm5zIHtJbnRlcm9wWm9kT2JqZWN0fSBUaGUgcGFydGlhbCBab2Qgb2JqZWN0IHNjaGVtYS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgc2NoZW1hIGlzIG5vdCBhIFpvZCB2MyBvciB2NCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGludGVyb3Bab2RPYmplY3RQYXJ0aWFsKHNjaGVtYSkge1xuICAgIGlmIChpc1pvZFNjaGVtYVYzKHNjaGVtYSkpIHtcbiAgICAgICAgLy8gejM6IC5wYXJ0aWFsKCkgZXhpc3RzIGFuZCB3b3JrcyBhcyBleHBlY3RlZFxuICAgICAgICByZXR1cm4gc2NoZW1hLnBhcnRpYWwoKTtcbiAgICB9XG4gICAgaWYgKGlzWm9kU2NoZW1hVjQoc2NoZW1hKSkge1xuICAgICAgICAvLyB6NDogdXRpbC5wYXJ0aWFsIGV4aXN0cyBhbmQgd29ya3MgYXMgZXhwZWN0ZWRcbiAgICAgICAgcmV0dXJuIGNvcmVfMS51dGlsLnBhcnRpYWwoY29yZV8xLiRab2RPcHRpb25hbCwgc2NoZW1hLCB1bmRlZmluZWQpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTY2hlbWEgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiB6My5ab2RPYmplY3Qgb3IgejQuJFpvZE9iamVjdFwiKTtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmljdCB2ZXJzaW9uIG9mIGEgWm9kIG9iamVjdCBzY2hlbWEsIGRpc2FsbG93aW5nIHVua25vd24ga2V5cy5cbiAqIFN1cHBvcnRzIGJvdGggWm9kIHYzIGFuZCB2NCBvYmplY3Qgc2NoZW1hcy4gSWYgYHJlY3Vyc2l2ZWAgaXMgdHJ1ZSwgYXBwbGllcyBzdHJpY3RuZXNzXG4gKiByZWN1cnNpdmVseSB0byBhbGwgbmVzdGVkIG9iamVjdCBzY2hlbWFzIGFuZCBhcnJheXMgb2Ygb2JqZWN0IHNjaGVtYXMuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgWm9kIG9iamVjdCBzY2hlbWEuXG4gKiBAcGFyYW0ge1R9IHNjaGVtYSAtIFRoZSBab2Qgb2JqZWN0IHNjaGVtYSBpbnN0YW5jZSAoZWl0aGVyIHYzIG9yIHY0KS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlY3Vyc2l2ZT1mYWxzZV0gLSBXaGV0aGVyIHRvIGFwcGx5IHN0cmljdG5lc3MgcmVjdXJzaXZlbHkgdG8gbmVzdGVkIG9iamVjdHMvYXJyYXlzLlxuICogQHJldHVybnMge0ludGVyb3Bab2RPYmplY3R9IFRoZSBzdHJpY3QgWm9kIG9iamVjdCBzY2hlbWEuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHNjaGVtYSBpcyBub3QgYSBab2QgdjMgb3IgdjQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpbnRlcm9wWm9kT2JqZWN0U3RyaWN0KHNjaGVtYSwgcmVjdXJzaXZlID0gZmFsc2UpIHtcbiAgICBpZiAoaXNab2RTY2hlbWFWMyhzY2hlbWEpKSB7XG4gICAgICAgIC8vIFRPRE86IHYzIHNjaGVtYXMgYXJlbid0IHJlY3Vyc2l2ZWx5IGhhbmRsZWQgaGVyZVxuICAgICAgICAvLyAoY3VycmVudGx5IG5vdCBuZWNlc3Nhcnkgc2luY2Ugem9kVG9Kc29uU2NoZW1hIGhhbmRsZXMgdGhpcylcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5zdHJpY3QoKTtcbiAgICB9XG4gICAgaWYgKGlzWm9kT2JqZWN0VjQoc2NoZW1hKSkge1xuICAgICAgICBjb25zdCBvdXRwdXRTaGFwZSA9IHNjaGVtYS5fem9kLmRlZi5zaGFwZTtcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBrZXlTY2hlbWFdIG9mIE9iamVjdC5lbnRyaWVzKHNjaGVtYS5fem9kLmRlZi5zaGFwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc2hhcGUga2V5IGlzIGEgdjQgb2JqZWN0IHNjaGVtYSwgd2UgbmVlZCB0byBtYWtlIGl0IHN0cmljdFxuICAgICAgICAgICAgICAgIGlmIChpc1pvZE9iamVjdFY0KGtleVNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0U2NoZW1hID0gaW50ZXJvcFpvZE9iamVjdFN0cmljdChrZXlTY2hlbWEsIHJlY3Vyc2l2ZSk7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFNoYXBlW2tleV0gPSBvdXRwdXRTY2hlbWE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzaGFwZSBrZXkgaXMgYSB2NCBhcnJheSBzY2hlbWEsIHdlIG5lZWQgdG8gbWFrZSB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgIC8vIHNjaGVtYSBzdHJpY3QgaWYgaXQncyBhbiBvYmplY3Qgc2NoZW1hXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNab2RBcnJheVY0KGtleVNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnRTY2hlbWEgPSBrZXlTY2hlbWEuX3pvZC5kZWYuZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzWm9kT2JqZWN0VjQoZWxlbWVudFNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRTY2hlbWEgPSBpbnRlcm9wWm9kT2JqZWN0U3RyaWN0KGVsZW1lbnRTY2hlbWEsIHJlY3Vyc2l2ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0U2hhcGVba2V5XSA9ICgwLCBjb3JlXzEuY2xvbmUpKGtleVNjaGVtYSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ua2V5U2NoZW1hLl96b2QuZGVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudFNjaGVtYSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwganVzdCB1c2UgdGhlIGtleVNjaGVtYVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRTaGFwZVtrZXldID0ga2V5U2NoZW1hO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBc3NpZ24gbWV0YSBmaWVsZHMgdG8gdGhlIGtleVNjaGVtYVxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjb3JlXzEuZ2xvYmFsUmVnaXN0cnkuZ2V0KGtleVNjaGVtYSk7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGEpXG4gICAgICAgICAgICAgICAgICAgIGNvcmVfMS5nbG9iYWxSZWdpc3RyeS5hZGQob3V0cHV0U2hhcGVba2V5XSwgbWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kaWZpZWRTY2hlbWEgPSAoMCwgY29yZV8xLmNsb25lKShzY2hlbWEsIHtcbiAgICAgICAgICAgIC4uLnNjaGVtYS5fem9kLmRlZixcbiAgICAgICAgICAgIHNoYXBlOiBvdXRwdXRTaGFwZSxcbiAgICAgICAgICAgIGNhdGNoYWxsOiAoMCwgY29yZV8xLl9uZXZlcikoY29yZV8xLiRab2ROZXZlciksXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZXRhID0gY29yZV8xLmdsb2JhbFJlZ2lzdHJ5LmdldChzY2hlbWEpO1xuICAgICAgICBpZiAobWV0YSlcbiAgICAgICAgICAgIGNvcmVfMS5nbG9iYWxSZWdpc3RyeS5hZGQobW9kaWZpZWRTY2hlbWEsIG1ldGEpO1xuICAgICAgICByZXR1cm4gbW9kaWZpZWRTY2hlbWE7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlNjaGVtYSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHozLlpvZE9iamVjdCBvciB6NC4kWm9kT2JqZWN0XCIpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcGFzc3Rocm91Z2ggdmVyc2lvbiBvZiBhIFpvZCBvYmplY3Qgc2NoZW1hLCBhbGxvd2luZyB1bmtub3duIGtleXMuXG4gKiBTdXBwb3J0cyBib3RoIFpvZCB2MyBhbmQgdjQgb2JqZWN0IHNjaGVtYXMuIElmIGByZWN1cnNpdmVgIGlzIHRydWUsIGFwcGxpZXMgcGFzc3Rocm91Z2hcbiAqIHJlY3Vyc2l2ZWx5IHRvIGFsbCBuZXN0ZWQgb2JqZWN0IHNjaGVtYXMgYW5kIGFycmF5cyBvZiBvYmplY3Qgc2NoZW1hcy5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSBab2Qgb2JqZWN0IHNjaGVtYS5cbiAqIEBwYXJhbSB7VH0gc2NoZW1hIC0gVGhlIFpvZCBvYmplY3Qgc2NoZW1hIGluc3RhbmNlIChlaXRoZXIgdjMgb3IgdjQpLlxuICogQHBhcmFtIHtib29sZWFufSBbcmVjdXJzaXZlPWZhbHNlXSAtIFdoZXRoZXIgdG8gYXBwbHkgcGFzc3Rocm91Z2ggcmVjdXJzaXZlbHkgdG8gbmVzdGVkIG9iamVjdHMvYXJyYXlzLlxuICogQHJldHVybnMge0ludGVyb3Bab2RPYmplY3R9IFRoZSBwYXNzdGhyb3VnaCBab2Qgb2JqZWN0IHNjaGVtYS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgc2NoZW1hIGlzIG5vdCBhIFpvZCB2MyBvciB2NCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGludGVyb3Bab2RPYmplY3RQYXNzdGhyb3VnaChzY2hlbWEsIHJlY3Vyc2l2ZSA9IGZhbHNlKSB7XG4gICAgaWYgKGlzWm9kT2JqZWN0VjMoc2NoZW1hKSkge1xuICAgICAgICAvLyBUT0RPOiB2MyBzY2hlbWFzIGFyZW4ndCByZWN1cnNpdmVseSBoYW5kbGVkIGhlcmVcbiAgICAgICAgLy8gKGN1cnJlbnRseSBub3QgbmVjZXNzYXJ5IHNpbmNlIHpvZFRvSnNvblNjaGVtYSBoYW5kbGVzIHRoaXMpXG4gICAgICAgIHJldHVybiBzY2hlbWEucGFzc3Rocm91Z2goKTtcbiAgICB9XG4gICAgaWYgKGlzWm9kT2JqZWN0VjQoc2NoZW1hKSkge1xuICAgICAgICBjb25zdCBvdXRwdXRTaGFwZSA9IHNjaGVtYS5fem9kLmRlZi5zaGFwZTtcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBrZXlTY2hlbWFdIG9mIE9iamVjdC5lbnRyaWVzKHNjaGVtYS5fem9kLmRlZi5zaGFwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc2hhcGUga2V5IGlzIGEgdjQgb2JqZWN0IHNjaGVtYSwgd2UgbmVlZCB0byBtYWtlIGl0IHBhc3N0aHJvdWdoXG4gICAgICAgICAgICAgICAgaWYgKGlzWm9kT2JqZWN0VjQoa2V5U2NoZW1hKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXRTY2hlbWEgPSBpbnRlcm9wWm9kT2JqZWN0UGFzc3Rocm91Z2goa2V5U2NoZW1hLCByZWN1cnNpdmUpO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRTaGFwZVtrZXldID0gb3V0cHV0U2NoZW1hO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc2hhcGUga2V5IGlzIGEgdjQgYXJyYXkgc2NoZW1hLCB3ZSBuZWVkIHRvIG1ha2UgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBzY2hlbWEgcGFzc3Rocm91Z2ggaWYgaXQncyBhbiBvYmplY3Qgc2NoZW1hXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNab2RBcnJheVY0KGtleVNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnRTY2hlbWEgPSBrZXlTY2hlbWEuX3pvZC5kZWYuZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzWm9kT2JqZWN0VjQoZWxlbWVudFNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRTY2hlbWEgPSBpbnRlcm9wWm9kT2JqZWN0UGFzc3Rocm91Z2goZWxlbWVudFNjaGVtYSwgcmVjdXJzaXZlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRTaGFwZVtrZXldID0gKDAsIGNvcmVfMS5jbG9uZSkoa2V5U2NoZW1hLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5rZXlTY2hlbWEuX3pvZC5kZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50U2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHVzZSB0aGUga2V5U2NoZW1hXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFNoYXBlW2tleV0gPSBrZXlTY2hlbWE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFzc2lnbiBtZXRhIGZpZWxkcyB0byB0aGUga2V5U2NoZW1hXG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNvcmVfMS5nbG9iYWxSZWdpc3RyeS5nZXQoa2V5U2NoZW1hKTtcbiAgICAgICAgICAgICAgICBpZiAobWV0YSlcbiAgICAgICAgICAgICAgICAgICAgY29yZV8xLmdsb2JhbFJlZ2lzdHJ5LmFkZChvdXRwdXRTaGFwZVtrZXldLCBtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2RpZmllZFNjaGVtYSA9ICgwLCBjb3JlXzEuY2xvbmUpKHNjaGVtYSwge1xuICAgICAgICAgICAgLi4uc2NoZW1hLl96b2QuZGVmLFxuICAgICAgICAgICAgc2hhcGU6IG91dHB1dFNoYXBlLFxuICAgICAgICAgICAgY2F0Y2hhbGw6ICgwLCBjb3JlXzEuX3Vua25vd24pKGNvcmVfMS4kWm9kVW5rbm93biksXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtZXRhID0gY29yZV8xLmdsb2JhbFJlZ2lzdHJ5LmdldChzY2hlbWEpO1xuICAgICAgICBpZiAobWV0YSlcbiAgICAgICAgICAgIGNvcmVfMS5nbG9iYWxSZWdpc3RyeS5hZGQobW9kaWZpZWRTY2hlbWEsIG1ldGEpO1xuICAgICAgICByZXR1cm4gbW9kaWZpZWRTY2hlbWE7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlNjaGVtYSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHozLlpvZE9iamVjdCBvciB6NC4kWm9kT2JqZWN0XCIpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIGZvciB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIFpvZCBzY2hlbWEsIGlmIG9uZSBpcyBkZWZpbmVkLlxuICogU3VwcG9ydHMgYm90aCBab2QgdjMgYW5kIHY0IHNjaGVtYXMuIElmIHRoZSBzY2hlbWEgaGFzIGEgZGVmYXVsdCB2YWx1ZSxcbiAqIHRoZSByZXR1cm5lZCBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGF0IHZhbHVlIHdoZW4gY2FsbGVkLiBJZiBubyBkZWZhdWx0IGlzIGRlZmluZWQsXG4gKiByZXR1cm5zIHVuZGVmaW5lZC5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSBab2Qgc2NoZW1hLlxuICogQHBhcmFtIHtUfSBzY2hlbWEgLSBUaGUgWm9kIHNjaGVtYSBpbnN0YW5jZSAoZWl0aGVyIHYzIG9yIHY0KS5cbiAqIEByZXR1cm5zIHsoKCkgPT4gSW5mZXJJbnRlcm9wWm9kT3V0cHV0PFQ+KSB8IHVuZGVmaW5lZH0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGRlZmF1bHQgdmFsdWUsIG9yIHVuZGVmaW5lZCBpZiBubyBkZWZhdWx0IGlzIHNldC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW50ZXJvcFpvZERlZmF1bHRHZXR0ZXIoc2NoZW1hKSB7XG4gICAgaWYgKGlzWm9kU2NoZW1hVjMoc2NoZW1hKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gc2NoZW1hLnBhcnNlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzWm9kU2NoZW1hVjQoc2NoZW1hKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gKDAsIGNvcmVfMS5wYXJzZSkoc2NoZW1hLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc1pvZFRyYW5zZm9ybVYzKHNjaGVtYSkge1xuICAgIHJldHVybiAoaXNab2RTY2hlbWFWMyhzY2hlbWEpICYmXG4gICAgICAgIFwidHlwZU5hbWVcIiBpbiBzY2hlbWEuX2RlZiAmJlxuICAgICAgICBzY2hlbWEuX2RlZi50eXBlTmFtZSA9PT0gXCJab2RFZmZlY3RzXCIpO1xufVxuZnVuY3Rpb24gaXNab2RUcmFuc2Zvcm1WNChzY2hlbWEpIHtcbiAgICByZXR1cm4gaXNab2RTY2hlbWFWNChzY2hlbWEpICYmIHNjaGVtYS5fem9kLmRlZi50eXBlID09PSBcInBpcGVcIjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW5wdXQgdHlwZSBvZiBhIFpvZCB0cmFuc2Zvcm0gc2NoZW1hLCBmb3IgYm90aCB2MyBhbmQgdjQuXG4gKiBJZiB0aGUgc2NoZW1hIGlzIG5vdCBhIHRyYW5zZm9ybSwgcmV0dXJucyB1bmRlZmluZWQuIElmIGByZWN1cnNpdmVgIGlzIHRydWUsXG4gKiByZWN1cnNpdmVseSBwcm9jZXNzZXMgbmVzdGVkIG9iamVjdCBzY2hlbWFzIGFuZCBhcnJheXMgb2Ygb2JqZWN0IHNjaGVtYXMuXG4gKlxuICogQHBhcmFtIHNjaGVtYSAtIFRoZSBab2Qgc2NoZW1hIGluc3RhbmNlICh2MyBvciB2NClcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlY3Vyc2l2ZT1mYWxzZV0gLSBXaGV0aGVyIHRvIHJlY3Vyc2l2ZWx5IHByb2Nlc3MgbmVzdGVkIG9iamVjdHMvYXJyYXlzLlxuICogQHJldHVybnMgVGhlIGlucHV0IFpvZCBzY2hlbWEgb2YgdGhlIHRyYW5zZm9ybSwgb3IgdW5kZWZpbmVkIGlmIG5vdCBhIHRyYW5zZm9ybVxuICovXG5mdW5jdGlvbiBpbnRlcm9wWm9kVHJhbnNmb3JtSW5wdXRTY2hlbWEoc2NoZW1hLCByZWN1cnNpdmUgPSBmYWxzZSkge1xuICAgIC8vIFpvZCB2MzogLl9kZWYuc2NoZW1hIGlzIHRoZSBpbnB1dCBzY2hlbWEgZm9yIFpvZEVmZmVjdHMgKHRyYW5zZm9ybSlcbiAgICBpZiAoaXNab2RTY2hlbWFWMyhzY2hlbWEpKSB7XG4gICAgICAgIGlmIChpc1pvZFRyYW5zZm9ybVYzKHNjaGVtYSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm9wWm9kVHJhbnNmb3JtSW5wdXRTY2hlbWEoc2NoZW1hLl9kZWYuc2NoZW1hLCByZWN1cnNpdmUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE86IHYzIHNjaGVtYXMgYXJlbid0IHJlY3Vyc2l2ZWx5IGhhbmRsZWQgaGVyZVxuICAgICAgICAvLyAoY3VycmVudGx5IG5vdCBuZWNlc3Nhcnkgc2luY2Ugem9kVG9Kc29uU2NoZW1hIGhhbmRsZXMgdGhpcylcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG4gICAgLy8gWm9kIHY0OiBfZGVmLnR5cGUgaXMgdGhlIGlucHV0IHNjaGVtYSBmb3IgWm9kRWZmZWN0cyAodHJhbnNmb3JtKVxuICAgIGlmIChpc1pvZFNjaGVtYVY0KHNjaGVtYSkpIHtcbiAgICAgICAgbGV0IG91dHB1dFNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgaWYgKGlzWm9kVHJhbnNmb3JtVjQoc2NoZW1hKSkge1xuICAgICAgICAgICAgb3V0cHV0U2NoZW1hID0gaW50ZXJvcFpvZFRyYW5zZm9ybUlucHV0U2NoZW1hKHNjaGVtYS5fem9kLmRlZi5pbiwgcmVjdXJzaXZlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgbmVzdGVkIG9iamVjdCBzY2hlbWFzXG4gICAgICAgICAgICBpZiAoaXNab2RPYmplY3RWNChvdXRwdXRTY2hlbWEpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0U2hhcGUgPSBvdXRwdXRTY2hlbWEuX3pvZC5kZWYuc2hhcGU7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBrZXlTY2hlbWFdIG9mIE9iamVjdC5lbnRyaWVzKG91dHB1dFNjaGVtYS5fem9kLmRlZi5zaGFwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0U2hhcGVba2V5XSA9IGludGVyb3Bab2RUcmFuc2Zvcm1JbnB1dFNjaGVtYShrZXlTY2hlbWEsIHJlY3Vyc2l2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dHB1dFNjaGVtYSA9ICgwLCBjb3JlXzEuY2xvbmUpKG91dHB1dFNjaGVtYSwge1xuICAgICAgICAgICAgICAgICAgICAuLi5vdXRwdXRTY2hlbWEuX3pvZC5kZWYsXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlOiBvdXRwdXRTaGFwZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEhhbmRsZSBuZXN0ZWQgYXJyYXkgc2NoZW1hc1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNab2RBcnJheVY0KG91dHB1dFNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50U2NoZW1hID0gaW50ZXJvcFpvZFRyYW5zZm9ybUlucHV0U2NoZW1hKG91dHB1dFNjaGVtYS5fem9kLmRlZi5lbGVtZW50LCByZWN1cnNpdmUpO1xuICAgICAgICAgICAgICAgIG91dHB1dFNjaGVtYSA9ICgwLCBjb3JlXzEuY2xvbmUpKG91dHB1dFNjaGVtYSwge1xuICAgICAgICAgICAgICAgICAgICAuLi5vdXRwdXRTY2hlbWEuX3pvZC5kZWYsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRTY2hlbWEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YSA9IGNvcmVfMS5nbG9iYWxSZWdpc3RyeS5nZXQoc2NoZW1hKTtcbiAgICAgICAgaWYgKG1ldGEpXG4gICAgICAgICAgICBjb3JlXzEuZ2xvYmFsUmVnaXN0cnkuYWRkKG91dHB1dFNjaGVtYSwgbWV0YSk7XG4gICAgICAgIHJldHVybiBvdXRwdXRTY2hlbWE7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIlNjaGVtYSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHozLlpvZFR5cGUgb3IgejQuJFpvZFR5cGVcIik7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/types/zod.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/documents.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/documents.cjs ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/documents/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/documents/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2RvY3VtZW50cy5janMiLCJtYXBwaW5ncyI6IkFBQUEsdUlBQXNEIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZG9jdW1lbnRzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9kb2N1bWVudHMvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/documents.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/embeddings.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/core/embeddings.cjs ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/embeddings.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/embeddings.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3MuY2pzIiwibWFwcGluZ3MiOiJBQUFBLDZIQUFpRCIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3MuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2VtYmVkZGluZ3MuY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/embeddings.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/base.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/base.cjs ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/language_models/base.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9iYXNlLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxrSkFBNEQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvYmFzZS5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L2xhbmd1YWdlX21vZGVscy9iYXNlLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/base.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/chat_models.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/chat_models.cjs ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/language_models/chat_models.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9jaGF0X21vZGVscy5janMiLCJtYXBwaW5ncyI6IkFBQUEsZ0tBQW1FIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbGFuZ3VhZ2VfbW9kZWxzL2NoYXRfbW9kZWxzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3QvbGFuZ3VhZ2VfbW9kZWxzL2NoYXRfbW9kZWxzLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/chat_models.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/llms.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/llms.cjs ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/language_models/llms.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/llms.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9sbG1zLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxrSkFBNEQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvbGxtcy5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L2xhbmd1YWdlX21vZGVscy9sbG1zLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/llms.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/load/serializable.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/load/serializable.cjs ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/load/serializable.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xvYWQvc2VyaWFsaXphYmxlLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSw0SUFBeUQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sb2FkL3NlcmlhbGl6YWJsZS5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L2xvYWQvc2VyaWFsaXphYmxlLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/load/serializable.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/messages.cjs":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/messages.cjs ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/messages/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxxSUFBcUQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9tZXNzYWdlcy5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvbWVzc2FnZXMvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/messages.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX: () => (/* reexport safe */ _max_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   v1ToV6: () => (/* reexport safe */ _v1ToV6_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   v6: () => (/* reexport safe */ _v6_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   v6ToV1: () => (/* reexport safe */ _v6ToV1_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   v7: () => (/* reexport safe */ _v7_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _max_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./max.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/max.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nil.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./v1.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v1ToV6_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./v1ToV6.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1ToV6.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./v3.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./v4.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./v5.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _v6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./v6.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6.js\");\n/* harmony import */ var _v6ToV1_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./v6ToV1.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6ToV1.js\");\n/* harmony import */ var _v7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./v7.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v7.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./version.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwQztBQUNBO0FBQ0k7QUFDUTtBQUNkO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNRO0FBQ1I7QUFDWSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyBNQVggfSBmcm9tICcuL21heC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE5JTCB9IGZyb20gJy4vbmlsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2UgfSBmcm9tICcuL3BhcnNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2MSB9IGZyb20gJy4vdjEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2MVRvVjYgfSBmcm9tICcuL3YxVG9WNi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHYzIH0gZnJvbSAnLi92My5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY0IH0gZnJvbSAnLi92NC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY1IH0gZnJvbSAnLi92NS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY2IH0gZnJvbSAnLi92Ni5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY2VG9WMSB9IGZyb20gJy4vdjZUb1YxLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjcgfSBmcm9tICcuL3Y3LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsaWRhdGUgfSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbi5qcyc7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/max.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/max.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('ffffffff-ffff-ffff-ffff-ffffffffffff');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWF4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL21heC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZmJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/max.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/md5.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/md5.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('md5').update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFNBQVMsNkRBQWlCO0FBQzFCO0FBQ0EsaUVBQWUsR0FBRyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnbm9kZTpjcnlwdG8nO1xuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKGJ5dGVzKS5kaWdlc3QoKTtcbn1cbmV4cG9ydCBkZWZhdWx0IG1kNTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/native.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/native.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  randomUUID: (node_crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQyxpRUFBZTtBQUNmLGNBQWMsK0RBQWlCO0FBQy9CLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25hdGl2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ25vZGU6Y3J5cHRvJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRDogY3J5cHRvLnJhbmRvbVVVSURcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/nil.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/nil.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/parse.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/parse.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction parse(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFDckM7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLEtBQUsiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmZ1bmN0aW9uIHBhcnNlKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cbiAgbGV0IHY7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTtcblxuICAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7XG5cbiAgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmO1xuXG4gIC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7XG5cbiAgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjtcblxuICAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuZXhwb3J0IGRlZmF1bHQgcGFyc2U7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/regex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/regex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyw4RUFBOEUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtOF1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfGZmZmZmZmZmLWZmZmYtZmZmZi1mZmZmLWZmZmZmZmZmZmZmZikkL2k7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/rng.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/rng.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    node_crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQyx1Q0FBdUM7QUFDdkM7QUFDZTtBQUNmO0FBQ0EsSUFBSSxpRUFBcUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ25vZGU6Y3J5cHRvJztcbmNvbnN0IHJuZHM4UG9vbCA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vICMgb2YgcmFuZG9tIHZhbHVlcyB0byBwcmUtYWxsb2NhdGVcbmxldCBwb29sUHRyID0gcm5kczhQb29sLmxlbmd0aDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgaWYgKHBvb2xQdHIgPiBybmRzOFBvb2wubGVuZ3RoIC0gMTYpIHtcbiAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMocm5kczhQb29sKTtcbiAgICBwb29sUHRyID0gMDtcbiAgfVxuICByZXR1cm4gcm5kczhQb29sLnNsaWNlKHBvb2xQdHIsIHBvb2xQdHIgKz0gMTYpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/sha1.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/sha1.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha1').update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc2hhMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxTQUFTLDZEQUFpQjtBQUMxQjtBQUNBLGlFQUFlLElBQUkiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdub2RlOmNyeXB0byc7XG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShieXRlcykuZGlnZXN0KCk7XG59XG5leHBvcnQgZGVmYXVsdCBzaGExOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/validate.js\");\n\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxTQUFTIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIC8vXG4gIC8vIE5vdGUgdG8gZnV0dXJlLXNlbGY6IE5vLCB5b3UgY2FuJ3QgcmVtb3ZlIHRoZSBgdG9Mb3dlckNhc2UoKWAgY2FsbC5cbiAgLy8gUkVGOiBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC82NzcjaXNzdWVjb21tZW50LTE3NTczNTEzNTFcbiAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7XG4gIC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgcmV0dXJuIHV1aWQ7XG59XG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\nlet _clockseq;\n\n// Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node;\n  let clockseq = options.clockseq;\n\n  // v1 only: Use cached `node` and `clockseq` values\n  if (!options._v6) {\n    if (!node) {\n      node = _nodeId;\n    }\n    if (clockseq == null) {\n      clockseq = _clockseq;\n    }\n  }\n\n  // Handle cases where we need entropy.  We do this lazily to minimize issues\n  // related to insufficient system entropy.  See #189\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n    // Randomize node\n    if (node == null) {\n      node = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n\n      // v1 only: cache node value for reuse\n      if (!_nodeId && !options._v6) {\n        // per RFC4122 4.5: Set MAC multicast bit (v1 only)\n        node[0] |= 0x01; // Set multicast bit\n\n        _nodeId = node;\n      }\n    }\n\n    // Randomize clockseq\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n      if (_clockseq === undefined && !options._v6) {\n        _clockseq = clockseq;\n      }\n    }\n  }\n\n  // v1 & v6 timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so time is\n  // handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ3NCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELCtDQUFHOztBQUUzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0EsZ0JBQWdCLDhEQUFlO0FBQy9CO0FBQ0EsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxubGV0IF9ub2RlSWQ7XG5sZXQgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbmxldCBfbGFzdE1TZWNzID0gMDtcbmxldCBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCBmb3IgQVBJIGRldGFpbHNcbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGxldCBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICBjb25zdCBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgbm9kZSA9IG9wdGlvbnMubm9kZTtcbiAgbGV0IGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcTtcblxuICAvLyB2MSBvbmx5OiBVc2UgY2FjaGVkIGBub2RlYCBhbmQgYGNsb2Nrc2VxYCB2YWx1ZXNcbiAgaWYgKCFvcHRpb25zLl92Nikge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgbm9kZSA9IF9ub2RlSWQ7XG4gICAgfVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcTtcbiAgICB9XG4gIH1cblxuICAvLyBIYW5kbGUgY2FzZXMgd2hlcmUgd2UgbmVlZCBlbnRyb3B5LiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzXG4gIC8vIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50IHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgY29uc3Qgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAgIC8vIFJhbmRvbWl6ZSBub2RlXG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgbm9kZSA9IFtzZWVkQnl0ZXNbMF0sIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXTtcblxuICAgICAgLy8gdjEgb25seTogY2FjaGUgbm9kZSB2YWx1ZSBmb3IgcmV1c2VcbiAgICAgIGlmICghX25vZGVJZCAmJiAhb3B0aW9ucy5fdjYpIHtcbiAgICAgICAgLy8gcGVyIFJGQzQxMjIgNC41OiBTZXQgTUFDIG11bHRpY2FzdCBiaXQgKHYxIG9ubHkpXG4gICAgICAgIG5vZGVbMF0gfD0gMHgwMTsgLy8gU2V0IG11bHRpY2FzdCBiaXRcblxuICAgICAgICBfbm9kZUlkID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSYW5kb21pemUgY2xvY2tzZXFcbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICAgIGlmIChfY2xvY2tzZXEgPT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5fdjYpIHtcbiAgICAgICAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gdjEgJiB2NiB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc28gdGltZSBpc1xuICAvLyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG4gIGxldCBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpO1xuXG4gIC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcbiAgbGV0IG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxO1xuXG4gIC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcbiAgY29uc3QgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwO1xuXG4gIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfVxuXG4gIC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH1cblxuICAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTtcblxuICAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7XG5cbiAgLy8gYHRpbWVfbG93YFxuICBjb25zdCB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfbWlkYFxuICBjb25zdCB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjtcblxuICAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwO1xuXG4gIC8vIGBjbG9ja19zZXFfbG93YFxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7XG5cbiAgLy8gYG5vZGVgXG4gIGZvciAobGV0IG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG4gIHJldHVybiBidWYgfHwgdW5zYWZlU3RyaW5naWZ5KGIpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjE7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1ToV6.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1ToV6.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v1ToV6)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * Convert a v1 UUID to a v6 UUID\n *\n * @param {string|Uint8Array} uuid - The v1 UUID to convert to v6\n * @returns {string|Uint8Array} The v6 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nfunction v1ToV6(uuid) {\n  const v1Bytes = typeof uuid === 'string' ? (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid) : uuid;\n  const v6Bytes = _v1ToV6(v1Bytes);\n  return typeof uuid === 'string' ? (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(v6Bytes) : v6Bytes;\n}\n\n// Do the field transformation needed for v1 -> v6\nfunction _v1ToV6(v1Bytes, randomize = false) {\n  return Uint8Array.of((v1Bytes[6] & 0x0f) << 4 | v1Bytes[7] >> 4 & 0x0f, (v1Bytes[7] & 0x0f) << 4 | (v1Bytes[4] & 0xf0) >> 4, (v1Bytes[4] & 0x0f) << 4 | (v1Bytes[5] & 0xf0) >> 4, (v1Bytes[5] & 0x0f) << 4 | (v1Bytes[0] & 0xf0) >> 4, (v1Bytes[0] & 0x0f) << 4 | (v1Bytes[1] & 0xf0) >> 4, (v1Bytes[1] & 0x0f) << 4 | (v1Bytes[2] & 0xf0) >> 4, 0x60 | v1Bytes[2] & 0x0f, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjFUb1Y2LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUNrQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNlO0FBQ2YsNkNBQTZDLHFEQUFLO0FBQ2xEO0FBQ0Esb0NBQW9DLDhEQUFlO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92MVRvVjYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2MSBVVUlEIHRvIGEgdjYgVVVJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfFVpbnQ4QXJyYXl9IHV1aWQgLSBUaGUgdjEgVVVJRCB0byBjb252ZXJ0IHRvIHY2XG4gKiBAcmV0dXJucyB7c3RyaW5nfFVpbnQ4QXJyYXl9IFRoZSB2NiBVVUlEIGFzIHRoZSBzYW1lIHR5cGUgYXMgdGhlIGB1dWlkYCBhcmdcbiAqIChzdHJpbmcgb3IgVWludDhBcnJheSlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdjFUb1Y2KHV1aWQpIHtcbiAgY29uc3QgdjFCeXRlcyA9IHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/IHBhcnNlKHV1aWQpIDogdXVpZDtcbiAgY29uc3QgdjZCeXRlcyA9IF92MVRvVjYodjFCeXRlcyk7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgPyB1bnNhZmVTdHJpbmdpZnkodjZCeXRlcykgOiB2NkJ5dGVzO1xufVxuXG4vLyBEbyB0aGUgZmllbGQgdHJhbnNmb3JtYXRpb24gbmVlZGVkIGZvciB2MSAtPiB2NlxuZnVuY3Rpb24gX3YxVG9WNih2MUJ5dGVzLCByYW5kb21pemUgPSBmYWxzZSkge1xuICByZXR1cm4gVWludDhBcnJheS5vZigodjFCeXRlc1s2XSAmIDB4MGYpIDw8IDQgfCB2MUJ5dGVzWzddID4+IDQgJiAweDBmLCAodjFCeXRlc1s3XSAmIDB4MGYpIDw8IDQgfCAodjFCeXRlc1s0XSAmIDB4ZjApID4+IDQsICh2MUJ5dGVzWzRdICYgMHgwZikgPDwgNCB8ICh2MUJ5dGVzWzVdICYgMHhmMCkgPj4gNCwgKHYxQnl0ZXNbNV0gJiAweDBmKSA8PCA0IHwgKHYxQnl0ZXNbMF0gJiAweGYwKSA+PiA0LCAodjFCeXRlc1swXSAmIDB4MGYpIDw8IDQgfCAodjFCeXRlc1sxXSAmIDB4ZjApID4+IDQsICh2MUJ5dGVzWzFdICYgMHgwZikgPDwgNCB8ICh2MUJ5dGVzWzJdICYgMHhmMCkgPj4gNCwgMHg2MCB8IHYxQnl0ZXNbMl0gJiAweDBmLCB2MUJ5dGVzWzNdLCB2MUJ5dGVzWzhdLCB2MUJ5dGVzWzldLCB2MUJ5dGVzWzEwXSwgdjFCeXRlc1sxMV0sIHYxQnl0ZXNbMTJdLCB2MUJ5dGVzWzEzXSwgdjFCeXRlc1sxNF0sIHYxQnl0ZXNbMTVdKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1ToV6.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v3.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v3.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0E7QUFDM0IsV0FBVyxtREFBRyxhQUFhLCtDQUFHO0FBQzlCLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IG1kNSBmcm9tICcuL21kNS5qcyc7XG5jb25zdCB2MyA9IHYzNSgndjMnLCAweDMwLCBtZDUpO1xuZXhwb3J0IGRlZmF1bHQgdjM7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v35.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v35.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* binding */ v35)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/parse.js\");\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n  return bytes;\n}\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n    if (typeof namespace === 'string') {\n      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n    }\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n\n    // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    if (buf) {\n      offset = offset || 0;\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n      return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(bytes);\n  }\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch (err) {}\n\n  // For CommonJS default export support\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ2xCO0FBQy9CO0FBQ0EsMkNBQTJDOztBQUUzQztBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1E7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQUs7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4REFBZTtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzNS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZS5qcyc7XG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuICByZXR1cm4gYnl0ZXM7XG59XG5leHBvcnQgY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gcGFyc2UobmFtZXNwYWNlKTtcbiAgICB9XG4gICAgaWYgKCgoX25hbWVzcGFjZSA9IG5hbWVzcGFjZSkgPT09IG51bGwgfHwgX25hbWVzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25hbWVzcGFjZS5sZW5ndGgpICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShieXRlcyk7XG4gIH1cblxuICAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcbiAgdHJ5IHtcbiAgICBnZW5lcmF0ZVVVSUQubmFtZSA9IG5hbWU7XG4gIH0gY2F0Y2ggKGVycikge31cblxuICAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuICBnZW5lcmF0ZVVVSUQuRE5TID0gRE5TO1xuICBnZW5lcmF0ZVVVSUQuVVJMID0gVVJMO1xuICByZXR1cm4gZ2VuZXJhdGVVVUlEO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v4.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v4.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n    return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pEO0FBQ0EsTUFBTSxrREFBTTtBQUNaLFdBQVcsa0RBQU07QUFDakI7QUFDQTtBQUNBLGlEQUFpRCwrQ0FBRzs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4REFBZTtBQUN4QjtBQUNBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBpZiAobmF0aXZlLnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuICAgIHJldHVybiBidWY7XG4gIH1cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHY0OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v5.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v5.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0U7QUFDN0IsV0FBVyxtREFBRyxhQUFhLGdEQUFJO0FBQy9CLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IHNoYTEgZnJvbSAnLi9zaGExLmpzJztcbmNvbnN0IHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v6)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v1ToV6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v1ToV6.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v1ToV6.js\");\n\n\n\n\n/**\n *\n * @param {object} options\n * @param {Uint8Array=} buf\n * @param {number=} offset\n * @returns\n */\nfunction v6(options = {}, buf, offset = 0) {\n  // v6 is v1 with different field layout, so we start with a v1 UUID, albeit\n  // with slightly different behavior around how the clock_seq and node fields\n  // are randomized, which is why we call v1 with _v6: true.\n  let bytes = (0,_v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    ...options,\n    _v6: true\n  }, new Uint8Array(16));\n\n  // Reorder the fields to v6 layout.\n  bytes = (0,_v1ToV6_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(bytes);\n\n  // Return as a byte array if requested\n  if (buf) {\n    for (let i = 0; i < 16; i++) {\n      buf[offset + i] = bytes[i];\n    }\n    return buf;\n  }\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(bytes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRDtBQUN4QjtBQUNROztBQUVqQztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsYUFBYTtBQUN4QixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNlLHdCQUF3QjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxjQUFjLGtEQUFFO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsVUFBVSxzREFBTTs7QUFFaEI7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4REFBZTtBQUN4QiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHYxIGZyb20gJy4vdjEuanMnO1xuaW1wb3J0IHYxVG9WNiBmcm9tICcuL3YxVG9WNi5qcyc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXk9fSBidWZcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2NihvcHRpb25zID0ge30sIGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAvLyB2NiBpcyB2MSB3aXRoIGRpZmZlcmVudCBmaWVsZCBsYXlvdXQsIHNvIHdlIHN0YXJ0IHdpdGggYSB2MSBVVUlELCBhbGJlaXRcbiAgLy8gd2l0aCBzbGlnaHRseSBkaWZmZXJlbnQgYmVoYXZpb3IgYXJvdW5kIGhvdyB0aGUgY2xvY2tfc2VxIGFuZCBub2RlIGZpZWxkc1xuICAvLyBhcmUgcmFuZG9taXplZCwgd2hpY2ggaXMgd2h5IHdlIGNhbGwgdjEgd2l0aCBfdjY6IHRydWUuXG4gIGxldCBieXRlcyA9IHYxKHtcbiAgICAuLi5vcHRpb25zLFxuICAgIF92NjogdHJ1ZVxuICB9LCBuZXcgVWludDhBcnJheSgxNikpO1xuXG4gIC8vIFJlb3JkZXIgdGhlIGZpZWxkcyB0byB2NiBsYXlvdXQuXG4gIGJ5dGVzID0gdjFUb1Y2KGJ5dGVzKTtcblxuICAvLyBSZXR1cm4gYXMgYSBieXRlIGFycmF5IGlmIHJlcXVlc3RlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KGJ5dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6ToV1.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6ToV1.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v6ToV1)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * Convert a v6 UUID to a v1 UUID\n *\n * @param {string|Uint8Array} uuid - The v6 UUID to convert to v6\n * @returns {string|Uint8Array} The v1 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nfunction v6ToV1(uuid) {\n  const v6Bytes = typeof uuid === 'string' ? (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid) : uuid;\n  const v1Bytes = _v6ToV1(v6Bytes);\n  return typeof uuid === 'string' ? (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(v1Bytes) : v1Bytes;\n}\n\n// Do the field transformation needed for v6 -> v1\nfunction _v6ToV1(v6Bytes) {\n  return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjZUb1YxLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUNrQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNlO0FBQ2YsNkNBQTZDLHFEQUFLO0FBQ2xEO0FBQ0Esb0NBQW9DLDhEQUFlO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NlRvVjEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2NiBVVUlEIHRvIGEgdjEgVVVJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfFVpbnQ4QXJyYXl9IHV1aWQgLSBUaGUgdjYgVVVJRCB0byBjb252ZXJ0IHRvIHY2XG4gKiBAcmV0dXJucyB7c3RyaW5nfFVpbnQ4QXJyYXl9IFRoZSB2MSBVVUlEIGFzIHRoZSBzYW1lIHR5cGUgYXMgdGhlIGB1dWlkYCBhcmdcbiAqIChzdHJpbmcgb3IgVWludDhBcnJheSlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdjZUb1YxKHV1aWQpIHtcbiAgY29uc3QgdjZCeXRlcyA9IHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/IHBhcnNlKHV1aWQpIDogdXVpZDtcbiAgY29uc3QgdjFCeXRlcyA9IF92NlRvVjEodjZCeXRlcyk7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgPyB1bnNhZmVTdHJpbmdpZnkodjFCeXRlcykgOiB2MUJ5dGVzO1xufVxuXG4vLyBEbyB0aGUgZmllbGQgdHJhbnNmb3JtYXRpb24gbmVlZGVkIGZvciB2NiAtPiB2MVxuZnVuY3Rpb24gX3Y2VG9WMSh2NkJ5dGVzKSB7XG4gIHJldHVybiBVaW50OEFycmF5Lm9mKCh2NkJ5dGVzWzNdICYgMHgwZikgPDwgNCB8IHY2Qnl0ZXNbNF0gPj4gNCAmIDB4MGYsICh2NkJ5dGVzWzRdICYgMHgwZikgPDwgNCB8ICh2NkJ5dGVzWzVdICYgMHhmMCkgPj4gNCwgKHY2Qnl0ZXNbNV0gJiAweDBmKSA8PCA0IHwgdjZCeXRlc1s2XSAmIDB4MGYsIHY2Qnl0ZXNbN10sICh2NkJ5dGVzWzFdICYgMHgwZikgPDwgNCB8ICh2NkJ5dGVzWzJdICYgMHhmMCkgPj4gNCwgKHY2Qnl0ZXNbMl0gJiAweDBmKSA8PCA0IHwgKHY2Qnl0ZXNbM10gJiAweGYwKSA+PiA0LCAweDEwIHwgKHY2Qnl0ZXNbMF0gJiAweGYwKSA+PiA0LCAodjZCeXRlc1swXSAmIDB4MGYpIDw8IDQgfCAodjZCeXRlc1sxXSAmIDB4ZjApID4+IDQsIHY2Qnl0ZXNbOF0sIHY2Qnl0ZXNbOV0sIHY2Qnl0ZXNbMTBdLCB2NkJ5dGVzWzExXSwgdjZCeXRlc1sxMl0sIHY2Qnl0ZXNbMTNdLCB2NkJ5dGVzWzE0XSwgdjZCeXRlc1sxNV0pO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v6ToV1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v7.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v7.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * UUID V7 - Unix Epoch time-based UUID\n *\n * The IETF has published RFC9562, introducing 3 new UUID versions (6,7,8). This\n * implementation of V7 is based on the accepted, though not yet approved,\n * revisions.\n *\n * RFC 9562:https://www.rfc-editor.org/rfc/rfc9562.html Universally Unique\n * IDentifiers (UUIDs)\n\n *\n * Sample V7 value:\n * https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value\n *\n * Monotonic Bit Layout: RFC rfc9562.6.2 Method 1, Dedicated Counter Bits ref:\n *     https://www.rfc-editor.org/rfc/rfc9562.html#section-6.2-5.1\n *\n *   0                   1                   2                   3 0 1 2 3 4 5 6\n *   7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                          unix_ts_ms                           |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |          unix_ts_ms           |  ver  |        seq_hi         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |var|               seq_low               |        rand         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                             rand                              |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *\n * seq is a 31 bit serialized counter; comprised of 12 bit seq_hi and 19 bit\n * seq_low, and randomly initialized upon timestamp change. 31 bit counter size\n * was selected as any bitwise operations in node are done as _signed_ 32 bit\n * ints. we exclude the sign bit.\n */\n\nlet _seqLow = null;\nlet _seqHigh = null;\nlet _msecs = 0;\nfunction v7(options, buf, offset) {\n  options = options || {};\n\n  // initialize buffer and pointer\n  let i = buf && offset || 0;\n  const b = buf || new Uint8Array(16);\n\n  // rnds is Uint8Array(16) filled with random bytes\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n  // milliseconds since unix epoch, 1970-01-01 00:00\n  const msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // seq is user provided 31 bit counter\n  let seq = options.seq !== undefined ? options.seq : null;\n\n  // initialize local seq high/low parts\n  let seqHigh = _seqHigh;\n  let seqLow = _seqLow;\n\n  // check if clock has advanced and user has not provided msecs\n  if (msecs > _msecs && options.msecs === undefined) {\n    _msecs = msecs;\n\n    // unless user provided seq, reset seq parts\n    if (seq !== null) {\n      seqHigh = null;\n      seqLow = null;\n    }\n  }\n\n  // if we have a user provided seq\n  if (seq !== null) {\n    // trim provided seq to 31 bits of value, avoiding overflow\n    if (seq > 0x7fffffff) {\n      seq = 0x7fffffff;\n    }\n\n    // split provided seq into high/low parts\n    seqHigh = seq >>> 19 & 0xfff;\n    seqLow = seq & 0x7ffff;\n  }\n\n  // randomly initialize seq\n  if (seqHigh === null || seqLow === null) {\n    seqHigh = rnds[6] & 0x7f;\n    seqHigh = seqHigh << 8 | rnds[7];\n    seqLow = rnds[8] & 0x3f; // pad for var\n    seqLow = seqLow << 8 | rnds[9];\n    seqLow = seqLow << 5 | rnds[10] >>> 3;\n  }\n\n  // increment seq if within msecs window\n  if (msecs + 10000 > _msecs && seq === null) {\n    if (++seqLow > 0x7ffff) {\n      seqLow = 0;\n      if (++seqHigh > 0xfff) {\n        seqHigh = 0;\n\n        // increment internal _msecs. this allows us to continue incrementing\n        // while staying monotonic. Note, once we hit 10k milliseconds beyond system\n        // clock, we will reset breaking monotonicity (after (2^31)*10000 generations)\n        _msecs++;\n      }\n    }\n  } else {\n    // resetting; we have advanced more than\n    // 10k milliseconds beyond system clock\n    _msecs = msecs;\n  }\n  _seqHigh = seqHigh;\n  _seqLow = seqLow;\n\n  // [bytes 0-5] 48 bits of local timestamp\n  b[i++] = _msecs / 0x10000000000 & 0xff;\n  b[i++] = _msecs / 0x100000000 & 0xff;\n  b[i++] = _msecs / 0x1000000 & 0xff;\n  b[i++] = _msecs / 0x10000 & 0xff;\n  b[i++] = _msecs / 0x100 & 0xff;\n  b[i++] = _msecs & 0xff;\n\n  // [byte 6] - set 4 bits of version (7) with first 4 bits seq_hi\n  b[i++] = seqHigh >>> 4 & 0x0f | 0x70;\n\n  // [byte 7] remaining 8 bits of seq_hi\n  b[i++] = seqHigh & 0xff;\n\n  // [byte 8] - variant (2 bits), first 6 bits seq_low\n  b[i++] = seqLow >>> 13 & 0x3f | 0x80;\n\n  // [byte 9] 8 bits seq_low\n  b[i++] = seqLow >>> 5 & 0xff;\n\n  // [byte 10] remaining 5 bits seq_low, 3 bits random\n  b[i++] = seqLow << 3 & 0xff | rnds[10] & 0x07;\n\n  // [bytes 11-15] always random\n  b[i++] = rnds[11];\n  b[i++] = rnds[12];\n  b[i++] = rnds[13];\n  b[i++] = rnds[14];\n  b[i++] = rnds[15];\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v7);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ3NCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsK0NBQUc7O0FBRXBEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4REFBZTtBQUMvQjtBQUNBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG4vKipcbiAqIFVVSUQgVjcgLSBVbml4IEVwb2NoIHRpbWUtYmFzZWQgVVVJRFxuICpcbiAqIFRoZSBJRVRGIGhhcyBwdWJsaXNoZWQgUkZDOTU2MiwgaW50cm9kdWNpbmcgMyBuZXcgVVVJRCB2ZXJzaW9ucyAoNiw3LDgpLiBUaGlzXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBWNyBpcyBiYXNlZCBvbiB0aGUgYWNjZXB0ZWQsIHRob3VnaCBub3QgeWV0IGFwcHJvdmVkLFxuICogcmV2aXNpb25zLlxuICpcbiAqIFJGQyA5NTYyOmh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5NTYyLmh0bWwgVW5pdmVyc2FsbHkgVW5pcXVlXG4gKiBJRGVudGlmaWVycyAoVVVJRHMpXG5cbiAqXG4gKiBTYW1wbGUgVjcgdmFsdWU6XG4gKiBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTU2Mi5odG1sI25hbWUtZXhhbXBsZS1vZi1hLXV1aWR2Ny12YWx1ZVxuICpcbiAqIE1vbm90b25pYyBCaXQgTGF5b3V0OiBSRkMgcmZjOTU2Mi42LjIgTWV0aG9kIDEsIERlZGljYXRlZCBDb3VudGVyIEJpdHMgcmVmOlxuICogICAgIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5NTYyLmh0bWwjc2VjdGlvbi02LjItNS4xXG4gKlxuICogICAwICAgICAgICAgICAgICAgICAgIDEgICAgICAgICAgICAgICAgICAgMiAgICAgICAgICAgICAgICAgICAzIDAgMSAyIDMgNCA1IDZcbiAqICAgNyA4IDkgMCAxIDIgMyA0IDUgNiA3IDggOSAwIDEgMiAzIDQgNSA2IDcgOCA5IDAgMVxuICogICstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rXG4gKiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgdW5peF90c19tcyAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstK1xuICogIHwgICAgICAgICAgdW5peF90c19tcyAgICAgICAgICAgfCAgdmVyICB8ICAgICAgICBzZXFfaGkgICAgICAgICB8XG4gKiAgKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLStcbiAqICB8dmFyfCAgICAgICAgICAgICAgIHNlcV9sb3cgICAgICAgICAgICAgICB8ICAgICAgICByYW5kICAgICAgICAgfFxuICogICstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rXG4gKiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstK1xuICpcbiAqIHNlcSBpcyBhIDMxIGJpdCBzZXJpYWxpemVkIGNvdW50ZXI7IGNvbXByaXNlZCBvZiAxMiBiaXQgc2VxX2hpIGFuZCAxOSBiaXRcbiAqIHNlcV9sb3csIGFuZCByYW5kb21seSBpbml0aWFsaXplZCB1cG9uIHRpbWVzdGFtcCBjaGFuZ2UuIDMxIGJpdCBjb3VudGVyIHNpemVcbiAqIHdhcyBzZWxlY3RlZCBhcyBhbnkgYml0d2lzZSBvcGVyYXRpb25zIGluIG5vZGUgYXJlIGRvbmUgYXMgX3NpZ25lZF8gMzIgYml0XG4gKiBpbnRzLiB3ZSBleGNsdWRlIHRoZSBzaWduIGJpdC5cbiAqL1xuXG5sZXQgX3NlcUxvdyA9IG51bGw7XG5sZXQgX3NlcUhpZ2ggPSBudWxsO1xubGV0IF9tc2VjcyA9IDA7XG5mdW5jdGlvbiB2NyhvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBpbml0aWFsaXplIGJ1ZmZlciBhbmQgcG9pbnRlclxuICBsZXQgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgY29uc3QgYiA9IGJ1ZiB8fCBuZXcgVWludDhBcnJheSgxNik7XG5cbiAgLy8gcm5kcyBpcyBVaW50OEFycmF5KDE2KSBmaWxsZWQgd2l0aCByYW5kb20gYnl0ZXNcbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gbWlsbGlzZWNvbmRzIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDBcbiAgY29uc3QgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogRGF0ZS5ub3coKTtcblxuICAvLyBzZXEgaXMgdXNlciBwcm92aWRlZCAzMSBiaXQgY291bnRlclxuICBsZXQgc2VxID0gb3B0aW9ucy5zZXEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc2VxIDogbnVsbDtcblxuICAvLyBpbml0aWFsaXplIGxvY2FsIHNlcSBoaWdoL2xvdyBwYXJ0c1xuICBsZXQgc2VxSGlnaCA9IF9zZXFIaWdoO1xuICBsZXQgc2VxTG93ID0gX3NlcUxvdztcblxuICAvLyBjaGVjayBpZiBjbG9jayBoYXMgYWR2YW5jZWQgYW5kIHVzZXIgaGFzIG5vdCBwcm92aWRlZCBtc2Vjc1xuICBpZiAobXNlY3MgPiBfbXNlY3MgJiYgb3B0aW9ucy5tc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgX21zZWNzID0gbXNlY3M7XG5cbiAgICAvLyB1bmxlc3MgdXNlciBwcm92aWRlZCBzZXEsIHJlc2V0IHNlcSBwYXJ0c1xuICAgIGlmIChzZXEgIT09IG51bGwpIHtcbiAgICAgIHNlcUhpZ2ggPSBudWxsO1xuICAgICAgc2VxTG93ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgdXNlciBwcm92aWRlZCBzZXFcbiAgaWYgKHNlcSAhPT0gbnVsbCkge1xuICAgIC8vIHRyaW0gcHJvdmlkZWQgc2VxIHRvIDMxIGJpdHMgb2YgdmFsdWUsIGF2b2lkaW5nIG92ZXJmbG93XG4gICAgaWYgKHNlcSA+IDB4N2ZmZmZmZmYpIHtcbiAgICAgIHNlcSA9IDB4N2ZmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gc3BsaXQgcHJvdmlkZWQgc2VxIGludG8gaGlnaC9sb3cgcGFydHNcbiAgICBzZXFIaWdoID0gc2VxID4+PiAxOSAmIDB4ZmZmO1xuICAgIHNlcUxvdyA9IHNlcSAmIDB4N2ZmZmY7XG4gIH1cblxuICAvLyByYW5kb21seSBpbml0aWFsaXplIHNlcVxuICBpZiAoc2VxSGlnaCA9PT0gbnVsbCB8fCBzZXFMb3cgPT09IG51bGwpIHtcbiAgICBzZXFIaWdoID0gcm5kc1s2XSAmIDB4N2Y7XG4gICAgc2VxSGlnaCA9IHNlcUhpZ2ggPDwgOCB8IHJuZHNbN107XG4gICAgc2VxTG93ID0gcm5kc1s4XSAmIDB4M2Y7IC8vIHBhZCBmb3IgdmFyXG4gICAgc2VxTG93ID0gc2VxTG93IDw8IDggfCBybmRzWzldO1xuICAgIHNlcUxvdyA9IHNlcUxvdyA8PCA1IHwgcm5kc1sxMF0gPj4+IDM7XG4gIH1cblxuICAvLyBpbmNyZW1lbnQgc2VxIGlmIHdpdGhpbiBtc2VjcyB3aW5kb3dcbiAgaWYgKG1zZWNzICsgMTAwMDAgPiBfbXNlY3MgJiYgc2VxID09PSBudWxsKSB7XG4gICAgaWYgKCsrc2VxTG93ID4gMHg3ZmZmZikge1xuICAgICAgc2VxTG93ID0gMDtcbiAgICAgIGlmICgrK3NlcUhpZ2ggPiAweGZmZikge1xuICAgICAgICBzZXFIaWdoID0gMDtcblxuICAgICAgICAvLyBpbmNyZW1lbnQgaW50ZXJuYWwgX21zZWNzLiB0aGlzIGFsbG93cyB1cyB0byBjb250aW51ZSBpbmNyZW1lbnRpbmdcbiAgICAgICAgLy8gd2hpbGUgc3RheWluZyBtb25vdG9uaWMuIE5vdGUsIG9uY2Ugd2UgaGl0IDEwayBtaWxsaXNlY29uZHMgYmV5b25kIHN5c3RlbVxuICAgICAgICAvLyBjbG9jaywgd2Ugd2lsbCByZXNldCBicmVha2luZyBtb25vdG9uaWNpdHkgKGFmdGVyICgyXjMxKSoxMDAwMCBnZW5lcmF0aW9ucylcbiAgICAgICAgX21zZWNzKys7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIHJlc2V0dGluZzsgd2UgaGF2ZSBhZHZhbmNlZCBtb3JlIHRoYW5cbiAgICAvLyAxMGsgbWlsbGlzZWNvbmRzIGJleW9uZCBzeXN0ZW0gY2xvY2tcbiAgICBfbXNlY3MgPSBtc2VjcztcbiAgfVxuICBfc2VxSGlnaCA9IHNlcUhpZ2g7XG4gIF9zZXFMb3cgPSBzZXFMb3c7XG5cbiAgLy8gW2J5dGVzIDAtNV0gNDggYml0cyBvZiBsb2NhbCB0aW1lc3RhbXBcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAwMDAwMDAwMCAmIDB4ZmY7XG4gIGJbaSsrXSA9IF9tc2VjcyAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAwMDAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAwMCAmIDB4ZmY7XG4gIGJbaSsrXSA9IF9tc2VjcyAvIDB4MTAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzICYgMHhmZjtcblxuICAvLyBbYnl0ZSA2XSAtIHNldCA0IGJpdHMgb2YgdmVyc2lvbiAoNykgd2l0aCBmaXJzdCA0IGJpdHMgc2VxX2hpXG4gIGJbaSsrXSA9IHNlcUhpZ2ggPj4+IDQgJiAweDBmIHwgMHg3MDtcblxuICAvLyBbYnl0ZSA3XSByZW1haW5pbmcgOCBiaXRzIG9mIHNlcV9oaVxuICBiW2krK10gPSBzZXFIaWdoICYgMHhmZjtcblxuICAvLyBbYnl0ZSA4XSAtIHZhcmlhbnQgKDIgYml0cyksIGZpcnN0IDYgYml0cyBzZXFfbG93XG4gIGJbaSsrXSA9IHNlcUxvdyA+Pj4gMTMgJiAweDNmIHwgMHg4MDtcblxuICAvLyBbYnl0ZSA5XSA4IGJpdHMgc2VxX2xvd1xuICBiW2krK10gPSBzZXFMb3cgPj4+IDUgJiAweGZmO1xuXG4gIC8vIFtieXRlIDEwXSByZW1haW5pbmcgNSBiaXRzIHNlcV9sb3csIDMgYml0cyByYW5kb21cbiAgYltpKytdID0gc2VxTG93IDw8IDMgJiAweGZmIHwgcm5kc1sxMF0gJiAweDA3O1xuXG4gIC8vIFtieXRlcyAxMS0xNV0gYWx3YXlzIHJhbmRvbVxuICBiW2krK10gPSBybmRzWzExXTtcbiAgYltpKytdID0gcm5kc1sxMl07XG4gIGJbaSsrXSA9IHJuZHNbMTNdO1xuICBiW2krK10gPSBybmRzWzE0XTtcbiAgYltpKytdID0gcm5kc1sxNV07XG4gIHJldHVybiBidWYgfHwgdW5zYWZlU3RyaW5naWZ5KGIpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjc7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/v7.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/validate.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/validate.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/regex.js\");\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFDL0I7QUFDQSxxQ0FBcUMsaURBQUs7QUFDMUM7QUFDQSxpRUFBZSxRQUFRIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92YWxpZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/version.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/version.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction version(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  return parseInt(uuid.slice(14, 15), 16);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUNyQztBQUNBLE9BQU8sd0RBQVE7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLE9BQU8iLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG4gIHJldHVybiBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxNSksIDE2KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZlcnNpb247Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/uuid/dist/esm-node/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/output_parsers.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/output_parsers.cjs ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/output_parsers/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxpSkFBMkQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9vdXRwdXRfcGFyc2Vycy5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/output_parsers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/output_parsers/openai_tools.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/output_parsers/openai_tools.cjs ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/output_parsers/openai_tools/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzL29wZW5haV90b29scy5janMiLCJtYXBwaW5ncyI6IkFBQUEsNEtBQXlFIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzL2luZGV4LmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/output_parsers/openai_tools.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/outputs.cjs":
/*!**************************************************!*\
  !*** ./node_modules/@langchain/core/outputs.cjs ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/outputs.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dHMuY2pzIiwibWFwcGluZ3MiOiJBQUFBLHVIQUE4QyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dHMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L291dHB1dHMuY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/outputs.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/retrievers.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/core/retrievers.cjs ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/retrievers/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/retrievers/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3JldHJpZXZlcnMuY2pzIiwibWFwcGluZ3MiOiJBQUFBLHlJQUF1RCIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3JldHJpZXZlcnMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L3JldHJpZXZlcnMvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/retrievers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/runnables.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/runnables.cjs ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/runnables/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3J1bm5hYmxlcy5janMiLCJtYXBwaW5ncyI6IkFBQUEsdUlBQXNEIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvcnVubmFibGVzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9ydW5uYWJsZXMvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/runnables.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/runnables/remote.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/runnables/remote.cjs ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/runnables/remote.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/remote.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3J1bm5hYmxlcy9yZW1vdGUuY2pzIiwibWFwcGluZ3MiOiJBQUFBLDBJQUF3RCIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3J1bm5hYmxlcy9yZW1vdGUuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vZGlzdC9ydW5uYWJsZXMvcmVtb3RlLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/runnables/remote.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/stores.cjs":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/core/stores.cjs ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/stores.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/stores.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3N0b3Jlcy5janMiLCJtYXBwaW5ncyI6IkFBQUEscUhBQTZDIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvc3RvcmVzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9zdG9yZXMuY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/stores.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/tools.cjs":
/*!************************************************!*\
  !*** ./node_modules/@langchain/core/tools.cjs ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/tools/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/tools/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3Rvb2xzLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSwrSEFBa0QiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS90b29scy5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvdG9vbHMvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/tools.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/async_caller.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/async_caller.cjs ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/utils/async_caller.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2FzeW5jX2NhbGxlci5janMiLCJtYXBwaW5ncyI6IkFBQUEsOElBQTBEIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvYXN5bmNfY2FsbGVyLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3QvdXRpbHMvYXN5bmNfY2FsbGVyLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/async_caller.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/chunk_array.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/chunk_array.cjs ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/utils/chunk_array.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2NodW5rX2FycmF5LmNqcyIsIm1hcHBpbmdzIjoiQUFBQSw0SUFBeUQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9jaHVua19hcnJheS5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L3V0aWxzL2NodW5rX2FycmF5LmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/chunk_array.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/env.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/utils/env.cjs ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/utils/env.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Vudi5janMiLCJtYXBwaW5ncyI6IkFBQUEsNEhBQWlEIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvZW52LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3QvdXRpbHMvZW52LmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/env.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/function_calling.cjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/function_calling.cjs ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/utils/function_calling.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmcuY2pzIiwibWFwcGluZ3MiOiJBQUFBLHNKQUE4RCIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmcuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vZGlzdC91dGlscy9mdW5jdGlvbl9jYWxsaW5nLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/function_calling.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/json_schema.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/json_schema.cjs ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/utils/json_schema.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_schema.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2pzb25fc2NoZW1hLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSw0SUFBeUQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9qc29uX3NjaGVtYS5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L3V0aWxzL2pzb25fc2NoZW1hLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/json_schema.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/stream.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/@langchain/core/utils/stream.cjs ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL3N0cmVhbS5janMiLCJtYXBwaW5ncyI6IkFBQUEsa0lBQW9EIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvc3RyZWFtLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3QvdXRpbHMvc3RyZWFtLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/stream.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/types.cjs":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/core/utils/types.cjs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/utils/types/index.cjs */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL3R5cGVzLmNqcyIsIm1hcHBpbmdzIjoiQUFBQSw0SUFBeUQiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy90eXBlcy5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9kaXN0L3V0aWxzL3R5cGVzL2luZGV4LmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/types.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/auth.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/auth.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ensureAuthOptionScopes = exports.aiPlatformScope = exports.ApiKeyGoogleAuth = exports.GoogleAbstractedFetchClient = void 0;\nconst stream_js_1 = __webpack_require__(/*! ./utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/stream.cjs\");\nclass GoogleAbstractedFetchClient {\n    async _buildData(res, opts) {\n        switch (opts.responseType) {\n            case \"json\":\n                return res.json();\n            case \"stream\":\n                return new stream_js_1.ReadableJsonStream(res.body);\n            default:\n                return res.blob();\n        }\n    }\n    async _request(url, opts, additionalHeaders) {\n        if (url == null)\n            throw new Error(\"Missing URL\");\n        const fetchOptions = {\n            method: opts.method,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...(opts.headers ?? {}),\n                ...(additionalHeaders ?? {}),\n            },\n        };\n        if (opts.data !== undefined) {\n            if (typeof opts.data === \"string\") {\n                fetchOptions.body = opts.data;\n            }\n            else {\n                fetchOptions.body = JSON.stringify(opts.data);\n            }\n        }\n        const res = await fetch(url, fetchOptions);\n        if (!res.ok) {\n            const resText = await res.text();\n            const error = new Error(`Google request failed with status code ${res.status}: ${resText}`);\n            /* eslint-disable @typescript-eslint/no-explicit-any */\n            error.response = res;\n            error.details = {\n                url,\n                opts,\n                fetchOptions,\n                result: res,\n            };\n            /* eslint-enable @typescript-eslint/no-explicit-any */\n            throw error;\n        }\n        const data = await this._buildData(res, opts);\n        return {\n            data,\n            config: {},\n            status: res.status,\n            statusText: res.statusText,\n            headers: res.headers,\n            request: { responseURL: res.url },\n        };\n    }\n}\nexports.GoogleAbstractedFetchClient = GoogleAbstractedFetchClient;\nclass ApiKeyGoogleAuth extends GoogleAbstractedFetchClient {\n    constructor(apiKey) {\n        super();\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.apiKey = apiKey;\n    }\n    get clientType() {\n        return \"apiKey\";\n    }\n    getProjectId() {\n        throw new Error(\"APIs that require a project ID cannot use an API key\");\n        // Perhaps we could implement this if needed:\n        // https://cloud.google.com/docs/authentication/api-keys#get-info\n    }\n    request(opts) {\n        const authHeader = {\n            \"X-Goog-Api-Key\": this.apiKey,\n        };\n        return this._request(opts.url, opts, authHeader);\n    }\n}\nexports.ApiKeyGoogleAuth = ApiKeyGoogleAuth;\nfunction aiPlatformScope(platform) {\n    switch (platform) {\n        case \"gai\":\n            return [\"https://www.googleapis.com/auth/generative-language\"];\n        default:\n            return [\"https://www.googleapis.com/auth/cloud-platform\"];\n    }\n}\nexports.aiPlatformScope = aiPlatformScope;\nfunction ensureAuthOptionScopes(authOption, scopeProperty, scopesOrPlatform) {\n    // If the property is already set, return it\n    if (authOption && Object.hasOwn(authOption, scopeProperty)) {\n        return authOption;\n    }\n    // Otherwise add it\n    const scopes = Array.isArray(scopesOrPlatform)\n        ? scopesOrPlatform\n        : aiPlatformScope(scopesOrPlatform ?? \"gcp\");\n    return {\n        [scopeProperty]: scopes,\n        ...(authOption ?? {}),\n    };\n}\nexports.ensureAuthOptionScopes = ensureAuthOptionScopes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvYXV0aC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsdUJBQXVCLEdBQUcsd0JBQXdCLEdBQUcsbUNBQW1DO0FBQ3pILG9CQUFvQixtQkFBTyxDQUFDLCtGQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsMkNBQTJDO0FBQzNDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsV0FBVyxJQUFJLFFBQVE7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSw4QkFBOEIiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9kaXN0L2F1dGguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbnN1cmVBdXRoT3B0aW9uU2NvcGVzID0gZXhwb3J0cy5haVBsYXRmb3JtU2NvcGUgPSBleHBvcnRzLkFwaUtleUdvb2dsZUF1dGggPSBleHBvcnRzLkdvb2dsZUFic3RyYWN0ZWRGZXRjaENsaWVudCA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbV9qc18xID0gcmVxdWlyZShcIi4vdXRpbHMvc3RyZWFtLmNqc1wiKTtcbmNsYXNzIEdvb2dsZUFic3RyYWN0ZWRGZXRjaENsaWVudCB7XG4gICAgYXN5bmMgX2J1aWxkRGF0YShyZXMsIG9wdHMpIHtcbiAgICAgICAgc3dpdGNoIChvcHRzLnJlc3BvbnNlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgICAgICAgIGNhc2UgXCJzdHJlYW1cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHN0cmVhbV9qc18xLlJlYWRhYmxlSnNvblN0cmVhbShyZXMuYm9keSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiByZXMuYmxvYigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIF9yZXF1ZXN0KHVybCwgb3B0cywgYWRkaXRpb25hbEhlYWRlcnMpIHtcbiAgICAgICAgaWYgKHVybCA9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBVUkxcIik7XG4gICAgICAgIGNvbnN0IGZldGNoT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogb3B0cy5tZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgLi4uKG9wdHMuaGVhZGVycyA/PyB7fSksXG4gICAgICAgICAgICAgICAgLi4uKGFkZGl0aW9uYWxIZWFkZXJzID8/IHt9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRzLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBmZXRjaE9wdGlvbnMuYm9keSA9IG9wdHMuZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZldGNoT3B0aW9ucy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkob3B0cy5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIGZldGNoT3B0aW9ucyk7XG4gICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICBjb25zdCByZXNUZXh0ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBHb29nbGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAke3Jlcy5zdGF0dXN9OiAke3Jlc1RleHR9YCk7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4gICAgICAgICAgICBlcnJvci5yZXNwb25zZSA9IHJlcztcbiAgICAgICAgICAgIGVycm9yLmRldGFpbHMgPSB7XG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIG9wdHMsXG4gICAgICAgICAgICAgICAgZmV0Y2hPcHRpb25zLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogcmVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuX2J1aWxkRGF0YShyZXMsIG9wdHMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGNvbmZpZzoge30sXG4gICAgICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXMsXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiByZXMuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHJlcy5oZWFkZXJzLFxuICAgICAgICAgICAgcmVxdWVzdDogeyByZXNwb25zZVVSTDogcmVzLnVybCB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuR29vZ2xlQWJzdHJhY3RlZEZldGNoQ2xpZW50ID0gR29vZ2xlQWJzdHJhY3RlZEZldGNoQ2xpZW50O1xuY2xhc3MgQXBpS2V5R29vZ2xlQXV0aCBleHRlbmRzIEdvb2dsZUFic3RyYWN0ZWRGZXRjaENsaWVudCB7XG4gICAgY29uc3RydWN0b3IoYXBpS2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFwaUtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgICB9XG4gICAgZ2V0IGNsaWVudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImFwaUtleVwiO1xuICAgIH1cbiAgICBnZXRQcm9qZWN0SWQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFQSXMgdGhhdCByZXF1aXJlIGEgcHJvamVjdCBJRCBjYW5ub3QgdXNlIGFuIEFQSSBrZXlcIik7XG4gICAgICAgIC8vIFBlcmhhcHMgd2UgY291bGQgaW1wbGVtZW50IHRoaXMgaWYgbmVlZGVkOlxuICAgICAgICAvLyBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vZG9jcy9hdXRoZW50aWNhdGlvbi9hcGkta2V5cyNnZXQtaW5mb1xuICAgIH1cbiAgICByZXF1ZXN0KG9wdHMpIHtcbiAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IHtcbiAgICAgICAgICAgIFwiWC1Hb29nLUFwaS1LZXlcIjogdGhpcy5hcGlLZXksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KG9wdHMudXJsLCBvcHRzLCBhdXRoSGVhZGVyKTtcbiAgICB9XG59XG5leHBvcnRzLkFwaUtleUdvb2dsZUF1dGggPSBBcGlLZXlHb29nbGVBdXRoO1xuZnVuY3Rpb24gYWlQbGF0Zm9ybVNjb3BlKHBsYXRmb3JtKSB7XG4gICAgc3dpdGNoIChwbGF0Zm9ybSkge1xuICAgICAgICBjYXNlIFwiZ2FpXCI6XG4gICAgICAgICAgICByZXR1cm4gW1wiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9nZW5lcmF0aXZlLWxhbmd1YWdlXCJdO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFtcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1cIl07XG4gICAgfVxufVxuZXhwb3J0cy5haVBsYXRmb3JtU2NvcGUgPSBhaVBsYXRmb3JtU2NvcGU7XG5mdW5jdGlvbiBlbnN1cmVBdXRoT3B0aW9uU2NvcGVzKGF1dGhPcHRpb24sIHNjb3BlUHJvcGVydHksIHNjb3Blc09yUGxhdGZvcm0pIHtcbiAgICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgYWxyZWFkeSBzZXQsIHJldHVybiBpdFxuICAgIGlmIChhdXRoT3B0aW9uICYmIE9iamVjdC5oYXNPd24oYXV0aE9wdGlvbiwgc2NvcGVQcm9wZXJ0eSkpIHtcbiAgICAgICAgcmV0dXJuIGF1dGhPcHRpb247XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSBhZGQgaXRcbiAgICBjb25zdCBzY29wZXMgPSBBcnJheS5pc0FycmF5KHNjb3Blc09yUGxhdGZvcm0pXG4gICAgICAgID8gc2NvcGVzT3JQbGF0Zm9ybVxuICAgICAgICA6IGFpUGxhdGZvcm1TY29wZShzY29wZXNPclBsYXRmb3JtID8/IFwiZ2NwXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIFtzY29wZVByb3BlcnR5XTogc2NvcGVzLFxuICAgICAgICAuLi4oYXV0aE9wdGlvbiA/PyB7fSksXG4gICAgfTtcbn1cbmV4cG9ydHMuZW5zdXJlQXV0aE9wdGlvblNjb3BlcyA9IGVuc3VyZUF1dGhPcHRpb25TY29wZXM7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/auth.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/chat_models.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/chat_models.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatGoogleBase = exports.ChatConnection = void 0;\nconst env_1 = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.cjs\");\nconst chat_models_1 = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/@langchain/core/language_models/chat_models.cjs\");\nconst outputs_1 = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.cjs\");\nconst messages_1 = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.cjs\");\nconst runnables_1 = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.cjs\");\nconst openai_tools_1 = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/@langchain/core/output_parsers/openai_tools.cjs\");\nconst stream_1 = __webpack_require__(/*! @langchain/core/utils/stream */ \"(rsc)/./node_modules/@langchain/core/utils/stream.cjs\");\nconst common_js_1 = __webpack_require__(/*! ./utils/common.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/common.cjs\");\nconst connection_js_1 = __webpack_require__(/*! ./connection.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/connection.cjs\");\nconst gemini_js_1 = __webpack_require__(/*! ./utils/gemini.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/gemini.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/auth.cjs\");\nconst failed_handler_js_1 = __webpack_require__(/*! ./utils/failed_handler.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/failed_handler.cjs\");\nconst zod_to_gemini_parameters_js_1 = __webpack_require__(/*! ./utils/zod_to_gemini_parameters.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs\");\nclass ChatConnection extends connection_js_1.AbstractGoogleLLMConnection {\n    constructor(fields, caller, client, streaming) {\n        super(fields, caller, client, streaming);\n        Object.defineProperty(this, \"convertSystemMessageToHumanContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.convertSystemMessageToHumanContent =\n            fields?.convertSystemMessageToHumanContent;\n    }\n    get useSystemInstruction() {\n        return typeof this.convertSystemMessageToHumanContent === \"boolean\"\n            ? !this.convertSystemMessageToHumanContent\n            : this.computeUseSystemInstruction;\n    }\n    get computeUseSystemInstruction() {\n        // This works on models from April 2024 and later\n        //   Vertex AI: gemini-1.5-pro and gemini-1.0-002 and later\n        //   AI Studio: gemini-1.5-pro-latest\n        if (this.modelFamily === \"palm\") {\n            return false;\n        }\n        else if (this.modelName === \"gemini-1.0-pro-001\") {\n            return false;\n        }\n        else if (this.modelName.startsWith(\"gemini-pro-vision\")) {\n            return false;\n        }\n        else if (this.modelName.startsWith(\"gemini-1.0-pro-vision\")) {\n            return false;\n        }\n        else if (this.modelName === \"gemini-pro\" && this.platform === \"gai\") {\n            // on AI Studio gemini-pro is still pointing at gemini-1.0-pro-001\n            return false;\n        }\n        return true;\n    }\n    computeGoogleSearchToolAdjustmentFromModel() {\n        if (this.modelName.startsWith(\"gemini-1.0\")) {\n            return \"googleSearchRetrieval\";\n        }\n        else if (this.modelName.startsWith(\"gemini-1.5\")) {\n            return \"googleSearchRetrieval\";\n        }\n        else {\n            return \"googleSearch\";\n        }\n    }\n    computeGoogleSearchToolAdjustment(apiConfig) {\n        const adj = apiConfig.googleSearchToolAdjustment;\n        if (adj === undefined || adj === true) {\n            return this.computeGoogleSearchToolAdjustmentFromModel();\n        }\n        else {\n            return adj;\n        }\n    }\n    buildGeminiAPI() {\n        const apiConfig = this.apiConfig ?? {};\n        const googleSearchToolAdjustment = this.computeGoogleSearchToolAdjustment(apiConfig);\n        const geminiConfig = {\n            useSystemInstruction: this.useSystemInstruction,\n            googleSearchToolAdjustment,\n            ...apiConfig,\n        };\n        return (0, gemini_js_1.getGeminiAPI)(geminiConfig);\n    }\n    get api() {\n        switch (this.apiName) {\n            case \"google\":\n                return this.buildGeminiAPI();\n            default:\n                return super.api;\n        }\n    }\n}\nexports.ChatConnection = ChatConnection;\n/**\n * Integration with a Google chat model.\n */\nclass ChatGoogleBase extends chat_models_1.BaseChatModel {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"ChatGoogle\";\n    }\n    get lc_secrets() {\n        return {\n            authOptions: \"GOOGLE_AUTH_OPTIONS\",\n        };\n    }\n    constructor(fields) {\n        super((0, failed_handler_js_1.ensureParams)(fields));\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        // Set based on modelName\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gemini-pro\"\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"maxOutputTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1024\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.8\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 40\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"logprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topLogprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"safetySettings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // May intentionally be undefined, meaning to compute this.\n        Object.defineProperty(this, \"convertSystemMessageToHumanContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"safetyHandler\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streamUsage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"connection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streamedConnection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        (0, common_js_1.copyAndValidateModelParamsInto)(fields, this);\n        this.safetyHandler =\n            fields?.safetyHandler ?? new gemini_js_1.DefaultGeminiSafetyHandler();\n        this.streamUsage = fields?.streamUsage ?? this.streamUsage;\n        const client = this.buildClient(fields);\n        this.buildConnection(fields ?? {}, client);\n    }\n    getLsParams(options) {\n        const params = this.invocationParams(options);\n        return {\n            ls_provider: \"google_vertexai\",\n            ls_model_name: this.model,\n            ls_model_type: \"chat\",\n            ls_temperature: params.temperature ?? undefined,\n            ls_max_tokens: params.maxOutputTokens ?? undefined,\n            ls_stop: options.stop,\n        };\n    }\n    buildApiKeyClient(apiKey) {\n        return new auth_js_1.ApiKeyGoogleAuth(apiKey);\n    }\n    buildApiKey(fields) {\n        if (fields?.platformType !== \"gcp\") {\n            return fields?.apiKey ?? (0, env_1.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n        }\n        else {\n            // GCP doesn't support API Keys\n            return undefined;\n        }\n    }\n    buildClient(fields) {\n        const apiKey = this.buildApiKey(fields);\n        if (apiKey) {\n            return this.buildApiKeyClient(apiKey);\n        }\n        else {\n            return this.buildAbstractedClient(fields);\n        }\n    }\n    buildConnection(fields, client) {\n        this.connection = new ChatConnection({ ...fields, ...this }, this.caller, client, false);\n        this.streamedConnection = new ChatConnection({ ...fields, ...this }, this.caller, client, true);\n    }\n    get platform() {\n        return this.connection.platform;\n    }\n    bindTools(tools, kwargs) {\n        return this.bind({ tools: (0, common_js_1.convertToGeminiTools)(tools), ...kwargs });\n    }\n    // Replace\n    _llmType() {\n        return \"chat_integration\";\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        return (0, common_js_1.copyAIModelParams)(this, options);\n    }\n    async _generate(messages, options, runManager) {\n        const parameters = this.invocationParams(options);\n        if (this.streaming) {\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            let finalChunk = null;\n            for await (const chunk of stream) {\n                finalChunk = !finalChunk ? chunk : (0, stream_1.concat)(finalChunk, chunk);\n            }\n            if (!finalChunk) {\n                throw new Error(\"No chunks were returned from the stream.\");\n            }\n            return {\n                generations: [finalChunk],\n            };\n        }\n        const response = await this.connection.request(messages, parameters, options, runManager);\n        const ret = this.connection.api.responseToChatResult(response);\n        const chunk = ret?.generations?.[0];\n        if (chunk) {\n            await runManager?.handleLLMNewToken(chunk.text || \"\");\n        }\n        return ret;\n    }\n    async *_streamResponseChunks(_messages, options, runManager) {\n        // Make the call as a streaming request\n        const parameters = this.invocationParams(options);\n        const response = await this.streamedConnection.request(_messages, parameters, options, runManager);\n        // Get the streaming parser of the response\n        const stream = response.data;\n        let usageMetadata;\n        // Loop until the end of the stream\n        // During the loop, yield each time we get a chunk from the streaming parser\n        // that is either available or added to the queue\n        while (!stream.streamDone) {\n            const output = await stream.nextChunk();\n            await runManager?.handleCustomEvent(`google-chunk-${this.constructor.name}`, {\n                output,\n            });\n            if (output &&\n                output.usageMetadata &&\n                this.streamUsage !== false &&\n                options.streamUsage !== false) {\n                usageMetadata = {\n                    input_tokens: output.usageMetadata.promptTokenCount,\n                    output_tokens: output.usageMetadata.candidatesTokenCount,\n                    total_tokens: output.usageMetadata.totalTokenCount,\n                };\n            }\n            const chunk = output !== null\n                ? this.connection.api.responseToChatGeneration({ data: output })\n                : new outputs_1.ChatGenerationChunk({\n                    text: \"\",\n                    generationInfo: { finishReason: \"stop\" },\n                    message: new messages_1.AIMessageChunk({\n                        content: \"\",\n                        usage_metadata: usageMetadata,\n                    }),\n                });\n            if (chunk) {\n                yield chunk;\n                await runManager?.handleLLMNewToken(chunk.text ?? \"\", undefined, undefined, undefined, undefined, { chunk });\n            }\n        }\n    }\n    /** @ignore */\n    _combineLLMOutput() {\n        return [];\n    }\n    withStructuredOutput(outputSchema, config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const schema = outputSchema;\n        const name = config?.name;\n        const method = config?.method;\n        const includeRaw = config?.includeRaw;\n        if (method === \"jsonMode\") {\n            throw new Error(`Google only supports \"functionCalling\" as a method.`);\n        }\n        let functionName = name ?? \"extract\";\n        let outputParser;\n        let tools;\n        if (isZodSchema(schema)) {\n            const jsonSchema = (0, zod_to_gemini_parameters_js_1.zodToGeminiParameters)(schema);\n            tools = [\n                {\n                    functionDeclarations: [\n                        {\n                            name: functionName,\n                            description: jsonSchema.description ?? \"A function available to call.\",\n                            parameters: jsonSchema,\n                        },\n                    ],\n                },\n            ];\n            outputParser = new openai_tools_1.JsonOutputKeyToolsParser({\n                returnSingle: true,\n                keyName: functionName,\n                zodSchema: schema,\n            });\n        }\n        else {\n            let geminiFunctionDefinition;\n            if (typeof schema.name === \"string\" &&\n                typeof schema.parameters === \"object\" &&\n                schema.parameters != null) {\n                geminiFunctionDefinition = schema;\n                functionName = schema.name;\n            }\n            else {\n                geminiFunctionDefinition = {\n                    name: functionName,\n                    description: schema.description ?? \"\",\n                    parameters: schema,\n                };\n            }\n            tools = [\n                {\n                    functionDeclarations: [geminiFunctionDefinition],\n                },\n            ];\n            outputParser = new openai_tools_1.JsonOutputKeyToolsParser({\n                returnSingle: true,\n                keyName: functionName,\n            });\n        }\n        const llm = this.bind({\n            tools,\n            tool_choice: functionName,\n        });\n        if (!includeRaw) {\n            return llm.pipe(outputParser).withConfig({\n                runName: \"ChatGoogleStructuredOutput\",\n            });\n        }\n        const parserAssign = runnables_1.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config) => outputParser.invoke(input.raw, config),\n        });\n        const parserNone = runnables_1.RunnablePassthrough.assign({\n            parsed: () => null,\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [parserNone],\n        });\n        return runnables_1.RunnableSequence.from([\n            {\n                raw: llm,\n            },\n            parsedWithFallback,\n        ]).withConfig({\n            runName: \"StructuredOutputRunnable\",\n        });\n    }\n}\nexports.ChatGoogleBase = ChatGoogleBase;\nfunction isZodSchema(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninput) {\n    // Check for a characteristic method of Zod schemas\n    return typeof input?.parse === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/chat_models.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/connection.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/connection.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleRequestRecorder = exports.GoogleRequestLogger = exports.GoogleRequestCallbackHandler = exports.AbstractGoogleLLMConnection = exports.GoogleAIConnection = exports.GoogleRawConnection = exports.GoogleHostConnection = exports.GoogleConnection = void 0;\nconst env_1 = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.cjs\");\nconst base_1 = __webpack_require__(/*! @langchain/core/callbacks/base */ \"(rsc)/./node_modules/@langchain/core/callbacks/base.cjs\");\nconst index_js_1 = __webpack_require__(/*! ./utils/index.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/index.cjs\");\nconst anthropic_js_1 = __webpack_require__(/*! ./utils/anthropic.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/anthropic.cjs\");\nclass GoogleConnection {\n    constructor(caller, client, streaming) {\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = caller;\n        this.client = client;\n        this.streaming = streaming ?? false;\n    }\n    async _clientInfoHeaders() {\n        const { userAgent, clientLibraryVersion } = await this._getClientInfo();\n        return {\n            \"User-Agent\": userAgent,\n            \"Client-Info\": clientLibraryVersion,\n        };\n    }\n    async _getClientInfo() {\n        const env = await (0, env_1.getRuntimeEnvironment)();\n        const langchain = env?.library ?? \"langchain-js\";\n        // TODO: Add an API for getting the current LangChain version\n        const langchainVersion = \"0\";\n        const moduleName = await this._moduleName();\n        let clientLibraryVersion = `${langchain}/${langchainVersion}`;\n        if (moduleName && moduleName.length) {\n            clientLibraryVersion = `${clientLibraryVersion}-${moduleName}`;\n        }\n        return {\n            userAgent: clientLibraryVersion,\n            clientLibraryVersion: `${langchainVersion}-${moduleName}`,\n        };\n    }\n    async _moduleName() {\n        return this.constructor.name;\n    }\n    async additionalHeaders() {\n        return {};\n    }\n    async _buildOpts(data, _options, requestHeaders = {}) {\n        const url = await this.buildUrl();\n        const method = this.buildMethod();\n        const infoHeaders = (await this._clientInfoHeaders()) ?? {};\n        const additionalHeaders = (await this.additionalHeaders()) ?? {};\n        const headers = {\n            ...infoHeaders,\n            ...additionalHeaders,\n            ...requestHeaders,\n        };\n        const opts = {\n            url,\n            method,\n            headers,\n        };\n        if (data && method === \"POST\") {\n            opts.data = data;\n        }\n        if (this.streaming) {\n            opts.responseType = \"stream\";\n        }\n        else {\n            opts.responseType = \"json\";\n        }\n        return opts;\n    }\n    async _request(data, options, requestHeaders = {}) {\n        const opts = await this._buildOpts(data, options, requestHeaders);\n        const callResponse = await this.caller.callWithOptions({ signal: options?.signal }, async () => this.client.request(opts));\n        const response = callResponse; // Done for typecast safety, I guess\n        return response;\n    }\n}\nexports.GoogleConnection = GoogleConnection;\nclass GoogleHostConnection extends GoogleConnection {\n    constructor(fields, caller, client, streaming) {\n        super(caller, client, streaming);\n        // This does not default to a value intentionally.\n        // Use the \"platform\" getter if you need this.\n        Object.defineProperty(this, \"platformType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_location\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"v1\"\n        });\n        this.caller = caller;\n        this.platformType = fields?.platformType;\n        this._endpoint = fields?.endpoint;\n        this._location = fields?.location;\n        this.apiVersion = fields?.apiVersion ?? this.apiVersion;\n        this.client = client;\n    }\n    get platform() {\n        return this.platformType ?? this.computedPlatformType;\n    }\n    get computedPlatformType() {\n        return \"gcp\";\n    }\n    get location() {\n        return this._location ?? this.computedLocation;\n    }\n    get computedLocation() {\n        return \"us-central1\";\n    }\n    get endpoint() {\n        return this._endpoint ?? this.computedEndpoint;\n    }\n    get computedEndpoint() {\n        return `${this.location}-aiplatform.googleapis.com`;\n    }\n    buildMethod() {\n        return \"POST\";\n    }\n}\nexports.GoogleHostConnection = GoogleHostConnection;\nclass GoogleRawConnection extends GoogleHostConnection {\n    async _buildOpts(data, _options, requestHeaders = {}) {\n        const opts = await super._buildOpts(data, _options, requestHeaders);\n        opts.responseType = \"blob\";\n        return opts;\n    }\n}\nexports.GoogleRawConnection = GoogleRawConnection;\nclass GoogleAIConnection extends GoogleHostConnection {\n    constructor(fields, caller, client, streaming) {\n        super(fields, caller, client, streaming);\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_apiName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.client = client;\n        this.modelName = fields?.model ?? fields?.modelName ?? this.model;\n        this.model = this.modelName;\n        this._apiName = fields?.apiName;\n        this.apiConfig = {\n            safetyHandler: fields?.safetyHandler,\n            ...fields?.apiConfig,\n        };\n    }\n    get modelFamily() {\n        return (0, index_js_1.modelToFamily)(this.model);\n    }\n    get modelPublisher() {\n        return (0, index_js_1.modelToPublisher)(this.model);\n    }\n    get computedAPIName() {\n        // At least at the moment, model publishers and APIs map the same\n        return this.modelPublisher;\n    }\n    get apiName() {\n        return this._apiName ?? this.computedAPIName;\n    }\n    get api() {\n        switch (this.apiName) {\n            case \"google\":\n                return (0, index_js_1.getGeminiAPI)(this.apiConfig);\n            case \"anthropic\":\n                return (0, anthropic_js_1.getAnthropicAPI)(this.apiConfig);\n            default:\n                throw new Error(`Unknown API: ${this.apiName}`);\n        }\n    }\n    get computedPlatformType() {\n        if (this.client.clientType === \"apiKey\") {\n            return \"gai\";\n        }\n        else {\n            return \"gcp\";\n        }\n    }\n    get computedLocation() {\n        switch (this.apiName) {\n            case \"google\":\n                return super.computedLocation;\n            case \"anthropic\":\n                return \"us-east5\";\n            default:\n                throw new Error(`Unknown apiName: ${this.apiName}. Can't get location.`);\n        }\n    }\n    async buildUrlGenerativeLanguage() {\n        const method = await this.buildUrlMethod();\n        const url = `https://generativelanguage.googleapis.com/${this.apiVersion}/models/${this.model}:${method}`;\n        return url;\n    }\n    async buildUrlVertex() {\n        const projectId = await this.client.getProjectId();\n        const method = await this.buildUrlMethod();\n        const publisher = this.modelPublisher;\n        const url = `https://${this.endpoint}/${this.apiVersion}/projects/${projectId}/locations/${this.location}/publishers/${publisher}/models/${this.model}:${method}`;\n        return url;\n    }\n    async buildUrl() {\n        switch (this.platform) {\n            case \"gai\":\n                return this.buildUrlGenerativeLanguage();\n            default:\n                return this.buildUrlVertex();\n        }\n    }\n    async request(input, parameters, options, runManager) {\n        const moduleName = this.constructor.name;\n        const streamingParameters = {\n            ...parameters,\n            streaming: this.streaming,\n        };\n        const data = await this.formatData(input, streamingParameters);\n        await runManager?.handleCustomEvent(`google-request-${moduleName}`, {\n            data,\n            parameters: streamingParameters,\n            options,\n            connection: {\n                ...this,\n                url: await this.buildUrl(),\n                urlMethod: await this.buildUrlMethod(),\n                modelFamily: this.modelFamily,\n                modelPublisher: this.modelPublisher,\n                computedPlatformType: this.computedPlatformType,\n            },\n        });\n        const response = await this._request(data, options);\n        await runManager?.handleCustomEvent(`google-response-${moduleName}`, {\n            response,\n        });\n        return response;\n    }\n}\nexports.GoogleAIConnection = GoogleAIConnection;\nclass AbstractGoogleLLMConnection extends GoogleAIConnection {\n    async buildUrlMethodGemini() {\n        return this.streaming ? \"streamGenerateContent\" : \"generateContent\";\n    }\n    async buildUrlMethodClaude() {\n        return this.streaming ? \"streamRawPredict\" : \"rawPredict\";\n    }\n    async buildUrlMethod() {\n        switch (this.modelFamily) {\n            case \"gemini\":\n                return this.buildUrlMethodGemini();\n            case \"claude\":\n                return this.buildUrlMethodClaude();\n            default:\n                throw new Error(`Unknown model family: ${this.modelFamily}`);\n        }\n    }\n    async formatData(input, parameters) {\n        return this.api.formatData(input, parameters);\n    }\n}\nexports.AbstractGoogleLLMConnection = AbstractGoogleLLMConnection;\nclass GoogleRequestCallbackHandler extends base_1.BaseCallbackHandler {\n    customEventInfo(eventName) {\n        const names = eventName.split(\"-\");\n        return {\n            subEvent: names[1],\n            module: names[2],\n        };\n    }\n    handleCustomEvent(eventName, data, runId, tags, metadata) {\n        if (!eventName) {\n            return undefined;\n        }\n        const eventInfo = this.customEventInfo(eventName);\n        switch (eventInfo.subEvent) {\n            case \"request\":\n                return this.handleCustomRequestEvent(eventName, eventInfo, data, runId, tags, metadata);\n            case \"response\":\n                return this.handleCustomResponseEvent(eventName, eventInfo, data, runId, tags, metadata);\n            case \"chunk\":\n                return this.handleCustomChunkEvent(eventName, eventInfo, data, runId, tags, metadata);\n            default:\n                console.error(`Unexpected eventInfo for ${eventName} ${JSON.stringify(eventInfo, null, 1)}`);\n        }\n    }\n}\nexports.GoogleRequestCallbackHandler = GoogleRequestCallbackHandler;\nclass GoogleRequestLogger extends GoogleRequestCallbackHandler {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"GoogleRequestLogger\"\n        });\n    }\n    log(eventName, data, tags) {\n        const tagStr = tags ? `[${tags}]` : \"[]\";\n        console.log(`${eventName} ${tagStr} ${JSON.stringify(data, null, 1)}`);\n    }\n    handleCustomRequestEvent(eventName, _eventInfo, data, _runId, tags, _metadata) {\n        this.log(eventName, data, tags);\n    }\n    handleCustomResponseEvent(eventName, _eventInfo, data, _runId, tags, _metadata) {\n        this.log(eventName, data, tags);\n    }\n    handleCustomChunkEvent(eventName, _eventInfo, data, _runId, tags, _metadata) {\n        this.log(eventName, data, tags);\n    }\n}\nexports.GoogleRequestLogger = GoogleRequestLogger;\nclass GoogleRequestRecorder extends GoogleRequestCallbackHandler {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"GoogleRequestRecorder\"\n        });\n        Object.defineProperty(this, \"request\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"chunk\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    handleCustomRequestEvent(_eventName, _eventInfo, data, _runId, _tags, _metadata) {\n        this.request = data;\n    }\n    handleCustomResponseEvent(_eventName, _eventInfo, data, _runId, _tags, _metadata) {\n        this.response = data;\n    }\n    handleCustomChunkEvent(_eventName, _eventInfo, data, _runId, _tags, _metadata) {\n        this.chunk.push(data);\n    }\n}\nexports.GoogleRequestRecorder = GoogleRequestRecorder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/connection.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/embeddings.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/embeddings.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseGoogleEmbeddings = void 0;\nconst embeddings_1 = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/@langchain/core/embeddings.cjs\");\nconst chunk_array_1 = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.cjs\");\nconst env_1 = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.cjs\");\nconst connection_js_1 = __webpack_require__(/*! ./connection.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/connection.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/auth.cjs\");\nclass EmbeddingsConnection extends connection_js_1.GoogleAIConnection {\n    constructor(fields, caller, client, streaming) {\n        super(fields, caller, client, streaming);\n        Object.defineProperty(this, \"convertSystemMessageToHumanContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async buildUrlMethod() {\n        return \"predict\";\n    }\n    get modelPublisher() {\n        // All the embedding models are currently published by \"google\"\n        return \"google\";\n    }\n    async formatData(input, parameters) {\n        return {\n            instances: input,\n            parameters,\n        };\n    }\n}\n/**\n * Enables calls to Google APIs for generating\n * text embeddings.\n */\nclass BaseGoogleEmbeddings extends embeddings_1.Embeddings {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"connection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.model = fields.model;\n        this.connection = new EmbeddingsConnection({ ...fields, ...this }, this.caller, this.buildClient(fields), false);\n    }\n    buildApiKeyClient(apiKey) {\n        return new auth_js_1.ApiKeyGoogleAuth(apiKey);\n    }\n    buildApiKey(fields) {\n        return fields?.apiKey ?? (0, env_1.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n    }\n    buildClient(fields) {\n        const apiKey = this.buildApiKey(fields);\n        if (apiKey) {\n            return this.buildApiKeyClient(apiKey);\n        }\n        else {\n            return this.buildAbstractedClient(fields);\n        }\n    }\n    /**\n     * Takes an array of documents as input and returns a promise that\n     * resolves to a 2D array of embeddings for each document. It splits the\n     * documents into chunks and makes requests to the Google Vertex AI API to\n     * generate embeddings.\n     * @param documents An array of documents to be embedded.\n     * @returns A promise that resolves to a 2D array of embeddings for each document.\n     */\n    async embedDocuments(documents) {\n        const instanceChunks = (0, chunk_array_1.chunkArray)(documents.map((document) => ({\n            content: document,\n        })), 5); // Vertex AI accepts max 5 instances per prediction\n        const parameters = {};\n        const options = {};\n        const responses = await Promise.all(instanceChunks.map((instances) => this.connection.request(instances, parameters, options)));\n        const result = responses\n            ?.map((response) => response?.data?.predictions?.map(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (result) => result.embeddings?.values) ?? [])\n            .flat() ?? [];\n        return result;\n    }\n    /**\n     * Takes a document as input and returns a promise that resolves to an\n     * embedding for the document. It calls the embedDocuments method with the\n     * document as the input.\n     * @param document A document to be embedded.\n     * @returns A promise that resolves to an embedding for the document.\n     */\n    async embedQuery(document) {\n        const data = await this.embedDocuments([document]);\n        return data[0];\n    }\n}\nexports.BaseGoogleEmbeddings = BaseGoogleEmbeddings;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvZW1iZWRkaW5ncy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHFCQUFxQixtQkFBTyxDQUFDLHVGQUE0QjtBQUN6RCxzQkFBc0IsbUJBQU8sQ0FBQyxxR0FBbUM7QUFDakUsY0FBYyxtQkFBTyxDQUFDLHFGQUEyQjtBQUNqRCx3QkFBd0IsbUJBQU8sQ0FBQywyRkFBa0I7QUFDbEQsa0JBQWtCLG1CQUFPLENBQUMsK0VBQVk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHFEQUFxRCxvQkFBb0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxRQUFRO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vZGlzdC9lbWJlZGRpbmdzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZUdvb2dsZUVtYmVkZGluZ3MgPSB2b2lkIDA7XG5jb25zdCBlbWJlZGRpbmdzXzEgPSByZXF1aXJlKFwiQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3NcIik7XG5jb25zdCBjaHVua19hcnJheV8xID0gcmVxdWlyZShcIkBsYW5nY2hhaW4vY29yZS91dGlscy9jaHVua19hcnJheVwiKTtcbmNvbnN0IGVudl8xID0gcmVxdWlyZShcIkBsYW5nY2hhaW4vY29yZS91dGlscy9lbnZcIik7XG5jb25zdCBjb25uZWN0aW9uX2pzXzEgPSByZXF1aXJlKFwiLi9jb25uZWN0aW9uLmNqc1wiKTtcbmNvbnN0IGF1dGhfanNfMSA9IHJlcXVpcmUoXCIuL2F1dGguY2pzXCIpO1xuY2xhc3MgRW1iZWRkaW5nc0Nvbm5lY3Rpb24gZXh0ZW5kcyBjb25uZWN0aW9uX2pzXzEuR29vZ2xlQUlDb25uZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIGNhbGxlciwgY2xpZW50LCBzdHJlYW1pbmcpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzLCBjYWxsZXIsIGNsaWVudCwgc3RyZWFtaW5nKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29udmVydFN5c3RlbU1lc3NhZ2VUb0h1bWFuQ29udGVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBidWlsZFVybE1ldGhvZCgpIHtcbiAgICAgICAgcmV0dXJuIFwicHJlZGljdFwiO1xuICAgIH1cbiAgICBnZXQgbW9kZWxQdWJsaXNoZXIoKSB7XG4gICAgICAgIC8vIEFsbCB0aGUgZW1iZWRkaW5nIG1vZGVscyBhcmUgY3VycmVudGx5IHB1Ymxpc2hlZCBieSBcImdvb2dsZVwiXG4gICAgICAgIHJldHVybiBcImdvb2dsZVwiO1xuICAgIH1cbiAgICBhc3luYyBmb3JtYXREYXRhKGlucHV0LCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnN0YW5jZXM6IGlucHV0LFxuICAgICAgICAgICAgcGFyYW1ldGVycyxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIEVuYWJsZXMgY2FsbHMgdG8gR29vZ2xlIEFQSXMgZm9yIGdlbmVyYXRpbmdcbiAqIHRleHQgZW1iZWRkaW5ncy5cbiAqL1xuY2xhc3MgQmFzZUdvb2dsZUVtYmVkZGluZ3MgZXh0ZW5kcyBlbWJlZGRpbmdzXzEuRW1iZWRkaW5ncyB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1vZGVsXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbm5lY3Rpb25cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IGZpZWxkcy5tb2RlbDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IEVtYmVkZGluZ3NDb25uZWN0aW9uKHsgLi4uZmllbGRzLCAuLi50aGlzIH0sIHRoaXMuY2FsbGVyLCB0aGlzLmJ1aWxkQ2xpZW50KGZpZWxkcyksIGZhbHNlKTtcbiAgICB9XG4gICAgYnVpbGRBcGlLZXlDbGllbnQoYXBpS2V5KSB7XG4gICAgICAgIHJldHVybiBuZXcgYXV0aF9qc18xLkFwaUtleUdvb2dsZUF1dGgoYXBpS2V5KTtcbiAgICB9XG4gICAgYnVpbGRBcGlLZXkoZmllbGRzKSB7XG4gICAgICAgIHJldHVybiBmaWVsZHM/LmFwaUtleSA/PyAoMCwgZW52XzEuZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSkoXCJHT09HTEVfQVBJX0tFWVwiKTtcbiAgICB9XG4gICAgYnVpbGRDbGllbnQoZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IGFwaUtleSA9IHRoaXMuYnVpbGRBcGlLZXkoZmllbGRzKTtcbiAgICAgICAgaWYgKGFwaUtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRBcGlLZXlDbGllbnQoYXBpS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkQWJzdHJhY3RlZENsaWVudChmaWVsZHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRha2VzIGFuIGFycmF5IG9mIGRvY3VtZW50cyBhcyBpbnB1dCBhbmQgcmV0dXJucyBhIHByb21pc2UgdGhhdFxuICAgICAqIHJlc29sdmVzIHRvIGEgMkQgYXJyYXkgb2YgZW1iZWRkaW5ncyBmb3IgZWFjaCBkb2N1bWVudC4gSXQgc3BsaXRzIHRoZVxuICAgICAqIGRvY3VtZW50cyBpbnRvIGNodW5rcyBhbmQgbWFrZXMgcmVxdWVzdHMgdG8gdGhlIEdvb2dsZSBWZXJ0ZXggQUkgQVBJIHRvXG4gICAgICogZ2VuZXJhdGUgZW1iZWRkaW5ncy5cbiAgICAgKiBAcGFyYW0gZG9jdW1lbnRzIEFuIGFycmF5IG9mIGRvY3VtZW50cyB0byBiZSBlbWJlZGRlZC5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIDJEIGFycmF5IG9mIGVtYmVkZGluZ3MgZm9yIGVhY2ggZG9jdW1lbnQuXG4gICAgICovXG4gICAgYXN5bmMgZW1iZWREb2N1bWVudHMoZG9jdW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGluc3RhbmNlQ2h1bmtzID0gKDAsIGNodW5rX2FycmF5XzEuY2h1bmtBcnJheSkoZG9jdW1lbnRzLm1hcCgoZG9jdW1lbnQpID0+ICh7XG4gICAgICAgICAgICBjb250ZW50OiBkb2N1bWVudCxcbiAgICAgICAgfSkpLCA1KTsgLy8gVmVydGV4IEFJIGFjY2VwdHMgbWF4IDUgaW5zdGFuY2VzIHBlciBwcmVkaWN0aW9uXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7fTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCBQcm9taXNlLmFsbChpbnN0YW5jZUNodW5rcy5tYXAoKGluc3RhbmNlcykgPT4gdGhpcy5jb25uZWN0aW9uLnJlcXVlc3QoaW5zdGFuY2VzLCBwYXJhbWV0ZXJzLCBvcHRpb25zKSkpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZXNcbiAgICAgICAgICAgID8ubWFwKChyZXNwb25zZSkgPT4gcmVzcG9uc2U/LmRhdGE/LnByZWRpY3Rpb25zPy5tYXAoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIChyZXN1bHQpID0+IHJlc3VsdC5lbWJlZGRpbmdzPy52YWx1ZXMpID8/IFtdKVxuICAgICAgICAgICAgLmZsYXQoKSA/PyBbXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBkb2N1bWVudCBhcyBpbnB1dCBhbmQgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhblxuICAgICAqIGVtYmVkZGluZyBmb3IgdGhlIGRvY3VtZW50LiBJdCBjYWxscyB0aGUgZW1iZWREb2N1bWVudHMgbWV0aG9kIHdpdGggdGhlXG4gICAgICogZG9jdW1lbnQgYXMgdGhlIGlucHV0LlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCBBIGRvY3VtZW50IHRvIGJlIGVtYmVkZGVkLlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGVtYmVkZGluZyBmb3IgdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGVtYmVkUXVlcnkoZG9jdW1lbnQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZW1iZWREb2N1bWVudHMoW2RvY3VtZW50XSk7XG4gICAgICAgIHJldHVybiBkYXRhWzBdO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFzZUdvb2dsZUVtYmVkZGluZ3MgPSBCYXNlR29vZ2xlRW1iZWRkaW5ncztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/embeddings.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/experimental/media.cjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/experimental/media.cjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BlobStoreAIStudioFileBase = exports.AIStudioFileDownloadConnection = exports.AIStudioFileUploadConnection = exports.AIStudioMediaBlob = exports.BlobStoreGoogleCloudStorageBase = exports.GoogleCloudStorageRawConnection = exports.GoogleCloudStorageDownloadConnection = exports.GoogleCloudStorageUploadConnection = exports.GoogleCloudStorageUri = exports.BlobStoreGoogle = exports.GoogleDownloadRawConnection = exports.GoogleDownloadConnection = exports.GoogleMultipartUploadConnection = void 0;\nconst async_caller_1 = __webpack_require__(/*! @langchain/core/utils/async_caller */ \"(rsc)/./node_modules/@langchain/core/utils/async_caller.cjs\");\nconst env_1 = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.cjs\");\nconst media_core_js_1 = __webpack_require__(/*! ./utils/media_core.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/experimental/utils/media_core.cjs\");\nconst connection_js_1 = __webpack_require__(/*! ../connection.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/connection.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ../auth.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/auth.cjs\");\nclass GoogleMultipartUploadConnection extends connection_js_1.GoogleHostConnection {\n    constructor(fields, caller, client) {\n        super(fields, caller, client);\n    }\n    async _body(separator, data, metadata) {\n        const contentType = data.mimetype;\n        const { encoded, encoding } = await data.encode();\n        const body = [\n            `--${separator}`,\n            \"Content-Type: application/json; charset=UTF-8\",\n            \"\",\n            JSON.stringify(metadata),\n            \"\",\n            `--${separator}`,\n            `Content-Type: ${contentType}`,\n            `Content-Transfer-Encoding: ${encoding}`,\n            \"\",\n            encoded,\n            `--${separator}--`,\n        ];\n        return body.join(\"\\n\");\n    }\n    async request(data, metadata, options) {\n        const separator = `separator-${Date.now()}`;\n        const body = await this._body(separator, data, metadata);\n        const requestHeaders = {\n            \"Content-Type\": `multipart/related; boundary=${separator}`,\n            \"X-Goog-Upload-Protocol\": \"multipart\",\n        };\n        const response = this._request(body, options, requestHeaders);\n        return response;\n    }\n}\nexports.GoogleMultipartUploadConnection = GoogleMultipartUploadConnection;\nclass GoogleDownloadConnection extends connection_js_1.GoogleHostConnection {\n    async request(options) {\n        return this._request(undefined, options);\n    }\n}\nexports.GoogleDownloadConnection = GoogleDownloadConnection;\nclass GoogleDownloadRawConnection extends connection_js_1.GoogleRawConnection {\n    buildMethod() {\n        return \"GET\";\n    }\n    async request(options) {\n        return this._request(undefined, options);\n    }\n}\nexports.GoogleDownloadRawConnection = GoogleDownloadRawConnection;\nclass BlobStoreGoogle extends media_core_js_1.BlobStore {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new async_caller_1.AsyncCaller(fields ?? {});\n        this.client = this.buildClient(fields);\n    }\n    async _set(keyValuePair) {\n        const [, blob] = keyValuePair;\n        const setMetadata = this.buildSetMetadata(keyValuePair);\n        const metadata = setMetadata;\n        const options = {};\n        const connection = this.buildSetConnection(keyValuePair);\n        const response = await connection.request(blob, metadata, options);\n        return response;\n    }\n    async mset(keyValuePairs) {\n        const ret = keyValuePairs.map((keyValue) => this._set(keyValue));\n        await Promise.all(ret);\n    }\n    async _getMetadata(key) {\n        const connection = this.buildGetMetadataConnection(key);\n        const options = {};\n        const response = await connection.request(options);\n        return response.data;\n    }\n    async _getData(key) {\n        const connection = this.buildGetDataConnection(key);\n        const options = {};\n        const response = await connection.request(options);\n        return response.data;\n    }\n    _getMimetypeFromMetadata(metadata) {\n        return metadata.contentType;\n    }\n    async _get(key) {\n        const metadata = await this._getMetadata(key);\n        const data = await this._getData(key);\n        if (data && metadata) {\n            const ret = await media_core_js_1.MediaBlob.fromBlob(data, { metadata, path: key });\n            return ret;\n        }\n        else {\n            return undefined;\n        }\n    }\n    async mget(keys) {\n        const ret = keys.map((key) => this._get(key));\n        return await Promise.all(ret);\n    }\n    async _del(key) {\n        const connection = this.buildDeleteConnection(key);\n        const options = {};\n        await connection.request(options);\n    }\n    async mdelete(keys) {\n        const ret = keys.map((key) => this._del(key));\n        await Promise.all(ret);\n    }\n    // eslint-disable-next-line require-yield\n    async *yieldKeys(_prefix) {\n        // TODO: Implement. Most have an implementation that uses nextToken.\n        throw new Error(\"yieldKeys is not implemented\");\n    }\n}\nexports.BlobStoreGoogle = BlobStoreGoogle;\nclass GoogleCloudStorageUri {\n    constructor(uri) {\n        Object.defineProperty(this, \"bucket\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"path\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const bucketAndPath = GoogleCloudStorageUri.uriToBucketAndPath(uri);\n        this.bucket = bucketAndPath.bucket;\n        this.path = bucketAndPath.path;\n    }\n    get uri() {\n        return `gs://${this.bucket}/${this.path}`;\n    }\n    get isValid() {\n        return (typeof this.bucket !== \"undefined\" && typeof this.path !== \"undefined\");\n    }\n    static uriToBucketAndPath(uri) {\n        const match = this.uriRegexp.exec(uri);\n        if (!match) {\n            throw new Error(`Invalid gs:// URI: ${uri}`);\n        }\n        return {\n            bucket: match[1],\n            path: match[2],\n        };\n    }\n    static isValidUri(uri) {\n        return this.uriRegexp.test(uri);\n    }\n}\nexports.GoogleCloudStorageUri = GoogleCloudStorageUri;\nObject.defineProperty(GoogleCloudStorageUri, \"uriRegexp\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: /gs:\\/\\/([a-z0-9][a-z0-9._-]+[a-z0-9])\\/(.*)/\n});\nclass GoogleCloudStorageUploadConnection extends GoogleMultipartUploadConnection {\n    constructor(fields, caller, client) {\n        super(fields, caller, client);\n        Object.defineProperty(this, \"uri\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.uri = new GoogleCloudStorageUri(fields.uri);\n    }\n    async buildUrl() {\n        return `https://storage.googleapis.com/upload/storage/${this.apiVersion}/b/${this.uri.bucket}/o?uploadType=multipart`;\n    }\n}\nexports.GoogleCloudStorageUploadConnection = GoogleCloudStorageUploadConnection;\nclass GoogleCloudStorageDownloadConnection extends GoogleDownloadConnection {\n    constructor(fields, caller, client) {\n        super(fields, caller, client);\n        Object.defineProperty(this, \"uri\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"method\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"alt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.uri = new GoogleCloudStorageUri(fields.uri);\n        this.method = fields.method;\n        this.alt = fields.alt;\n    }\n    buildMethod() {\n        return this.method;\n    }\n    async buildUrl() {\n        const path = encodeURIComponent(this.uri.path);\n        const ret = `https://storage.googleapis.com/storage/${this.apiVersion}/b/${this.uri.bucket}/o/${path}`;\n        return this.alt ? `${ret}?alt=${this.alt}` : ret;\n    }\n}\nexports.GoogleCloudStorageDownloadConnection = GoogleCloudStorageDownloadConnection;\nclass GoogleCloudStorageRawConnection extends GoogleDownloadRawConnection {\n    constructor(fields, caller, client) {\n        super(fields, caller, client);\n        Object.defineProperty(this, \"uri\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.uri = new GoogleCloudStorageUri(fields.uri);\n    }\n    async buildUrl() {\n        const path = encodeURIComponent(this.uri.path);\n        const ret = `https://storage.googleapis.com/storage/${this.apiVersion}/b/${this.uri.bucket}/o/${path}?alt=media`;\n        return ret;\n    }\n}\nexports.GoogleCloudStorageRawConnection = GoogleCloudStorageRawConnection;\nclass BlobStoreGoogleCloudStorageBase extends BlobStoreGoogle {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.params = fields;\n        this.defaultStoreOptions = {\n            ...this.defaultStoreOptions,\n            pathPrefix: fields.uriPrefix.uri,\n        };\n    }\n    buildSetConnection([key, _blob]) {\n        const params = {\n            ...this.params,\n            uri: key,\n        };\n        return new GoogleCloudStorageUploadConnection(params, this.caller, this.client);\n    }\n    buildSetMetadata([key, blob]) {\n        const uri = new GoogleCloudStorageUri(key);\n        const ret = {\n            name: uri.path,\n            metadata: blob.metadata,\n            contentType: blob.mimetype,\n        };\n        return ret;\n    }\n    buildGetMetadataConnection(key) {\n        const params = {\n            uri: key,\n            method: \"GET\",\n            alt: undefined,\n        };\n        return new GoogleCloudStorageDownloadConnection(params, this.caller, this.client);\n    }\n    buildGetDataConnection(key) {\n        const params = {\n            uri: key,\n        };\n        return new GoogleCloudStorageRawConnection(params, this.caller, this.client);\n    }\n    buildDeleteConnection(key) {\n        const params = {\n            uri: key,\n            method: \"DELETE\",\n            alt: undefined,\n        };\n        return new GoogleCloudStorageDownloadConnection(params, this.caller, this.client);\n    }\n}\nexports.BlobStoreGoogleCloudStorageBase = BlobStoreGoogleCloudStorageBase;\nclass AIStudioMediaBlob extends media_core_js_1.MediaBlob {\n    _valueAsDate(value) {\n        if (!value) {\n            return new Date(0);\n        }\n        return new Date(value);\n    }\n    _metadataFieldAsDate(field) {\n        return this._valueAsDate(this.metadata?.[field]);\n    }\n    get createDate() {\n        return this._metadataFieldAsDate(\"createTime\");\n    }\n    get updateDate() {\n        return this._metadataFieldAsDate(\"updateTime\");\n    }\n    get expirationDate() {\n        return this._metadataFieldAsDate(\"expirationTime\");\n    }\n    get isExpired() {\n        const now = new Date().toISOString();\n        const exp = this.metadata?.expirationTime ?? now;\n        return exp <= now;\n    }\n}\nexports.AIStudioMediaBlob = AIStudioMediaBlob;\nclass AIStudioFileUploadConnection extends GoogleMultipartUploadConnection {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"apiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"v1beta\"\n        });\n    }\n    async buildUrl() {\n        return `https://generativelanguage.googleapis.com/upload/${this.apiVersion}/files`;\n    }\n}\nexports.AIStudioFileUploadConnection = AIStudioFileUploadConnection;\nclass AIStudioFileDownloadConnection extends GoogleDownloadConnection {\n    constructor(fields, caller, client) {\n        super(fields, caller, client);\n        Object.defineProperty(this, \"method\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"v1beta\"\n        });\n        this.method = fields.method;\n        this.name = fields.name;\n    }\n    buildMethod() {\n        return this.method;\n    }\n    async buildUrl() {\n        return `https://generativelanguage.googleapis.com/${this.apiVersion}/files/${this.name}`;\n    }\n}\nexports.AIStudioFileDownloadConnection = AIStudioFileDownloadConnection;\nclass BlobStoreAIStudioFileBase extends BlobStoreGoogle {\n    constructor(fields) {\n        const params = {\n            defaultStoreOptions: {\n                pathPrefix: \"https://generativelanguage.googleapis.com/v1beta/files/\",\n                actionIfInvalid: \"removePath\",\n            },\n            ...fields,\n        };\n        super(params);\n        Object.defineProperty(this, \"params\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"retryTime\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1000\n        });\n        this.params = params;\n        this.retryTime = params?.retryTime ?? this.retryTime ?? 1000;\n    }\n    _pathToName(path) {\n        return path.split(\"/\").pop() ?? path;\n    }\n    buildApiKeyClient(apiKey) {\n        return new auth_js_1.ApiKeyGoogleAuth(apiKey);\n    }\n    buildApiKey(fields) {\n        return fields?.apiKey ?? (0, env_1.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n    }\n    buildClient(fields) {\n        const apiKey = this.buildApiKey(fields);\n        if (apiKey) {\n            return this.buildApiKeyClient(apiKey);\n        }\n        else {\n            // TODO: Test that you can use OAuth to access\n            return this.buildAbstractedClient(fields);\n        }\n    }\n    async _regetMetadata(key) {\n        // Sleep for some time period\n        // eslint-disable-next-line no-promise-executor-return\n        await new Promise((resolve) => setTimeout(resolve, this.retryTime));\n        // Fetch the latest metadata\n        return this._getMetadata(key);\n    }\n    async _set([key, blob]) {\n        const response = (await super._set([\n            key,\n            blob,\n        ]));\n        let file = response.data?.file ?? { state: \"FAILED\" };\n        while (file.state === \"PROCESSING\" && file.uri && this.retryTime > 0) {\n            file = await this._regetMetadata(file.uri);\n        }\n        // The response should contain the name (and valid URI), so we need to\n        // update the blob with this. We can't return a new blob, since mset()\n        // doesn't return anything.\n        /* eslint-disable no-param-reassign */\n        blob.path = file.uri;\n        blob.metadata = {\n            ...blob.metadata,\n            ...file,\n        };\n        /* eslint-enable no-param-reassign */\n        return response;\n    }\n    buildSetConnection([_key, _blob]) {\n        return new AIStudioFileUploadConnection(this.params, this.caller, this.client);\n    }\n    buildSetMetadata([_key, _blob]) {\n        return {};\n    }\n    buildGetMetadataConnection(key) {\n        const params = {\n            ...this.params,\n            method: \"GET\",\n            name: this._pathToName(key),\n        };\n        return new AIStudioFileDownloadConnection(params, this.caller, this.client);\n    }\n    buildGetDataConnection(_key) {\n        throw new Error(\"AI Studio File API does not provide data\");\n    }\n    async _get(key) {\n        const metadata = await this._getMetadata(key);\n        if (metadata) {\n            const contentType = metadata?.mimeType ?? \"application/octet-stream\";\n            // TODO - Get the actual data (and other metadata) from an optional backing store\n            const data = {\n                value: \"\",\n                type: contentType,\n            };\n            return new media_core_js_1.MediaBlob({\n                path: key,\n                data,\n                metadata,\n            });\n        }\n        else {\n            return undefined;\n        }\n    }\n    buildDeleteConnection(key) {\n        const params = {\n            ...this.params,\n            method: \"DELETE\",\n            name: this._pathToName(key),\n        };\n        return new AIStudioFileDownloadConnection(params, this.caller, this.client);\n    }\n}\nexports.BlobStoreAIStudioFileBase = BlobStoreAIStudioFileBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/experimental/media.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/experimental/utils/media_core.cjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/experimental/utils/media_core.cjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MediaManager = exports.DataBlobStore = exports.SimpleWebBlobStore = exports.ReadThroughBlobStore = exports.BackedBlobStore = exports.BlobStore = exports.MediaBlob = void 0;\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/index.js\"); // FIXME - it is importing the wrong uuid, so v6 and v7 aren't implemented\nconst stores_1 = __webpack_require__(/*! @langchain/core/stores */ \"(rsc)/./node_modules/@langchain/core/stores.cjs\");\nconst serializable_1 = __webpack_require__(/*! @langchain/core/load/serializable */ \"(rsc)/./node_modules/@langchain/core/load/serializable.cjs\");\nfunction bytesToString(dataArray) {\n    // Need to handle the array in smaller chunks to deal with stack size limits\n    let ret = \"\";\n    const chunkSize = 102400;\n    for (let i = 0; i < dataArray.length; i += chunkSize) {\n        const chunk = dataArray.subarray(i, i + chunkSize);\n        ret += String.fromCharCode(...chunk);\n    }\n    return ret;\n}\n/**\n * Represents a chunk of data that can be identified by the path where the\n * data is (or will be) located, along with optional metadata about the data.\n */\nclass MediaBlob extends serializable_1.Serializable {\n    constructor(params) {\n        super(params);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"google_common\",\n                \"experimental\",\n                \"utils\",\n                \"media_core\",\n            ]\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                value: \"\",\n                type: \"text/plain\",\n            }\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"path\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.data = params.data ?? this.data;\n        this.metadata = params.metadata;\n        this.path = params.path;\n    }\n    get size() {\n        return this.asBytes.length;\n    }\n    get dataType() {\n        return this.data?.type ?? \"\";\n    }\n    get encoding() {\n        const charsetEquals = this.dataType.indexOf(\"charset=\");\n        return charsetEquals === -1\n            ? \"utf-8\"\n            : this.dataType.substring(charsetEquals + 8);\n    }\n    get mimetype() {\n        const semicolon = this.dataType.indexOf(\";\");\n        return semicolon === -1\n            ? this.dataType\n            : this.dataType.substring(0, semicolon);\n    }\n    get asBytes() {\n        if (!this.data) {\n            return Uint8Array.from([]);\n        }\n        const binString = atob(this.data?.value);\n        const ret = new Uint8Array(binString.length);\n        for (let co = 0; co < binString.length; co += 1) {\n            ret[co] = binString.charCodeAt(co);\n        }\n        return ret;\n    }\n    async asString() {\n        return bytesToString(this.asBytes);\n    }\n    async asBase64() {\n        return this.data?.value ?? \"\";\n    }\n    async asDataUrl() {\n        return `data:${this.mimetype};base64,${await this.asBase64()}`;\n    }\n    async asUri() {\n        return this.path ?? (await this.asDataUrl());\n    }\n    async encode() {\n        const dataUrl = await this.asDataUrl();\n        const comma = dataUrl.indexOf(\",\");\n        const encoded = dataUrl.substring(comma + 1);\n        const encoding = dataUrl.indexOf(\"base64\") > -1 ? \"base64\" : \"8bit\";\n        return {\n            encoded,\n            encoding,\n        };\n    }\n    static fromDataUrl(url) {\n        if (!url.startsWith(\"data:\")) {\n            throw new Error(\"Not a data: URL\");\n        }\n        const colon = url.indexOf(\":\");\n        const semicolon = url.indexOf(\";\");\n        const mimeType = url.substring(colon + 1, semicolon);\n        const comma = url.indexOf(\",\");\n        const base64Data = url.substring(comma + 1);\n        const data = {\n            type: mimeType,\n            value: base64Data,\n        };\n        return new MediaBlob({\n            data,\n            path: url,\n        });\n    }\n    static async fromBlob(blob, other) {\n        const valueBuffer = await blob.arrayBuffer();\n        const valueArray = new Uint8Array(valueBuffer);\n        const valueStr = bytesToString(valueArray);\n        const value = btoa(valueStr);\n        return new MediaBlob({\n            ...other,\n            data: {\n                value,\n                type: blob.type,\n            },\n        });\n    }\n}\nexports.MediaBlob = MediaBlob;\n/**\n * A specialized Store that is designed to handle MediaBlobs and use the\n * key that is included in the blob to determine exactly how it is stored.\n *\n * The full details of a MediaBlob may be changed when it is stored.\n * For example, it may get additional or different Metadata. This should be\n * what is returned when the store() method is called.\n *\n * Although BlobStore extends BaseStore, not all of the methods from\n * BaseStore may be implemented (or even possible). Those that are not\n * implemented should be documented and throw an Error if called.\n */\nclass BlobStore extends stores_1.BaseStore {\n    constructor(opts) {\n        super(opts);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"google-common\"]\n        }); // FIXME - What should this be? And why?\n        Object.defineProperty(this, \"defaultStoreOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"defaultFetchOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.defaultStoreOptions = opts?.defaultStoreOptions ?? {};\n        this.defaultFetchOptions = opts?.defaultFetchOptions ?? {};\n    }\n    async _realKey(key) {\n        return typeof key === \"string\" ? key : await key.asUri();\n    }\n    /**\n     * Is the path supported by this BlobStore?\n     *\n     * Although this is async, this is expected to be a relatively fast operation\n     * (ie - you shouldn't make network calls).\n     *\n     * @param path The path to check\n     * @param opts Any options (if needed) that may be used to determine if it is valid\n     * @return If the path is supported\n     */\n    hasValidPath(path, opts) {\n        const prefix = opts?.pathPrefix ?? \"\";\n        const isPrefixed = typeof path !== \"undefined\" && path.startsWith(prefix);\n        return Promise.resolve(isPrefixed);\n    }\n    _blobPathSuffix(blob) {\n        // Get the path currently set and make sure we treat it as a string\n        const blobPath = `${blob.path}`;\n        // Advance past the first set of /\n        let pathStart = blobPath.indexOf(\"/\") + 1;\n        while (blobPath.charAt(pathStart) === \"/\") {\n            pathStart += 1;\n        }\n        // We will use the rest as the path for a replacement\n        return blobPath.substring(pathStart);\n    }\n    async _newBlob(oldBlob, newPath) {\n        const oldPath = oldBlob.path;\n        const metadata = oldBlob?.metadata ?? {};\n        metadata.langchainOldPath = oldPath;\n        const newBlob = new MediaBlob({\n            ...oldBlob,\n            metadata,\n        });\n        if (newPath) {\n            newBlob.path = newPath;\n        }\n        else if (newBlob.path) {\n            delete newBlob.path;\n        }\n        return newBlob;\n    }\n    async _validBlobPrefixPath(blob, opts) {\n        const prefix = opts?.pathPrefix ?? \"\";\n        const suffix = this._blobPathSuffix(blob);\n        const newPath = `${prefix}${suffix}`;\n        return this._newBlob(blob, newPath);\n    }\n    _validBlobPrefixUuidFunction(name) {\n        switch (name) {\n            case \"prefixUuid1\":\n                return (0, uuid_1.v1)();\n            case \"prefixUuid4\":\n                return (0, uuid_1.v4)();\n            // case \"prefixUuid6\": return v6();\n            // case \"prefixUuid7\": return v7();\n            default:\n                throw new Error(`Unknown uuid function: ${name}`);\n        }\n    }\n    async _validBlobPrefixUuid(blob, opts) {\n        const prefix = opts?.pathPrefix ?? \"\";\n        const suffix = this._validBlobPrefixUuidFunction(opts?.actionIfInvalid ?? \"prefixUuid4\");\n        const newPath = `${prefix}${suffix}`;\n        return this._newBlob(blob, newPath);\n    }\n    async _validBlobRemovePath(blob, _opts) {\n        return this._newBlob(blob, undefined);\n    }\n    /**\n     * Based on the blob and options, return a blob that has a valid path\n     * that can be saved.\n     * @param blob\n     * @param opts\n     */\n    async _validStoreBlob(blob, opts) {\n        if (await this.hasValidPath(blob.path, opts)) {\n            return blob;\n        }\n        switch (opts?.actionIfInvalid) {\n            case \"ignore\":\n                return blob;\n            case \"prefixPath\":\n                return this._validBlobPrefixPath(blob, opts);\n            case \"prefixUuid1\":\n            case \"prefixUuid4\":\n            case \"prefixUuid6\":\n            case \"prefixUuid7\":\n                return this._validBlobPrefixUuid(blob, opts);\n            case \"removePath\":\n                return this._validBlobRemovePath(blob, opts);\n            default:\n                return undefined;\n        }\n    }\n    async store(blob, opts = {}) {\n        const allOpts = {\n            ...this.defaultStoreOptions,\n            ...opts,\n        };\n        const validBlob = await this._validStoreBlob(blob, allOpts);\n        if (typeof validBlob !== \"undefined\") {\n            const validKey = await validBlob.asUri();\n            await this.mset([[validKey, validBlob]]);\n            const savedKey = await validBlob.asUri();\n            return await this.fetch(savedKey);\n        }\n        return undefined;\n    }\n    async _missingFetchBlobEmpty(path, _opts) {\n        return new MediaBlob({ path });\n    }\n    async _missingFetchBlob(path, opts) {\n        switch (opts?.actionIfBlobMissing) {\n            case \"emptyBlob\":\n                return this._missingFetchBlobEmpty(path, opts);\n            default:\n                return undefined;\n        }\n    }\n    async fetch(key, opts = {}) {\n        const allOpts = {\n            ...this.defaultFetchOptions,\n            ...opts,\n        };\n        const realKey = await this._realKey(key);\n        const ret = await this.mget([realKey]);\n        return ret?.[0] ?? (await this._missingFetchBlob(realKey, allOpts));\n    }\n}\nexports.BlobStore = BlobStore;\nclass BackedBlobStore extends BlobStore {\n    constructor(opts) {\n        super(opts);\n        Object.defineProperty(this, \"backingStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.backingStore = opts.backingStore;\n    }\n    mdelete(keys) {\n        return this.backingStore.mdelete(keys);\n    }\n    mget(keys) {\n        return this.backingStore.mget(keys);\n    }\n    mset(keyValuePairs) {\n        return this.backingStore.mset(keyValuePairs);\n    }\n    yieldKeys(prefix) {\n        return this.backingStore.yieldKeys(prefix);\n    }\n}\nexports.BackedBlobStore = BackedBlobStore;\nclass ReadThroughBlobStore extends BlobStore {\n    constructor(opts) {\n        super(opts);\n        Object.defineProperty(this, \"baseStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"backingStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.baseStore = opts.baseStore;\n        this.backingStore = opts.backingStore;\n    }\n    async store(blob, opts = {}) {\n        const originalUri = await blob.asUri();\n        const newBlob = await this.backingStore.store(blob, opts);\n        if (newBlob) {\n            await this.baseStore.mset([[originalUri, newBlob]]);\n        }\n        return newBlob;\n    }\n    mdelete(keys) {\n        return this.baseStore.mdelete(keys);\n    }\n    mget(keys) {\n        return this.baseStore.mget(keys);\n    }\n    mset(_keyValuePairs) {\n        throw new Error(\"Do not call ReadThroughBlobStore.mset directly\");\n    }\n    yieldKeys(prefix) {\n        return this.baseStore.yieldKeys(prefix);\n    }\n}\nexports.ReadThroughBlobStore = ReadThroughBlobStore;\nclass SimpleWebBlobStore extends BlobStore {\n    _notImplementedException() {\n        throw new Error(\"Not implemented for SimpleWebBlobStore\");\n    }\n    async hasValidPath(path, _opts) {\n        return ((await super.hasValidPath(path, { pathPrefix: \"https://\" })) ||\n            (await super.hasValidPath(path, { pathPrefix: \"http://\" })));\n    }\n    async _fetch(url) {\n        const ret = new MediaBlob({\n            path: url,\n        });\n        const metadata = {};\n        const fetchOptions = {\n            method: \"GET\",\n        };\n        const res = await fetch(url, fetchOptions);\n        metadata.status = res.status;\n        const headers = {};\n        for (const [key, value] of res.headers.entries()) {\n            headers[key] = value;\n        }\n        metadata.headers = headers;\n        metadata.ok = res.ok;\n        if (res.ok) {\n            const resMediaBlob = await MediaBlob.fromBlob(await res.blob());\n            ret.data = resMediaBlob.data;\n        }\n        ret.metadata = metadata;\n        return ret;\n    }\n    async mget(keys) {\n        const blobMap = keys.map(this._fetch);\n        return await Promise.all(blobMap);\n    }\n    async mdelete(_keys) {\n        this._notImplementedException();\n    }\n    async mset(_keyValuePairs) {\n        this._notImplementedException();\n    }\n    async *yieldKeys(_prefix) {\n        this._notImplementedException();\n        yield \"\";\n    }\n}\nexports.SimpleWebBlobStore = SimpleWebBlobStore;\n/**\n * A blob \"store\" that works with data: URLs that will turn the URL into\n * a blob.\n */\nclass DataBlobStore extends BlobStore {\n    _notImplementedException() {\n        throw new Error(\"Not implemented for DataBlobStore\");\n    }\n    hasValidPath(path, _opts) {\n        return super.hasValidPath(path, { pathPrefix: \"data:\" });\n    }\n    _fetch(url) {\n        return MediaBlob.fromDataUrl(url);\n    }\n    async mget(keys) {\n        const blobMap = keys.map(this._fetch);\n        return blobMap;\n    }\n    async mdelete(_keys) {\n        this._notImplementedException();\n    }\n    async mset(_keyValuePairs) {\n        this._notImplementedException();\n    }\n    async *yieldKeys(_prefix) {\n        this._notImplementedException();\n        yield \"\";\n    }\n}\nexports.DataBlobStore = DataBlobStore;\n/**\n * Responsible for converting a URI (typically a web URL) into a MediaBlob.\n * Allows for aliasing / caching of the requested URI and what it resolves to.\n * This MediaBlob is expected to be usable to provide to an LLM, either\n * through the Base64 of the media or through a canonical URI that the LLM\n * supports.\n */\nclass MediaManager {\n    constructor(config) {\n        Object.defineProperty(this, \"store\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"resolvers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.store = config.store;\n        this.resolvers = config.resolvers;\n    }\n    defaultResolvers() {\n        return [new DataBlobStore({}), new SimpleWebBlobStore({})];\n    }\n    async _isInvalid(blob) {\n        return typeof blob === \"undefined\";\n    }\n    /**\n     * Given the public URI, load what is at this URI and save it\n     * in the store.\n     * @param uri The URI to resolve using the resolver\n     * @return A canonical MediaBlob for this URI\n     */\n    async _resolveAndSave(uri) {\n        let resolvedBlob;\n        const resolvers = this.resolvers || this.defaultResolvers();\n        for (let co = 0; co < resolvers.length; co += 1) {\n            const resolver = resolvers[co];\n            if (await resolver.hasValidPath(uri)) {\n                resolvedBlob = await resolver.fetch(uri);\n            }\n        }\n        if (resolvedBlob) {\n            return await this.store.store(resolvedBlob);\n        }\n        else {\n            return new MediaBlob({});\n        }\n    }\n    async getMediaBlob(uri) {\n        const aliasBlob = await this.store.fetch(uri);\n        const ret = (await this._isInvalid(aliasBlob))\n            ? await this._resolveAndSave(uri)\n            : aliasBlob;\n        return ret;\n    }\n}\nexports.MediaManager = MediaManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/experimental/utils/media_core.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/index.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/index.cjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./chat_models.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/chat_models.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./llms.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/llms.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./embeddings.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/embeddings.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./output_parsers.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/output_parsers.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/auth.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./connection.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/connection.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./types.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/types.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/stream.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/common.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/common.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/zod_to_gemini_parameters.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/safety.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/safety.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw2RkFBbUI7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLCtFQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQywyRkFBa0I7QUFDdkMsYUFBYSxtQkFBTyxDQUFDLG1HQUFzQjtBQUMzQyxhQUFhLG1CQUFPLENBQUMsK0VBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLDJGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsaUZBQWE7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLCtGQUFvQjtBQUN6QyxhQUFhLG1CQUFPLENBQUMsK0ZBQW9CO0FBQ3pDLGFBQWEsbUJBQU8sQ0FBQyxtSUFBc0M7QUFDM0QsYUFBYSxtQkFBTyxDQUFDLCtGQUFvQiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2hhdF9tb2RlbHMuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9sbG1zLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW1iZWRkaW5ncy5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL291dHB1dF9wYXJzZXJzLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXV0aC5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Nvbm5lY3Rpb24uY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlcy5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL3N0cmVhbS5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL2NvbW1vbi5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL3pvZF90b19nZW1pbmlfcGFyYW1ldGVycy5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL3NhZmV0eS5janNcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/llms.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/llms.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleBaseLLM = void 0;\nconst manager_1 = __webpack_require__(/*! @langchain/core/callbacks/manager */ \"(rsc)/./node_modules/@langchain/core/callbacks/manager.cjs\");\nconst llms_1 = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.cjs\");\nconst outputs_1 = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.cjs\");\nconst env_1 = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.cjs\");\nconst connection_js_1 = __webpack_require__(/*! ./connection.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/connection.cjs\");\nconst common_js_1 = __webpack_require__(/*! ./utils/common.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/common.cjs\");\nconst gemini_js_1 = __webpack_require__(/*! ./utils/gemini.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/gemini.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/auth.cjs\");\nconst failed_handler_js_1 = __webpack_require__(/*! ./utils/failed_handler.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/failed_handler.cjs\");\nconst chat_models_js_1 = __webpack_require__(/*! ./chat_models.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/chat_models.cjs\");\nclass GoogleLLMConnection extends connection_js_1.AbstractGoogleLLMConnection {\n    async formatContents(input, _parameters) {\n        const parts = await this.api.messageContentToParts(input);\n        const contents = [\n            {\n                role: \"user\",\n                parts,\n            },\n        ];\n        return contents;\n    }\n}\nclass ProxyChatGoogle extends chat_models_js_1.ChatGoogleBase {\n    constructor(fields) {\n        super(fields);\n    }\n    buildAbstractedClient(fields) {\n        return fields.connection.client;\n    }\n}\n/**\n * Integration with an LLM.\n */\nclass GoogleBaseLLM extends llms_1.LLM {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"GoogleLLM\";\n    }\n    get lc_secrets() {\n        return {\n            authOptions: \"GOOGLE_AUTH_OPTIONS\",\n        };\n    }\n    constructor(fields) {\n        super((0, failed_handler_js_1.ensureParams)(fields));\n        Object.defineProperty(this, \"originalFields\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gemini-pro\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gemini-pro\"\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"maxOutputTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1024\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.8\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 40\n        });\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"safetySettings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"safetyHandler\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"responseMimeType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text/plain\"\n        });\n        Object.defineProperty(this, \"connection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streamedConnection\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.originalFields = fields;\n        (0, common_js_1.copyAndValidateModelParamsInto)(fields, this);\n        this.safetyHandler =\n            fields?.safetyHandler ?? new gemini_js_1.DefaultGeminiSafetyHandler();\n        const client = this.buildClient(fields);\n        this.buildConnection(fields ?? {}, client);\n    }\n    buildApiKeyClient(apiKey) {\n        return new auth_js_1.ApiKeyGoogleAuth(apiKey);\n    }\n    buildApiKey(fields) {\n        return fields?.apiKey ?? (0, env_1.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n    }\n    buildClient(fields) {\n        const apiKey = this.buildApiKey(fields);\n        if (apiKey) {\n            return this.buildApiKeyClient(apiKey);\n        }\n        else {\n            return this.buildAbstractedClient(fields);\n        }\n    }\n    buildConnection(fields, client) {\n        this.connection = new GoogleLLMConnection({ ...fields, ...this }, this.caller, client, false);\n        this.streamedConnection = new GoogleLLMConnection({ ...fields, ...this }, this.caller, client, true);\n    }\n    get platform() {\n        return this.connection.platform;\n    }\n    // Replace\n    _llmType() {\n        return \"googlellm\";\n    }\n    formatPrompt(prompt) {\n        return prompt;\n    }\n    /**\n     * For some given input string and options, return a string output.\n     *\n     * Despite the fact that `invoke` is overridden below, we still need this\n     * in order to handle public APi calls to `generate()`.\n     */\n    async _call(prompt, options) {\n        const parameters = (0, common_js_1.copyAIModelParams)(this, options);\n        const result = await this.connection.request(prompt, parameters, options);\n        const ret = this.connection.api.responseToString(result);\n        return ret;\n    }\n    // Normally, you should not override this method and instead should override\n    // _streamResponseChunks. We are doing so here to allow for multimodal inputs into\n    // the LLM.\n    async *_streamIterator(input, options) {\n        // TODO: Refactor callback setup and teardown code into core\n        const prompt = llms_1.BaseLLM._convertInputToPromptValue(input);\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptions(options);\n        const callbackManager_ = await manager_1.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, runnableConfig.metadata, this.metadata, { verbose: this.verbose });\n        const extra = {\n            options: callOptions,\n            invocation_params: this?.invocationParams(callOptions),\n            batch_size: 1,\n        };\n        const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), [prompt.toString()], undefined, undefined, extra, undefined, undefined, runnableConfig.runName);\n        let generation = new outputs_1.GenerationChunk({\n            text: \"\",\n        });\n        const proxyChat = this.createProxyChat();\n        try {\n            for await (const chunk of proxyChat._streamIterator(input, options)) {\n                const stringValue = this.connection.api.chunkToString(chunk);\n                const generationChunk = new outputs_1.GenerationChunk({\n                    text: stringValue,\n                });\n                generation = generation.concat(generationChunk);\n                yield stringValue;\n            }\n        }\n        catch (err) {\n            await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMError(err)));\n            throw err;\n        }\n        await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMEnd({\n            generations: [[generation]],\n        })));\n    }\n    async predictMessages(messages, options, _callbacks) {\n        const { content } = messages[0];\n        const result = await this.connection.request(content, {}, options);\n        const ret = this.connection.api.responseToBaseMessage(result);\n        return ret;\n    }\n    /**\n     * Internal implementation detail to allow Google LLMs to support\n     * multimodal input by delegating to the chat model implementation.\n     *\n     * TODO: Replace with something less hacky.\n     */\n    createProxyChat() {\n        return new ProxyChatGoogle({\n            ...this.originalFields,\n            connection: this.connection,\n        });\n    }\n    // TODO: Remove the need to override this - we are doing it to\n    // allow the LLM to handle multimodal types of input.\n    async invoke(input, options) {\n        const stream = await this._streamIterator(input, options);\n        let generatedOutput = \"\";\n        for await (const chunk of stream) {\n            generatedOutput += chunk;\n        }\n        return generatedOutput;\n    }\n}\nexports.GoogleBaseLLM = GoogleBaseLLM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/llms.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/output_parsers.cjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/output_parsers.cjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MarkdownGoogleSearchOutputParser = exports.SimpleGoogleSearchOutputParser = exports.BaseGoogleSearchOutputParser = void 0;\nconst output_parsers_1 = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.cjs\");\nclass BaseGoogleSearchOutputParser extends output_parsers_1.BaseLLMOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"google_common\", \"output_parsers\"]\n        });\n    }\n    generationToGroundingInfo(generation) {\n        if (\"message\" in generation) {\n            const responseMetadata = generation?.message?.response_metadata;\n            const metadata = responseMetadata?.groundingMetadata;\n            const supports = responseMetadata?.groundingSupport ?? metadata?.groundingSupports ?? [];\n            if (metadata) {\n                return {\n                    metadata,\n                    supports,\n                };\n            }\n        }\n        return undefined;\n    }\n    generationsToGroundingInfo(generations) {\n        for (const generation of generations) {\n            const info = this.generationToGroundingInfo(generation);\n            if (info !== undefined) {\n                return info;\n            }\n        }\n        return undefined;\n    }\n    generationToString(generation) {\n        if (\"message\" in generation) {\n            const content = generation?.message?.content;\n            if (typeof content === \"string\") {\n                return content;\n            }\n            else {\n                return content\n                    .map((c) => {\n                    if (c?.type === \"text\") {\n                        return c?.text ?? \"\";\n                    }\n                    else {\n                        return \"\";\n                    }\n                })\n                    .reduce((previousValue, currentValue) => `${previousValue}${currentValue}`);\n            }\n        }\n        return generation.text;\n    }\n    generationsToString(generations) {\n        return generations\n            .map((generation) => this.generationToString(generation))\n            .reduce((previousValue, currentValue) => `${previousValue}${currentValue}`);\n    }\n    annotateSegment(text, grounding, support, index) {\n        const start = support.segment.startIndex ?? 0;\n        const end = support.segment.endIndex;\n        const textBefore = text.substring(0, start);\n        const textSegment = text.substring(start, end);\n        const textAfter = text.substring(end);\n        const textPrefix = this.segmentPrefix(grounding, support, index) ?? \"\";\n        const textSuffix = this.segmentSuffix(grounding, support, index) ?? \"\";\n        return `${textBefore}${textPrefix}${textSegment}${textSuffix}${textAfter}`;\n    }\n    annotateTextSegments(text, grounding) {\n        // Go through each support info in reverse, since the segment info\n        // is sorted, and we won't need to adjust string indexes this way.\n        let ret = text;\n        for (let co = grounding.supports.length - 1; co >= 0; co -= 1) {\n            const support = grounding.supports[co];\n            ret = this.annotateSegment(ret, grounding, support, co);\n        }\n        return ret;\n    }\n    /**\n     * Google requires us to\n     * \"Display the Search Suggestion exactly as provided without any modifications\"\n     * So this will typically be called from the textSuffix() method to get\n     * a string that renders HTML.\n     * See https://ai.google.dev/gemini-api/docs/grounding/search-suggestions\n     * @param grounding\n     */\n    searchSuggestion(grounding) {\n        return grounding?.metadata?.searchEntryPoint?.renderedContent ?? \"\";\n    }\n    annotateText(text, grounding) {\n        const prefix = this.textPrefix(text, grounding) ?? \"\";\n        const suffix = this.textSuffix(text, grounding) ?? \"\";\n        const body = this.annotateTextSegments(text, grounding);\n        return `${prefix}${body}${suffix}`;\n    }\n    async parseResult(generations, _callbacks) {\n        const text = this.generationsToString(generations);\n        const grounding = this.generationsToGroundingInfo(generations);\n        if (!grounding) {\n            return text;\n        }\n        return this.annotateText(text, grounding);\n    }\n}\nexports.BaseGoogleSearchOutputParser = BaseGoogleSearchOutputParser;\nclass SimpleGoogleSearchOutputParser extends BaseGoogleSearchOutputParser {\n    segmentPrefix(_grounding, _support, _index) {\n        return undefined;\n    }\n    segmentSuffix(_grounding, support, _index) {\n        const indices = support.groundingChunkIndices.map((i) => i + 1);\n        return ` [${indices.join(\", \")}]`;\n    }\n    textPrefix(_text, _grounding) {\n        return \"Google Says:\\n\";\n    }\n    chunkToString(chunk, index) {\n        const info = chunk.retrievedContext ?? chunk.web;\n        return `${index + 1}. ${info.title} - ${info.uri}`;\n    }\n    textSuffix(_text, grounding) {\n        let ret = \"\\n\";\n        const chunks = grounding?.metadata?.groundingChunks ?? [];\n        chunks.forEach((chunk, index) => {\n            ret = `${ret}${this.chunkToString(chunk, index)}\\n`;\n        });\n        return ret;\n    }\n}\nexports.SimpleGoogleSearchOutputParser = SimpleGoogleSearchOutputParser;\nclass MarkdownGoogleSearchOutputParser extends BaseGoogleSearchOutputParser {\n    segmentPrefix(_grounding, _support, _index) {\n        return undefined;\n    }\n    chunkLink(grounding, index) {\n        const chunk = grounding.metadata.groundingChunks[index];\n        const url = chunk.retrievedContext?.uri ?? chunk.web?.uri;\n        const num = index + 1;\n        return `[[${num}](${url})]`;\n    }\n    segmentSuffix(grounding, support, _index) {\n        let ret = \"\";\n        support.groundingChunkIndices.forEach((chunkIndex) => {\n            const link = this.chunkLink(grounding, chunkIndex);\n            ret = `${ret}${link}`;\n        });\n        return ret;\n    }\n    textPrefix(_text, _grounding) {\n        return undefined;\n    }\n    chunkSuffixLink(chunk, index) {\n        const num = index + 1;\n        const info = chunk.retrievedContext ?? chunk.web;\n        const url = info.uri;\n        const site = info.title;\n        return `${num}. [${site}](${url})`;\n    }\n    textSuffix(_text, grounding) {\n        let ret = \"\\n**Search Sources**\\n\";\n        const chunks = grounding.metadata.groundingChunks;\n        chunks.forEach((chunk, index) => {\n            ret = `${ret}${this.chunkSuffixLink(chunk, index)}\\n`;\n        });\n        const search = this.searchSuggestion(grounding);\n        ret = `${ret}\\n${search}`;\n        return ret;\n    }\n}\nexports.MarkdownGoogleSearchOutputParser = MarkdownGoogleSearchOutputParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/output_parsers.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/types-anthropic.cjs":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/types-anthropic.cjs ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdHlwZXMtYW50aHJvcGljLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdHlwZXMtYW50aHJvcGljLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/types-anthropic.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/types.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/types.cjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GeminiToolAttributes = exports.GeminiSearchToolAttributes = exports.GoogleAISafetyMethod = exports.GoogleAISafetyThreshold = exports.GoogleAISafetyCategory = void 0;\n__exportStar(__webpack_require__(/*! ./types-anthropic.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/types-anthropic.cjs\"), exports);\nexports.GoogleAISafetyCategory = {\n    Harassment: \"HARM_CATEGORY_HARASSMENT\",\n    HARASSMENT: \"HARM_CATEGORY_HARASSMENT\",\n    HARM_CATEGORY_HARASSMENT: \"HARM_CATEGORY_HARASSMENT\",\n    HateSpeech: \"HARM_CATEGORY_HATE_SPEECH\",\n    HATE_SPEECH: \"HARM_CATEGORY_HATE_SPEECH\",\n    HARM_CATEGORY_HATE_SPEECH: \"HARM_CATEGORY_HATE_SPEECH\",\n    SexuallyExplicit: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    SEXUALLY_EXPLICIT: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    HARM_CATEGORY_SEXUALLY_EXPLICIT: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    Dangerous: \"HARM_CATEGORY_DANGEROUS\",\n    DANGEROUS: \"HARM_CATEGORY_DANGEROUS\",\n    HARM_CATEGORY_DANGEROUS: \"HARM_CATEGORY_DANGEROUS\",\n    CivicIntegrity: \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n    CIVIC_INTEGRITY: \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n    HARM_CATEGORY_CIVIC_INTEGRITY: \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n};\nexports.GoogleAISafetyThreshold = {\n    None: \"BLOCK_NONE\",\n    NONE: \"BLOCK_NONE\",\n    BLOCK_NONE: \"BLOCK_NONE\",\n    Few: \"BLOCK_ONLY_HIGH\",\n    FEW: \"BLOCK_ONLY_HIGH\",\n    BLOCK_ONLY_HIGH: \"BLOCK_ONLY_HIGH\",\n    Some: \"BLOCK_MEDIUM_AND_ABOVE\",\n    SOME: \"BLOCK_MEDIUM_AND_ABOVE\",\n    BLOCK_MEDIUM_AND_ABOVE: \"BLOCK_MEDIUM_AND_ABOVE\",\n    Most: \"BLOCK_LOW_AND_ABOVE\",\n    MOST: \"BLOCK_LOW_AND_ABOVE\",\n    BLOCK_LOW_AND_ABOVE: \"BLOCK_LOW_AND_ABOVE\",\n    Off: \"OFF\",\n    OFF: \"OFF\",\n    BLOCK_OFF: \"OFF\",\n};\nexports.GoogleAISafetyMethod = {\n    Severity: \"SEVERITY\",\n    Probability: \"PROBABILITY\",\n};\nexports.GeminiSearchToolAttributes = [\n    \"googleSearchRetrieval\",\n    \"googleSearch\",\n];\nexports.GeminiToolAttributes = [\n    \"functionDeclaration\",\n    \"retrieval\",\n    ...exports.GeminiSearchToolAttributes,\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdHlwZXMuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLGtDQUFrQyxHQUFHLDRCQUE0QixHQUFHLCtCQUErQixHQUFHLDhCQUE4QjtBQUNuSyxhQUFhLG1CQUFPLENBQUMscUdBQXVCO0FBQzVDLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vZGlzdC90eXBlcy5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VtaW5pVG9vbEF0dHJpYnV0ZXMgPSBleHBvcnRzLkdlbWluaVNlYXJjaFRvb2xBdHRyaWJ1dGVzID0gZXhwb3J0cy5Hb29nbGVBSVNhZmV0eU1ldGhvZCA9IGV4cG9ydHMuR29vZ2xlQUlTYWZldHlUaHJlc2hvbGQgPSBleHBvcnRzLkdvb2dsZUFJU2FmZXR5Q2F0ZWdvcnkgPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXMtYW50aHJvcGljLmNqc1wiKSwgZXhwb3J0cyk7XG5leHBvcnRzLkdvb2dsZUFJU2FmZXR5Q2F0ZWdvcnkgPSB7XG4gICAgSGFyYXNzbWVudDogXCJIQVJNX0NBVEVHT1JZX0hBUkFTU01FTlRcIixcbiAgICBIQVJBU1NNRU5UOiBcIkhBUk1fQ0FURUdPUllfSEFSQVNTTUVOVFwiLFxuICAgIEhBUk1fQ0FURUdPUllfSEFSQVNTTUVOVDogXCJIQVJNX0NBVEVHT1JZX0hBUkFTU01FTlRcIixcbiAgICBIYXRlU3BlZWNoOiBcIkhBUk1fQ0FURUdPUllfSEFURV9TUEVFQ0hcIixcbiAgICBIQVRFX1NQRUVDSDogXCJIQVJNX0NBVEVHT1JZX0hBVEVfU1BFRUNIXCIsXG4gICAgSEFSTV9DQVRFR09SWV9IQVRFX1NQRUVDSDogXCJIQVJNX0NBVEVHT1JZX0hBVEVfU1BFRUNIXCIsXG4gICAgU2V4dWFsbHlFeHBsaWNpdDogXCJIQVJNX0NBVEVHT1JZX1NFWFVBTExZX0VYUExJQ0lUXCIsXG4gICAgU0VYVUFMTFlfRVhQTElDSVQ6IFwiSEFSTV9DQVRFR09SWV9TRVhVQUxMWV9FWFBMSUNJVFwiLFxuICAgIEhBUk1fQ0FURUdPUllfU0VYVUFMTFlfRVhQTElDSVQ6IFwiSEFSTV9DQVRFR09SWV9TRVhVQUxMWV9FWFBMSUNJVFwiLFxuICAgIERhbmdlcm91czogXCJIQVJNX0NBVEVHT1JZX0RBTkdFUk9VU1wiLFxuICAgIERBTkdFUk9VUzogXCJIQVJNX0NBVEVHT1JZX0RBTkdFUk9VU1wiLFxuICAgIEhBUk1fQ0FURUdPUllfREFOR0VST1VTOiBcIkhBUk1fQ0FURUdPUllfREFOR0VST1VTXCIsXG4gICAgQ2l2aWNJbnRlZ3JpdHk6IFwiSEFSTV9DQVRFR09SWV9DSVZJQ19JTlRFR1JJVFlcIixcbiAgICBDSVZJQ19JTlRFR1JJVFk6IFwiSEFSTV9DQVRFR09SWV9DSVZJQ19JTlRFR1JJVFlcIixcbiAgICBIQVJNX0NBVEVHT1JZX0NJVklDX0lOVEVHUklUWTogXCJIQVJNX0NBVEVHT1JZX0NJVklDX0lOVEVHUklUWVwiLFxufTtcbmV4cG9ydHMuR29vZ2xlQUlTYWZldHlUaHJlc2hvbGQgPSB7XG4gICAgTm9uZTogXCJCTE9DS19OT05FXCIsXG4gICAgTk9ORTogXCJCTE9DS19OT05FXCIsXG4gICAgQkxPQ0tfTk9ORTogXCJCTE9DS19OT05FXCIsXG4gICAgRmV3OiBcIkJMT0NLX09OTFlfSElHSFwiLFxuICAgIEZFVzogXCJCTE9DS19PTkxZX0hJR0hcIixcbiAgICBCTE9DS19PTkxZX0hJR0g6IFwiQkxPQ0tfT05MWV9ISUdIXCIsXG4gICAgU29tZTogXCJCTE9DS19NRURJVU1fQU5EX0FCT1ZFXCIsXG4gICAgU09NRTogXCJCTE9DS19NRURJVU1fQU5EX0FCT1ZFXCIsXG4gICAgQkxPQ0tfTUVESVVNX0FORF9BQk9WRTogXCJCTE9DS19NRURJVU1fQU5EX0FCT1ZFXCIsXG4gICAgTW9zdDogXCJCTE9DS19MT1dfQU5EX0FCT1ZFXCIsXG4gICAgTU9TVDogXCJCTE9DS19MT1dfQU5EX0FCT1ZFXCIsXG4gICAgQkxPQ0tfTE9XX0FORF9BQk9WRTogXCJCTE9DS19MT1dfQU5EX0FCT1ZFXCIsXG4gICAgT2ZmOiBcIk9GRlwiLFxuICAgIE9GRjogXCJPRkZcIixcbiAgICBCTE9DS19PRkY6IFwiT0ZGXCIsXG59O1xuZXhwb3J0cy5Hb29nbGVBSVNhZmV0eU1ldGhvZCA9IHtcbiAgICBTZXZlcml0eTogXCJTRVZFUklUWVwiLFxuICAgIFByb2JhYmlsaXR5OiBcIlBST0JBQklMSVRZXCIsXG59O1xuZXhwb3J0cy5HZW1pbmlTZWFyY2hUb29sQXR0cmlidXRlcyA9IFtcbiAgICBcImdvb2dsZVNlYXJjaFJldHJpZXZhbFwiLFxuICAgIFwiZ29vZ2xlU2VhcmNoXCIsXG5dO1xuZXhwb3J0cy5HZW1pbmlUb29sQXR0cmlidXRlcyA9IFtcbiAgICBcImZ1bmN0aW9uRGVjbGFyYXRpb25cIixcbiAgICBcInJldHJpZXZhbFwiLFxuICAgIC4uLmV4cG9ydHMuR2VtaW5pU2VhcmNoVG9vbEF0dHJpYnV0ZXMsXG5dO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/types.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/anthropic.cjs":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/anthropic.cjs ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isModelClaude = exports.validateClaudeParams = exports.getAnthropicAPI = void 0;\nconst outputs_1 = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.cjs\");\nconst messages_1 = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.cjs\");\nfunction getAnthropicAPI(config) {\n    function partToString(part) {\n        return \"text\" in part ? part.text : \"\";\n    }\n    function messageToString(message) {\n        const content = message?.content ?? [];\n        const ret = content.reduce((acc, part) => {\n            const str = partToString(part);\n            return acc + str;\n        }, \"\");\n        return ret;\n    }\n    function responseToString(response) {\n        const data = response.data;\n        switch (data?.type) {\n            case \"message\":\n                return messageToString(data);\n            default:\n                throw Error(`Unknown type: ${data?.type}`);\n        }\n    }\n    /**\n     * Normalize the AIMessageChunk.\n     * If the fields are just a string - use that as content.\n     * If the content is an array of just text fields, turn them into a string.\n     * @param fields\n     */\n    function newAIMessageChunk(fields) {\n        if (typeof fields === \"string\") {\n            return new messages_1.AIMessageChunk(fields);\n        }\n        const ret = {\n            ...fields,\n        };\n        if (Array.isArray(fields?.content)) {\n            let str = \"\";\n            fields.content.forEach((val) => {\n                if (str !== undefined && val.type === \"text\") {\n                    str = `${str}${val.text}`;\n                }\n                else {\n                    str = undefined;\n                }\n            });\n            if (str) {\n                ret.content = str;\n            }\n        }\n        return new messages_1.AIMessageChunk(ret);\n    }\n    function textContentToMessageFields(textContent) {\n        return {\n            content: [textContent],\n        };\n    }\n    function toolUseContentToMessageFields(toolUseContent) {\n        const tool = {\n            id: toolUseContent.id,\n            name: toolUseContent.name,\n            type: \"tool_call\",\n            args: toolUseContent.input,\n        };\n        return {\n            content: [],\n            tool_calls: [tool],\n        };\n    }\n    function anthropicContentToMessageFields(anthropicContent) {\n        const type = anthropicContent?.type;\n        switch (type) {\n            case \"text\":\n                return textContentToMessageFields(anthropicContent);\n            case \"tool_use\":\n                return toolUseContentToMessageFields(anthropicContent);\n            default:\n                return undefined;\n        }\n    }\n    function contentToMessage(anthropicContent) {\n        const complexContent = [];\n        const toolCalls = [];\n        anthropicContent.forEach((ac) => {\n            const messageFields = anthropicContentToMessageFields(ac);\n            if (messageFields?.content) {\n                complexContent.push(...messageFields.content);\n            }\n            if (messageFields?.tool_calls) {\n                toolCalls.push(...messageFields.tool_calls);\n            }\n        });\n        const ret = {\n            content: complexContent,\n            tool_calls: toolCalls,\n        };\n        return newAIMessageChunk(ret);\n    }\n    function messageToGenerationInfo(message) {\n        const usage = message?.usage;\n        const usageMetadata = {\n            input_tokens: usage?.input_tokens ?? 0,\n            output_tokens: usage?.output_tokens ?? 0,\n            total_tokens: (usage?.input_tokens ?? 0) + (usage?.output_tokens ?? 0),\n        };\n        return {\n            usage_metadata: usageMetadata,\n            finish_reason: message.stop_reason,\n        };\n    }\n    function messageToChatGeneration(responseMessage) {\n        const content = responseMessage?.content ?? [];\n        const text = messageToString(responseMessage);\n        const message = contentToMessage(content);\n        const generationInfo = messageToGenerationInfo(responseMessage);\n        return new outputs_1.ChatGenerationChunk({\n            text,\n            message,\n            generationInfo,\n        });\n    }\n    function messageStartToChatGeneration(event) {\n        const responseMessage = event.message;\n        return messageToChatGeneration(responseMessage);\n    }\n    function messageDeltaToChatGeneration(event) {\n        const responseMessage = event.delta;\n        return messageToChatGeneration(responseMessage);\n    }\n    function contentBlockStartTextToChatGeneration(event) {\n        const content = event.content_block;\n        const message = contentToMessage([content]);\n        if (!message) {\n            return null;\n        }\n        const text = \"text\" in content ? content.text : \"\";\n        return new outputs_1.ChatGenerationChunk({\n            message,\n            text,\n        });\n    }\n    function contentBlockStartToolUseToChatGeneration(event) {\n        const contentBlock = event.content_block;\n        const text = \"\";\n        const toolChunk = {\n            type: \"tool_call_chunk\",\n            index: event.index,\n            name: contentBlock.name,\n            id: contentBlock.id,\n        };\n        if (typeof contentBlock.input === \"object\" &&\n            Object.keys(contentBlock.input).length > 0) {\n            toolChunk.args = JSON.stringify(contentBlock.input);\n        }\n        const toolChunks = [toolChunk];\n        const content = [\n            {\n                index: event.index,\n                ...contentBlock,\n            },\n        ];\n        const messageFields = {\n            content,\n            tool_call_chunks: toolChunks,\n        };\n        const message = newAIMessageChunk(messageFields);\n        return new outputs_1.ChatGenerationChunk({\n            message,\n            text,\n        });\n    }\n    function contentBlockStartToChatGeneration(event) {\n        switch (event.content_block.type) {\n            case \"text\":\n                return contentBlockStartTextToChatGeneration(event);\n            case \"tool_use\":\n                return contentBlockStartToolUseToChatGeneration(event);\n            default:\n                console.warn(`Unexpected start content_block type: ${JSON.stringify(event)}`);\n                return null;\n        }\n    }\n    function contentBlockDeltaTextToChatGeneration(event) {\n        const delta = event.delta;\n        const text = delta?.text;\n        const message = newAIMessageChunk(text);\n        return new outputs_1.ChatGenerationChunk({\n            message,\n            text,\n        });\n    }\n    function contentBlockDeltaInputJsonDeltaToChatGeneration(event) {\n        const delta = event.delta;\n        const text = \"\";\n        const toolChunks = [\n            {\n                index: event.index,\n                args: delta.partial_json,\n            },\n        ];\n        const content = [\n            {\n                index: event.index,\n                ...delta,\n            },\n        ];\n        const messageFields = {\n            content,\n            tool_call_chunks: toolChunks,\n        };\n        const message = newAIMessageChunk(messageFields);\n        return new outputs_1.ChatGenerationChunk({\n            message,\n            text,\n        });\n    }\n    function contentBlockDeltaToChatGeneration(event) {\n        switch (event.delta.type) {\n            case \"text_delta\":\n                return contentBlockDeltaTextToChatGeneration(event);\n            case \"input_json_delta\":\n                return contentBlockDeltaInputJsonDeltaToChatGeneration(event);\n            default:\n                console.warn(`Unexpected delta content_block type: ${JSON.stringify(event)}`);\n                return null;\n        }\n    }\n    function responseToChatGeneration(response) {\n        const data = response.data;\n        switch (data.type) {\n            case \"message\":\n                return messageToChatGeneration(data);\n            case \"message_start\":\n                return messageStartToChatGeneration(data);\n            case \"message_delta\":\n                return messageDeltaToChatGeneration(data);\n            case \"content_block_start\":\n                return contentBlockStartToChatGeneration(data);\n            case \"content_block_delta\":\n                return contentBlockDeltaToChatGeneration(data);\n            case \"ping\":\n            case \"message_stop\":\n            case \"content_block_stop\":\n                // These are ignorable\n                return null;\n            case \"error\":\n                throw new Error(`Error while streaming results: ${JSON.stringify(data)}`);\n            default:\n                // We don't know what type this is, but Anthropic may have added\n                // new ones without telling us. Don't error, but don't use them.\n                console.warn(\"Unknown data for responseToChatGeneration\", data);\n                // throw new Error(`Unknown response type: ${data.type}`);\n                return null;\n        }\n    }\n    function chunkToString(chunk) {\n        if (chunk === null) {\n            return \"\";\n        }\n        else if (typeof chunk.content === \"string\") {\n            return chunk.content;\n        }\n        else if (chunk.content.length === 0) {\n            return \"\";\n        }\n        else if (chunk.content[0].type === \"text\") {\n            return chunk.content[0].text;\n        }\n        else {\n            throw new Error(`Unexpected chunk: ${chunk}`);\n        }\n    }\n    function responseToBaseMessage(response) {\n        const data = response.data;\n        const content = data?.content ?? [];\n        return contentToMessage(content);\n    }\n    function responseToChatResult(response) {\n        const message = response.data;\n        const generations = [];\n        const gen = responseToChatGeneration(response);\n        if (gen) {\n            generations.push(gen);\n        }\n        const llmOutput = messageToGenerationInfo(message);\n        return {\n            generations,\n            llmOutput,\n        };\n    }\n    function formatAnthropicVersion() {\n        return config?.version ?? \"vertex-2023-10-16\";\n    }\n    function textContentToAnthropicContent(content) {\n        return content;\n    }\n    function extractMimeType(str) {\n        if (str.startsWith(\"data:\")) {\n            return {\n                media_type: str.split(\":\")[1].split(\";\")[0],\n                data: str.split(\",\")[1],\n            };\n        }\n        return null;\n    }\n    function imageContentToAnthropicContent(content) {\n        const dataUrl = content.image_url;\n        const url = typeof dataUrl === \"string\" ? dataUrl : dataUrl?.url;\n        const urlInfo = extractMimeType(url);\n        if (!urlInfo) {\n            return undefined;\n        }\n        return {\n            type: \"image\",\n            source: {\n                type: \"base64\",\n                ...urlInfo,\n            },\n        };\n    }\n    function contentComplexToAnthropicContent(content) {\n        const type = content?.type;\n        switch (type) {\n            case \"text\":\n                return textContentToAnthropicContent(content);\n            case \"image_url\":\n                return imageContentToAnthropicContent(content);\n            default:\n                console.warn(`Unexpected content type: ${type}`);\n                return undefined;\n        }\n    }\n    function contentToAnthropicContent(content) {\n        const ret = [];\n        const ca = typeof content === \"string\" ? [{ type: \"text\", text: content }] : content;\n        ca.forEach((complex) => {\n            const ac = contentComplexToAnthropicContent(complex);\n            if (ac) {\n                ret.push(ac);\n            }\n        });\n        return ret;\n    }\n    function baseRoleToAnthropicMessage(base, role) {\n        const content = contentToAnthropicContent(base.content);\n        return {\n            role,\n            content,\n        };\n    }\n    function toolMessageToAnthropicMessage(base) {\n        const role = \"user\";\n        const toolUseId = base.tool_call_id;\n        const toolContent = contentToAnthropicContent(base.content);\n        const content = [\n            {\n                type: \"tool_result\",\n                tool_use_id: toolUseId,\n                content: toolContent,\n            },\n        ];\n        return {\n            role,\n            content,\n        };\n    }\n    function baseToAnthropicMessage(base) {\n        const type = base._getType();\n        switch (type) {\n            case \"human\":\n                return baseRoleToAnthropicMessage(base, \"user\");\n            case \"ai\":\n                return baseRoleToAnthropicMessage(base, \"assistant\");\n            case \"tool\":\n                return toolMessageToAnthropicMessage(base);\n            default:\n                return undefined;\n        }\n    }\n    function formatMessages(input) {\n        const ret = [];\n        input.forEach((baseMessage) => {\n            const anthropicMessage = baseToAnthropicMessage(baseMessage);\n            if (anthropicMessage) {\n                ret.push(anthropicMessage);\n            }\n        });\n        return ret;\n    }\n    function formatSettings(parameters) {\n        const ret = {\n            stream: parameters?.streaming ?? false,\n            max_tokens: parameters?.maxOutputTokens ?? 8192,\n        };\n        if (parameters.topP) {\n            ret.top_p = parameters.topP;\n        }\n        if (parameters.topK) {\n            ret.top_k = parameters.topK;\n        }\n        if (parameters.temperature) {\n            ret.temperature = parameters.temperature;\n        }\n        if (parameters.stopSequences) {\n            ret.stop_sequences = parameters.stopSequences;\n        }\n        return ret;\n    }\n    function contentComplexArrayToText(contentArray) {\n        let ret = \"\";\n        contentArray.forEach((content) => {\n            const contentType = content?.type;\n            if (contentType === \"text\") {\n                const textContent = content;\n                ret = `${ret}\\n${textContent.text}`;\n            }\n        });\n        return ret;\n    }\n    function formatSystem(input) {\n        let ret = \"\";\n        input.forEach((message) => {\n            if (message._getType() === \"system\") {\n                const content = message?.content;\n                const contentString = typeof content === \"string\"\n                    ? content\n                    : contentComplexArrayToText(content);\n                ret = `${ret}\\n${contentString}`;\n            }\n        });\n        return ret;\n    }\n    function formatGeminiTool(tool) {\n        if (Object.hasOwn(tool, \"functionDeclarations\")) {\n            const funcs = tool?.functionDeclarations ?? [];\n            return funcs.map((func) => {\n                const inputSchema = func.parameters;\n                return {\n                    // type: \"tool\",  // This may only be valid for models 20241022+\n                    name: func.name,\n                    description: func.description,\n                    input_schema: inputSchema,\n                };\n            });\n        }\n        else {\n            console.warn(`Unable to format GeminiTool: ${JSON.stringify(tool, null, 1)}`);\n            return [];\n        }\n    }\n    function formatTool(tool) {\n        if (Object.hasOwn(tool, \"name\")) {\n            return [tool];\n        }\n        else {\n            return formatGeminiTool(tool);\n        }\n    }\n    function formatTools(parameters) {\n        const tools = parameters?.tools ?? [];\n        const ret = [];\n        tools.forEach((tool) => {\n            const anthropicTools = formatTool(tool);\n            anthropicTools.forEach((anthropicTool) => {\n                if (anthropicTool) {\n                    ret.push(anthropicTool);\n                }\n            });\n        });\n        return ret;\n    }\n    function formatToolChoice(parameters) {\n        const choice = parameters?.tool_choice;\n        if (!choice) {\n            return undefined;\n        }\n        else if (typeof choice === \"object\") {\n            return choice;\n        }\n        else {\n            switch (choice) {\n                case \"any\":\n                case \"auto\":\n                    return {\n                        type: choice,\n                    };\n                case \"none\":\n                    return undefined;\n                default:\n                    return {\n                        type: \"tool\",\n                        name: choice,\n                    };\n            }\n        }\n    }\n    async function formatData(input, parameters) {\n        const typedInput = input;\n        const anthropicVersion = formatAnthropicVersion();\n        const messages = formatMessages(typedInput);\n        const settings = formatSettings(parameters);\n        const system = formatSystem(typedInput);\n        const tools = formatTools(parameters);\n        const toolChoice = formatToolChoice(parameters);\n        const ret = {\n            anthropic_version: anthropicVersion,\n            messages,\n            ...settings,\n        };\n        if (tools && tools.length && parameters?.tool_choice !== \"none\") {\n            ret.tools = tools;\n        }\n        if (toolChoice) {\n            ret.tool_choice = toolChoice;\n        }\n        if (system?.length) {\n            ret.system = system;\n        }\n        return ret;\n    }\n    return {\n        responseToString,\n        responseToChatGeneration,\n        chunkToString,\n        responseToBaseMessage,\n        responseToChatResult,\n        formatData,\n    };\n}\nexports.getAnthropicAPI = getAnthropicAPI;\nfunction validateClaudeParams(_params) {\n    // FIXME - validate the parameters\n}\nexports.validateClaudeParams = validateClaudeParams;\nfunction isModelClaude(modelName) {\n    return modelName.toLowerCase().startsWith(\"claude\");\n}\nexports.isModelClaude = isModelClaude;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/anthropic.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/common.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/common.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.copyAndValidateModelParamsInto = exports.validateModelParams = exports.modelToPublisher = exports.modelToFamily = exports.copyAIModelParamsInto = exports.convertToGeminiTools = exports.copyAIModelParams = void 0;\nconst base_1 = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.cjs\");\nconst function_calling_1 = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.cjs\");\nconst gemini_js_1 = __webpack_require__(/*! ./gemini.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/gemini.cjs\");\nconst types_js_1 = __webpack_require__(/*! ../types.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/types.cjs\");\nconst zod_to_gemini_parameters_js_1 = __webpack_require__(/*! ./zod_to_gemini_parameters.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs\");\nconst anthropic_js_1 = __webpack_require__(/*! ./anthropic.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/anthropic.cjs\");\nfunction copyAIModelParams(params, options) {\n    return copyAIModelParamsInto(params, options, {});\n}\nexports.copyAIModelParams = copyAIModelParams;\nfunction processToolChoice(toolChoice, allowedFunctionNames) {\n    if (!toolChoice) {\n        if (allowedFunctionNames) {\n            // Allowed func names is passed, return 'any' so it forces the model to use a tool.\n            return {\n                tool_choice: \"any\",\n                allowed_function_names: allowedFunctionNames,\n            };\n        }\n        return undefined;\n    }\n    if (toolChoice === \"any\" || toolChoice === \"auto\" || toolChoice === \"none\") {\n        return {\n            tool_choice: toolChoice,\n            allowed_function_names: allowedFunctionNames,\n        };\n    }\n    if (typeof toolChoice === \"string\") {\n        // String representing the function name.\n        // Return any to force the model to predict the specified function call.\n        return {\n            tool_choice: \"any\",\n            allowed_function_names: [...(allowedFunctionNames ?? []), toolChoice],\n        };\n    }\n    throw new Error(\"Object inputs for tool_choice not supported.\");\n}\nfunction isGeminiTool(tool) {\n    for (const toolAttribute of types_js_1.GeminiToolAttributes) {\n        if (toolAttribute in tool) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isGeminiNonFunctionTool(tool) {\n    return isGeminiTool(tool) && !(\"functionDeclaration\" in tool);\n}\nfunction convertToGeminiTools(tools) {\n    const geminiTools = [];\n    let functionDeclarationsIndex = -1;\n    tools.forEach((tool) => {\n        if (isGeminiNonFunctionTool(tool)) {\n            geminiTools.push(tool);\n        }\n        else {\n            if (functionDeclarationsIndex === -1) {\n                geminiTools.push({\n                    functionDeclarations: [],\n                });\n                functionDeclarationsIndex = geminiTools.length - 1;\n            }\n            if (\"functionDeclarations\" in tool &&\n                Array.isArray(tool.functionDeclarations)) {\n                const funcs = tool.functionDeclarations;\n                geminiTools[functionDeclarationsIndex].functionDeclarations.push(...funcs);\n            }\n            else if ((0, function_calling_1.isLangChainTool)(tool)) {\n                const jsonSchema = (0, zod_to_gemini_parameters_js_1.zodToGeminiParameters)(tool.schema);\n                geminiTools[functionDeclarationsIndex].functionDeclarations.push({\n                    name: tool.name,\n                    description: tool.description ?? `A function available to call.`,\n                    parameters: jsonSchema,\n                });\n            }\n            else if ((0, base_1.isOpenAITool)(tool)) {\n                geminiTools[functionDeclarationsIndex].functionDeclarations.push({\n                    name: tool.function.name,\n                    description: tool.function.description ?? `A function available to call.`,\n                    parameters: (0, zod_to_gemini_parameters_js_1.jsonSchemaToGeminiParameters)(tool.function.parameters),\n                });\n            }\n            else {\n                throw new Error(`Received invalid tool: ${JSON.stringify(tool)}`);\n            }\n        }\n    });\n    return geminiTools;\n}\nexports.convertToGeminiTools = convertToGeminiTools;\nfunction copyAIModelParamsInto(params, options, target) {\n    const ret = target || {};\n    const model = options?.model ?? params?.model ?? target.model;\n    ret.modelName =\n        model ?? options?.modelName ?? params?.modelName ?? target.modelName;\n    ret.model = model;\n    ret.temperature =\n        options?.temperature ?? params?.temperature ?? target.temperature;\n    ret.maxOutputTokens =\n        options?.maxOutputTokens ??\n            params?.maxOutputTokens ??\n            target.maxOutputTokens;\n    ret.topP = options?.topP ?? params?.topP ?? target.topP;\n    ret.topK = options?.topK ?? params?.topK ?? target.topK;\n    ret.presencePenalty =\n        options?.presencePenalty ??\n            params?.presencePenalty ??\n            target.presencePenalty;\n    ret.frequencyPenalty =\n        options?.frequencyPenalty ??\n            params?.frequencyPenalty ??\n            target.frequencyPenalty;\n    ret.stopSequences =\n        options?.stopSequences ?? params?.stopSequences ?? target.stopSequences;\n    ret.safetySettings =\n        options?.safetySettings ?? params?.safetySettings ?? target.safetySettings;\n    ret.logprobs = options?.logprobs ?? params?.logprobs ?? target.logprobs;\n    ret.topLogprobs =\n        options?.topLogprobs ?? params?.topLogprobs ?? target.topLogprobs;\n    ret.convertSystemMessageToHumanContent =\n        options?.convertSystemMessageToHumanContent ??\n            params?.convertSystemMessageToHumanContent ??\n            target?.convertSystemMessageToHumanContent;\n    ret.responseMimeType =\n        options?.responseMimeType ??\n            params?.responseMimeType ??\n            target?.responseMimeType;\n    ret.streaming = options?.streaming ?? params?.streaming ?? target?.streaming;\n    const toolChoice = processToolChoice(options?.tool_choice, options?.allowed_function_names);\n    if (toolChoice) {\n        ret.tool_choice = toolChoice.tool_choice;\n        ret.allowed_function_names = toolChoice.allowed_function_names;\n    }\n    const tools = options?.tools;\n    if (tools) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ret.tools = convertToGeminiTools(tools);\n    }\n    return ret;\n}\nexports.copyAIModelParamsInto = copyAIModelParamsInto;\nfunction modelToFamily(modelName) {\n    if (!modelName) {\n        return null;\n    }\n    else if ((0, gemini_js_1.isModelGemini)(modelName)) {\n        return \"gemini\";\n    }\n    else if ((0, anthropic_js_1.isModelClaude)(modelName)) {\n        return \"claude\";\n    }\n    else {\n        return null;\n    }\n}\nexports.modelToFamily = modelToFamily;\nfunction modelToPublisher(modelName) {\n    const family = modelToFamily(modelName);\n    switch (family) {\n        case \"gemini\":\n        case \"palm\":\n            return \"google\";\n        case \"claude\":\n            return \"anthropic\";\n        default:\n            return \"unknown\";\n    }\n}\nexports.modelToPublisher = modelToPublisher;\nfunction validateModelParams(params) {\n    const testParams = params ?? {};\n    const model = testParams.model ?? testParams.modelName;\n    switch (modelToFamily(model)) {\n        case \"gemini\":\n            return (0, gemini_js_1.validateGeminiParams)(testParams);\n        case \"claude\":\n            return (0, anthropic_js_1.validateClaudeParams)(testParams);\n        default:\n            throw new Error(`Unable to verify model params: ${JSON.stringify(params)}`);\n    }\n}\nexports.validateModelParams = validateModelParams;\nfunction copyAndValidateModelParamsInto(params, target) {\n    copyAIModelParamsInto(params, undefined, target);\n    validateModelParams(target);\n    return target;\n}\nexports.copyAndValidateModelParamsInto = copyAndValidateModelParamsInto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/common.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/failed_handler.cjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/failed_handler.cjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ensureParams = exports.failedAttemptHandler = void 0;\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    408,\n    409, // Conflict\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction failedAttemptHandler(error) {\n    const status = error?.response?.status ?? 0;\n    if (status === 0) {\n        // What is this?\n        console.error(\"failedAttemptHandler\", error);\n        throw error;\n    }\n    // What errors shouldn't be retried?\n    if (STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n}\nexports.failedAttemptHandler = failedAttemptHandler;\nfunction ensureParams(params) {\n    const base = params ?? {};\n    return {\n        onFailedAttempt: failedAttemptHandler,\n        ...base,\n    };\n}\nexports.ensureParams = ensureParams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdXRpbHMvZmFpbGVkX2hhbmRsZXIuY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLDRCQUE0QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdXRpbHMvZmFpbGVkX2hhbmRsZXIuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbnN1cmVQYXJhbXMgPSBleHBvcnRzLmZhaWxlZEF0dGVtcHRIYW5kbGVyID0gdm9pZCAwO1xuY29uc3QgU1RBVFVTX05PX1JFVFJZID0gW1xuICAgIDQwMCxcbiAgICA0MDEsXG4gICAgNDAyLFxuICAgIDQwMyxcbiAgICA0MDQsXG4gICAgNDA1LFxuICAgIDQwNixcbiAgICA0MDcsXG4gICAgNDA4LFxuICAgIDQwOSwgLy8gQ29uZmxpY3Rcbl07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZmFpbGVkQXR0ZW1wdEhhbmRsZXIoZXJyb3IpIHtcbiAgICBjb25zdCBzdGF0dXMgPSBlcnJvcj8ucmVzcG9uc2U/LnN0YXR1cyA/PyAwO1xuICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgLy8gV2hhdCBpcyB0aGlzP1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiZmFpbGVkQXR0ZW1wdEhhbmRsZXJcIiwgZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgLy8gV2hhdCBlcnJvcnMgc2hvdWxkbid0IGJlIHJldHJpZWQ/XG4gICAgaWYgKFNUQVRVU19OT19SRVRSWS5pbmNsdWRlcygrc3RhdHVzKSkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5leHBvcnRzLmZhaWxlZEF0dGVtcHRIYW5kbGVyID0gZmFpbGVkQXR0ZW1wdEhhbmRsZXI7XG5mdW5jdGlvbiBlbnN1cmVQYXJhbXMocGFyYW1zKSB7XG4gICAgY29uc3QgYmFzZSA9IHBhcmFtcyA/PyB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvbkZhaWxlZEF0dGVtcHQ6IGZhaWxlZEF0dGVtcHRIYW5kbGVyLFxuICAgICAgICAuLi5iYXNlLFxuICAgIH07XG59XG5leHBvcnRzLmVuc3VyZVBhcmFtcyA9IGVuc3VyZVBhcmFtcztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/failed_handler.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/gemini.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/gemini.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isModelGemini = exports.validateGeminiParams = exports.getGeminiAPI = exports.MessageGeminiSafetyHandler = exports.DefaultGeminiSafetyHandler = void 0;\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/index.js\");\nconst messages_1 = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.cjs\");\nconst outputs_1 = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.cjs\");\nconst function_calling_1 = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.cjs\");\nconst safety_js_1 = __webpack_require__(/*! ./safety.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/safety.cjs\");\nconst types_js_1 = __webpack_require__(/*! ../types.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/types.cjs\");\nconst zod_to_gemini_parameters_js_1 = __webpack_require__(/*! ./zod_to_gemini_parameters.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs\");\nclass DefaultGeminiSafetyHandler {\n    constructor(settings) {\n        Object.defineProperty(this, \"errorFinish\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"SAFETY\", \"RECITATION\", \"OTHER\"]\n        });\n        this.errorFinish = settings?.errorFinish ?? this.errorFinish;\n    }\n    handleDataPromptFeedback(response, data) {\n        // Check to see if our prompt was blocked in the first place\n        const promptFeedback = data?.promptFeedback;\n        const blockReason = promptFeedback?.blockReason;\n        if (blockReason) {\n            throw new safety_js_1.GoogleAISafetyError(response, `Prompt blocked: ${blockReason}`);\n        }\n        return data;\n    }\n    handleDataFinishReason(response, data) {\n        const firstCandidate = data?.candidates?.[0];\n        const finishReason = firstCandidate?.finishReason;\n        if (this.errorFinish.includes(finishReason)) {\n            throw new safety_js_1.GoogleAISafetyError(response, `Finish reason: ${finishReason}`);\n        }\n        return data;\n    }\n    handleData(response, data) {\n        let ret = data;\n        ret = this.handleDataPromptFeedback(response, ret);\n        ret = this.handleDataFinishReason(response, ret);\n        return ret;\n    }\n    handle(response) {\n        let newdata;\n        if (\"nextChunk\" in response.data) {\n            // TODO: This is a stream. How to handle?\n            newdata = response.data;\n        }\n        else if (Array.isArray(response.data)) {\n            // If it is an array, try to handle every item in the array\n            try {\n                newdata = response.data.map((item) => this.handleData(response, item));\n            }\n            catch (xx) {\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (xx instanceof safety_js_1.GoogleAISafetyError) {\n                    throw new safety_js_1.GoogleAISafetyError(response, xx.message);\n                }\n                else {\n                    throw xx;\n                }\n            }\n        }\n        else {\n            const data = response.data;\n            newdata = this.handleData(response, data);\n        }\n        return {\n            ...response,\n            data: newdata,\n        };\n    }\n}\nexports.DefaultGeminiSafetyHandler = DefaultGeminiSafetyHandler;\nclass MessageGeminiSafetyHandler extends DefaultGeminiSafetyHandler {\n    constructor(settings) {\n        super(settings);\n        Object.defineProperty(this, \"msg\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"forceNewMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.msg = settings?.msg ?? this.msg;\n        this.forceNewMessage = settings?.forceNewMessage ?? this.forceNewMessage;\n    }\n    setMessage(data) {\n        const ret = data;\n        if (this.forceNewMessage ||\n            !data?.candidates?.[0]?.content?.parts?.length) {\n            ret.candidates = data.candidates ?? [];\n            ret.candidates[0] = data.candidates[0] ?? {};\n            ret.candidates[0].content = data.candidates[0].content ?? {};\n            ret.candidates[0].content = {\n                role: \"model\",\n                parts: [{ text: this.msg }],\n            };\n        }\n        return ret;\n    }\n    handleData(response, data) {\n        try {\n            return super.handleData(response, data);\n        }\n        catch (xx) {\n            return this.setMessage(data);\n        }\n    }\n}\nexports.MessageGeminiSafetyHandler = MessageGeminiSafetyHandler;\nconst extractMimeType = (str) => {\n    if (str.startsWith(\"data:\")) {\n        return {\n            mimeType: str.split(\":\")[1].split(\";\")[0],\n            data: str.split(\",\")[1],\n        };\n    }\n    return null;\n};\nfunction getGeminiAPI(config) {\n    function messageContentText(content) {\n        if (content?.text && content?.text.length > 0) {\n            return {\n                text: content.text,\n            };\n        }\n        else {\n            return null;\n        }\n    }\n    function messageContentImageUrl(content) {\n        const url = typeof content.image_url === \"string\"\n            ? content.image_url\n            : content.image_url.url;\n        if (!url) {\n            throw new Error(\"Missing Image URL\");\n        }\n        const mimeTypeAndData = extractMimeType(url);\n        if (mimeTypeAndData) {\n            return {\n                inlineData: mimeTypeAndData,\n            };\n        }\n        else {\n            // FIXME - need some way to get mime type\n            return {\n                fileData: {\n                    mimeType: \"image/png\",\n                    fileUri: url,\n                },\n            };\n        }\n    }\n    async function blobToFileData(blob) {\n        return {\n            fileData: {\n                fileUri: blob.path,\n                mimeType: blob.mimetype,\n            },\n        };\n    }\n    async function fileUriContentToBlob(uri) {\n        return config?.mediaManager?.getMediaBlob(uri);\n    }\n    async function messageContentMedia(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    content) {\n        if (\"mimeType\" in content && \"data\" in content) {\n            return {\n                inlineData: {\n                    mimeType: content.mimeType,\n                    data: content.data,\n                },\n            };\n        }\n        else if (\"mimeType\" in content && \"fileUri\" in content) {\n            return {\n                fileData: {\n                    mimeType: content.mimeType,\n                    fileUri: content.fileUri,\n                },\n            };\n        }\n        else {\n            const uri = content.fileUri;\n            const blob = await fileUriContentToBlob(uri);\n            if (blob) {\n                return await blobToFileData(blob);\n            }\n        }\n        throw new Error(`Invalid media content: ${JSON.stringify(content, null, 1)}`);\n    }\n    async function messageContentComplexToPart(content) {\n        switch (content.type) {\n            case \"text\":\n                if (\"text\" in content) {\n                    return messageContentText(content);\n                }\n                break;\n            case \"image_url\":\n                if (\"image_url\" in content) {\n                    // Type guard for MessageContentImageUrl\n                    return messageContentImageUrl(content);\n                }\n                break;\n            case \"media\":\n                return await messageContentMedia(content);\n            default:\n                throw new Error(`Unsupported type \"${content.type}\" received while converting message to message parts: ${content}`);\n        }\n        throw new Error(`Cannot coerce \"${content.type}\" message part into a string.`);\n    }\n    async function messageContentComplexToParts(content) {\n        const contents = content.map(messageContentComplexToPart);\n        return Promise.all(contents);\n    }\n    async function messageContentToParts(content) {\n        // Convert a string to a text type MessageContent if needed\n        const messageContent = typeof content === \"string\"\n            ? [\n                {\n                    type: \"text\",\n                    text: content,\n                },\n            ]\n            : content;\n        // Get all of the parts, even those that don't correctly resolve\n        const allParts = await messageContentComplexToParts(messageContent);\n        // Remove any invalid parts\n        const parts = allParts.reduce((acc, val) => {\n            if (val) {\n                return [...acc, val];\n            }\n            else {\n                return acc;\n            }\n        }, []);\n        return parts;\n    }\n    function messageToolCallsToParts(toolCalls) {\n        if (!toolCalls || toolCalls.length === 0) {\n            return [];\n        }\n        return toolCalls.map((tool) => {\n            let args = {};\n            if (tool?.function?.arguments) {\n                const argStr = tool.function.arguments;\n                args = JSON.parse(argStr);\n            }\n            return {\n                functionCall: {\n                    name: tool.function.name,\n                    args,\n                },\n            };\n        });\n    }\n    function messageKwargsToParts(kwargs) {\n        const ret = [];\n        if (kwargs?.tool_calls) {\n            ret.push(...messageToolCallsToParts(kwargs.tool_calls));\n        }\n        return ret;\n    }\n    async function roleMessageToContent(role, message) {\n        const contentParts = await messageContentToParts(message.content);\n        let toolParts;\n        if ((0, messages_1.isAIMessage)(message) && !!message.tool_calls?.length) {\n            toolParts = message.tool_calls.map((toolCall) => ({\n                functionCall: {\n                    name: toolCall.name,\n                    args: toolCall.args,\n                },\n            }));\n        }\n        else {\n            toolParts = messageKwargsToParts(message.additional_kwargs);\n        }\n        const parts = [...contentParts, ...toolParts];\n        return [\n            {\n                role,\n                parts,\n            },\n        ];\n    }\n    async function systemMessageToContent(message) {\n        return config?.useSystemInstruction\n            ? roleMessageToContent(\"system\", message)\n            : [\n                ...(await roleMessageToContent(\"user\", message)),\n                ...(await roleMessageToContent(\"model\", new messages_1.AIMessage(\"Ok\"))),\n            ];\n    }\n    function toolMessageToContent(message, prevMessage) {\n        const contentStr = typeof message.content === \"string\"\n            ? message.content\n            : message.content.reduce((acc, content) => {\n                if (content.type === \"text\") {\n                    return acc + content.text;\n                }\n                else {\n                    return acc;\n                }\n            }, \"\");\n        // Hacky :(\n        const responseName = ((0, messages_1.isAIMessage)(prevMessage) && !!prevMessage.tool_calls?.length\n            ? prevMessage.tool_calls[0].name\n            : prevMessage.name) ?? message.tool_call_id;\n        try {\n            const content = JSON.parse(contentStr);\n            return [\n                {\n                    role: \"function\",\n                    parts: [\n                        {\n                            functionResponse: {\n                                name: responseName,\n                                response: { content },\n                            },\n                        },\n                    ],\n                },\n            ];\n        }\n        catch (_) {\n            return [\n                {\n                    role: \"function\",\n                    parts: [\n                        {\n                            functionResponse: {\n                                name: responseName,\n                                response: { content: contentStr },\n                            },\n                        },\n                    ],\n                },\n            ];\n        }\n    }\n    async function baseMessageToContent(message, prevMessage) {\n        const type = message._getType();\n        switch (type) {\n            case \"system\":\n                return systemMessageToContent(message);\n            case \"human\":\n                return roleMessageToContent(\"user\", message);\n            case \"ai\":\n                return roleMessageToContent(\"model\", message);\n            case \"tool\":\n                if (!prevMessage) {\n                    throw new Error(\"Tool messages cannot be the first message passed to the model.\");\n                }\n                return toolMessageToContent(message, prevMessage);\n            default:\n                console.log(`Unsupported message type: ${type}`);\n                return [];\n        }\n    }\n    function textPartToMessageContent(part) {\n        return {\n            type: \"text\",\n            text: part.text,\n        };\n    }\n    function inlineDataPartToMessageContent(part) {\n        return {\n            type: \"image_url\",\n            image_url: `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`,\n        };\n    }\n    function fileDataPartToMessageContent(part) {\n        return {\n            type: \"image_url\",\n            image_url: part.fileData.fileUri,\n        };\n    }\n    function partsToMessageContent(parts) {\n        return parts\n            .map((part) => {\n            if (part === undefined || part === null) {\n                return null;\n            }\n            else if (\"text\" in part) {\n                return textPartToMessageContent(part);\n            }\n            else if (\"inlineData\" in part) {\n                return inlineDataPartToMessageContent(part);\n            }\n            else if (\"fileData\" in part) {\n                return fileDataPartToMessageContent(part);\n            }\n            else {\n                return null;\n            }\n        })\n            .reduce((acc, content) => {\n            if (content) {\n                acc.push(content);\n            }\n            return acc;\n        }, []);\n    }\n    function toolRawToTool(raw) {\n        return {\n            id: raw.id,\n            type: raw.type,\n            function: {\n                name: raw.function.name,\n                arguments: JSON.stringify(raw.function.arguments),\n            },\n        };\n    }\n    function functionCallPartToToolRaw(part) {\n        return {\n            id: (0, uuid_1.v4)().replace(/-/g, \"\"),\n            type: \"function\",\n            function: {\n                name: part.functionCall.name,\n                arguments: part.functionCall.args ?? {},\n            },\n        };\n    }\n    function partsToToolsRaw(parts) {\n        return parts\n            .map((part) => {\n            if (part === undefined || part === null) {\n                return null;\n            }\n            else if (\"functionCall\" in part) {\n                return functionCallPartToToolRaw(part);\n            }\n            else {\n                return null;\n            }\n        })\n            .reduce((acc, content) => {\n            if (content) {\n                acc.push(content);\n            }\n            return acc;\n        }, []);\n    }\n    function toolsRawToTools(raws) {\n        return raws.map((raw) => toolRawToTool(raw));\n    }\n    function responseToGenerateContentResponseData(response) {\n        if (\"nextChunk\" in response.data) {\n            throw new Error(\"Cannot convert Stream to GenerateContentResponseData\");\n        }\n        else if (Array.isArray(response.data)) {\n            // Collapse the array of response data as if it was a single one\n            return response.data.reduce((acc, val) => {\n                // Add all the parts\n                // FIXME: Handle other candidates?\n                const valParts = val?.candidates?.[0]?.content?.parts ?? [];\n                acc.candidates[0].content.parts.push(...valParts);\n                // FIXME: Merge promptFeedback and safety settings\n                acc.promptFeedback = val.promptFeedback;\n                return acc;\n            });\n        }\n        else {\n            return response.data;\n        }\n    }\n    function responseToParts(response) {\n        const responseData = responseToGenerateContentResponseData(response);\n        const parts = responseData?.candidates?.[0]?.content?.parts ?? [];\n        return parts;\n    }\n    function partToText(part) {\n        return \"text\" in part ? part.text : \"\";\n    }\n    function responseToString(response) {\n        const parts = responseToParts(response);\n        const ret = parts.reduce((acc, part) => {\n            const val = partToText(part);\n            return acc + val;\n        }, \"\");\n        return ret;\n    }\n    function safeResponseTo(response, responseTo) {\n        const safetyHandler = config?.safetyHandler ?? new DefaultGeminiSafetyHandler();\n        try {\n            const safeResponse = safetyHandler.handle(response);\n            return responseTo(safeResponse);\n        }\n        catch (xx) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (xx instanceof safety_js_1.GoogleAISafetyError) {\n                const ret = responseTo(xx.response);\n                xx.reply = ret;\n            }\n            throw xx;\n        }\n    }\n    function safeResponseToString(response) {\n        return safeResponseTo(response, responseToString);\n    }\n    function logprobResultToLogprob(result) {\n        const token = result?.token;\n        const logprob = result?.logProbability;\n        const encoder = new TextEncoder();\n        const bytes = Array.from(encoder.encode(token));\n        return {\n            token,\n            logprob,\n            bytes,\n        };\n    }\n    function candidateToLogprobs(candidate) {\n        const logprobs = candidate?.logprobsResult;\n        const chosenTokens = logprobs?.chosenCandidates ?? [];\n        const topTokens = logprobs?.topCandidates ?? [];\n        const content = [];\n        for (let co = 0; co < chosenTokens.length; co += 1) {\n            const chosen = chosenTokens[co];\n            const top = topTokens[co]?.candidates ?? [];\n            const logprob = logprobResultToLogprob(chosen);\n            logprob.top_logprobs = top.map((l) => logprobResultToLogprob(l));\n            content.push(logprob);\n        }\n        return {\n            content,\n        };\n    }\n    function responseToGenerationInfo(response) {\n        if (!Array.isArray(response.data)) {\n            return {};\n        }\n        const data = response.data[0];\n        return {\n            usage_metadata: {\n                prompt_token_count: data.usageMetadata?.promptTokenCount,\n                candidates_token_count: data.usageMetadata?.candidatesTokenCount,\n                total_token_count: data.usageMetadata?.totalTokenCount,\n            },\n            safety_ratings: data.candidates[0]?.safetyRatings?.map((rating) => ({\n                category: rating.category,\n                probability: rating.probability,\n                probability_score: rating.probabilityScore,\n                severity: rating.severity,\n                severity_score: rating.severityScore,\n            })),\n            citation_metadata: data.candidates[0]?.citationMetadata,\n            grounding_metadata: data.candidates[0]?.groundingMetadata,\n            finish_reason: data.candidates[0]?.finishReason,\n            avgLogprobs: data.candidates[0]?.avgLogprobs,\n            logprobs: candidateToLogprobs(data.candidates[0]),\n        };\n    }\n    function responseToChatGeneration(response) {\n        return new outputs_1.ChatGenerationChunk({\n            text: responseToString(response),\n            message: partToMessageChunk(responseToParts(response)[0]),\n            generationInfo: responseToGenerationInfo(response),\n        });\n    }\n    function safeResponseToChatGeneration(response) {\n        return safeResponseTo(response, responseToChatGeneration);\n    }\n    function chunkToString(chunk) {\n        if (chunk === null) {\n            return \"\";\n        }\n        else if (typeof chunk.content === \"string\") {\n            return chunk.content;\n        }\n        else if (chunk.content.length === 0) {\n            return \"\";\n        }\n        else if (chunk.content[0].type === \"text\") {\n            return chunk.content[0].text;\n        }\n        else {\n            throw new Error(`Unexpected chunk: ${chunk}`);\n        }\n    }\n    function partToMessageChunk(part) {\n        const fields = partsToBaseMessageChunkFields([part]);\n        if (typeof fields.content === \"string\") {\n            return new messages_1.AIMessageChunk(fields);\n        }\n        else if (fields.content.every((item) => item.type === \"text\")) {\n            const newContent = fields.content\n                .map((item) => (\"text\" in item ? item.text : \"\"))\n                .join(\"\");\n            return new messages_1.AIMessageChunk({\n                ...fields,\n                content: newContent,\n            });\n        }\n        return new messages_1.AIMessageChunk(fields);\n    }\n    function partToChatGeneration(part) {\n        const message = partToMessageChunk(part);\n        const text = partToText(part);\n        return new outputs_1.ChatGenerationChunk({\n            text,\n            message,\n        });\n    }\n    function groundingSupportByPart(groundingSupports) {\n        const ret = [];\n        if (!groundingSupports || groundingSupports.length === 0) {\n            return [];\n        }\n        groundingSupports?.forEach((groundingSupport) => {\n            const segment = groundingSupport?.segment;\n            const partIndex = segment?.partIndex ?? 0;\n            if (ret[partIndex]) {\n                ret[partIndex].push(groundingSupport);\n            }\n            else {\n                ret[partIndex] = [groundingSupport];\n            }\n        });\n        return ret;\n    }\n    function responseToGroundedChatGenerations(response) {\n        const parts = responseToParts(response);\n        if (parts.length === 0) {\n            return [];\n        }\n        // Citation and grounding information connected to each part / ChatGeneration\n        // to make sure they are available in downstream filters.\n        const candidate = response?.data\n            ?.candidates?.[0];\n        const groundingMetadata = candidate?.groundingMetadata;\n        const citationMetadata = candidate?.citationMetadata;\n        const groundingParts = groundingSupportByPart(groundingMetadata?.groundingSupports);\n        const ret = parts.map((part, index) => {\n            const gen = partToChatGeneration(part);\n            if (!gen.generationInfo) {\n                gen.generationInfo = {};\n            }\n            if (groundingMetadata) {\n                gen.generationInfo.groundingMetadata = groundingMetadata;\n                const groundingPart = groundingParts[index];\n                if (groundingPart) {\n                    gen.generationInfo.groundingSupport = groundingPart;\n                }\n            }\n            if (citationMetadata) {\n                gen.generationInfo.citationMetadata = citationMetadata;\n            }\n            return gen;\n        });\n        return ret;\n    }\n    function responseToChatGenerations(response) {\n        let ret = responseToGroundedChatGenerations(response);\n        if (ret.length === 0) {\n            return [];\n        }\n        if (ret.every((item) => typeof item.message.content === \"string\")) {\n            const combinedContent = ret.map((item) => item.message.content).join(\"\");\n            const combinedText = ret.map((item) => item.text).join(\"\");\n            const toolCallChunks = ret[ret.length - 1]?.message.additional_kwargs?.tool_calls?.map((toolCall, i) => ({\n                name: toolCall.function.name,\n                args: toolCall.function.arguments,\n                id: toolCall.id,\n                index: i,\n                type: \"tool_call_chunk\",\n            }));\n            let usageMetadata;\n            if (\"usageMetadata\" in response.data) {\n                usageMetadata = {\n                    input_tokens: response.data.usageMetadata.promptTokenCount,\n                    output_tokens: response.data.usageMetadata\n                        .candidatesTokenCount,\n                    total_tokens: response.data.usageMetadata.totalTokenCount,\n                };\n            }\n            ret = [\n                new outputs_1.ChatGenerationChunk({\n                    message: new messages_1.AIMessageChunk({\n                        content: combinedContent,\n                        additional_kwargs: ret[ret.length - 1]?.message.additional_kwargs,\n                        tool_call_chunks: toolCallChunks,\n                        usage_metadata: usageMetadata,\n                    }),\n                    text: combinedText,\n                    generationInfo: ret[ret.length - 1].generationInfo,\n                }),\n            ];\n        }\n        // Add logprobs information to the message\n        const candidate = response?.data\n            ?.candidates?.[0];\n        const avgLogprobs = candidate?.avgLogprobs;\n        const logprobs = candidateToLogprobs(candidate);\n        if (logprobs) {\n            ret[0].message.response_metadata = {\n                ...ret[0].message.response_metadata,\n                logprobs,\n                avgLogprobs,\n            };\n        }\n        return ret;\n    }\n    function responseToBaseMessageFields(response) {\n        const parts = responseToParts(response);\n        return partsToBaseMessageChunkFields(parts);\n    }\n    function partsToBaseMessageChunkFields(parts) {\n        const fields = {\n            content: partsToMessageContent(parts),\n            tool_call_chunks: [],\n            tool_calls: [],\n            invalid_tool_calls: [],\n        };\n        const rawTools = partsToToolsRaw(parts);\n        if (rawTools.length > 0) {\n            const tools = toolsRawToTools(rawTools);\n            for (const tool of tools) {\n                fields.tool_call_chunks?.push({\n                    name: tool.function.name,\n                    args: tool.function.arguments,\n                    id: tool.id,\n                    type: \"tool_call_chunk\",\n                });\n                try {\n                    fields.tool_calls?.push({\n                        name: tool.function.name,\n                        args: JSON.parse(tool.function.arguments),\n                        id: tool.id,\n                    });\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                }\n                catch (e) {\n                    fields.invalid_tool_calls?.push({\n                        name: tool.function.name,\n                        args: tool.function.arguments,\n                        id: tool.id,\n                        error: e.message,\n                        type: \"invalid_tool_call\",\n                    });\n                }\n            }\n            fields.additional_kwargs = {\n                tool_calls: tools,\n            };\n        }\n        return fields;\n    }\n    function responseToBaseMessage(response) {\n        const fields = responseToBaseMessageFields(response);\n        return new messages_1.AIMessage(fields);\n    }\n    function safeResponseToBaseMessage(response) {\n        return safeResponseTo(response, responseToBaseMessage);\n    }\n    function responseToChatResult(response) {\n        const generations = responseToChatGenerations(response);\n        return {\n            generations,\n            llmOutput: responseToGenerationInfo(response),\n        };\n    }\n    function safeResponseToChatResult(response) {\n        return safeResponseTo(response, responseToChatResult);\n    }\n    function inputType(input) {\n        if (typeof input === \"string\") {\n            return \"MessageContent\";\n        }\n        else {\n            const firstItem = input[0];\n            if (Object.hasOwn(firstItem, \"content\")) {\n                return \"BaseMessageArray\";\n            }\n            else {\n                return \"MessageContent\";\n            }\n        }\n    }\n    async function formatMessageContents(input, _parameters) {\n        const parts = await messageContentToParts(input);\n        const contents = [\n            {\n                role: \"user\",\n                parts,\n            },\n        ];\n        return contents;\n    }\n    async function formatBaseMessageContents(input, _parameters) {\n        const inputPromises = input.map((msg, i) => baseMessageToContent(msg, input[i - 1]));\n        const inputs = await Promise.all(inputPromises);\n        return inputs.reduce((acc, cur) => {\n            // Filter out the system content\n            if (cur.every((content) => content.role === \"system\")) {\n                return acc;\n            }\n            // Combine adjacent function messages\n            if (cur[0]?.role === \"function\" &&\n                acc.length > 0 &&\n                acc[acc.length - 1].role === \"function\") {\n                acc[acc.length - 1].parts = [\n                    ...acc[acc.length - 1].parts,\n                    ...cur[0].parts,\n                ];\n            }\n            else {\n                acc.push(...cur);\n            }\n            return acc;\n        }, []);\n    }\n    async function formatContents(input, parameters) {\n        const it = inputType(input);\n        switch (it) {\n            case \"MessageContent\":\n                return formatMessageContents(input, parameters);\n            case \"BaseMessageArray\":\n                return formatBaseMessageContents(input, parameters);\n            default:\n                throw new Error(`Unknown input type \"${it}\": ${input}`);\n        }\n    }\n    function formatGenerationConfig(parameters) {\n        const ret = {\n            temperature: parameters.temperature,\n            topK: parameters.topK,\n            topP: parameters.topP,\n            presencePenalty: parameters.presencePenalty,\n            frequencyPenalty: parameters.frequencyPenalty,\n            maxOutputTokens: parameters.maxOutputTokens,\n            stopSequences: parameters.stopSequences,\n            responseMimeType: parameters.responseMimeType,\n        };\n        // Add the logprobs if explicitly set\n        if (typeof parameters.logprobs !== \"undefined\") {\n            ret.responseLogprobs = parameters.logprobs;\n            if (parameters.logprobs &&\n                typeof parameters.topLogprobs !== \"undefined\") {\n                ret.logprobs = parameters.topLogprobs;\n            }\n        }\n        return ret;\n    }\n    function formatSafetySettings(parameters) {\n        return parameters.safetySettings ?? [];\n    }\n    async function formatBaseMessageSystemInstruction(input) {\n        let ret = {};\n        for (let index = 0; index < input.length; index += 1) {\n            const message = input[index];\n            if (message._getType() === \"system\") {\n                // For system types, we only want it if it is the first message,\n                // if it appears anywhere else, it should be an error.\n                if (index === 0) {\n                    // eslint-disable-next-line prefer-destructuring\n                    ret = (await baseMessageToContent(message, undefined))[0];\n                }\n                else {\n                    throw new Error(\"System messages are only permitted as the first passed message.\");\n                }\n            }\n        }\n        return ret;\n    }\n    async function formatSystemInstruction(input) {\n        if (!config?.useSystemInstruction) {\n            return {};\n        }\n        const it = inputType(input);\n        switch (it) {\n            case \"BaseMessageArray\":\n                return formatBaseMessageSystemInstruction(input);\n            default:\n                return {};\n        }\n    }\n    function structuredToolToFunctionDeclaration(tool) {\n        const jsonSchema = (0, zod_to_gemini_parameters_js_1.zodToGeminiParameters)(tool.schema);\n        return {\n            name: tool.name,\n            description: tool.description ?? `A function available to call.`,\n            parameters: jsonSchema,\n        };\n    }\n    function searchToolName(tool) {\n        for (const name of types_js_1.GeminiSearchToolAttributes) {\n            if (name in tool) {\n                return name;\n            }\n        }\n        return undefined;\n    }\n    function cleanGeminiTool(tool) {\n        const orig = searchToolName(tool);\n        const adj = config?.googleSearchToolAdjustment;\n        if (orig && adj && adj !== orig) {\n            return {\n                [adj]: {},\n            };\n        }\n        else {\n            return tool;\n        }\n    }\n    function formatTools(parameters) {\n        const tools = parameters?.tools;\n        if (!tools || tools.length === 0) {\n            return [];\n        }\n        // Group all LangChain tools into a single functionDeclarations array.\n        // Gemini Tools may be normalized to different tool names\n        const langChainTools = [];\n        const otherTools = [];\n        tools.forEach((tool) => {\n            if ((0, function_calling_1.isLangChainTool)(tool)) {\n                langChainTools.push(tool);\n            }\n            else {\n                otherTools.push(cleanGeminiTool(tool));\n            }\n        });\n        const result = [...otherTools];\n        if (langChainTools.length > 0) {\n            result.push({\n                functionDeclarations: langChainTools.map(structuredToolToFunctionDeclaration),\n            });\n        }\n        return result;\n    }\n    function formatToolConfig(parameters) {\n        if (!parameters.tool_choice || typeof parameters.tool_choice !== \"string\") {\n            return undefined;\n        }\n        if ([\"auto\", \"any\", \"none\"].includes(parameters.tool_choice)) {\n            return {\n                functionCallingConfig: {\n                    mode: parameters.tool_choice,\n                    allowedFunctionNames: parameters.allowed_function_names,\n                },\n            };\n        }\n        // force tool choice to be a single function name in case of structured output\n        return {\n            functionCallingConfig: {\n                mode: \"any\",\n                allowedFunctionNames: [parameters.tool_choice],\n            },\n        };\n    }\n    async function formatData(input, parameters) {\n        const typedInput = input;\n        const contents = await formatContents(typedInput, parameters);\n        const generationConfig = formatGenerationConfig(parameters);\n        const tools = formatTools(parameters);\n        const toolConfig = formatToolConfig(parameters);\n        const safetySettings = formatSafetySettings(parameters);\n        const systemInstruction = await formatSystemInstruction(typedInput);\n        const ret = {\n            contents,\n            generationConfig,\n        };\n        if (tools && tools.length) {\n            ret.tools = tools;\n        }\n        if (toolConfig) {\n            ret.toolConfig = toolConfig;\n        }\n        if (safetySettings && safetySettings.length) {\n            ret.safetySettings = safetySettings;\n        }\n        if (systemInstruction?.role &&\n            systemInstruction?.parts &&\n            systemInstruction?.parts?.length) {\n            ret.systemInstruction = systemInstruction;\n        }\n        return ret;\n    }\n    return {\n        messageContentToParts,\n        baseMessageToContent,\n        responseToString: safeResponseToString,\n        responseToChatGeneration: safeResponseToChatGeneration,\n        chunkToString,\n        responseToBaseMessage: safeResponseToBaseMessage,\n        responseToChatResult: safeResponseToChatResult,\n        formatData,\n    };\n}\nexports.getGeminiAPI = getGeminiAPI;\nfunction validateGeminiParams(params) {\n    if (params.maxOutputTokens && params.maxOutputTokens < 0) {\n        throw new Error(\"`maxOutputTokens` must be a positive integer\");\n    }\n    if (params.temperature &&\n        (params.temperature < 0 || params.temperature > 2)) {\n        throw new Error(\"`temperature` must be in the range of [0.0,2.0]\");\n    }\n    if (params.topP && (params.topP < 0 || params.topP > 1)) {\n        throw new Error(\"`topP` must be in the range of [0.0,1.0]\");\n    }\n    if (params.topK && params.topK < 0) {\n        throw new Error(\"`topK` must be a positive integer\");\n    }\n}\nexports.validateGeminiParams = validateGeminiParams;\nfunction isModelGemini(modelName) {\n    return modelName.toLowerCase().startsWith(\"gemini\");\n}\nexports.isModelGemini = isModelGemini;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/gemini.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/index.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/index.cjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./common.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/common.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./failed_handler.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/failed_handler.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./gemini.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/gemini.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./zod_to_gemini_parameters.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./palm.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/palm.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./safety.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/safety.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./stream.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/utils/stream.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdXRpbHMvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx5RkFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMseUdBQXNCO0FBQzNDLGFBQWEsbUJBQU8sQ0FBQyx5RkFBYztBQUNuQyxhQUFhLG1CQUFPLENBQUMsNkhBQWdDO0FBQ3JELGFBQWEsbUJBQU8sQ0FBQyxxRkFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMseUZBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLHlGQUFjIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vZGlzdC91dGlscy9pbmRleC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb21tb24uY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mYWlsZWRfaGFuZGxlci5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2dlbWluaS5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3pvZF90b19nZW1pbmlfcGFyYW1ldGVycy5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhbG0uY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zYWZldHkuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdHJlYW0uY2pzXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/palm.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/palm.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdXRpbHMvcGFsbS5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9kaXN0L3V0aWxzL3BhbG0uY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/palm.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/safety.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/safety.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleAISafetyError = void 0;\nclass GoogleAISafetyError extends Error {\n    constructor(response, message) {\n        super(message);\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"reply\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        this.response = response;\n    }\n}\nexports.GoogleAISafetyError = GoogleAISafetyError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdXRpbHMvc2FmZXR5LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vZGlzdC91dGlscy9zYWZldHkuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Hb29nbGVBSVNhZmV0eUVycm9yID0gdm9pZCAwO1xuY2xhc3MgR29vZ2xlQUlTYWZldHlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVzcG9uc2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVwbHlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9XG59XG5leHBvcnRzLkdvb2dsZUFJU2FmZXR5RXJyb3IgPSBHb29nbGVBSVNhZmV0eUVycm9yO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/safety.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/stream.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/stream.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadableSseJsonStream = exports.SseJsonStream = exports.ReadableSseStream = exports.SseStream = exports.ReadableJsonStream = exports.ReadableAbstractStream = exports.ComplexJsonStream = exports.JsonStream = exports.simpleValue = exports.complexValue = void 0;\nfunction complexValue(value) {\n    if (value === null || typeof value === \"undefined\") {\n        // I dunno what to put here. An error, probably\n        return undefined;\n    }\n    else if (typeof value === \"object\") {\n        if (Array.isArray(value)) {\n            return {\n                list_val: value.map((avalue) => complexValue(avalue)),\n            };\n        }\n        else {\n            const ret = {};\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const v = value;\n            Object.keys(v).forEach((key) => {\n                ret[key] = complexValue(v[key]);\n            });\n            return { struct_val: ret };\n        }\n    }\n    else if (typeof value === \"number\") {\n        if (Number.isInteger(value)) {\n            return { int_val: value };\n        }\n        else {\n            return { float_val: value };\n        }\n    }\n    else {\n        return {\n            string_val: [value],\n        };\n    }\n}\nexports.complexValue = complexValue;\nfunction simpleValue(val) {\n    if (val && typeof val === \"object\" && !Array.isArray(val)) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (val.hasOwnProperty(\"stringVal\")) {\n            return val.stringVal[0];\n            // eslint-disable-next-line no-prototype-builtins\n        }\n        else if (val.hasOwnProperty(\"boolVal\")) {\n            return val.boolVal[0];\n            // eslint-disable-next-line no-prototype-builtins\n        }\n        else if (val.hasOwnProperty(\"listVal\")) {\n            const { listVal } = val;\n            return listVal.map((aval) => simpleValue(aval));\n            // eslint-disable-next-line no-prototype-builtins\n        }\n        else if (val.hasOwnProperty(\"structVal\")) {\n            const ret = {};\n            const struct = val.structVal;\n            Object.keys(struct).forEach((key) => {\n                ret[key] = simpleValue(struct[key]);\n            });\n            return ret;\n        }\n        else {\n            const ret = {};\n            const struct = val;\n            Object.keys(struct).forEach((key) => {\n                ret[key] = simpleValue(struct[key]);\n            });\n            return ret;\n        }\n    }\n    else if (Array.isArray(val)) {\n        return val.map((aval) => simpleValue(aval));\n    }\n    else {\n        return val;\n    }\n}\nexports.simpleValue = simpleValue;\nclass JsonStream {\n    constructor() {\n        Object.defineProperty(this, \"_buffer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"_bufferOpen\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"_firstRun\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        // Set up a potential Promise that the handler can resolve.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_chunkResolution\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // If there is no Promise (it is null), the handler must add it to the queue\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_chunkPending\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        // A queue that will collect chunks while there is no Promise\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_chunkQueue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    /**\n     * Add data to the buffer. This may cause chunks to be generated, if available.\n     * @param data\n     */\n    appendBuffer(data) {\n        this._buffer += data;\n        // Our first time, skip to the opening of the array\n        if (this._firstRun) {\n            this._skipTo(\"[\");\n            this._firstRun = false;\n        }\n        this._parseBuffer();\n    }\n    /**\n     * Indicate there is no more data that will be added to the text buffer.\n     * This should be called when all the data has been read and added to indicate\n     * that we should process everything remaining in the buffer.\n     */\n    closeBuffer() {\n        this._bufferOpen = false;\n        this._parseBuffer();\n    }\n    /**\n     * Skip characters in the buffer till we get to the start of an object.\n     * Then attempt to read a full object.\n     * If we do read a full object, turn it into a chunk and send it to the chunk handler.\n     * Repeat this for as much as we can.\n     */\n    _parseBuffer() {\n        let obj = null;\n        do {\n            this._skipTo(\"{\");\n            obj = this._getFullObject();\n            if (obj !== null) {\n                const chunk = this._simplifyObject(obj);\n                this._handleChunk(chunk);\n            }\n        } while (obj !== null);\n        if (!this._bufferOpen) {\n            // No more data will be added, and we have parsed everything we could,\n            // so everything else is garbage.\n            this._handleChunk(null);\n            this._buffer = \"\";\n        }\n    }\n    /**\n     * If the string is present, move the start of the buffer to the first occurrence\n     * of that string. This is useful for skipping over elements or parts that we're not\n     * really interested in parsing. (ie - the opening characters, comma separators, etc.)\n     * @param start The string to start the buffer with\n     */\n    _skipTo(start) {\n        const index = this._buffer.indexOf(start);\n        if (index > 0) {\n            this._buffer = this._buffer.slice(index);\n        }\n    }\n    /**\n     * Given what is in the buffer, parse a single object out of it.\n     * If a complete object isn't available, return null.\n     * Assumes that we are at the start of an object to parse.\n     */\n    _getFullObject() {\n        let ret = null;\n        // Loop while we don't have something to return AND we have something in the buffer\n        let index = 0;\n        while (ret === null && this._buffer.length > index) {\n            // Advance to the next close bracket after our current index\n            index = this._buffer.indexOf(\"}\", index + 1);\n            // If we don't find one, exit with null\n            if (index === -1) {\n                return null;\n            }\n            // If we have one, try to turn it into an object to return\n            try {\n                const objStr = this._buffer.substring(0, index + 1);\n                ret = JSON.parse(objStr);\n                // We only get here if it parsed it ok\n                // If we did turn it into an object, remove it from the buffer\n                this._buffer = this._buffer.slice(index + 1);\n            }\n            catch (xx) {\n                // It didn't parse it correctly, so we swallow the exception and continue\n            }\n        }\n        return ret;\n    }\n    _simplifyObject(obj) {\n        return obj;\n    }\n    /**\n     * Register that we have another chunk available for consumption.\n     * If we are waiting for a chunk, resolve the promise waiting for it immediately.\n     * If not, then add it to the queue.\n     * @param chunk\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _handleChunk(chunk) {\n        if (this._chunkPending) {\n            this._chunkResolution(chunk);\n            this._chunkPending = null;\n        }\n        else {\n            this._chunkQueue.push(chunk);\n        }\n    }\n    /**\n     * Get the next chunk that is coming from the stream.\n     * This chunk may be null, usually indicating the last chunk in the stream.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async nextChunk() {\n        if (this._chunkQueue.length > 0) {\n            // If there is data in the queue, return the next queue chunk\n            return this._chunkQueue.shift();\n        }\n        else {\n            // Otherwise, set up a promise that handleChunk will cause to be resolved\n            this._chunkPending = new Promise((resolve) => {\n                this._chunkResolution = resolve;\n            });\n            return this._chunkPending;\n        }\n    }\n    /**\n     * Is the stream done?\n     * A stream is only done if all of the following are true:\n     * - There is no more data to be added to the text buffer\n     * - There is no more data in the text buffer\n     * - There are no chunks that are waiting to be consumed\n     */\n    get streamDone() {\n        return (!this._bufferOpen &&\n            this._buffer.length === 0 &&\n            this._chunkQueue.length === 0 &&\n            this._chunkPending === null);\n    }\n}\nexports.JsonStream = JsonStream;\nclass ComplexJsonStream extends JsonStream {\n    _simplifyObject(obj) {\n        return simpleValue(obj);\n    }\n}\nexports.ComplexJsonStream = ComplexJsonStream;\nclass ReadableAbstractStream {\n    constructor(baseStream, body) {\n        Object.defineProperty(this, \"baseStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"decoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.baseStream = baseStream;\n        this.decoder = new TextDecoder(\"utf-8\");\n        if (body) {\n            void this.run(body);\n        }\n        else {\n            console.error(\"Unexpected empty body while streaming\");\n        }\n    }\n    appendBuffer(data) {\n        return this.baseStream.appendBuffer(data);\n    }\n    closeBuffer() {\n        return this.baseStream.closeBuffer();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    nextChunk() {\n        return this.baseStream.nextChunk();\n    }\n    get streamDone() {\n        return this.baseStream.streamDone;\n    }\n    async run(body) {\n        const reader = body.getReader();\n        let isDone = false;\n        while (!isDone) {\n            const { value, done } = await reader.read();\n            if (!done) {\n                const svalue = this.decoder.decode(value, { stream: true });\n                this.appendBuffer(svalue);\n            }\n            else {\n                isDone = done;\n                this.closeBuffer();\n            }\n        }\n    }\n}\nexports.ReadableAbstractStream = ReadableAbstractStream;\nclass ReadableJsonStream extends ReadableAbstractStream {\n    constructor(body) {\n        super(new JsonStream(), body);\n    }\n}\nexports.ReadableJsonStream = ReadableJsonStream;\nclass SseStream {\n    constructor() {\n        Object.defineProperty(this, \"_buffer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"_bufferOpen\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        // Set up a potential Promise that the handler can resolve.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_chunkResolution\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // If there is no Promise (it is null), the handler must add it to the queue\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_chunkPending\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        // A queue that will collect chunks while there is no Promise\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_chunkQueue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n    appendBuffer(data) {\n        this._buffer += data;\n        this._parseBuffer();\n    }\n    closeBuffer() {\n        this._bufferOpen = false;\n        this._parseBuffer();\n    }\n    /**\n     * Attempt to load an entire event.\n     * For each entire event we load,\n     * send them to be handled.\n     */\n    _parseBuffer() {\n        const events = this._buffer.split(/\\n\\n/);\n        this._buffer = events.pop() ?? \"\";\n        events.forEach((event) => this._handleEvent(event.trim()));\n        if (!this._bufferOpen) {\n            // No more data will be added, and we have parsed\n            // everything. So dump the rest.\n            this._handleEvent(null);\n            this._buffer = \"\";\n        }\n    }\n    /**\n     * Given an event string, get all the fields\n     * in the event. It is assumed there is one field\n     * per line, but that field names can be duplicated,\n     * indicating to append the new value to the previous value\n     * @param event\n     */\n    _parseEvent(event) {\n        if (!event || event.trim() === \"\") {\n            return null;\n        }\n        const ret = {};\n        const lines = event.split(/\\n/);\n        lines.forEach((line) => {\n            const match = line.match(/^([^:]+): \\s*(.+)\\n*$/);\n            if (match && match.length === 3) {\n                const key = match[1];\n                const val = match[2];\n                const cur = ret[key] ?? \"\";\n                ret[key] = `${cur}${val}`;\n            }\n        });\n        return ret;\n    }\n    _handleEvent(event) {\n        const chunk = this._parseEvent(event);\n        if (this._chunkPending) {\n            this._chunkResolution(chunk);\n            this._chunkPending = null;\n        }\n        else {\n            this._chunkQueue.push(chunk);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async nextChunk() {\n        if (this._chunkQueue.length > 0) {\n            // If there is data in the queue, return the next queue chunk\n            return this._chunkQueue.shift();\n        }\n        else {\n            // Otherwise, set up a promise that handleChunk will cause to be resolved\n            this._chunkPending = new Promise((resolve) => {\n                this._chunkResolution = resolve;\n            });\n            return this._chunkPending;\n        }\n    }\n    get streamDone() {\n        return (!this._bufferOpen &&\n            this._buffer.length === 0 &&\n            this._chunkQueue.length === 0 &&\n            this._chunkPending === null);\n    }\n}\nexports.SseStream = SseStream;\nclass ReadableSseStream extends ReadableAbstractStream {\n    constructor(body) {\n        super(new SseStream(), body);\n    }\n}\nexports.ReadableSseStream = ReadableSseStream;\nclass SseJsonStream extends SseStream {\n    constructor(jsonAttribute) {\n        super();\n        Object.defineProperty(this, \"_jsonAttribute\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"data\"\n        });\n        this._jsonAttribute = jsonAttribute ?? this._jsonAttribute;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async nextChunk() {\n        const eventRecord = (await super.nextChunk());\n        const json = eventRecord?.[this._jsonAttribute];\n        if (!json) {\n            return null;\n        }\n        else {\n            return JSON.parse(json);\n        }\n    }\n}\nexports.SseJsonStream = SseJsonStream;\nclass ReadableSseJsonStream extends ReadableAbstractStream {\n    constructor(body) {\n        super(new SseJsonStream(), body);\n    }\n}\nexports.ReadableSseJsonStream = ReadableSseJsonStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/stream.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-unused-vars */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.jsonSchemaToGeminiParameters = exports.zodToGeminiParameters = exports.removeAdditionalProperties = void 0;\nconst zod_to_json_schema_1 = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/cjs/index.js\");\nfunction removeAdditionalProperties(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj) {\n    if (typeof obj === \"object\" && obj !== null) {\n        const newObj = { ...obj };\n        if (\"additionalProperties\" in newObj) {\n            delete newObj.additionalProperties;\n        }\n        for (const key in newObj) {\n            if (key in newObj) {\n                if (Array.isArray(newObj[key])) {\n                    newObj[key] = newObj[key].map(removeAdditionalProperties);\n                }\n                else if (typeof newObj[key] === \"object\" && newObj[key] !== null) {\n                    newObj[key] = removeAdditionalProperties(newObj[key]);\n                }\n            }\n        }\n        return newObj;\n    }\n    return obj;\n}\nexports.removeAdditionalProperties = removeAdditionalProperties;\nfunction zodToGeminiParameters(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nzodObj) {\n    // Gemini doesn't accept either the $schema or additionalProperties\n    // attributes, so we need to explicitly remove them.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const jsonSchema = removeAdditionalProperties((0, zod_to_json_schema_1.zodToJsonSchema)(zodObj));\n    const { $schema, ...rest } = jsonSchema;\n    return rest;\n}\nexports.zodToGeminiParameters = zodToGeminiParameters;\nfunction jsonSchemaToGeminiParameters(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema) {\n    // Gemini doesn't accept either the $schema or additionalProperties\n    // attributes, so we need to explicitly remove them.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const jsonSchema = removeAdditionalProperties(schema);\n    const { $schema, ...rest } = jsonSchema;\n    return rest;\n}\nexports.jsonSchemaToGeminiParameters = jsonSchemaToGeminiParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2Rpc3QvdXRpbHMvem9kX3RvX2dlbWluaV9wYXJhbWV0ZXJzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLDZCQUE2QixHQUFHLGtDQUFrQztBQUN6Ryw2QkFBNkIsbUJBQU8sQ0FBQyxxRkFBb0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0Esb0NBQW9DIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vZGlzdC91dGlscy96b2RfdG9fZ2VtaW5pX3BhcmFtZXRlcnMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmpzb25TY2hlbWFUb0dlbWluaVBhcmFtZXRlcnMgPSBleHBvcnRzLnpvZFRvR2VtaW5pUGFyYW1ldGVycyA9IGV4cG9ydHMucmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMgPSB2b2lkIDA7XG5jb25zdCB6b2RfdG9fanNvbl9zY2hlbWFfMSA9IHJlcXVpcmUoXCJ6b2QtdG8tanNvbi1zY2hlbWFcIik7XG5mdW5jdGlvbiByZW1vdmVBZGRpdGlvbmFsUHJvcGVydGllcyhcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5vYmopIHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgbmV3T2JqID0geyAuLi5vYmogfTtcbiAgICAgICAgaWYgKFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIiBpbiBuZXdPYmopIHtcbiAgICAgICAgICAgIGRlbGV0ZSBuZXdPYmouYWRkaXRpb25hbFByb3BlcnRpZXM7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3T2JqKSB7XG4gICAgICAgICAgICBpZiAoa2V5IGluIG5ld09iaikge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5ld09ialtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IG5ld09ialtrZXldLm1hcChyZW1vdmVBZGRpdGlvbmFsUHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBuZXdPYmpba2V5XSA9PT0gXCJvYmplY3RcIiAmJiBuZXdPYmpba2V5XSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdPYmpba2V5XSA9IHJlbW92ZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKG5ld09ialtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydHMucmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMgPSByZW1vdmVBZGRpdGlvbmFsUHJvcGVydGllcztcbmZ1bmN0aW9uIHpvZFRvR2VtaW5pUGFyYW1ldGVycyhcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG56b2RPYmopIHtcbiAgICAvLyBHZW1pbmkgZG9lc24ndCBhY2NlcHQgZWl0aGVyIHRoZSAkc2NoZW1hIG9yIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXG4gICAgLy8gYXR0cmlidXRlcywgc28gd2UgbmVlZCB0byBleHBsaWNpdGx5IHJlbW92ZSB0aGVtLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QganNvblNjaGVtYSA9IHJlbW92ZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKCgwLCB6b2RfdG9fanNvbl9zY2hlbWFfMS56b2RUb0pzb25TY2hlbWEpKHpvZE9iaikpO1xuICAgIGNvbnN0IHsgJHNjaGVtYSwgLi4ucmVzdCB9ID0ganNvblNjaGVtYTtcbiAgICByZXR1cm4gcmVzdDtcbn1cbmV4cG9ydHMuem9kVG9HZW1pbmlQYXJhbWV0ZXJzID0gem9kVG9HZW1pbmlQYXJhbWV0ZXJzO1xuZnVuY3Rpb24ganNvblNjaGVtYVRvR2VtaW5pUGFyYW1ldGVycyhcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5zY2hlbWEpIHtcbiAgICAvLyBHZW1pbmkgZG9lc24ndCBhY2NlcHQgZWl0aGVyIHRoZSAkc2NoZW1hIG9yIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXG4gICAgLy8gYXR0cmlidXRlcywgc28gd2UgbmVlZCB0byBleHBsaWNpdGx5IHJlbW92ZSB0aGVtLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgY29uc3QganNvblNjaGVtYSA9IHJlbW92ZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKHNjaGVtYSk7XG4gICAgY29uc3QgeyAkc2NoZW1hLCAuLi5yZXN0IH0gPSBqc29uU2NoZW1hO1xuICAgIHJldHVybiByZXN0O1xufVxuZXhwb3J0cy5qc29uU2NoZW1hVG9HZW1pbmlQYXJhbWV0ZXJzID0ganNvblNjaGVtYVRvR2VtaW5pUGFyYW1ldGVycztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/dist/utils/zod_to_gemini_parameters.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/experimental/media.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/google-common/experimental/media.cjs ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ../dist/experimental/media.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/experimental/media.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2V4cGVyaW1lbnRhbC9tZWRpYS5janMiLCJtYXBwaW5ncyI6IkFBQUEsdUpBQTBEIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vZXhwZXJpbWVudGFsL21lZGlhLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Rpc3QvZXhwZXJpbWVudGFsL21lZGlhLmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/experimental/media.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/index.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/google-common/index.cjs ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/index.cjs */ \"(rsc)/./node_modules/@langchain/google-common/dist/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBQSw0SEFBNEMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9pbmRleC5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX: () => (/* reexport safe */ _max_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   v1ToV6: () => (/* reexport safe */ _v1ToV6_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   v6: () => (/* reexport safe */ _v6_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   v6ToV1: () => (/* reexport safe */ _v6ToV1_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   v7: () => (/* reexport safe */ _v7_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _max_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./max.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/max.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nil.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./v1.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v1ToV6_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./v1ToV6.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1ToV6.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./v3.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./v4.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./v5.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _v6_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./v6.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6.js\");\n/* harmony import */ var _v6ToV1_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./v6ToV1.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6ToV1.js\");\n/* harmony import */ var _v7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./v7.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v7.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./version.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwQztBQUNBO0FBQ0k7QUFDUTtBQUNkO0FBQ1E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNRO0FBQ1I7QUFDWSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyBNQVggfSBmcm9tICcuL21heC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE5JTCB9IGZyb20gJy4vbmlsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2UgfSBmcm9tICcuL3BhcnNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2MSB9IGZyb20gJy4vdjEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2MVRvVjYgfSBmcm9tICcuL3YxVG9WNi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHYzIH0gZnJvbSAnLi92My5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY0IH0gZnJvbSAnLi92NC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY1IH0gZnJvbSAnLi92NS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY2IH0gZnJvbSAnLi92Ni5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY2VG9WMSB9IGZyb20gJy4vdjZUb1YxLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjcgfSBmcm9tICcuL3Y3LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsaWRhdGUgfSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbi5qcyc7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/max.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/max.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('ffffffff-ffff-ffff-ffff-ffffffffffff');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWF4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL21heC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZmJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/max.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/md5.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/md5.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('md5').update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFNBQVMsNkRBQWlCO0FBQzFCO0FBQ0EsaUVBQWUsR0FBRyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnbm9kZTpjcnlwdG8nO1xuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnbWQ1JykudXBkYXRlKGJ5dGVzKS5kaWdlc3QoKTtcbn1cbmV4cG9ydCBkZWZhdWx0IG1kNTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/native.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/native.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  randomUUID: (node_crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQyxpRUFBZTtBQUNmLGNBQWMsK0RBQWlCO0FBQy9CLENBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25hdGl2ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ25vZGU6Y3J5cHRvJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRDogY3J5cHRvLnJhbmRvbVVVSURcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/nil.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/nil.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/parse.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/parse.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction parse(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFDckM7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLEtBQUsiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmZ1bmN0aW9uIHBhcnNlKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cbiAgbGV0IHY7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTtcblxuICAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7XG5cbiAgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmO1xuXG4gIC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7XG5cbiAgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjtcblxuICAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuZXhwb3J0IGRlZmF1bHQgcGFyc2U7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/regex.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/regex.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyw4RUFBOEUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtOF1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfGZmZmZmZmZmLWZmZmYtZmZmZi1mZmZmLWZmZmZmZmZmZmZmZikkL2k7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/rng.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/rng.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    node_crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNqQyx1Q0FBdUM7QUFDdkM7QUFDZTtBQUNmO0FBQ0EsSUFBSSxpRUFBcUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ25vZGU6Y3J5cHRvJztcbmNvbnN0IHJuZHM4UG9vbCA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vICMgb2YgcmFuZG9tIHZhbHVlcyB0byBwcmUtYWxsb2NhdGVcbmxldCBwb29sUHRyID0gcm5kczhQb29sLmxlbmd0aDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgaWYgKHBvb2xQdHIgPiBybmRzOFBvb2wubGVuZ3RoIC0gMTYpIHtcbiAgICBjcnlwdG8ucmFuZG9tRmlsbFN5bmMocm5kczhQb29sKTtcbiAgICBwb29sUHRyID0gMDtcbiAgfVxuICByZXR1cm4gcm5kczhQb29sLnNsaWNlKHBvb2xQdHIsIHBvb2xQdHIgKz0gMTYpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/sha1.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/sha1.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha1').update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc2hhMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxTQUFTLDZEQUFpQjtBQUMxQjtBQUNBLGlFQUFlLElBQUkiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdub2RlOmNyeXB0byc7XG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShieXRlcykuZGlnZXN0KCk7XG59XG5leHBvcnQgZGVmYXVsdCBzaGExOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/validate.js\");\n\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxTQUFTIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIC8vXG4gIC8vIE5vdGUgdG8gZnV0dXJlLXNlbGY6IE5vLCB5b3UgY2FuJ3QgcmVtb3ZlIHRoZSBgdG9Mb3dlckNhc2UoKWAgY2FsbC5cbiAgLy8gUkVGOiBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC82NzcjaXNzdWVjb21tZW50LTE3NTczNTEzNTFcbiAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7XG4gIC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cbiAgcmV0dXJuIHV1aWQ7XG59XG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\nlet _clockseq;\n\n// Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node;\n  let clockseq = options.clockseq;\n\n  // v1 only: Use cached `node` and `clockseq` values\n  if (!options._v6) {\n    if (!node) {\n      node = _nodeId;\n    }\n    if (clockseq == null) {\n      clockseq = _clockseq;\n    }\n  }\n\n  // Handle cases where we need entropy.  We do this lazily to minimize issues\n  // related to insufficient system entropy.  See #189\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n    // Randomize node\n    if (node == null) {\n      node = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n\n      // v1 only: cache node value for reuse\n      if (!_nodeId && !options._v6) {\n        // per RFC4122 4.5: Set MAC multicast bit (v1 only)\n        node[0] |= 0x01; // Set multicast bit\n\n        _nodeId = node;\n      }\n    }\n\n    // Randomize clockseq\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n      if (_clockseq === undefined && !options._v6) {\n        _clockseq = clockseq;\n      }\n    }\n  }\n\n  // v1 & v6 timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so time is\n  // handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ3NCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELCtDQUFHOztBQUUzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0EsZ0JBQWdCLDhEQUFlO0FBQy9CO0FBQ0EsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxubGV0IF9ub2RlSWQ7XG5sZXQgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbmxldCBfbGFzdE1TZWNzID0gMDtcbmxldCBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCBmb3IgQVBJIGRldGFpbHNcbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGxldCBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICBjb25zdCBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgbm9kZSA9IG9wdGlvbnMubm9kZTtcbiAgbGV0IGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcTtcblxuICAvLyB2MSBvbmx5OiBVc2UgY2FjaGVkIGBub2RlYCBhbmQgYGNsb2Nrc2VxYCB2YWx1ZXNcbiAgaWYgKCFvcHRpb25zLl92Nikge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgbm9kZSA9IF9ub2RlSWQ7XG4gICAgfVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcTtcbiAgICB9XG4gIH1cblxuICAvLyBIYW5kbGUgY2FzZXMgd2hlcmUgd2UgbmVlZCBlbnRyb3B5LiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzXG4gIC8vIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50IHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgY29uc3Qgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAgIC8vIFJhbmRvbWl6ZSBub2RlXG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgbm9kZSA9IFtzZWVkQnl0ZXNbMF0sIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXTtcblxuICAgICAgLy8gdjEgb25seTogY2FjaGUgbm9kZSB2YWx1ZSBmb3IgcmV1c2VcbiAgICAgIGlmICghX25vZGVJZCAmJiAhb3B0aW9ucy5fdjYpIHtcbiAgICAgICAgLy8gcGVyIFJGQzQxMjIgNC41OiBTZXQgTUFDIG11bHRpY2FzdCBiaXQgKHYxIG9ubHkpXG4gICAgICAgIG5vZGVbMF0gfD0gMHgwMTsgLy8gU2V0IG11bHRpY2FzdCBiaXRcblxuICAgICAgICBfbm9kZUlkID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSYW5kb21pemUgY2xvY2tzZXFcbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICAgIGlmIChfY2xvY2tzZXEgPT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5fdjYpIHtcbiAgICAgICAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gdjEgJiB2NiB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc28gdGltZSBpc1xuICAvLyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG4gIGxldCBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpO1xuXG4gIC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcbiAgbGV0IG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxO1xuXG4gIC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcbiAgY29uc3QgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwO1xuXG4gIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfVxuXG4gIC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH1cblxuICAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTtcblxuICAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7XG5cbiAgLy8gYHRpbWVfbG93YFxuICBjb25zdCB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfbWlkYFxuICBjb25zdCB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjtcblxuICAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwO1xuXG4gIC8vIGBjbG9ja19zZXFfbG93YFxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7XG5cbiAgLy8gYG5vZGVgXG4gIGZvciAobGV0IG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG4gIHJldHVybiBidWYgfHwgdW5zYWZlU3RyaW5naWZ5KGIpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjE7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1ToV6.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1ToV6.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v1ToV6)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * Convert a v1 UUID to a v6 UUID\n *\n * @param {string|Uint8Array} uuid - The v1 UUID to convert to v6\n * @returns {string|Uint8Array} The v6 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nfunction v1ToV6(uuid) {\n  const v1Bytes = typeof uuid === 'string' ? (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid) : uuid;\n  const v6Bytes = _v1ToV6(v1Bytes);\n  return typeof uuid === 'string' ? (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(v6Bytes) : v6Bytes;\n}\n\n// Do the field transformation needed for v1 -> v6\nfunction _v1ToV6(v1Bytes, randomize = false) {\n  return Uint8Array.of((v1Bytes[6] & 0x0f) << 4 | v1Bytes[7] >> 4 & 0x0f, (v1Bytes[7] & 0x0f) << 4 | (v1Bytes[4] & 0xf0) >> 4, (v1Bytes[4] & 0x0f) << 4 | (v1Bytes[5] & 0xf0) >> 4, (v1Bytes[5] & 0x0f) << 4 | (v1Bytes[0] & 0xf0) >> 4, (v1Bytes[0] & 0x0f) << 4 | (v1Bytes[1] & 0xf0) >> 4, (v1Bytes[1] & 0x0f) << 4 | (v1Bytes[2] & 0xf0) >> 4, 0x60 | v1Bytes[2] & 0x0f, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjFUb1Y2LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUNrQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNlO0FBQ2YsNkNBQTZDLHFEQUFLO0FBQ2xEO0FBQ0Esb0NBQW9DLDhEQUFlO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92MVRvVjYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2MSBVVUlEIHRvIGEgdjYgVVVJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfFVpbnQ4QXJyYXl9IHV1aWQgLSBUaGUgdjEgVVVJRCB0byBjb252ZXJ0IHRvIHY2XG4gKiBAcmV0dXJucyB7c3RyaW5nfFVpbnQ4QXJyYXl9IFRoZSB2NiBVVUlEIGFzIHRoZSBzYW1lIHR5cGUgYXMgdGhlIGB1dWlkYCBhcmdcbiAqIChzdHJpbmcgb3IgVWludDhBcnJheSlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdjFUb1Y2KHV1aWQpIHtcbiAgY29uc3QgdjFCeXRlcyA9IHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/IHBhcnNlKHV1aWQpIDogdXVpZDtcbiAgY29uc3QgdjZCeXRlcyA9IF92MVRvVjYodjFCeXRlcyk7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgPyB1bnNhZmVTdHJpbmdpZnkodjZCeXRlcykgOiB2NkJ5dGVzO1xufVxuXG4vLyBEbyB0aGUgZmllbGQgdHJhbnNmb3JtYXRpb24gbmVlZGVkIGZvciB2MSAtPiB2NlxuZnVuY3Rpb24gX3YxVG9WNih2MUJ5dGVzLCByYW5kb21pemUgPSBmYWxzZSkge1xuICByZXR1cm4gVWludDhBcnJheS5vZigodjFCeXRlc1s2XSAmIDB4MGYpIDw8IDQgfCB2MUJ5dGVzWzddID4+IDQgJiAweDBmLCAodjFCeXRlc1s3XSAmIDB4MGYpIDw8IDQgfCAodjFCeXRlc1s0XSAmIDB4ZjApID4+IDQsICh2MUJ5dGVzWzRdICYgMHgwZikgPDwgNCB8ICh2MUJ5dGVzWzVdICYgMHhmMCkgPj4gNCwgKHYxQnl0ZXNbNV0gJiAweDBmKSA8PCA0IHwgKHYxQnl0ZXNbMF0gJiAweGYwKSA+PiA0LCAodjFCeXRlc1swXSAmIDB4MGYpIDw8IDQgfCAodjFCeXRlc1sxXSAmIDB4ZjApID4+IDQsICh2MUJ5dGVzWzFdICYgMHgwZikgPDwgNCB8ICh2MUJ5dGVzWzJdICYgMHhmMCkgPj4gNCwgMHg2MCB8IHYxQnl0ZXNbMl0gJiAweDBmLCB2MUJ5dGVzWzNdLCB2MUJ5dGVzWzhdLCB2MUJ5dGVzWzldLCB2MUJ5dGVzWzEwXSwgdjFCeXRlc1sxMV0sIHYxQnl0ZXNbMTJdLCB2MUJ5dGVzWzEzXSwgdjFCeXRlc1sxNF0sIHYxQnl0ZXNbMTVdKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1ToV6.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v3.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v3.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0E7QUFDM0IsV0FBVyxtREFBRyxhQUFhLCtDQUFHO0FBQzlCLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IG1kNSBmcm9tICcuL21kNS5qcyc7XG5jb25zdCB2MyA9IHYzNSgndjMnLCAweDMwLCBtZDUpO1xuZXhwb3J0IGRlZmF1bHQgdjM7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v35.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v35.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* binding */ v35)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/parse.js\");\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n  return bytes;\n}\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n    if (typeof namespace === 'string') {\n      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n    }\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n\n    // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    if (buf) {\n      offset = offset || 0;\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n      return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(bytes);\n  }\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch (err) {}\n\n  // For CommonJS default export support\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ2xCO0FBQy9CO0FBQ0EsMkNBQTJDOztBQUUzQztBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1E7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscURBQUs7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4REFBZTtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzNS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZS5qcyc7XG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuICByZXR1cm4gYnl0ZXM7XG59XG5leHBvcnQgY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gcGFyc2UobmFtZXNwYWNlKTtcbiAgICB9XG4gICAgaWYgKCgoX25hbWVzcGFjZSA9IG5hbWVzcGFjZSkgPT09IG51bGwgfHwgX25hbWVzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25hbWVzcGFjZS5sZW5ndGgpICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShieXRlcyk7XG4gIH1cblxuICAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcbiAgdHJ5IHtcbiAgICBnZW5lcmF0ZVVVSUQubmFtZSA9IG5hbWU7XG4gIH0gY2F0Y2ggKGVycikge31cblxuICAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuICBnZW5lcmF0ZVVVSUQuRE5TID0gRE5TO1xuICBnZW5lcmF0ZVVVSUQuVVJMID0gVVJMO1xuICByZXR1cm4gZ2VuZXJhdGVVVUlEO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v4.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v4.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n    return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pEO0FBQ0EsTUFBTSxrREFBTTtBQUNaLFdBQVcsa0RBQU07QUFDakI7QUFDQTtBQUNBLGlEQUFpRCwrQ0FBRzs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4REFBZTtBQUN4QjtBQUNBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBpZiAobmF0aXZlLnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuICAgIHJldHVybiBidWY7XG4gIH1cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHY0OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v5.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v5.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0U7QUFDN0IsV0FBVyxtREFBRyxhQUFhLGdEQUFJO0FBQy9CLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IHNoYTEgZnJvbSAnLi9zaGExLmpzJztcbmNvbnN0IHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v6)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v1ToV6_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v1ToV6.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v1ToV6.js\");\n\n\n\n\n/**\n *\n * @param {object} options\n * @param {Uint8Array=} buf\n * @param {number=} offset\n * @returns\n */\nfunction v6(options = {}, buf, offset = 0) {\n  // v6 is v1 with different field layout, so we start with a v1 UUID, albeit\n  // with slightly different behavior around how the clock_seq and node fields\n  // are randomized, which is why we call v1 with _v6: true.\n  let bytes = (0,_v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n    ...options,\n    _v6: true\n  }, new Uint8Array(16));\n\n  // Reorder the fields to v6 layout.\n  bytes = (0,_v1ToV6_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(bytes);\n\n  // Return as a byte array if requested\n  if (buf) {\n    for (let i = 0; i < 16; i++) {\n      buf[offset + i] = bytes[i];\n    }\n    return buf;\n  }\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(bytes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRDtBQUN4QjtBQUNROztBQUVqQztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsYUFBYTtBQUN4QixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNlLHdCQUF3QjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxjQUFjLGtEQUFFO0FBQ2hCO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsVUFBVSxzREFBTTs7QUFFaEI7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw4REFBZTtBQUN4QiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHYxIGZyb20gJy4vdjEuanMnO1xuaW1wb3J0IHYxVG9WNiBmcm9tICcuL3YxVG9WNi5qcyc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXk9fSBidWZcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2NihvcHRpb25zID0ge30sIGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAvLyB2NiBpcyB2MSB3aXRoIGRpZmZlcmVudCBmaWVsZCBsYXlvdXQsIHNvIHdlIHN0YXJ0IHdpdGggYSB2MSBVVUlELCBhbGJlaXRcbiAgLy8gd2l0aCBzbGlnaHRseSBkaWZmZXJlbnQgYmVoYXZpb3IgYXJvdW5kIGhvdyB0aGUgY2xvY2tfc2VxIGFuZCBub2RlIGZpZWxkc1xuICAvLyBhcmUgcmFuZG9taXplZCwgd2hpY2ggaXMgd2h5IHdlIGNhbGwgdjEgd2l0aCBfdjY6IHRydWUuXG4gIGxldCBieXRlcyA9IHYxKHtcbiAgICAuLi5vcHRpb25zLFxuICAgIF92NjogdHJ1ZVxuICB9LCBuZXcgVWludDhBcnJheSgxNikpO1xuXG4gIC8vIFJlb3JkZXIgdGhlIGZpZWxkcyB0byB2NiBsYXlvdXQuXG4gIGJ5dGVzID0gdjFUb1Y2KGJ5dGVzKTtcblxuICAvLyBSZXR1cm4gYXMgYSBieXRlIGFycmF5IGlmIHJlcXVlc3RlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KGJ5dGVzKTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6ToV1.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6ToV1.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ v6ToV1)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * Convert a v6 UUID to a v1 UUID\n *\n * @param {string|Uint8Array} uuid - The v6 UUID to convert to v6\n * @returns {string|Uint8Array} The v1 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nfunction v6ToV1(uuid) {\n  const v6Bytes = typeof uuid === 'string' ? (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid) : uuid;\n  const v1Bytes = _v6ToV1(v6Bytes);\n  return typeof uuid === 'string' ? (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(v1Bytes) : v1Bytes;\n}\n\n// Do the field transformation needed for v6 -> v1\nfunction _v6ToV1(v6Bytes) {\n  return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjZUb1YxLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUNrQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTtBQUNlO0FBQ2YsNkNBQTZDLHFEQUFLO0FBQ2xEO0FBQ0Esb0NBQW9DLDhEQUFlO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NlRvVjEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2NiBVVUlEIHRvIGEgdjEgVVVJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfFVpbnQ4QXJyYXl9IHV1aWQgLSBUaGUgdjYgVVVJRCB0byBjb252ZXJ0IHRvIHY2XG4gKiBAcmV0dXJucyB7c3RyaW5nfFVpbnQ4QXJyYXl9IFRoZSB2MSBVVUlEIGFzIHRoZSBzYW1lIHR5cGUgYXMgdGhlIGB1dWlkYCBhcmdcbiAqIChzdHJpbmcgb3IgVWludDhBcnJheSlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdjZUb1YxKHV1aWQpIHtcbiAgY29uc3QgdjZCeXRlcyA9IHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/IHBhcnNlKHV1aWQpIDogdXVpZDtcbiAgY29uc3QgdjFCeXRlcyA9IF92NlRvVjEodjZCeXRlcyk7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgPyB1bnNhZmVTdHJpbmdpZnkodjFCeXRlcykgOiB2MUJ5dGVzO1xufVxuXG4vLyBEbyB0aGUgZmllbGQgdHJhbnNmb3JtYXRpb24gbmVlZGVkIGZvciB2NiAtPiB2MVxuZnVuY3Rpb24gX3Y2VG9WMSh2NkJ5dGVzKSB7XG4gIHJldHVybiBVaW50OEFycmF5Lm9mKCh2NkJ5dGVzWzNdICYgMHgwZikgPDwgNCB8IHY2Qnl0ZXNbNF0gPj4gNCAmIDB4MGYsICh2NkJ5dGVzWzRdICYgMHgwZikgPDwgNCB8ICh2NkJ5dGVzWzVdICYgMHhmMCkgPj4gNCwgKHY2Qnl0ZXNbNV0gJiAweDBmKSA8PCA0IHwgdjZCeXRlc1s2XSAmIDB4MGYsIHY2Qnl0ZXNbN10sICh2NkJ5dGVzWzFdICYgMHgwZikgPDwgNCB8ICh2NkJ5dGVzWzJdICYgMHhmMCkgPj4gNCwgKHY2Qnl0ZXNbMl0gJiAweDBmKSA8PCA0IHwgKHY2Qnl0ZXNbM10gJiAweGYwKSA+PiA0LCAweDEwIHwgKHY2Qnl0ZXNbMF0gJiAweGYwKSA+PiA0LCAodjZCeXRlc1swXSAmIDB4MGYpIDw8IDQgfCAodjZCeXRlc1sxXSAmIDB4ZjApID4+IDQsIHY2Qnl0ZXNbOF0sIHY2Qnl0ZXNbOV0sIHY2Qnl0ZXNbMTBdLCB2NkJ5dGVzWzExXSwgdjZCeXRlc1sxMl0sIHY2Qnl0ZXNbMTNdLCB2NkJ5dGVzWzE0XSwgdjZCeXRlc1sxNV0pO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v6ToV1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v7.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v7.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n/**\n * UUID V7 - Unix Epoch time-based UUID\n *\n * The IETF has published RFC9562, introducing 3 new UUID versions (6,7,8). This\n * implementation of V7 is based on the accepted, though not yet approved,\n * revisions.\n *\n * RFC 9562:https://www.rfc-editor.org/rfc/rfc9562.html Universally Unique\n * IDentifiers (UUIDs)\n\n *\n * Sample V7 value:\n * https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value\n *\n * Monotonic Bit Layout: RFC rfc9562.6.2 Method 1, Dedicated Counter Bits ref:\n *     https://www.rfc-editor.org/rfc/rfc9562.html#section-6.2-5.1\n *\n *   0                   1                   2                   3 0 1 2 3 4 5 6\n *   7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                          unix_ts_ms                           |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |          unix_ts_ms           |  ver  |        seq_hi         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |var|               seq_low               |        rand         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                             rand                              |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *\n * seq is a 31 bit serialized counter; comprised of 12 bit seq_hi and 19 bit\n * seq_low, and randomly initialized upon timestamp change. 31 bit counter size\n * was selected as any bitwise operations in node are done as _signed_ 32 bit\n * ints. we exclude the sign bit.\n */\n\nlet _seqLow = null;\nlet _seqHigh = null;\nlet _msecs = 0;\nfunction v7(options, buf, offset) {\n  options = options || {};\n\n  // initialize buffer and pointer\n  let i = buf && offset || 0;\n  const b = buf || new Uint8Array(16);\n\n  // rnds is Uint8Array(16) filled with random bytes\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n  // milliseconds since unix epoch, 1970-01-01 00:00\n  const msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // seq is user provided 31 bit counter\n  let seq = options.seq !== undefined ? options.seq : null;\n\n  // initialize local seq high/low parts\n  let seqHigh = _seqHigh;\n  let seqLow = _seqLow;\n\n  // check if clock has advanced and user has not provided msecs\n  if (msecs > _msecs && options.msecs === undefined) {\n    _msecs = msecs;\n\n    // unless user provided seq, reset seq parts\n    if (seq !== null) {\n      seqHigh = null;\n      seqLow = null;\n    }\n  }\n\n  // if we have a user provided seq\n  if (seq !== null) {\n    // trim provided seq to 31 bits of value, avoiding overflow\n    if (seq > 0x7fffffff) {\n      seq = 0x7fffffff;\n    }\n\n    // split provided seq into high/low parts\n    seqHigh = seq >>> 19 & 0xfff;\n    seqLow = seq & 0x7ffff;\n  }\n\n  // randomly initialize seq\n  if (seqHigh === null || seqLow === null) {\n    seqHigh = rnds[6] & 0x7f;\n    seqHigh = seqHigh << 8 | rnds[7];\n    seqLow = rnds[8] & 0x3f; // pad for var\n    seqLow = seqLow << 8 | rnds[9];\n    seqLow = seqLow << 5 | rnds[10] >>> 3;\n  }\n\n  // increment seq if within msecs window\n  if (msecs + 10000 > _msecs && seq === null) {\n    if (++seqLow > 0x7ffff) {\n      seqLow = 0;\n      if (++seqHigh > 0xfff) {\n        seqHigh = 0;\n\n        // increment internal _msecs. this allows us to continue incrementing\n        // while staying monotonic. Note, once we hit 10k milliseconds beyond system\n        // clock, we will reset breaking monotonicity (after (2^31)*10000 generations)\n        _msecs++;\n      }\n    }\n  } else {\n    // resetting; we have advanced more than\n    // 10k milliseconds beyond system clock\n    _msecs = msecs;\n  }\n  _seqHigh = seqHigh;\n  _seqLow = seqLow;\n\n  // [bytes 0-5] 48 bits of local timestamp\n  b[i++] = _msecs / 0x10000000000 & 0xff;\n  b[i++] = _msecs / 0x100000000 & 0xff;\n  b[i++] = _msecs / 0x1000000 & 0xff;\n  b[i++] = _msecs / 0x10000 & 0xff;\n  b[i++] = _msecs / 0x100 & 0xff;\n  b[i++] = _msecs & 0xff;\n\n  // [byte 6] - set 4 bits of version (7) with first 4 bits seq_hi\n  b[i++] = seqHigh >>> 4 & 0x0f | 0x70;\n\n  // [byte 7] remaining 8 bits of seq_hi\n  b[i++] = seqHigh & 0xff;\n\n  // [byte 8] - variant (2 bits), first 6 bits seq_low\n  b[i++] = seqLow >>> 13 & 0x3f | 0x80;\n\n  // [byte 9] 8 bits seq_low\n  b[i++] = seqLow >>> 5 & 0xff;\n\n  // [byte 10] remaining 5 bits seq_low, 3 bits random\n  b[i++] = seqLow << 3 & 0xff | rnds[10] & 0x07;\n\n  // [bytes 11-15] always random\n  b[i++] = rnds[11];\n  b[i++] = rnds[12];\n  b[i++] = rnds[13];\n  b[i++] = rnds[14];\n  b[i++] = rnds[15];\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v7);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ3NCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsK0NBQUc7O0FBRXBEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4REFBZTtBQUMvQjtBQUNBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG4vKipcbiAqIFVVSUQgVjcgLSBVbml4IEVwb2NoIHRpbWUtYmFzZWQgVVVJRFxuICpcbiAqIFRoZSBJRVRGIGhhcyBwdWJsaXNoZWQgUkZDOTU2MiwgaW50cm9kdWNpbmcgMyBuZXcgVVVJRCB2ZXJzaW9ucyAoNiw3LDgpLiBUaGlzXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBWNyBpcyBiYXNlZCBvbiB0aGUgYWNjZXB0ZWQsIHRob3VnaCBub3QgeWV0IGFwcHJvdmVkLFxuICogcmV2aXNpb25zLlxuICpcbiAqIFJGQyA5NTYyOmh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5NTYyLmh0bWwgVW5pdmVyc2FsbHkgVW5pcXVlXG4gKiBJRGVudGlmaWVycyAoVVVJRHMpXG5cbiAqXG4gKiBTYW1wbGUgVjcgdmFsdWU6XG4gKiBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTU2Mi5odG1sI25hbWUtZXhhbXBsZS1vZi1hLXV1aWR2Ny12YWx1ZVxuICpcbiAqIE1vbm90b25pYyBCaXQgTGF5b3V0OiBSRkMgcmZjOTU2Mi42LjIgTWV0aG9kIDEsIERlZGljYXRlZCBDb3VudGVyIEJpdHMgcmVmOlxuICogICAgIGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5NTYyLmh0bWwjc2VjdGlvbi02LjItNS4xXG4gKlxuICogICAwICAgICAgICAgICAgICAgICAgIDEgICAgICAgICAgICAgICAgICAgMiAgICAgICAgICAgICAgICAgICAzIDAgMSAyIDMgNCA1IDZcbiAqICAgNyA4IDkgMCAxIDIgMyA0IDUgNiA3IDggOSAwIDEgMiAzIDQgNSA2IDcgOCA5IDAgMVxuICogICstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rXG4gKiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgdW5peF90c19tcyAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstK1xuICogIHwgICAgICAgICAgdW5peF90c19tcyAgICAgICAgICAgfCAgdmVyICB8ICAgICAgICBzZXFfaGkgICAgICAgICB8XG4gKiAgKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLStcbiAqICB8dmFyfCAgICAgICAgICAgICAgIHNlcV9sb3cgICAgICAgICAgICAgICB8ICAgICAgICByYW5kICAgICAgICAgfFxuICogICstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rXG4gKiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstK1xuICpcbiAqIHNlcSBpcyBhIDMxIGJpdCBzZXJpYWxpemVkIGNvdW50ZXI7IGNvbXByaXNlZCBvZiAxMiBiaXQgc2VxX2hpIGFuZCAxOSBiaXRcbiAqIHNlcV9sb3csIGFuZCByYW5kb21seSBpbml0aWFsaXplZCB1cG9uIHRpbWVzdGFtcCBjaGFuZ2UuIDMxIGJpdCBjb3VudGVyIHNpemVcbiAqIHdhcyBzZWxlY3RlZCBhcyBhbnkgYml0d2lzZSBvcGVyYXRpb25zIGluIG5vZGUgYXJlIGRvbmUgYXMgX3NpZ25lZF8gMzIgYml0XG4gKiBpbnRzLiB3ZSBleGNsdWRlIHRoZSBzaWduIGJpdC5cbiAqL1xuXG5sZXQgX3NlcUxvdyA9IG51bGw7XG5sZXQgX3NlcUhpZ2ggPSBudWxsO1xubGV0IF9tc2VjcyA9IDA7XG5mdW5jdGlvbiB2NyhvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBpbml0aWFsaXplIGJ1ZmZlciBhbmQgcG9pbnRlclxuICBsZXQgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgY29uc3QgYiA9IGJ1ZiB8fCBuZXcgVWludDhBcnJheSgxNik7XG5cbiAgLy8gcm5kcyBpcyBVaW50OEFycmF5KDE2KSBmaWxsZWQgd2l0aCByYW5kb20gYnl0ZXNcbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gbWlsbGlzZWNvbmRzIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDBcbiAgY29uc3QgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogRGF0ZS5ub3coKTtcblxuICAvLyBzZXEgaXMgdXNlciBwcm92aWRlZCAzMSBiaXQgY291bnRlclxuICBsZXQgc2VxID0gb3B0aW9ucy5zZXEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc2VxIDogbnVsbDtcblxuICAvLyBpbml0aWFsaXplIGxvY2FsIHNlcSBoaWdoL2xvdyBwYXJ0c1xuICBsZXQgc2VxSGlnaCA9IF9zZXFIaWdoO1xuICBsZXQgc2VxTG93ID0gX3NlcUxvdztcblxuICAvLyBjaGVjayBpZiBjbG9jayBoYXMgYWR2YW5jZWQgYW5kIHVzZXIgaGFzIG5vdCBwcm92aWRlZCBtc2Vjc1xuICBpZiAobXNlY3MgPiBfbXNlY3MgJiYgb3B0aW9ucy5tc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgX21zZWNzID0gbXNlY3M7XG5cbiAgICAvLyB1bmxlc3MgdXNlciBwcm92aWRlZCBzZXEsIHJlc2V0IHNlcSBwYXJ0c1xuICAgIGlmIChzZXEgIT09IG51bGwpIHtcbiAgICAgIHNlcUhpZ2ggPSBudWxsO1xuICAgICAgc2VxTG93ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgdXNlciBwcm92aWRlZCBzZXFcbiAgaWYgKHNlcSAhPT0gbnVsbCkge1xuICAgIC8vIHRyaW0gcHJvdmlkZWQgc2VxIHRvIDMxIGJpdHMgb2YgdmFsdWUsIGF2b2lkaW5nIG92ZXJmbG93XG4gICAgaWYgKHNlcSA+IDB4N2ZmZmZmZmYpIHtcbiAgICAgIHNlcSA9IDB4N2ZmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gc3BsaXQgcHJvdmlkZWQgc2VxIGludG8gaGlnaC9sb3cgcGFydHNcbiAgICBzZXFIaWdoID0gc2VxID4+PiAxOSAmIDB4ZmZmO1xuICAgIHNlcUxvdyA9IHNlcSAmIDB4N2ZmZmY7XG4gIH1cblxuICAvLyByYW5kb21seSBpbml0aWFsaXplIHNlcVxuICBpZiAoc2VxSGlnaCA9PT0gbnVsbCB8fCBzZXFMb3cgPT09IG51bGwpIHtcbiAgICBzZXFIaWdoID0gcm5kc1s2XSAmIDB4N2Y7XG4gICAgc2VxSGlnaCA9IHNlcUhpZ2ggPDwgOCB8IHJuZHNbN107XG4gICAgc2VxTG93ID0gcm5kc1s4XSAmIDB4M2Y7IC8vIHBhZCBmb3IgdmFyXG4gICAgc2VxTG93ID0gc2VxTG93IDw8IDggfCBybmRzWzldO1xuICAgIHNlcUxvdyA9IHNlcUxvdyA8PCA1IHwgcm5kc1sxMF0gPj4+IDM7XG4gIH1cblxuICAvLyBpbmNyZW1lbnQgc2VxIGlmIHdpdGhpbiBtc2VjcyB3aW5kb3dcbiAgaWYgKG1zZWNzICsgMTAwMDAgPiBfbXNlY3MgJiYgc2VxID09PSBudWxsKSB7XG4gICAgaWYgKCsrc2VxTG93ID4gMHg3ZmZmZikge1xuICAgICAgc2VxTG93ID0gMDtcbiAgICAgIGlmICgrK3NlcUhpZ2ggPiAweGZmZikge1xuICAgICAgICBzZXFIaWdoID0gMDtcblxuICAgICAgICAvLyBpbmNyZW1lbnQgaW50ZXJuYWwgX21zZWNzLiB0aGlzIGFsbG93cyB1cyB0byBjb250aW51ZSBpbmNyZW1lbnRpbmdcbiAgICAgICAgLy8gd2hpbGUgc3RheWluZyBtb25vdG9uaWMuIE5vdGUsIG9uY2Ugd2UgaGl0IDEwayBtaWxsaXNlY29uZHMgYmV5b25kIHN5c3RlbVxuICAgICAgICAvLyBjbG9jaywgd2Ugd2lsbCByZXNldCBicmVha2luZyBtb25vdG9uaWNpdHkgKGFmdGVyICgyXjMxKSoxMDAwMCBnZW5lcmF0aW9ucylcbiAgICAgICAgX21zZWNzKys7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIHJlc2V0dGluZzsgd2UgaGF2ZSBhZHZhbmNlZCBtb3JlIHRoYW5cbiAgICAvLyAxMGsgbWlsbGlzZWNvbmRzIGJleW9uZCBzeXN0ZW0gY2xvY2tcbiAgICBfbXNlY3MgPSBtc2VjcztcbiAgfVxuICBfc2VxSGlnaCA9IHNlcUhpZ2g7XG4gIF9zZXFMb3cgPSBzZXFMb3c7XG5cbiAgLy8gW2J5dGVzIDAtNV0gNDggYml0cyBvZiBsb2NhbCB0aW1lc3RhbXBcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAwMDAwMDAwMCAmIDB4ZmY7XG4gIGJbaSsrXSA9IF9tc2VjcyAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAwMDAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzIC8gMHgxMDAwMCAmIDB4ZmY7XG4gIGJbaSsrXSA9IF9tc2VjcyAvIDB4MTAwICYgMHhmZjtcbiAgYltpKytdID0gX21zZWNzICYgMHhmZjtcblxuICAvLyBbYnl0ZSA2XSAtIHNldCA0IGJpdHMgb2YgdmVyc2lvbiAoNykgd2l0aCBmaXJzdCA0IGJpdHMgc2VxX2hpXG4gIGJbaSsrXSA9IHNlcUhpZ2ggPj4+IDQgJiAweDBmIHwgMHg3MDtcblxuICAvLyBbYnl0ZSA3XSByZW1haW5pbmcgOCBiaXRzIG9mIHNlcV9oaVxuICBiW2krK10gPSBzZXFIaWdoICYgMHhmZjtcblxuICAvLyBbYnl0ZSA4XSAtIHZhcmlhbnQgKDIgYml0cyksIGZpcnN0IDYgYml0cyBzZXFfbG93XG4gIGJbaSsrXSA9IHNlcUxvdyA+Pj4gMTMgJiAweDNmIHwgMHg4MDtcblxuICAvLyBbYnl0ZSA5XSA4IGJpdHMgc2VxX2xvd1xuICBiW2krK10gPSBzZXFMb3cgPj4+IDUgJiAweGZmO1xuXG4gIC8vIFtieXRlIDEwXSByZW1haW5pbmcgNSBiaXRzIHNlcV9sb3csIDMgYml0cyByYW5kb21cbiAgYltpKytdID0gc2VxTG93IDw8IDMgJiAweGZmIHwgcm5kc1sxMF0gJiAweDA3O1xuXG4gIC8vIFtieXRlcyAxMS0xNV0gYWx3YXlzIHJhbmRvbVxuICBiW2krK10gPSBybmRzWzExXTtcbiAgYltpKytdID0gcm5kc1sxMl07XG4gIGJbaSsrXSA9IHJuZHNbMTNdO1xuICBiW2krK10gPSBybmRzWzE0XTtcbiAgYltpKytdID0gcm5kc1sxNV07XG4gIHJldHVybiBidWYgfHwgdW5zYWZlU3RyaW5naWZ5KGIpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjc7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/v7.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/validate.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/validate.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/regex.js\");\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFDL0I7QUFDQSxxQ0FBcUMsaURBQUs7QUFDMUM7QUFDQSxpRUFBZSxRQUFRIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92YWxpZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/version.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/version.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction version(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  return parseInt(uuid.slice(14, 15), 16);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUNyQztBQUNBLE9BQU8sd0RBQVE7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLE9BQU8iLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG4gIHJldHVybiBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxNSksIDE2KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHZlcnNpb247Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-common/node_modules/uuid/dist/esm-node/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-gauth/dist/auth.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/google-gauth/dist/auth.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GAuthClient = exports.NodeSseJsonStream = exports.NodeSseStream = exports.NodeJsonStream = exports.NodeAbstractStream = void 0;\nconst google_common_1 = __webpack_require__(/*! @langchain/google-common */ \"(rsc)/./node_modules/@langchain/google-common/index.cjs\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nclass NodeAbstractStream {\n    constructor(baseStream, data) {\n        Object.defineProperty(this, \"baseStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.baseStream = baseStream;\n        const decoder = new TextDecoder(\"utf-8\");\n        data.on(\"data\", (data) => {\n            const text = decoder.decode(data, { stream: true });\n            this.appendBuffer(text);\n        });\n        data.on(\"end\", () => {\n            const rest = decoder.decode();\n            this.appendBuffer(rest);\n            this.closeBuffer();\n        });\n    }\n    appendBuffer(data) {\n        return this.baseStream.appendBuffer(data);\n    }\n    closeBuffer() {\n        return this.baseStream.closeBuffer();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    nextChunk() {\n        return this.baseStream.nextChunk();\n    }\n    get streamDone() {\n        return this.baseStream.streamDone;\n    }\n}\nexports.NodeAbstractStream = NodeAbstractStream;\nclass NodeJsonStream extends NodeAbstractStream {\n    constructor(data) {\n        super(new google_common_1.JsonStream(), data);\n    }\n}\nexports.NodeJsonStream = NodeJsonStream;\nclass NodeSseStream extends NodeAbstractStream {\n    constructor(data) {\n        super(new google_common_1.SseStream(), data);\n    }\n}\nexports.NodeSseStream = NodeSseStream;\nclass NodeSseJsonStream extends NodeAbstractStream {\n    constructor(data) {\n        super(new google_common_1.SseJsonStream(), data);\n    }\n}\nexports.NodeSseJsonStream = NodeSseJsonStream;\nclass GAuthClient {\n    constructor(fields) {\n        Object.defineProperty(this, \"gauth\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const options = (0, google_common_1.ensureAuthOptionScopes)(fields?.authOptions, \"scopes\", fields?.platformType);\n        this.gauth = new google_auth_library_1.GoogleAuth(options);\n    }\n    get clientType() {\n        return \"gauth\";\n    }\n    async getProjectId() {\n        return this.gauth.getProjectId();\n    }\n    async request(opts) {\n        const ret = await this.gauth.request(opts);\n        const [contentType] = ret?.headers?.[\"content-type\"]?.split(/;/) ?? [\"\"];\n        if (opts.responseType !== \"stream\") {\n            return ret;\n        }\n        else if (contentType === \"text/event-stream\") {\n            return {\n                ...ret,\n                data: new NodeSseJsonStream(ret.data),\n            };\n        }\n        else {\n            return {\n                ...ret,\n                data: new NodeJsonStream(ret.data),\n            };\n        }\n    }\n}\nexports.GAuthClient = GAuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvZGlzdC9hdXRoLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyx5QkFBeUIsR0FBRyxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRywwQkFBMEI7QUFDN0gsd0JBQXdCLG1CQUFPLENBQUMseUZBQTBCO0FBQzFELDhCQUE4QixtQkFBTyxDQUFDLHdGQUFxQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsY0FBYztBQUM5RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nYXV0aC9kaXN0L2F1dGguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HQXV0aENsaWVudCA9IGV4cG9ydHMuTm9kZVNzZUpzb25TdHJlYW0gPSBleHBvcnRzLk5vZGVTc2VTdHJlYW0gPSBleHBvcnRzLk5vZGVKc29uU3RyZWFtID0gZXhwb3J0cy5Ob2RlQWJzdHJhY3RTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBnb29nbGVfY29tbW9uXzEgPSByZXF1aXJlKFwiQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uXCIpO1xuY29uc3QgZ29vZ2xlX2F1dGhfbGlicmFyeV8xID0gcmVxdWlyZShcImdvb2dsZS1hdXRoLWxpYnJhcnlcIik7XG5jbGFzcyBOb2RlQWJzdHJhY3RTdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKGJhc2VTdHJlYW0sIGRhdGEpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYmFzZVN0cmVhbVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJhc2VTdHJlYW0gPSBiYXNlU3RyZWFtO1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIik7XG4gICAgICAgIGRhdGEub24oXCJkYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gZGVjb2Rlci5kZWNvZGUoZGF0YSwgeyBzdHJlYW06IHRydWUgfSk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcih0ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRhdGEub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdCA9IGRlY29kZXIuZGVjb2RlKCk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZEJ1ZmZlcihyZXN0KTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdWZmZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGVuZEJ1ZmZlcihkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VTdHJlYW0uYXBwZW5kQnVmZmVyKGRhdGEpO1xuICAgIH1cbiAgICBjbG9zZUJ1ZmZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVN0cmVhbS5jbG9zZUJ1ZmZlcigpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIG5leHRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVN0cmVhbS5uZXh0Q2h1bmsoKTtcbiAgICB9XG4gICAgZ2V0IHN0cmVhbURvbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VTdHJlYW0uc3RyZWFtRG9uZTtcbiAgICB9XG59XG5leHBvcnRzLk5vZGVBYnN0cmFjdFN0cmVhbSA9IE5vZGVBYnN0cmFjdFN0cmVhbTtcbmNsYXNzIE5vZGVKc29uU3RyZWFtIGV4dGVuZHMgTm9kZUFic3RyYWN0U3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKG5ldyBnb29nbGVfY29tbW9uXzEuSnNvblN0cmVhbSgpLCBkYXRhKTtcbiAgICB9XG59XG5leHBvcnRzLk5vZGVKc29uU3RyZWFtID0gTm9kZUpzb25TdHJlYW07XG5jbGFzcyBOb2RlU3NlU3RyZWFtIGV4dGVuZHMgTm9kZUFic3RyYWN0U3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKG5ldyBnb29nbGVfY29tbW9uXzEuU3NlU3RyZWFtKCksIGRhdGEpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm9kZVNzZVN0cmVhbSA9IE5vZGVTc2VTdHJlYW07XG5jbGFzcyBOb2RlU3NlSnNvblN0cmVhbSBleHRlbmRzIE5vZGVBYnN0cmFjdFN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcihuZXcgZ29vZ2xlX2NvbW1vbl8xLlNzZUpzb25TdHJlYW0oKSwgZGF0YSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob2RlU3NlSnNvblN0cmVhbSA9IE5vZGVTc2VKc29uU3RyZWFtO1xuY2xhc3MgR0F1dGhDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJnYXV0aFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gKDAsIGdvb2dsZV9jb21tb25fMS5lbnN1cmVBdXRoT3B0aW9uU2NvcGVzKShmaWVsZHM/LmF1dGhPcHRpb25zLCBcInNjb3Blc1wiLCBmaWVsZHM/LnBsYXRmb3JtVHlwZSk7XG4gICAgICAgIHRoaXMuZ2F1dGggPSBuZXcgZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGgob3B0aW9ucyk7XG4gICAgfVxuICAgIGdldCBjbGllbnRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJnYXV0aFwiO1xuICAgIH1cbiAgICBhc3luYyBnZXRQcm9qZWN0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdhdXRoLmdldFByb2plY3RJZCgpO1xuICAgIH1cbiAgICBhc3luYyByZXF1ZXN0KG9wdHMpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgdGhpcy5nYXV0aC5yZXF1ZXN0KG9wdHMpO1xuICAgICAgICBjb25zdCBbY29udGVudFR5cGVdID0gcmV0Py5oZWFkZXJzPy5bXCJjb250ZW50LXR5cGVcIl0/LnNwbGl0KC87LykgPz8gW1wiXCJdO1xuICAgICAgICBpZiAob3B0cy5yZXNwb25zZVR5cGUgIT09IFwic3RyZWFtXCIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udGVudFR5cGUgPT09IFwidGV4dC9ldmVudC1zdHJlYW1cIikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXQsXG4gICAgICAgICAgICAgICAgZGF0YTogbmV3IE5vZGVTc2VKc29uU3RyZWFtKHJldC5kYXRhKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJldCxcbiAgICAgICAgICAgICAgICBkYXRhOiBuZXcgTm9kZUpzb25TdHJlYW0ocmV0LmRhdGEpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuR0F1dGhDbGllbnQgPSBHQXV0aENsaWVudDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-gauth/dist/auth.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-gauth/dist/chat_models.cjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/google-gauth/dist/chat_models.cjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatGoogle = void 0;\nconst google_common_1 = __webpack_require__(/*! @langchain/google-common */ \"(rsc)/./node_modules/@langchain/google-common/index.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/auth.cjs\");\n/**\n * Integration with a Google chat model.\n */\nclass ChatGoogle extends google_common_1.ChatGoogleBase {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"ChatGoogle\";\n    }\n    constructor(fields) {\n        super(fields);\n    }\n    buildAbstractedClient(fields) {\n        return new auth_js_1.GAuthClient(fields);\n    }\n}\nexports.ChatGoogle = ChatGoogle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvZGlzdC9jaGF0X21vZGVscy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLHdCQUF3QixtQkFBTyxDQUFDLHlGQUEwQjtBQUMxRCxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdhdXRoL2Rpc3QvY2hhdF9tb2RlbHMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGF0R29vZ2xlID0gdm9pZCAwO1xuY29uc3QgZ29vZ2xlX2NvbW1vbl8xID0gcmVxdWlyZShcIkBsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vblwiKTtcbmNvbnN0IGF1dGhfanNfMSA9IHJlcXVpcmUoXCIuL2F1dGguY2pzXCIpO1xuLyoqXG4gKiBJbnRlZ3JhdGlvbiB3aXRoIGEgR29vZ2xlIGNoYXQgbW9kZWwuXG4gKi9cbmNsYXNzIENoYXRHb29nbGUgZXh0ZW5kcyBnb29nbGVfY29tbW9uXzEuQ2hhdEdvb2dsZUJhc2Uge1xuICAgIC8vIFVzZWQgZm9yIHRyYWNpbmcsIHJlcGxhY2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHlvdXIgY2xhc3NcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2hhdEdvb2dsZVwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICB9XG4gICAgYnVpbGRBYnN0cmFjdGVkQ2xpZW50KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gbmV3IGF1dGhfanNfMS5HQXV0aENsaWVudChmaWVsZHMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2hhdEdvb2dsZSA9IENoYXRHb29nbGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-gauth/dist/chat_models.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-gauth/dist/embeddings.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/google-gauth/dist/embeddings.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleEmbeddings = void 0;\nconst google_common_1 = __webpack_require__(/*! @langchain/google-common */ \"(rsc)/./node_modules/@langchain/google-common/index.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/auth.cjs\");\n/**\n * Integration with an Google embeddings model.\n */\nclass GoogleEmbeddings extends google_common_1.BaseGoogleEmbeddings {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"GoogleEmbeddings\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    buildAbstractedClient(fields) {\n        return new auth_js_1.GAuthClient(fields);\n    }\n}\nexports.GoogleEmbeddings = GoogleEmbeddings;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvZGlzdC9lbWJlZGRpbmdzLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsd0JBQXdCLG1CQUFPLENBQUMseUZBQTBCO0FBQzFELGtCQUFrQixtQkFBTyxDQUFDLDhFQUFZO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nYXV0aC9kaXN0L2VtYmVkZGluZ3MuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Hb29nbGVFbWJlZGRpbmdzID0gdm9pZCAwO1xuY29uc3QgZ29vZ2xlX2NvbW1vbl8xID0gcmVxdWlyZShcIkBsYW5nY2hhaW4vZ29vZ2xlLWNvbW1vblwiKTtcbmNvbnN0IGF1dGhfanNfMSA9IHJlcXVpcmUoXCIuL2F1dGguY2pzXCIpO1xuLyoqXG4gKiBJbnRlZ3JhdGlvbiB3aXRoIGFuIEdvb2dsZSBlbWJlZGRpbmdzIG1vZGVsLlxuICovXG5jbGFzcyBHb29nbGVFbWJlZGRpbmdzIGV4dGVuZHMgZ29vZ2xlX2NvbW1vbl8xLkJhc2VHb29nbGVFbWJlZGRpbmdzIHtcbiAgICAvLyBVc2VkIGZvciB0cmFjaW5nLCByZXBsYWNlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyB5b3VyIGNsYXNzXG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkdvb2dsZUVtYmVkZGluZ3NcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRBYnN0cmFjdGVkQ2xpZW50KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gbmV3IGF1dGhfanNfMS5HQXV0aENsaWVudChmaWVsZHMpO1xuICAgIH1cbn1cbmV4cG9ydHMuR29vZ2xlRW1iZWRkaW5ncyA9IEdvb2dsZUVtYmVkZGluZ3M7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-gauth/dist/embeddings.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-gauth/dist/index.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/google-gauth/dist/index.cjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./chat_models.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/chat_models.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./llms.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/llms.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./embeddings.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/embeddings.cjs\"), exports);\n__exportStar(__webpack_require__(/*! ./media.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/media.cjs\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvZGlzdC9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRGQUFtQjtBQUN4QyxhQUFhLG1CQUFPLENBQUMsOEVBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLDBGQUFrQjtBQUN2QyxhQUFhLG1CQUFPLENBQUMsZ0ZBQWEiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdhdXRoL2Rpc3QvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2hhdF9tb2RlbHMuY2pzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9sbG1zLmNqc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW1iZWRkaW5ncy5janNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21lZGlhLmNqc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-gauth/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-gauth/dist/llms.cjs":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/google-gauth/dist/llms.cjs ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleLLM = void 0;\nconst google_common_1 = __webpack_require__(/*! @langchain/google-common */ \"(rsc)/./node_modules/@langchain/google-common/index.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/auth.cjs\");\n/**\n * Integration with a Google LLM.\n */\nclass GoogleLLM extends google_common_1.GoogleBaseLLM {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"GoogleLLM\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    buildAbstractedClient(fields) {\n        return new auth_js_1.GAuthClient(fields);\n    }\n}\nexports.GoogleLLM = GoogleLLM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvZGlzdC9sbG1zLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsd0JBQXdCLG1CQUFPLENBQUMseUZBQTBCO0FBQzFELGtCQUFrQixtQkFBTyxDQUFDLDhFQUFZO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nYXV0aC9kaXN0L2xsbXMuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Hb29nbGVMTE0gPSB2b2lkIDA7XG5jb25zdCBnb29nbGVfY29tbW9uXzEgPSByZXF1aXJlKFwiQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uXCIpO1xuY29uc3QgYXV0aF9qc18xID0gcmVxdWlyZShcIi4vYXV0aC5janNcIik7XG4vKipcbiAqIEludGVncmF0aW9uIHdpdGggYSBHb29nbGUgTExNLlxuICovXG5jbGFzcyBHb29nbGVMTE0gZXh0ZW5kcyBnb29nbGVfY29tbW9uXzEuR29vZ2xlQmFzZUxMTSB7XG4gICAgLy8gVXNlZCBmb3IgdHJhY2luZywgcmVwbGFjZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgeW91ciBjbGFzc1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJHb29nbGVMTE1cIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRBYnN0cmFjdGVkQ2xpZW50KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gbmV3IGF1dGhfanNfMS5HQXV0aENsaWVudChmaWVsZHMpO1xuICAgIH1cbn1cbmV4cG9ydHMuR29vZ2xlTExNID0gR29vZ2xlTExNO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-gauth/dist/llms.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-gauth/dist/media.cjs":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/google-gauth/dist/media.cjs ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BlobStoreAIStudioFile = exports.BlobStoreGoogleCloudStorage = void 0;\nconst media_1 = __webpack_require__(/*! @langchain/google-common/experimental/media */ \"(rsc)/./node_modules/@langchain/google-common/experimental/media.cjs\");\nconst auth_js_1 = __webpack_require__(/*! ./auth.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/auth.cjs\");\nclass BlobStoreGoogleCloudStorage extends media_1.BlobStoreGoogleCloudStorageBase {\n    buildClient(fields) {\n        return new auth_js_1.GAuthClient(fields);\n    }\n}\nexports.BlobStoreGoogleCloudStorage = BlobStoreGoogleCloudStorage;\nclass BlobStoreAIStudioFile extends media_1.BlobStoreAIStudioFileBase {\n    buildAbstractedClient(fields) {\n        return new auth_js_1.GAuthClient(fields);\n    }\n}\nexports.BlobStoreAIStudioFile = BlobStoreAIStudioFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvZGlzdC9tZWRpYS5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcsbUNBQW1DO0FBQ25FLGdCQUFnQixtQkFBTyxDQUFDLHlIQUE2QztBQUNyRSxrQkFBa0IsbUJBQU8sQ0FBQyw4RUFBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdhdXRoL2Rpc3QvbWVkaWEuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CbG9iU3RvcmVBSVN0dWRpb0ZpbGUgPSBleHBvcnRzLkJsb2JTdG9yZUdvb2dsZUNsb3VkU3RvcmFnZSA9IHZvaWQgMDtcbmNvbnN0IG1lZGlhXzEgPSByZXF1aXJlKFwiQGxhbmdjaGFpbi9nb29nbGUtY29tbW9uL2V4cGVyaW1lbnRhbC9tZWRpYVwiKTtcbmNvbnN0IGF1dGhfanNfMSA9IHJlcXVpcmUoXCIuL2F1dGguY2pzXCIpO1xuY2xhc3MgQmxvYlN0b3JlR29vZ2xlQ2xvdWRTdG9yYWdlIGV4dGVuZHMgbWVkaWFfMS5CbG9iU3RvcmVHb29nbGVDbG91ZFN0b3JhZ2VCYXNlIHtcbiAgICBidWlsZENsaWVudChmaWVsZHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhdXRoX2pzXzEuR0F1dGhDbGllbnQoZmllbGRzKTtcbiAgICB9XG59XG5leHBvcnRzLkJsb2JTdG9yZUdvb2dsZUNsb3VkU3RvcmFnZSA9IEJsb2JTdG9yZUdvb2dsZUNsb3VkU3RvcmFnZTtcbmNsYXNzIEJsb2JTdG9yZUFJU3R1ZGlvRmlsZSBleHRlbmRzIG1lZGlhXzEuQmxvYlN0b3JlQUlTdHVkaW9GaWxlQmFzZSB7XG4gICAgYnVpbGRBYnN0cmFjdGVkQ2xpZW50KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gbmV3IGF1dGhfanNfMS5HQXV0aENsaWVudChmaWVsZHMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQmxvYlN0b3JlQUlTdHVkaW9GaWxlID0gQmxvYlN0b3JlQUlTdHVkaW9GaWxlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-gauth/dist/media.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/google-gauth/index.cjs":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/google-gauth/index.cjs ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/index.cjs */ \"(rsc)/./node_modules/@langchain/google-gauth/dist/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFBLDJIQUE0QyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2F1dGgvaW5kZXguY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2luZGV4LmNqcycpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/google-gauth/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/client.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/client.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Client = exports.StoreClient = exports.RunsClient = exports.ThreadsClient = exports.AssistantsClient = exports.CronsClient = exports.getApiKey = void 0;\nconst async_caller_js_1 = __webpack_require__(/*! ./utils/async_caller.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.cjs\");\nconst env_js_1 = __webpack_require__(/*! ./utils/env.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/env.cjs\");\nconst signals_js_1 = __webpack_require__(/*! ./utils/signals.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/signals.cjs\");\nconst sse_js_1 = __webpack_require__(/*! ./utils/sse.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/sse.cjs\");\nconst stream_js_1 = __webpack_require__(/*! ./utils/stream.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/stream.cjs\");\n/**\n * Get the API key from the environment.\n * Precedence:\n *   1. explicit argument\n *   2. LANGGRAPH_API_KEY\n *   3. LANGSMITH_API_KEY\n *   4. LANGCHAIN_API_KEY\n *\n * @param apiKey - Optional API key provided as an argument\n * @returns The API key if found, otherwise undefined\n */\nfunction getApiKey(apiKey) {\n    if (apiKey) {\n        return apiKey;\n    }\n    const prefixes = [\"LANGGRAPH\", \"LANGSMITH\", \"LANGCHAIN\"];\n    for (const prefix of prefixes) {\n        const envKey = (0, env_js_1.getEnvironmentVariable)(`${prefix}_API_KEY`);\n        if (envKey) {\n            // Remove surrounding quotes\n            return envKey.trim().replace(/^[\"']|[\"']$/g, \"\");\n        }\n    }\n    return undefined;\n}\nexports.getApiKey = getApiKey;\nclass BaseClient {\n    constructor(config) {\n        Object.defineProperty(this, \"asyncCaller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeoutMs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"defaultHeaders\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const callerOptions = {\n            maxRetries: 4,\n            maxConcurrency: 4,\n            ...config?.callerOptions,\n        };\n        let defaultApiUrl = \"http://localhost:8123\";\n        if (!config?.apiUrl &&\n            typeof globalThis === \"object\" &&\n            globalThis != null) {\n            const fetchSmb = Symbol.for(\"langgraph_api:fetch\");\n            const urlSmb = Symbol.for(\"langgraph_api:url\");\n            const global = globalThis;\n            if (global[fetchSmb])\n                callerOptions.fetch ??= global[fetchSmb];\n            if (global[urlSmb])\n                defaultApiUrl = global[urlSmb];\n        }\n        this.asyncCaller = new async_caller_js_1.AsyncCaller(callerOptions);\n        this.timeoutMs = config?.timeoutMs;\n        // default limit being capped by Chrome\n        // https://github.com/nodejs/undici/issues/1373\n        // Regex to remove trailing slash, if present\n        this.apiUrl = config?.apiUrl?.replace(/\\/$/, \"\") || defaultApiUrl;\n        this.defaultHeaders = config?.defaultHeaders || {};\n        const apiKey = getApiKey(config?.apiKey);\n        if (apiKey) {\n            this.defaultHeaders[\"X-Api-Key\"] = apiKey;\n        }\n    }\n    prepareFetchOptions(path, options) {\n        const mutatedOptions = {\n            ...options,\n            headers: { ...this.defaultHeaders, ...options?.headers },\n        };\n        if (mutatedOptions.json) {\n            mutatedOptions.body = JSON.stringify(mutatedOptions.json);\n            mutatedOptions.headers = {\n                ...mutatedOptions.headers,\n                \"Content-Type\": \"application/json\",\n            };\n            delete mutatedOptions.json;\n        }\n        let timeoutSignal = null;\n        if (typeof options?.timeoutMs !== \"undefined\") {\n            if (options.timeoutMs != null) {\n                timeoutSignal = AbortSignal.timeout(options.timeoutMs);\n            }\n        }\n        else if (this.timeoutMs != null) {\n            timeoutSignal = AbortSignal.timeout(this.timeoutMs);\n        }\n        mutatedOptions.signal = (0, signals_js_1.mergeSignals)(timeoutSignal, mutatedOptions.signal);\n        const targetUrl = new URL(`${this.apiUrl}${path}`);\n        if (mutatedOptions.params) {\n            for (const [key, value] of Object.entries(mutatedOptions.params)) {\n                if (value == null)\n                    continue;\n                let strValue = typeof value === \"string\" || typeof value === \"number\"\n                    ? value.toString()\n                    : JSON.stringify(value);\n                targetUrl.searchParams.append(key, strValue);\n            }\n            delete mutatedOptions.params;\n        }\n        return [targetUrl, mutatedOptions];\n    }\n    async fetch(path, options) {\n        const response = await this.asyncCaller.fetch(...this.prepareFetchOptions(path, options));\n        if (response.status === 202 || response.status === 204) {\n            return undefined;\n        }\n        return response.json();\n    }\n}\nclass CronsClient extends BaseClient {\n    /**\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this cron job.\n     * @param payload Payload for creating a cron job.\n     * @returns The created background run.\n     */\n    async createForThread(threadId, assistantId, payload) {\n        const json = {\n            schedule: payload?.schedule,\n            input: payload?.input,\n            config: payload?.config,\n            metadata: payload?.metadata,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            if_not_exists: payload?.ifNotExists,\n        };\n        return this.fetch(`/threads/${threadId}/runs/crons`, {\n            method: \"POST\",\n            json,\n        });\n    }\n    /**\n     *\n     * @param assistantId Assistant ID to use for this cron job.\n     * @param payload Payload for creating a cron job.\n     * @returns\n     */\n    async create(assistantId, payload) {\n        const json = {\n            schedule: payload?.schedule,\n            input: payload?.input,\n            config: payload?.config,\n            metadata: payload?.metadata,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            if_not_exists: payload?.ifNotExists,\n        };\n        return this.fetch(`/runs/crons`, {\n            method: \"POST\",\n            json,\n        });\n    }\n    /**\n     *\n     * @param cronId Cron ID of Cron job to delete.\n     */\n    async delete(cronId) {\n        await this.fetch(`/runs/crons/${cronId}`, {\n            method: \"DELETE\",\n        });\n    }\n    /**\n     *\n     * @param query Query options.\n     * @returns List of crons.\n     */\n    async search(query) {\n        return this.fetch(\"/runs/crons/search\", {\n            method: \"POST\",\n            json: {\n                assistant_id: query?.assistantId ?? undefined,\n                thread_id: query?.threadId ?? undefined,\n                limit: query?.limit ?? 10,\n                offset: query?.offset ?? 0,\n            },\n        });\n    }\n}\nexports.CronsClient = CronsClient;\nclass AssistantsClient extends BaseClient {\n    /**\n     * Get an assistant by ID.\n     *\n     * @param assistantId The ID of the assistant.\n     * @returns Assistant\n     */\n    async get(assistantId) {\n        return this.fetch(`/assistants/${assistantId}`);\n    }\n    /**\n     * Get the JSON representation of the graph assigned to a runnable\n     * @param assistantId The ID of the assistant.\n     * @param options.xray Whether to include subgraphs in the serialized graph representation. If an integer value is provided, only subgraphs with a depth less than or equal to the value will be included.\n     * @returns Serialized graph\n     */\n    async getGraph(assistantId, options) {\n        return this.fetch(`/assistants/${assistantId}/graph`, {\n            params: { xray: options?.xray },\n        });\n    }\n    /**\n     * Get the state and config schema of the graph assigned to a runnable\n     * @param assistantId The ID of the assistant.\n     * @returns Graph schema\n     */\n    async getSchemas(assistantId) {\n        return this.fetch(`/assistants/${assistantId}/schemas`);\n    }\n    /**\n     * Get the schemas of an assistant by ID.\n     *\n     * @param assistantId The ID of the assistant to get the schema of.\n     * @param options Additional options for getting subgraphs, such as namespace or recursion extraction.\n     * @returns The subgraphs of the assistant.\n     */\n    async getSubgraphs(assistantId, options) {\n        if (options?.namespace) {\n            return this.fetch(`/assistants/${assistantId}/subgraphs/${options.namespace}`, { params: { recurse: options?.recurse } });\n        }\n        return this.fetch(`/assistants/${assistantId}/subgraphs`, {\n            params: { recurse: options?.recurse },\n        });\n    }\n    /**\n     * Create a new assistant.\n     * @param payload Payload for creating an assistant.\n     * @returns The created assistant.\n     */\n    async create(payload) {\n        return this.fetch(\"/assistants\", {\n            method: \"POST\",\n            json: {\n                graph_id: payload.graphId,\n                config: payload.config,\n                metadata: payload.metadata,\n                assistant_id: payload.assistantId,\n                if_exists: payload.ifExists,\n                name: payload.name,\n                description: payload.description,\n            },\n        });\n    }\n    /**\n     * Update an assistant.\n     * @param assistantId ID of the assistant.\n     * @param payload Payload for updating the assistant.\n     * @returns The updated assistant.\n     */\n    async update(assistantId, payload) {\n        return this.fetch(`/assistants/${assistantId}`, {\n            method: \"PATCH\",\n            json: {\n                graph_id: payload.graphId,\n                config: payload.config,\n                metadata: payload.metadata,\n                name: payload.name,\n                description: payload.description,\n            },\n        });\n    }\n    /**\n     * Delete an assistant.\n     *\n     * @param assistantId ID of the assistant.\n     */\n    async delete(assistantId) {\n        return this.fetch(`/assistants/${assistantId}`, {\n            method: \"DELETE\",\n        });\n    }\n    /**\n     * List assistants.\n     * @param query Query options.\n     * @returns List of assistants.\n     */\n    async search(query) {\n        return this.fetch(\"/assistants/search\", {\n            method: \"POST\",\n            json: {\n                graph_id: query?.graphId ?? undefined,\n                metadata: query?.metadata ?? undefined,\n                limit: query?.limit ?? 10,\n                offset: query?.offset ?? 0,\n            },\n        });\n    }\n    /**\n     * List all versions of an assistant.\n     *\n     * @param assistantId ID of the assistant.\n     * @returns List of assistant versions.\n     */\n    async getVersions(assistantId, payload) {\n        return this.fetch(`/assistants/${assistantId}/versions`, {\n            method: \"POST\",\n            json: {\n                metadata: payload?.metadata ?? undefined,\n                limit: payload?.limit ?? 10,\n                offset: payload?.offset ?? 0,\n            },\n        });\n    }\n    /**\n     * Change the version of an assistant.\n     *\n     * @param assistantId ID of the assistant.\n     * @param version The version to change to.\n     * @returns The updated assistant.\n     */\n    async setLatest(assistantId, version) {\n        return this.fetch(`/assistants/${assistantId}/latest`, {\n            method: \"POST\",\n            json: { version },\n        });\n    }\n}\nexports.AssistantsClient = AssistantsClient;\nclass ThreadsClient extends BaseClient {\n    /**\n     * Get a thread by ID.\n     *\n     * @param threadId ID of the thread.\n     * @returns The thread.\n     */\n    async get(threadId) {\n        return this.fetch(`/threads/${threadId}`);\n    }\n    /**\n     * Create a new thread.\n     *\n     * @param payload Payload for creating a thread.\n     * @returns The created thread.\n     */\n    async create(payload) {\n        return this.fetch(`/threads`, {\n            method: \"POST\",\n            json: {\n                metadata: {\n                    ...payload?.metadata,\n                    graph_id: payload?.graphId,\n                },\n                thread_id: payload?.threadId,\n                if_exists: payload?.ifExists,\n                supersteps: payload?.supersteps?.map((s) => ({\n                    updates: s.updates.map((u) => ({\n                        values: u.values,\n                        command: u.command,\n                        as_node: u.asNode,\n                    })),\n                })),\n            },\n        });\n    }\n    /**\n     * Copy an existing thread\n     * @param threadId ID of the thread to be copied\n     * @returns Newly copied thread\n     */\n    async copy(threadId) {\n        return this.fetch(`/threads/${threadId}/copy`, {\n            method: \"POST\",\n        });\n    }\n    /**\n     * Update a thread.\n     *\n     * @param threadId ID of the thread.\n     * @param payload Payload for updating the thread.\n     * @returns The updated thread.\n     */\n    async update(threadId, payload) {\n        return this.fetch(`/threads/${threadId}`, {\n            method: \"PATCH\",\n            json: { metadata: payload?.metadata },\n        });\n    }\n    /**\n     * Delete a thread.\n     *\n     * @param threadId ID of the thread.\n     */\n    async delete(threadId) {\n        return this.fetch(`/threads/${threadId}`, {\n            method: \"DELETE\",\n        });\n    }\n    /**\n     * List threads\n     *\n     * @param query Query options\n     * @returns List of threads\n     */\n    async search(query) {\n        return this.fetch(\"/threads/search\", {\n            method: \"POST\",\n            json: {\n                metadata: query?.metadata ?? undefined,\n                limit: query?.limit ?? 10,\n                offset: query?.offset ?? 0,\n                status: query?.status,\n                sort_by: query?.sortBy,\n                sort_order: query?.sortOrder,\n            },\n        });\n    }\n    /**\n     * Get state for a thread.\n     *\n     * @param threadId ID of the thread.\n     * @returns Thread state.\n     */\n    async getState(threadId, checkpoint, options) {\n        if (checkpoint != null) {\n            if (typeof checkpoint !== \"string\") {\n                return this.fetch(`/threads/${threadId}/state/checkpoint`, {\n                    method: \"POST\",\n                    json: { checkpoint, subgraphs: options?.subgraphs },\n                });\n            }\n            // deprecated\n            return this.fetch(`/threads/${threadId}/state/${checkpoint}`, { params: { subgraphs: options?.subgraphs } });\n        }\n        return this.fetch(`/threads/${threadId}/state`, {\n            params: { subgraphs: options?.subgraphs },\n        });\n    }\n    /**\n     * Add state to a thread.\n     *\n     * @param threadId The ID of the thread.\n     * @returns\n     */\n    async updateState(threadId, options) {\n        return this.fetch(`/threads/${threadId}/state`, {\n            method: \"POST\",\n            json: {\n                values: options.values,\n                checkpoint_id: options.checkpointId,\n                checkpoint: options.checkpoint,\n                as_node: options?.asNode,\n            },\n        });\n    }\n    /**\n     * Patch the metadata of a thread.\n     *\n     * @param threadIdOrConfig Thread ID or config to patch the state of.\n     * @param metadata Metadata to patch the state with.\n     */\n    async patchState(threadIdOrConfig, metadata) {\n        let threadId;\n        if (typeof threadIdOrConfig !== \"string\") {\n            if (typeof threadIdOrConfig.configurable?.thread_id !== \"string\") {\n                throw new Error(\"Thread ID is required when updating state with a config.\");\n            }\n            threadId = threadIdOrConfig.configurable.thread_id;\n        }\n        else {\n            threadId = threadIdOrConfig;\n        }\n        return this.fetch(`/threads/${threadId}/state`, {\n            method: \"PATCH\",\n            json: { metadata: metadata },\n        });\n    }\n    /**\n     * Get all past states for a thread.\n     *\n     * @param threadId ID of the thread.\n     * @param options Additional options.\n     * @returns List of thread states.\n     */\n    async getHistory(threadId, options) {\n        return this.fetch(`/threads/${threadId}/history`, {\n            method: \"POST\",\n            json: {\n                limit: options?.limit ?? 10,\n                before: options?.before,\n                metadata: options?.metadata,\n                checkpoint: options?.checkpoint,\n            },\n        });\n    }\n}\nexports.ThreadsClient = ThreadsClient;\nclass RunsClient extends BaseClient {\n    /**\n     * Create a run and stream the results.\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this run.\n     * @param payload Payload for creating a run.\n     */\n    async *stream(threadId, assistantId, payload) {\n        const json = {\n            input: payload?.input,\n            command: payload?.command,\n            config: payload?.config,\n            metadata: payload?.metadata,\n            stream_mode: payload?.streamMode,\n            stream_subgraphs: payload?.streamSubgraphs,\n            feedback_keys: payload?.feedbackKeys,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            checkpoint: payload?.checkpoint,\n            checkpoint_id: payload?.checkpointId,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            on_completion: payload?.onCompletion,\n            on_disconnect: payload?.onDisconnect,\n            after_seconds: payload?.afterSeconds,\n            if_not_exists: payload?.ifNotExists,\n        };\n        const endpoint = threadId == null ? `/runs/stream` : `/threads/${threadId}/runs/stream`;\n        const response = await this.asyncCaller.fetch(...this.prepareFetchOptions(endpoint, {\n            method: \"POST\",\n            json,\n            timeoutMs: null,\n            signal: payload?.signal,\n        }));\n        const stream = (response.body || new ReadableStream({ start: (ctrl) => ctrl.close() }))\n            .pipeThrough(new sse_js_1.BytesLineDecoder())\n            .pipeThrough(new sse_js_1.SSEDecoder());\n        yield* stream_js_1.IterableReadableStream.fromReadableStream(stream);\n    }\n    /**\n     * Create a run.\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this run.\n     * @param payload Payload for creating a run.\n     * @returns The created run.\n     */\n    async create(threadId, assistantId, payload) {\n        const json = {\n            input: payload?.input,\n            command: payload?.command,\n            config: payload?.config,\n            metadata: payload?.metadata,\n            stream_mode: payload?.streamMode,\n            stream_subgraphs: payload?.streamSubgraphs,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            webhook: payload?.webhook,\n            checkpoint: payload?.checkpoint,\n            checkpoint_id: payload?.checkpointId,\n            multitask_strategy: payload?.multitaskStrategy,\n            after_seconds: payload?.afterSeconds,\n            if_not_exists: payload?.ifNotExists,\n        };\n        return this.fetch(`/threads/${threadId}/runs`, {\n            method: \"POST\",\n            json,\n            signal: payload?.signal,\n        });\n    }\n    /**\n     * Create a batch of stateless background runs.\n     *\n     * @param payloads An array of payloads for creating runs.\n     * @returns An array of created runs.\n     */\n    async createBatch(payloads) {\n        const filteredPayloads = payloads\n            .map((payload) => ({ ...payload, assistant_id: payload.assistantId }))\n            .map((payload) => {\n            return Object.fromEntries(Object.entries(payload).filter(([_, v]) => v !== undefined));\n        });\n        return this.fetch(\"/runs/batch\", {\n            method: \"POST\",\n            json: filteredPayloads,\n        });\n    }\n    /**\n     * Create a run and wait for it to complete.\n     *\n     * @param threadId The ID of the thread.\n     * @param assistantId Assistant ID to use for this run.\n     * @param payload Payload for creating a run.\n     * @returns The last values chunk of the thread.\n     */\n    async wait(threadId, assistantId, payload) {\n        const json = {\n            input: payload?.input,\n            command: payload?.command,\n            config: payload?.config,\n            metadata: payload?.metadata,\n            assistant_id: assistantId,\n            interrupt_before: payload?.interruptBefore,\n            interrupt_after: payload?.interruptAfter,\n            checkpoint: payload?.checkpoint,\n            checkpoint_id: payload?.checkpointId,\n            webhook: payload?.webhook,\n            multitask_strategy: payload?.multitaskStrategy,\n            on_completion: payload?.onCompletion,\n            on_disconnect: payload?.onDisconnect,\n            after_seconds: payload?.afterSeconds,\n            if_not_exists: payload?.ifNotExists,\n        };\n        const endpoint = threadId == null ? `/runs/wait` : `/threads/${threadId}/runs/wait`;\n        const response = await this.fetch(endpoint, {\n            method: \"POST\",\n            json,\n            timeoutMs: null,\n            signal: payload?.signal,\n        });\n        const raiseError = payload?.raiseError !== undefined ? payload.raiseError : true;\n        if (raiseError &&\n            \"__error__\" in response &&\n            typeof response.__error__ === \"object\" &&\n            response.__error__ &&\n            \"error\" in response.__error__ &&\n            \"message\" in response.__error__) {\n            throw new Error(`${response.__error__?.error}: ${response.__error__?.message}`);\n        }\n        return response;\n    }\n    /**\n     * List all runs for a thread.\n     *\n     * @param threadId The ID of the thread.\n     * @param options Filtering and pagination options.\n     * @returns List of runs.\n     */\n    async list(threadId, options) {\n        return this.fetch(`/threads/${threadId}/runs`, {\n            params: {\n                limit: options?.limit ?? 10,\n                offset: options?.offset ?? 0,\n                status: options?.status ?? undefined,\n            },\n        });\n    }\n    /**\n     * Get a run by ID.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @returns The run.\n     */\n    async get(threadId, runId) {\n        return this.fetch(`/threads/${threadId}/runs/${runId}`);\n    }\n    /**\n     * Cancel a run.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @param wait Whether to block when canceling\n     * @param action Action to take when cancelling the run. Possible values are `interrupt` or `rollback`. Default is `interrupt`.\n     * @returns\n     */\n    async cancel(threadId, runId, wait = false, action = \"interrupt\") {\n        return this.fetch(`/threads/${threadId}/runs/${runId}/cancel`, {\n            method: \"POST\",\n            params: {\n                wait: wait ? \"1\" : \"0\",\n                action: action,\n            },\n        });\n    }\n    /**\n     * Block until a run is done.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @returns\n     */\n    async join(threadId, runId, options) {\n        return this.fetch(`/threads/${threadId}/runs/${runId}/join`, {\n            timeoutMs: null,\n            signal: options?.signal,\n        });\n    }\n    /**\n     * Stream output from a run in real-time, until the run is done.\n     * Output is not buffered, so any output produced before this call will\n     * not be received here.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @param options Additional options for controlling the stream behavior:\n     *   - signal: An AbortSignal that can be used to cancel the stream request\n     *   - cancelOnDisconnect: When true, automatically cancels the run if the client disconnects from the stream\n     *   - streamMode: Controls what types of events to receive from the stream (can be a single mode or array of modes)\n     *        Must be a subset of the stream modes passed when creating the run. Background runs default to having the union of all\n     *        stream modes enabled.\n     * @returns An async generator yielding stream parts.\n     */\n    async *joinStream(threadId, runId, options) {\n        const opts = typeof options === \"object\" &&\n            options != null &&\n            options instanceof AbortSignal\n            ? { signal: options }\n            : options;\n        const response = await this.asyncCaller.fetch(...this.prepareFetchOptions(`/threads/${threadId}/runs/${runId}/stream`, {\n            method: \"GET\",\n            timeoutMs: null,\n            signal: opts?.signal,\n            params: {\n                cancel_on_disconnect: opts?.cancelOnDisconnect ? \"1\" : \"0\",\n                stream_mode: opts?.streamMode,\n            },\n        }));\n        const stream = (response.body || new ReadableStream({ start: (ctrl) => ctrl.close() }))\n            .pipeThrough(new sse_js_1.BytesLineDecoder())\n            .pipeThrough(new sse_js_1.SSEDecoder());\n        yield* stream_js_1.IterableReadableStream.fromReadableStream(stream);\n    }\n    /**\n     * Delete a run.\n     *\n     * @param threadId The ID of the thread.\n     * @param runId The ID of the run.\n     * @returns\n     */\n    async delete(threadId, runId) {\n        return this.fetch(`/threads/${threadId}/runs/${runId}`, {\n            method: \"DELETE\",\n        });\n    }\n}\nexports.RunsClient = RunsClient;\nclass StoreClient extends BaseClient {\n    /**\n     * Store or update an item.\n     *\n     * @param namespace A list of strings representing the namespace path.\n     * @param key The unique identifier for the item within the namespace.\n     * @param value A dictionary containing the item's data.\n     * @param options.index Controls search indexing - null (use defaults), false (disable), or list of field paths to index.\n     * @param options.ttl Optional time-to-live in minutes for the item, or null for no expiration.\n     * @returns Promise<void>\n     *\n     * @example\n     * ```typescript\n     * await client.store.putItem(\n     *   [\"documents\", \"user123\"],\n     *   \"item456\",\n     *   { title: \"My Document\", content: \"Hello World\" },\n     *   { ttl: 60 } // expires in 60 minutes\n     * );\n     * ```\n     */\n    async putItem(namespace, key, value, options) {\n        namespace.forEach((label) => {\n            if (label.includes(\".\")) {\n                throw new Error(`Invalid namespace label '${label}'. Namespace labels cannot contain periods ('.')`);\n            }\n        });\n        const payload = {\n            namespace,\n            key,\n            value,\n            index: options?.index,\n            ttl: options?.ttl,\n        };\n        return this.fetch(\"/store/items\", {\n            method: \"PUT\",\n            json: payload,\n        });\n    }\n    /**\n     * Retrieve a single item.\n     *\n     * @param namespace A list of strings representing the namespace path.\n     * @param key The unique identifier for the item.\n     * @param options.refreshTtl Whether to refresh the TTL on this read operation. If null, uses the store's default behavior.\n     * @returns Promise<Item>\n     *\n     * @example\n     * ```typescript\n     * const item = await client.store.getItem(\n     *   [\"documents\", \"user123\"],\n     *   \"item456\",\n     *   { refreshTtl: true }\n     * );\n     * console.log(item);\n     * // {\n     * //   namespace: [\"documents\", \"user123\"],\n     * //   key: \"item456\",\n     * //   value: { title: \"My Document\", content: \"Hello World\" },\n     * //   createdAt: \"2024-07-30T12:00:00Z\",\n     * //   updatedAt: \"2024-07-30T12:00:00Z\"\n     * // }\n     * ```\n     */\n    async getItem(namespace, key, options) {\n        namespace.forEach((label) => {\n            if (label.includes(\".\")) {\n                throw new Error(`Invalid namespace label '${label}'. Namespace labels cannot contain periods ('.')`);\n            }\n        });\n        const params = {\n            namespace: namespace.join(\".\"),\n            key,\n        };\n        if (options?.refreshTtl !== undefined) {\n            params.refresh_ttl = options.refreshTtl;\n        }\n        const response = await this.fetch(\"/store/items\", {\n            params,\n        });\n        return response\n            ? {\n                ...response,\n                createdAt: response.created_at,\n                updatedAt: response.updated_at,\n            }\n            : null;\n    }\n    /**\n     * Delete an item.\n     *\n     * @param namespace A list of strings representing the namespace path.\n     * @param key The unique identifier for the item.\n     * @returns Promise<void>\n     */\n    async deleteItem(namespace, key) {\n        namespace.forEach((label) => {\n            if (label.includes(\".\")) {\n                throw new Error(`Invalid namespace label '${label}'. Namespace labels cannot contain periods ('.')`);\n            }\n        });\n        return this.fetch(\"/store/items\", {\n            method: \"DELETE\",\n            json: { namespace, key },\n        });\n    }\n    /**\n     * Search for items within a namespace prefix.\n     *\n     * @param namespacePrefix List of strings representing the namespace prefix.\n     * @param options.filter Optional dictionary of key-value pairs to filter results.\n     * @param options.limit Maximum number of items to return (default is 10).\n     * @param options.offset Number of items to skip before returning results (default is 0).\n     * @param options.query Optional search query.\n     * @param options.refreshTtl Whether to refresh the TTL on items returned by this search. If null, uses the store's default behavior.\n     * @returns Promise<SearchItemsResponse>\n     *\n     * @example\n     * ```typescript\n     * const results = await client.store.searchItems(\n     *   [\"documents\"],\n     *   {\n     *     filter: { author: \"John Doe\" },\n     *     limit: 5,\n     *     refreshTtl: true\n     *   }\n     * );\n     * console.log(results);\n     * // {\n     * //   items: [\n     * //     {\n     * //       namespace: [\"documents\", \"user123\"],\n     * //       key: \"item789\",\n     * //       value: { title: \"Another Document\", author: \"John Doe\" },\n     * //       createdAt: \"2024-07-30T12:00:00Z\",\n     * //       updatedAt: \"2024-07-30T12:00:00Z\"\n     * //     },\n     * //     // ... additional items ...\n     * //   ]\n     * // }\n     * ```\n     */\n    async searchItems(namespacePrefix, options) {\n        const payload = {\n            namespace_prefix: namespacePrefix,\n            filter: options?.filter,\n            limit: options?.limit ?? 10,\n            offset: options?.offset ?? 0,\n            query: options?.query,\n            refresh_ttl: options?.refreshTtl,\n        };\n        const response = await this.fetch(\"/store/items/search\", {\n            method: \"POST\",\n            json: payload,\n        });\n        return {\n            items: response.items.map((item) => ({\n                ...item,\n                createdAt: item.created_at,\n                updatedAt: item.updated_at,\n            })),\n        };\n    }\n    /**\n     * List namespaces with optional match conditions.\n     *\n     * @param options.prefix Optional list of strings representing the prefix to filter namespaces.\n     * @param options.suffix Optional list of strings representing the suffix to filter namespaces.\n     * @param options.maxDepth Optional integer specifying the maximum depth of namespaces to return.\n     * @param options.limit Maximum number of namespaces to return (default is 100).\n     * @param options.offset Number of namespaces to skip before returning results (default is 0).\n     * @returns Promise<ListNamespaceResponse>\n     */\n    async listNamespaces(options) {\n        const payload = {\n            prefix: options?.prefix,\n            suffix: options?.suffix,\n            max_depth: options?.maxDepth,\n            limit: options?.limit ?? 100,\n            offset: options?.offset ?? 0,\n        };\n        return this.fetch(\"/store/namespaces\", {\n            method: \"POST\",\n            json: payload,\n        });\n    }\n}\nexports.StoreClient = StoreClient;\nclass UiClient extends BaseClient {\n    static getOrCached(key, fn) {\n        if (UiClient.promiseCache[key] != null) {\n            return UiClient.promiseCache[key];\n        }\n        const promise = fn();\n        UiClient.promiseCache[key] = promise;\n        return promise;\n    }\n    async getComponent(assistantId, agentName) {\n        return UiClient[\"getOrCached\"](`${this.apiUrl}-${assistantId}-${agentName}`, async () => {\n            const response = await this.asyncCaller.fetch(...this.prepareFetchOptions(`/ui/${assistantId}`, {\n                headers: {\n                    Accept: \"text/html\",\n                    \"Content-Type\": \"application/json\",\n                },\n                method: \"POST\",\n                json: { name: agentName },\n            }));\n            return response.text();\n        });\n    }\n}\nObject.defineProperty(UiClient, \"promiseCache\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {}\n});\nclass Client {\n    constructor(config) {\n        /**\n         * The client for interacting with assistants.\n         */\n        Object.defineProperty(this, \"assistants\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with threads.\n         */\n        Object.defineProperty(this, \"threads\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with runs.\n         */\n        Object.defineProperty(this, \"runs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with cron runs.\n         */\n        Object.defineProperty(this, \"crons\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with the KV store.\n         */\n        Object.defineProperty(this, \"store\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The client for interacting with the UI.\n         * @internal Used by LoadExternalComponent and the API might change in the future.\n         */\n        Object.defineProperty(this, \"~ui\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.assistants = new AssistantsClient(config);\n        this.threads = new ThreadsClient(config);\n        this.runs = new RunsClient(config);\n        this.crons = new CronsClient(config);\n        this.store = new StoreClient(config);\n        this[\"~ui\"] = new UiClient(config);\n    }\n}\nexports.Client = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvY2xpZW50LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjLEdBQUcsbUJBQW1CLEdBQUcsa0JBQWtCLEdBQUcscUJBQXFCLEdBQUcsd0JBQXdCLEdBQUcsbUJBQW1CLEdBQUcsaUJBQWlCO0FBQ3RKLDBCQUEwQixtQkFBTyxDQUFDLDJHQUEwQjtBQUM1RCxpQkFBaUIsbUJBQU8sQ0FBQyx5RkFBaUI7QUFDMUMscUJBQXFCLG1CQUFPLENBQUMsaUdBQXFCO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLHlGQUFpQjtBQUMxQyxvQkFBb0IsbUJBQU8sQ0FBQywrRkFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxPQUFPO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkNBQTZDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFlBQVksRUFBRSxLQUFLO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsT0FBTztBQUMvQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsWUFBWTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQsc0JBQXNCLHFCQUFxQjtBQUMzQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsWUFBWTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZLGFBQWEsa0JBQWtCLEtBQUssVUFBVSw2QkFBNkI7QUFDcEk7QUFDQSx5Q0FBeUMsWUFBWTtBQUNyRCxzQkFBc0IsMkJBQTJCO0FBQ2pELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxZQUFZO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxZQUFZO0FBQ3JEO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0IsU0FBUztBQUNUO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQztBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFNBQVM7QUFDL0M7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsU0FBUztBQUN2RDtBQUNBLDRCQUE0QiwyQ0FBMkM7QUFDdkUsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSwwQ0FBMEMsU0FBUyxTQUFTLFdBQVcsS0FBSyxVQUFVLGlDQUFpQztBQUN2SDtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DLHNCQUFzQiwrQkFBK0I7QUFDckQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFNBQVM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsU0FBUztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDhEQUE4RCwrQkFBK0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFNBQVM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywrQ0FBK0M7QUFDaEY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLFNBQVM7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwwQkFBMEIsSUFBSSw0QkFBNEI7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUyxRQUFRLE1BQU07QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTLFFBQVEsTUFBTTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFNBQVMsUUFBUSxNQUFNO0FBQzdEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLDhGQUE4RixTQUFTLFFBQVEsTUFBTTtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULDhEQUE4RCwrQkFBK0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFNBQVMsUUFBUSxNQUFNO0FBQzdEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDhDQUE4QztBQUN6RCxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELE1BQU07QUFDbEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhDQUE4QztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELE1BQU07QUFDbEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxNQUFNO0FBQ2xFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9CQUFvQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwrQ0FBK0M7QUFDeEU7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFlBQVksR0FBRyxZQUFZLEdBQUcsVUFBVTtBQUNsRiw2RkFBNkYsWUFBWTtBQUN6RztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvY2xpZW50LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2xpZW50ID0gZXhwb3J0cy5TdG9yZUNsaWVudCA9IGV4cG9ydHMuUnVuc0NsaWVudCA9IGV4cG9ydHMuVGhyZWFkc0NsaWVudCA9IGV4cG9ydHMuQXNzaXN0YW50c0NsaWVudCA9IGV4cG9ydHMuQ3JvbnNDbGllbnQgPSBleHBvcnRzLmdldEFwaUtleSA9IHZvaWQgMDtcbmNvbnN0IGFzeW5jX2NhbGxlcl9qc18xID0gcmVxdWlyZShcIi4vdXRpbHMvYXN5bmNfY2FsbGVyLmNqc1wiKTtcbmNvbnN0IGVudl9qc18xID0gcmVxdWlyZShcIi4vdXRpbHMvZW52LmNqc1wiKTtcbmNvbnN0IHNpZ25hbHNfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL3NpZ25hbHMuY2pzXCIpO1xuY29uc3Qgc3NlX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy9zc2UuY2pzXCIpO1xuY29uc3Qgc3RyZWFtX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy9zdHJlYW0uY2pzXCIpO1xuLyoqXG4gKiBHZXQgdGhlIEFQSSBrZXkgZnJvbSB0aGUgZW52aXJvbm1lbnQuXG4gKiBQcmVjZWRlbmNlOlxuICogICAxLiBleHBsaWNpdCBhcmd1bWVudFxuICogICAyLiBMQU5HR1JBUEhfQVBJX0tFWVxuICogICAzLiBMQU5HU01JVEhfQVBJX0tFWVxuICogICA0LiBMQU5HQ0hBSU5fQVBJX0tFWVxuICpcbiAqIEBwYXJhbSBhcGlLZXkgLSBPcHRpb25hbCBBUEkga2V5IHByb3ZpZGVkIGFzIGFuIGFyZ3VtZW50XG4gKiBAcmV0dXJucyBUaGUgQVBJIGtleSBpZiBmb3VuZCwgb3RoZXJ3aXNlIHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBnZXRBcGlLZXkoYXBpS2V5KSB7XG4gICAgaWYgKGFwaUtleSkge1xuICAgICAgICByZXR1cm4gYXBpS2V5O1xuICAgIH1cbiAgICBjb25zdCBwcmVmaXhlcyA9IFtcIkxBTkdHUkFQSFwiLCBcIkxBTkdTTUlUSFwiLCBcIkxBTkdDSEFJTlwiXTtcbiAgICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcykge1xuICAgICAgICBjb25zdCBlbnZLZXkgPSAoMCwgZW52X2pzXzEuZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSkoYCR7cHJlZml4fV9BUElfS0VZYCk7XG4gICAgICAgIGlmIChlbnZLZXkpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBzdXJyb3VuZGluZyBxdW90ZXNcbiAgICAgICAgICAgIHJldHVybiBlbnZLZXkudHJpbSgpLnJlcGxhY2UoL15bXCInXXxbXCInXSQvZywgXCJcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuZ2V0QXBpS2V5ID0gZ2V0QXBpS2V5O1xuY2xhc3MgQmFzZUNsaWVudCB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFzeW5jQ2FsbGVyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRpbWVvdXRNc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcGlVcmxcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGVmYXVsdEhlYWRlcnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2FsbGVyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1heFJldHJpZXM6IDQsXG4gICAgICAgICAgICBtYXhDb25jdXJyZW5jeTogNCxcbiAgICAgICAgICAgIC4uLmNvbmZpZz8uY2FsbGVyT3B0aW9ucyxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGRlZmF1bHRBcGlVcmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6ODEyM1wiO1xuICAgICAgICBpZiAoIWNvbmZpZz8uYXBpVXJsICYmXG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgZ2xvYmFsVGhpcyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBmZXRjaFNtYiA9IFN5bWJvbC5mb3IoXCJsYW5nZ3JhcGhfYXBpOmZldGNoXCIpO1xuICAgICAgICAgICAgY29uc3QgdXJsU21iID0gU3ltYm9sLmZvcihcImxhbmdncmFwaF9hcGk6dXJsXCIpO1xuICAgICAgICAgICAgY29uc3QgZ2xvYmFsID0gZ2xvYmFsVGhpcztcbiAgICAgICAgICAgIGlmIChnbG9iYWxbZmV0Y2hTbWJdKVxuICAgICAgICAgICAgICAgIGNhbGxlck9wdGlvbnMuZmV0Y2ggPz89IGdsb2JhbFtmZXRjaFNtYl07XG4gICAgICAgICAgICBpZiAoZ2xvYmFsW3VybFNtYl0pXG4gICAgICAgICAgICAgICAgZGVmYXVsdEFwaVVybCA9IGdsb2JhbFt1cmxTbWJdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXN5bmNDYWxsZXIgPSBuZXcgYXN5bmNfY2FsbGVyX2pzXzEuQXN5bmNDYWxsZXIoY2FsbGVyT3B0aW9ucyk7XG4gICAgICAgIHRoaXMudGltZW91dE1zID0gY29uZmlnPy50aW1lb3V0TXM7XG4gICAgICAgIC8vIGRlZmF1bHQgbGltaXQgYmVpbmcgY2FwcGVkIGJ5IENocm9tZVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL3VuZGljaS9pc3N1ZXMvMTM3M1xuICAgICAgICAvLyBSZWdleCB0byByZW1vdmUgdHJhaWxpbmcgc2xhc2gsIGlmIHByZXNlbnRcbiAgICAgICAgdGhpcy5hcGlVcmwgPSBjb25maWc/LmFwaVVybD8ucmVwbGFjZSgvXFwvJC8sIFwiXCIpIHx8IGRlZmF1bHRBcGlVcmw7XG4gICAgICAgIHRoaXMuZGVmYXVsdEhlYWRlcnMgPSBjb25maWc/LmRlZmF1bHRIZWFkZXJzIHx8IHt9O1xuICAgICAgICBjb25zdCBhcGlLZXkgPSBnZXRBcGlLZXkoY29uZmlnPy5hcGlLZXkpO1xuICAgICAgICBpZiAoYXBpS2V5KSB7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRIZWFkZXJzW1wiWC1BcGktS2V5XCJdID0gYXBpS2V5O1xuICAgICAgICB9XG4gICAgfVxuICAgIHByZXBhcmVGZXRjaE9wdGlvbnMocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBtdXRhdGVkT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLnRoaXMuZGVmYXVsdEhlYWRlcnMsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG11dGF0ZWRPcHRpb25zLmpzb24pIHtcbiAgICAgICAgICAgIG11dGF0ZWRPcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShtdXRhdGVkT3B0aW9ucy5qc29uKTtcbiAgICAgICAgICAgIG11dGF0ZWRPcHRpb25zLmhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgLi4ubXV0YXRlZE9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWxldGUgbXV0YXRlZE9wdGlvbnMuanNvbjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGltZW91dFNpZ25hbCA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucz8udGltZW91dE1zICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy50aW1lb3V0TXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRpbWVvdXRTaWduYWwgPSBBYm9ydFNpZ25hbC50aW1lb3V0KG9wdGlvbnMudGltZW91dE1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnRpbWVvdXRNcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lb3V0U2lnbmFsID0gQWJvcnRTaWduYWwudGltZW91dCh0aGlzLnRpbWVvdXRNcyk7XG4gICAgICAgIH1cbiAgICAgICAgbXV0YXRlZE9wdGlvbnMuc2lnbmFsID0gKDAsIHNpZ25hbHNfanNfMS5tZXJnZVNpZ25hbHMpKHRpbWVvdXRTaWduYWwsIG11dGF0ZWRPcHRpb25zLnNpZ25hbCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFVybCA9IG5ldyBVUkwoYCR7dGhpcy5hcGlVcmx9JHtwYXRofWApO1xuICAgICAgICBpZiAobXV0YXRlZE9wdGlvbnMucGFyYW1zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhtdXRhdGVkT3B0aW9ucy5wYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGxldCBzdHJWYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgICAgIHRhcmdldFVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgc3RyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIG11dGF0ZWRPcHRpb25zLnBhcmFtcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RhcmdldFVybCwgbXV0YXRlZE9wdGlvbnNdO1xuICAgIH1cbiAgICBhc3luYyBmZXRjaChwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hc3luY0NhbGxlci5mZXRjaCguLi50aGlzLnByZXBhcmVGZXRjaE9wdGlvbnMocGF0aCwgb3B0aW9ucykpO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDIgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICB9XG59XG5jbGFzcyBDcm9uc0NsaWVudCBleHRlbmRzIEJhc2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRocmVhZElkIFRoZSBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBhc3Npc3RhbnRJZCBBc3Npc3RhbnQgSUQgdG8gdXNlIGZvciB0aGlzIGNyb24gam9iLlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIFBheWxvYWQgZm9yIGNyZWF0aW5nIGEgY3JvbiBqb2IuXG4gICAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgYmFja2dyb3VuZCBydW4uXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlRm9yVGhyZWFkKHRocmVhZElkLCBhc3Npc3RhbnRJZCwgcGF5bG9hZCkge1xuICAgICAgICBjb25zdCBqc29uID0ge1xuICAgICAgICAgICAgc2NoZWR1bGU6IHBheWxvYWQ/LnNjaGVkdWxlLFxuICAgICAgICAgICAgaW5wdXQ6IHBheWxvYWQ/LmlucHV0LFxuICAgICAgICAgICAgY29uZmlnOiBwYXlsb2FkPy5jb25maWcsXG4gICAgICAgICAgICBtZXRhZGF0YTogcGF5bG9hZD8ubWV0YWRhdGEsXG4gICAgICAgICAgICBhc3Npc3RhbnRfaWQ6IGFzc2lzdGFudElkLFxuICAgICAgICAgICAgaW50ZXJydXB0X2JlZm9yZTogcGF5bG9hZD8uaW50ZXJydXB0QmVmb3JlLFxuICAgICAgICAgICAgaW50ZXJydXB0X2FmdGVyOiBwYXlsb2FkPy5pbnRlcnJ1cHRBZnRlcixcbiAgICAgICAgICAgIHdlYmhvb2s6IHBheWxvYWQ/LndlYmhvb2ssXG4gICAgICAgICAgICBtdWx0aXRhc2tfc3RyYXRlZ3k6IHBheWxvYWQ/Lm11bHRpdGFza1N0cmF0ZWd5LFxuICAgICAgICAgICAgaWZfbm90X2V4aXN0czogcGF5bG9hZD8uaWZOb3RFeGlzdHMsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zL2Nyb25zYCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGpzb24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhc3Npc3RhbnRJZCBBc3Npc3RhbnQgSUQgdG8gdXNlIGZvciB0aGlzIGNyb24gam9iLlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIFBheWxvYWQgZm9yIGNyZWF0aW5nIGEgY3JvbiBqb2IuXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGUoYXNzaXN0YW50SWQsIHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QganNvbiA9IHtcbiAgICAgICAgICAgIHNjaGVkdWxlOiBwYXlsb2FkPy5zY2hlZHVsZSxcbiAgICAgICAgICAgIGlucHV0OiBwYXlsb2FkPy5pbnB1dCxcbiAgICAgICAgICAgIGNvbmZpZzogcGF5bG9hZD8uY29uZmlnLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHBheWxvYWQ/Lm1ldGFkYXRhLFxuICAgICAgICAgICAgYXNzaXN0YW50X2lkOiBhc3Npc3RhbnRJZCxcbiAgICAgICAgICAgIGludGVycnVwdF9iZWZvcmU6IHBheWxvYWQ/LmludGVycnVwdEJlZm9yZSxcbiAgICAgICAgICAgIGludGVycnVwdF9hZnRlcjogcGF5bG9hZD8uaW50ZXJydXB0QWZ0ZXIsXG4gICAgICAgICAgICB3ZWJob29rOiBwYXlsb2FkPy53ZWJob29rLFxuICAgICAgICAgICAgbXVsdGl0YXNrX3N0cmF0ZWd5OiBwYXlsb2FkPy5tdWx0aXRhc2tTdHJhdGVneSxcbiAgICAgICAgICAgIGlmX25vdF9leGlzdHM6IHBheWxvYWQ/LmlmTm90RXhpc3RzLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL3J1bnMvY3JvbnNgLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNyb25JZCBDcm9uIElEIG9mIENyb24gam9iIHRvIGRlbGV0ZS5cbiAgICAgKi9cbiAgICBhc3luYyBkZWxldGUoY3JvbklkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZmV0Y2goYC9ydW5zL2Nyb25zLyR7Y3JvbklkfWAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHF1ZXJ5IFF1ZXJ5IG9wdGlvbnMuXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBjcm9ucy5cbiAgICAgKi9cbiAgICBhc3luYyBzZWFyY2gocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goXCIvcnVucy9jcm9ucy9zZWFyY2hcIiwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICBhc3Npc3RhbnRfaWQ6IHF1ZXJ5Py5hc3Npc3RhbnRJZCA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdGhyZWFkX2lkOiBxdWVyeT8udGhyZWFkSWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGxpbWl0OiBxdWVyeT8ubGltaXQgPz8gMTAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBxdWVyeT8ub2Zmc2V0ID8/IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkNyb25zQ2xpZW50ID0gQ3JvbnNDbGllbnQ7XG5jbGFzcyBBc3Npc3RhbnRzQ2xpZW50IGV4dGVuZHMgQmFzZUNsaWVudCB7XG4gICAgLyoqXG4gICAgICogR2V0IGFuIGFzc2lzdGFudCBieSBJRC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhc3Npc3RhbnRJZCBUaGUgSUQgb2YgdGhlIGFzc2lzdGFudC5cbiAgICAgKiBAcmV0dXJucyBBc3Npc3RhbnRcbiAgICAgKi9cbiAgICBhc3luYyBnZXQoYXNzaXN0YW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ3JhcGggYXNzaWduZWQgdG8gYSBydW5uYWJsZVxuICAgICAqIEBwYXJhbSBhc3Npc3RhbnRJZCBUaGUgSUQgb2YgdGhlIGFzc2lzdGFudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy54cmF5IFdoZXRoZXIgdG8gaW5jbHVkZSBzdWJncmFwaHMgaW4gdGhlIHNlcmlhbGl6ZWQgZ3JhcGggcmVwcmVzZW50YXRpb24uIElmIGFuIGludGVnZXIgdmFsdWUgaXMgcHJvdmlkZWQsIG9ubHkgc3ViZ3JhcGhzIHdpdGggYSBkZXB0aCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHZhbHVlIHdpbGwgYmUgaW5jbHVkZWQuXG4gICAgICogQHJldHVybnMgU2VyaWFsaXplZCBncmFwaFxuICAgICAqL1xuICAgIGFzeW5jIGdldEdyYXBoKGFzc2lzdGFudElkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfS9ncmFwaGAsIHtcbiAgICAgICAgICAgIHBhcmFtczogeyB4cmF5OiBvcHRpb25zPy54cmF5IH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHN0YXRlIGFuZCBjb25maWcgc2NoZW1hIG9mIHRoZSBncmFwaCBhc3NpZ25lZCB0byBhIHJ1bm5hYmxlXG4gICAgICogQHBhcmFtIGFzc2lzdGFudElkIFRoZSBJRCBvZiB0aGUgYXNzaXN0YW50LlxuICAgICAqIEByZXR1cm5zIEdyYXBoIHNjaGVtYVxuICAgICAqL1xuICAgIGFzeW5jIGdldFNjaGVtYXMoYXNzaXN0YW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9L3NjaGVtYXNgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBzY2hlbWFzIG9mIGFuIGFzc2lzdGFudCBieSBJRC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhc3Npc3RhbnRJZCBUaGUgSUQgb2YgdGhlIGFzc2lzdGFudCB0byBnZXQgdGhlIHNjaGVtYSBvZi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIGdldHRpbmcgc3ViZ3JhcGhzLCBzdWNoIGFzIG5hbWVzcGFjZSBvciByZWN1cnNpb24gZXh0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyBUaGUgc3ViZ3JhcGhzIG9mIHRoZSBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U3ViZ3JhcGhzKGFzc2lzdGFudElkLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zPy5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfS9zdWJncmFwaHMvJHtvcHRpb25zLm5hbWVzcGFjZX1gLCB7IHBhcmFtczogeyByZWN1cnNlOiBvcHRpb25zPy5yZWN1cnNlIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9L3N1YmdyYXBoc2AsIHtcbiAgICAgICAgICAgIHBhcmFtczogeyByZWN1cnNlOiBvcHRpb25zPy5yZWN1cnNlIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYXNzaXN0YW50LlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIFBheWxvYWQgZm9yIGNyZWF0aW5nIGFuIGFzc2lzdGFudC5cbiAgICAgKiBAcmV0dXJucyBUaGUgY3JlYXRlZCBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlKHBheWxvYWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goXCIvYXNzaXN0YW50c1wiLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgIGdyYXBoX2lkOiBwYXlsb2FkLmdyYXBoSWQsXG4gICAgICAgICAgICAgICAgY29uZmlnOiBwYXlsb2FkLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogcGF5bG9hZC5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICBhc3Npc3RhbnRfaWQ6IHBheWxvYWQuYXNzaXN0YW50SWQsXG4gICAgICAgICAgICAgICAgaWZfZXhpc3RzOiBwYXlsb2FkLmlmRXhpc3RzLFxuICAgICAgICAgICAgICAgIG5hbWU6IHBheWxvYWQubmFtZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcGF5bG9hZC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYW4gYXNzaXN0YW50LlxuICAgICAqIEBwYXJhbSBhc3Npc3RhbnRJZCBJRCBvZiB0aGUgYXNzaXN0YW50LlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIFBheWxvYWQgZm9yIHVwZGF0aW5nIHRoZSBhc3Npc3RhbnQuXG4gICAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgYXNzaXN0YW50LlxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZShhc3Npc3RhbnRJZCwgcGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH1gLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICBncmFwaF9pZDogcGF5bG9hZC5ncmFwaElkLFxuICAgICAgICAgICAgICAgIGNvbmZpZzogcGF5bG9hZC5jb25maWcsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHBheWxvYWQubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgbmFtZTogcGF5bG9hZC5uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwYXlsb2FkLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBhc3Npc3RhbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXNzaXN0YW50SWQgSUQgb2YgdGhlIGFzc2lzdGFudC5cbiAgICAgKi9cbiAgICBhc3luYyBkZWxldGUoYXNzaXN0YW50SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCBhc3Npc3RhbnRzLlxuICAgICAqIEBwYXJhbSBxdWVyeSBRdWVyeSBvcHRpb25zLlxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgYXNzaXN0YW50cy5cbiAgICAgKi9cbiAgICBhc3luYyBzZWFyY2gocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goXCIvYXNzaXN0YW50cy9zZWFyY2hcIiwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICBncmFwaF9pZDogcXVlcnk/LmdyYXBoSWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBxdWVyeT8ubWV0YWRhdGEgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGxpbWl0OiBxdWVyeT8ubGltaXQgPz8gMTAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBxdWVyeT8ub2Zmc2V0ID8/IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCBhbGwgdmVyc2lvbnMgb2YgYW4gYXNzaXN0YW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFzc2lzdGFudElkIElEIG9mIHRoZSBhc3Npc3RhbnQuXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBhc3Npc3RhbnQgdmVyc2lvbnMuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VmVyc2lvbnMoYXNzaXN0YW50SWQsIHBheWxvYWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9L3ZlcnNpb25zYCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogcGF5bG9hZD8ubWV0YWRhdGEgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGxpbWl0OiBwYXlsb2FkPy5saW1pdCA/PyAxMCxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHBheWxvYWQ/Lm9mZnNldCA/PyAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgdmVyc2lvbiBvZiBhbiBhc3Npc3RhbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXNzaXN0YW50SWQgSUQgb2YgdGhlIGFzc2lzdGFudC5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgdmVyc2lvbiB0byBjaGFuZ2UgdG8uXG4gICAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgYXNzaXN0YW50LlxuICAgICAqL1xuICAgIGFzeW5jIHNldExhdGVzdChhc3Npc3RhbnRJZCwgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH0vbGF0ZXN0YCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGpzb246IHsgdmVyc2lvbiB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkFzc2lzdGFudHNDbGllbnQgPSBBc3Npc3RhbnRzQ2xpZW50O1xuY2xhc3MgVGhyZWFkc0NsaWVudCBleHRlbmRzIEJhc2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEdldCBhIHRocmVhZCBieSBJRC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aHJlYWRJZCBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEByZXR1cm5zIFRoZSB0aHJlYWQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0KHRocmVhZElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkcy8ke3RocmVhZElkfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgdGhyZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBheWxvYWQgUGF5bG9hZCBmb3IgY3JlYXRpbmcgYSB0aHJlYWQuXG4gICAgICogQHJldHVybnMgVGhlIGNyZWF0ZWQgdGhyZWFkLlxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZShwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkc2AsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucGF5bG9hZD8ubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoX2lkOiBwYXlsb2FkPy5ncmFwaElkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGhyZWFkX2lkOiBwYXlsb2FkPy50aHJlYWRJZCxcbiAgICAgICAgICAgICAgICBpZl9leGlzdHM6IHBheWxvYWQ/LmlmRXhpc3RzLFxuICAgICAgICAgICAgICAgIHN1cGVyc3RlcHM6IHBheWxvYWQ/LnN1cGVyc3RlcHM/Lm1hcCgocykgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlczogcy51cGRhdGVzLm1hcCgodSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogdS52YWx1ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiB1LmNvbW1hbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhc19ub2RlOiB1LmFzTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IGFuIGV4aXN0aW5nIHRocmVhZFxuICAgICAqIEBwYXJhbSB0aHJlYWRJZCBJRCBvZiB0aGUgdGhyZWFkIHRvIGJlIGNvcGllZFxuICAgICAqIEByZXR1cm5zIE5ld2x5IGNvcGllZCB0aHJlYWRcbiAgICAgKi9cbiAgICBhc3luYyBjb3B5KHRocmVhZElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkcy8ke3RocmVhZElkfS9jb3B5YCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhIHRocmVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aHJlYWRJZCBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIFBheWxvYWQgZm9yIHVwZGF0aW5nIHRoZSB0aHJlYWQuXG4gICAgICogQHJldHVybnMgVGhlIHVwZGF0ZWQgdGhyZWFkLlxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZSh0aHJlYWRJZCwgcGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL3RocmVhZHMvJHt0aHJlYWRJZH1gLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgICAgIGpzb246IHsgbWV0YWRhdGE6IHBheWxvYWQ/Lm1ldGFkYXRhIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGhyZWFkSWQgSUQgb2YgdGhlIHRocmVhZC5cbiAgICAgKi9cbiAgICBhc3luYyBkZWxldGUodGhyZWFkSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC90aHJlYWRzLyR7dGhyZWFkSWR9YCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCB0aHJlYWRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVlcnkgUXVlcnkgb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgdGhyZWFkc1xuICAgICAqL1xuICAgIGFzeW5jIHNlYXJjaChxdWVyeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcIi90aHJlYWRzL3NlYXJjaFwiLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBxdWVyeT8ubWV0YWRhdGEgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGxpbWl0OiBxdWVyeT8ubGltaXQgPz8gMTAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBxdWVyeT8ub2Zmc2V0ID8/IDAsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBxdWVyeT8uc3RhdHVzLFxuICAgICAgICAgICAgICAgIHNvcnRfYnk6IHF1ZXJ5Py5zb3J0QnksXG4gICAgICAgICAgICAgICAgc29ydF9vcmRlcjogcXVlcnk/LnNvcnRPcmRlcixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc3RhdGUgZm9yIGEgdGhyZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRocmVhZElkIElEIG9mIHRoZSB0aHJlYWQuXG4gICAgICogQHJldHVybnMgVGhyZWFkIHN0YXRlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFN0YXRlKHRocmVhZElkLCBjaGVja3BvaW50LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChjaGVja3BvaW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2hlY2twb2ludCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkcy8ke3RocmVhZElkfS9zdGF0ZS9jaGVja3BvaW50YCwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgICBqc29uOiB7IGNoZWNrcG9pbnQsIHN1YmdyYXBoczogb3B0aW9ucz8uc3ViZ3JhcGhzIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZXByZWNhdGVkXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL3RocmVhZHMvJHt0aHJlYWRJZH0vc3RhdGUvJHtjaGVja3BvaW50fWAsIHsgcGFyYW1zOiB7IHN1YmdyYXBoczogb3B0aW9ucz8uc3ViZ3JhcGhzIH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC90aHJlYWRzLyR7dGhyZWFkSWR9L3N0YXRlYCwge1xuICAgICAgICAgICAgcGFyYW1zOiB7IHN1YmdyYXBoczogb3B0aW9ucz8uc3ViZ3JhcGhzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgc3RhdGUgdG8gYSB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGhyZWFkSWQgVGhlIElEIG9mIHRoZSB0aHJlYWQuXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBhc3luYyB1cGRhdGVTdGF0ZSh0aHJlYWRJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL3RocmVhZHMvJHt0aHJlYWRJZH0vc3RhdGVgLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgIHZhbHVlczogb3B0aW9ucy52YWx1ZXMsXG4gICAgICAgICAgICAgICAgY2hlY2twb2ludF9pZDogb3B0aW9ucy5jaGVja3BvaW50SWQsXG4gICAgICAgICAgICAgICAgY2hlY2twb2ludDogb3B0aW9ucy5jaGVja3BvaW50LFxuICAgICAgICAgICAgICAgIGFzX25vZGU6IG9wdGlvbnM/LmFzTm9kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXRjaCB0aGUgbWV0YWRhdGEgb2YgYSB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGhyZWFkSWRPckNvbmZpZyBUaHJlYWQgSUQgb3IgY29uZmlnIHRvIHBhdGNoIHRoZSBzdGF0ZSBvZi5cbiAgICAgKiBAcGFyYW0gbWV0YWRhdGEgTWV0YWRhdGEgdG8gcGF0Y2ggdGhlIHN0YXRlIHdpdGguXG4gICAgICovXG4gICAgYXN5bmMgcGF0Y2hTdGF0ZSh0aHJlYWRJZE9yQ29uZmlnLCBtZXRhZGF0YSkge1xuICAgICAgICBsZXQgdGhyZWFkSWQ7XG4gICAgICAgIGlmICh0eXBlb2YgdGhyZWFkSWRPckNvbmZpZyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aHJlYWRJZE9yQ29uZmlnLmNvbmZpZ3VyYWJsZT8udGhyZWFkX2lkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhyZWFkIElEIGlzIHJlcXVpcmVkIHdoZW4gdXBkYXRpbmcgc3RhdGUgd2l0aCBhIGNvbmZpZy5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJlYWRJZCA9IHRocmVhZElkT3JDb25maWcuY29uZmlndXJhYmxlLnRocmVhZF9pZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocmVhZElkID0gdGhyZWFkSWRPckNvbmZpZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL3RocmVhZHMvJHt0aHJlYWRJZH0vc3RhdGVgLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgICAgIGpzb246IHsgbWV0YWRhdGE6IG1ldGFkYXRhIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHBhc3Qgc3RhdGVzIGZvciBhIHRocmVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aHJlYWRJZCBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIHRocmVhZCBzdGF0ZXMuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0SGlzdG9yeSh0aHJlYWRJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChgL3RocmVhZHMvJHt0aHJlYWRJZH0vaGlzdG9yeWAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgICAgbGltaXQ6IG9wdGlvbnM/LmxpbWl0ID8/IDEwLFxuICAgICAgICAgICAgICAgIGJlZm9yZTogb3B0aW9ucz8uYmVmb3JlLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBvcHRpb25zPy5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICBjaGVja3BvaW50OiBvcHRpb25zPy5jaGVja3BvaW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5UaHJlYWRzQ2xpZW50ID0gVGhyZWFkc0NsaWVudDtcbmNsYXNzIFJ1bnNDbGllbnQgZXh0ZW5kcyBCYXNlQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBydW4gYW5kIHN0cmVhbSB0aGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aHJlYWRJZCBUaGUgSUQgb2YgdGhlIHRocmVhZC5cbiAgICAgKiBAcGFyYW0gYXNzaXN0YW50SWQgQXNzaXN0YW50IElEIHRvIHVzZSBmb3IgdGhpcyBydW4uXG4gICAgICogQHBhcmFtIHBheWxvYWQgUGF5bG9hZCBmb3IgY3JlYXRpbmcgYSBydW4uXG4gICAgICovXG4gICAgYXN5bmMgKnN0cmVhbSh0aHJlYWRJZCwgYXNzaXN0YW50SWQsIHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QganNvbiA9IHtcbiAgICAgICAgICAgIGlucHV0OiBwYXlsb2FkPy5pbnB1dCxcbiAgICAgICAgICAgIGNvbW1hbmQ6IHBheWxvYWQ/LmNvbW1hbmQsXG4gICAgICAgICAgICBjb25maWc6IHBheWxvYWQ/LmNvbmZpZyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBwYXlsb2FkPy5tZXRhZGF0YSxcbiAgICAgICAgICAgIHN0cmVhbV9tb2RlOiBwYXlsb2FkPy5zdHJlYW1Nb2RlLFxuICAgICAgICAgICAgc3RyZWFtX3N1YmdyYXBoczogcGF5bG9hZD8uc3RyZWFtU3ViZ3JhcGhzLFxuICAgICAgICAgICAgZmVlZGJhY2tfa2V5czogcGF5bG9hZD8uZmVlZGJhY2tLZXlzLFxuICAgICAgICAgICAgYXNzaXN0YW50X2lkOiBhc3Npc3RhbnRJZCxcbiAgICAgICAgICAgIGludGVycnVwdF9iZWZvcmU6IHBheWxvYWQ/LmludGVycnVwdEJlZm9yZSxcbiAgICAgICAgICAgIGludGVycnVwdF9hZnRlcjogcGF5bG9hZD8uaW50ZXJydXB0QWZ0ZXIsXG4gICAgICAgICAgICBjaGVja3BvaW50OiBwYXlsb2FkPy5jaGVja3BvaW50LFxuICAgICAgICAgICAgY2hlY2twb2ludF9pZDogcGF5bG9hZD8uY2hlY2twb2ludElkLFxuICAgICAgICAgICAgd2ViaG9vazogcGF5bG9hZD8ud2ViaG9vayxcbiAgICAgICAgICAgIG11bHRpdGFza19zdHJhdGVneTogcGF5bG9hZD8ubXVsdGl0YXNrU3RyYXRlZ3ksXG4gICAgICAgICAgICBvbl9jb21wbGV0aW9uOiBwYXlsb2FkPy5vbkNvbXBsZXRpb24sXG4gICAgICAgICAgICBvbl9kaXNjb25uZWN0OiBwYXlsb2FkPy5vbkRpc2Nvbm5lY3QsXG4gICAgICAgICAgICBhZnRlcl9zZWNvbmRzOiBwYXlsb2FkPy5hZnRlclNlY29uZHMsXG4gICAgICAgICAgICBpZl9ub3RfZXhpc3RzOiBwYXlsb2FkPy5pZk5vdEV4aXN0cyxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZW5kcG9pbnQgPSB0aHJlYWRJZCA9PSBudWxsID8gYC9ydW5zL3N0cmVhbWAgOiBgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy9zdHJlYW1gO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXN5bmNDYWxsZXIuZmV0Y2goLi4udGhpcy5wcmVwYXJlRmV0Y2hPcHRpb25zKGVuZHBvaW50LCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgIHRpbWVvdXRNczogbnVsbCxcbiAgICAgICAgICAgIHNpZ25hbDogcGF5bG9hZD8uc2lnbmFsLFxuICAgICAgICB9KSk7XG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IChyZXNwb25zZS5ib2R5IHx8IG5ldyBSZWFkYWJsZVN0cmVhbSh7IHN0YXJ0OiAoY3RybCkgPT4gY3RybC5jbG9zZSgpIH0pKVxuICAgICAgICAgICAgLnBpcGVUaHJvdWdoKG5ldyBzc2VfanNfMS5CeXRlc0xpbmVEZWNvZGVyKCkpXG4gICAgICAgICAgICAucGlwZVRocm91Z2gobmV3IHNzZV9qc18xLlNTRURlY29kZXIoKSk7XG4gICAgICAgIHlpZWxkKiBzdHJlYW1fanNfMS5JdGVyYWJsZVJlYWRhYmxlU3RyZWFtLmZyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBydW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGhyZWFkSWQgVGhlIElEIG9mIHRoZSB0aHJlYWQuXG4gICAgICogQHBhcmFtIGFzc2lzdGFudElkIEFzc2lzdGFudCBJRCB0byB1c2UgZm9yIHRoaXMgcnVuLlxuICAgICAqIEBwYXJhbSBwYXlsb2FkIFBheWxvYWQgZm9yIGNyZWF0aW5nIGEgcnVuLlxuICAgICAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIHJ1bi5cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGUodGhyZWFkSWQsIGFzc2lzdGFudElkLCBwYXlsb2FkKSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSB7XG4gICAgICAgICAgICBpbnB1dDogcGF5bG9hZD8uaW5wdXQsXG4gICAgICAgICAgICBjb21tYW5kOiBwYXlsb2FkPy5jb21tYW5kLFxuICAgICAgICAgICAgY29uZmlnOiBwYXlsb2FkPy5jb25maWcsXG4gICAgICAgICAgICBtZXRhZGF0YTogcGF5bG9hZD8ubWV0YWRhdGEsXG4gICAgICAgICAgICBzdHJlYW1fbW9kZTogcGF5bG9hZD8uc3RyZWFtTW9kZSxcbiAgICAgICAgICAgIHN0cmVhbV9zdWJncmFwaHM6IHBheWxvYWQ/LnN0cmVhbVN1YmdyYXBocyxcbiAgICAgICAgICAgIGFzc2lzdGFudF9pZDogYXNzaXN0YW50SWQsXG4gICAgICAgICAgICBpbnRlcnJ1cHRfYmVmb3JlOiBwYXlsb2FkPy5pbnRlcnJ1cHRCZWZvcmUsXG4gICAgICAgICAgICBpbnRlcnJ1cHRfYWZ0ZXI6IHBheWxvYWQ/LmludGVycnVwdEFmdGVyLFxuICAgICAgICAgICAgd2ViaG9vazogcGF5bG9hZD8ud2ViaG9vayxcbiAgICAgICAgICAgIGNoZWNrcG9pbnQ6IHBheWxvYWQ/LmNoZWNrcG9pbnQsXG4gICAgICAgICAgICBjaGVja3BvaW50X2lkOiBwYXlsb2FkPy5jaGVja3BvaW50SWQsXG4gICAgICAgICAgICBtdWx0aXRhc2tfc3RyYXRlZ3k6IHBheWxvYWQ/Lm11bHRpdGFza1N0cmF0ZWd5LFxuICAgICAgICAgICAgYWZ0ZXJfc2Vjb25kczogcGF5bG9hZD8uYWZ0ZXJTZWNvbmRzLFxuICAgICAgICAgICAgaWZfbm90X2V4aXN0czogcGF5bG9hZD8uaWZOb3RFeGlzdHMsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zYCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICBzaWduYWw6IHBheWxvYWQ/LnNpZ25hbCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGJhdGNoIG9mIHN0YXRlbGVzcyBiYWNrZ3JvdW5kIHJ1bnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF5bG9hZHMgQW4gYXJyYXkgb2YgcGF5bG9hZHMgZm9yIGNyZWF0aW5nIHJ1bnMuXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgY3JlYXRlZCBydW5zLlxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUJhdGNoKHBheWxvYWRzKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkUGF5bG9hZHMgPSBwYXlsb2Fkc1xuICAgICAgICAgICAgLm1hcCgocGF5bG9hZCkgPT4gKHsgLi4ucGF5bG9hZCwgYXNzaXN0YW50X2lkOiBwYXlsb2FkLmFzc2lzdGFudElkIH0pKVxuICAgICAgICAgICAgLm1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhwYXlsb2FkKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiAhPT0gdW5kZWZpbmVkKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcIi9ydW5zL2JhdGNoXCIsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBqc29uOiBmaWx0ZXJlZFBheWxvYWRzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgcnVuIGFuZCB3YWl0IGZvciBpdCB0byBjb21wbGV0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aHJlYWRJZCBUaGUgSUQgb2YgdGhlIHRocmVhZC5cbiAgICAgKiBAcGFyYW0gYXNzaXN0YW50SWQgQXNzaXN0YW50IElEIHRvIHVzZSBmb3IgdGhpcyBydW4uXG4gICAgICogQHBhcmFtIHBheWxvYWQgUGF5bG9hZCBmb3IgY3JlYXRpbmcgYSBydW4uXG4gICAgICogQHJldHVybnMgVGhlIGxhc3QgdmFsdWVzIGNodW5rIG9mIHRoZSB0aHJlYWQuXG4gICAgICovXG4gICAgYXN5bmMgd2FpdCh0aHJlYWRJZCwgYXNzaXN0YW50SWQsIHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QganNvbiA9IHtcbiAgICAgICAgICAgIGlucHV0OiBwYXlsb2FkPy5pbnB1dCxcbiAgICAgICAgICAgIGNvbW1hbmQ6IHBheWxvYWQ/LmNvbW1hbmQsXG4gICAgICAgICAgICBjb25maWc6IHBheWxvYWQ/LmNvbmZpZyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBwYXlsb2FkPy5tZXRhZGF0YSxcbiAgICAgICAgICAgIGFzc2lzdGFudF9pZDogYXNzaXN0YW50SWQsXG4gICAgICAgICAgICBpbnRlcnJ1cHRfYmVmb3JlOiBwYXlsb2FkPy5pbnRlcnJ1cHRCZWZvcmUsXG4gICAgICAgICAgICBpbnRlcnJ1cHRfYWZ0ZXI6IHBheWxvYWQ/LmludGVycnVwdEFmdGVyLFxuICAgICAgICAgICAgY2hlY2twb2ludDogcGF5bG9hZD8uY2hlY2twb2ludCxcbiAgICAgICAgICAgIGNoZWNrcG9pbnRfaWQ6IHBheWxvYWQ/LmNoZWNrcG9pbnRJZCxcbiAgICAgICAgICAgIHdlYmhvb2s6IHBheWxvYWQ/LndlYmhvb2ssXG4gICAgICAgICAgICBtdWx0aXRhc2tfc3RyYXRlZ3k6IHBheWxvYWQ/Lm11bHRpdGFza1N0cmF0ZWd5LFxuICAgICAgICAgICAgb25fY29tcGxldGlvbjogcGF5bG9hZD8ub25Db21wbGV0aW9uLFxuICAgICAgICAgICAgb25fZGlzY29ubmVjdDogcGF5bG9hZD8ub25EaXNjb25uZWN0LFxuICAgICAgICAgICAgYWZ0ZXJfc2Vjb25kczogcGF5bG9hZD8uYWZ0ZXJTZWNvbmRzLFxuICAgICAgICAgICAgaWZfbm90X2V4aXN0czogcGF5bG9hZD8uaWZOb3RFeGlzdHMsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVuZHBvaW50ID0gdGhyZWFkSWQgPT0gbnVsbCA/IGAvcnVucy93YWl0YCA6IGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zL3dhaXRgO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2goZW5kcG9pbnQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgdGltZW91dE1zOiBudWxsLFxuICAgICAgICAgICAgc2lnbmFsOiBwYXlsb2FkPy5zaWduYWwsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByYWlzZUVycm9yID0gcGF5bG9hZD8ucmFpc2VFcnJvciAhPT0gdW5kZWZpbmVkID8gcGF5bG9hZC5yYWlzZUVycm9yIDogdHJ1ZTtcbiAgICAgICAgaWYgKHJhaXNlRXJyb3IgJiZcbiAgICAgICAgICAgIFwiX19lcnJvcl9fXCIgaW4gcmVzcG9uc2UgJiZcbiAgICAgICAgICAgIHR5cGVvZiByZXNwb25zZS5fX2Vycm9yX18gPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIHJlc3BvbnNlLl9fZXJyb3JfXyAmJlxuICAgICAgICAgICAgXCJlcnJvclwiIGluIHJlc3BvbnNlLl9fZXJyb3JfXyAmJlxuICAgICAgICAgICAgXCJtZXNzYWdlXCIgaW4gcmVzcG9uc2UuX19lcnJvcl9fKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzcG9uc2UuX19lcnJvcl9fPy5lcnJvcn06ICR7cmVzcG9uc2UuX19lcnJvcl9fPy5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCBhbGwgcnVucyBmb3IgYSB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGhyZWFkSWQgVGhlIElEIG9mIHRoZSB0aHJlYWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgRmlsdGVyaW5nIGFuZCBwYWdpbmF0aW9uIG9wdGlvbnMuXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBydW5zLlxuICAgICAqL1xuICAgIGFzeW5jIGxpc3QodGhyZWFkSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnNgLCB7XG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBsaW1pdDogb3B0aW9ucz8ubGltaXQgPz8gMTAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvcHRpb25zPy5vZmZzZXQgPz8gMCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IG9wdGlvbnM/LnN0YXR1cyA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgcnVuIGJ5IElELlxuICAgICAqXG4gICAgICogQHBhcmFtIHRocmVhZElkIFRoZSBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBydW5JZCBUaGUgSUQgb2YgdGhlIHJ1bi5cbiAgICAgKiBAcmV0dXJucyBUaGUgcnVuLlxuICAgICAqL1xuICAgIGFzeW5jIGdldCh0aHJlYWRJZCwgcnVuSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VsIGEgcnVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRocmVhZElkIFRoZSBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBydW5JZCBUaGUgSUQgb2YgdGhlIHJ1bi5cbiAgICAgKiBAcGFyYW0gd2FpdCBXaGV0aGVyIHRvIGJsb2NrIHdoZW4gY2FuY2VsaW5nXG4gICAgICogQHBhcmFtIGFjdGlvbiBBY3Rpb24gdG8gdGFrZSB3aGVuIGNhbmNlbGxpbmcgdGhlIHJ1bi4gUG9zc2libGUgdmFsdWVzIGFyZSBgaW50ZXJydXB0YCBvciBgcm9sbGJhY2tgLiBEZWZhdWx0IGlzIGBpbnRlcnJ1cHRgLlxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYXN5bmMgY2FuY2VsKHRocmVhZElkLCBydW5JZCwgd2FpdCA9IGZhbHNlLCBhY3Rpb24gPSBcImludGVycnVwdFwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9L2NhbmNlbGAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICB3YWl0OiB3YWl0ID8gXCIxXCIgOiBcIjBcIixcbiAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCbG9jayB1bnRpbCBhIHJ1biBpcyBkb25lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRocmVhZElkIFRoZSBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBydW5JZCBUaGUgSUQgb2YgdGhlIHJ1bi5cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGFzeW5jIGpvaW4odGhyZWFkSWQsIHJ1bklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9L2pvaW5gLCB7XG4gICAgICAgICAgICB0aW1lb3V0TXM6IG51bGwsXG4gICAgICAgICAgICBzaWduYWw6IG9wdGlvbnM/LnNpZ25hbCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0cmVhbSBvdXRwdXQgZnJvbSBhIHJ1biBpbiByZWFsLXRpbWUsIHVudGlsIHRoZSBydW4gaXMgZG9uZS5cbiAgICAgKiBPdXRwdXQgaXMgbm90IGJ1ZmZlcmVkLCBzbyBhbnkgb3V0cHV0IHByb2R1Y2VkIGJlZm9yZSB0aGlzIGNhbGwgd2lsbFxuICAgICAqIG5vdCBiZSByZWNlaXZlZCBoZXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRocmVhZElkIFRoZSBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBydW5JZCBUaGUgSUQgb2YgdGhlIHJ1bi5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIGNvbnRyb2xsaW5nIHRoZSBzdHJlYW0gYmVoYXZpb3I6XG4gICAgICogICAtIHNpZ25hbDogQW4gQWJvcnRTaWduYWwgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHN0cmVhbSByZXF1ZXN0XG4gICAgICogICAtIGNhbmNlbE9uRGlzY29ubmVjdDogV2hlbiB0cnVlLCBhdXRvbWF0aWNhbGx5IGNhbmNlbHMgdGhlIHJ1biBpZiB0aGUgY2xpZW50IGRpc2Nvbm5lY3RzIGZyb20gdGhlIHN0cmVhbVxuICAgICAqICAgLSBzdHJlYW1Nb2RlOiBDb250cm9scyB3aGF0IHR5cGVzIG9mIGV2ZW50cyB0byByZWNlaXZlIGZyb20gdGhlIHN0cmVhbSAoY2FuIGJlIGEgc2luZ2xlIG1vZGUgb3IgYXJyYXkgb2YgbW9kZXMpXG4gICAgICogICAgICAgIE11c3QgYmUgYSBzdWJzZXQgb2YgdGhlIHN0cmVhbSBtb2RlcyBwYXNzZWQgd2hlbiBjcmVhdGluZyB0aGUgcnVuLiBCYWNrZ3JvdW5kIHJ1bnMgZGVmYXVsdCB0byBoYXZpbmcgdGhlIHVuaW9uIG9mIGFsbFxuICAgICAqICAgICAgICBzdHJlYW0gbW9kZXMgZW5hYmxlZC5cbiAgICAgKiBAcmV0dXJucyBBbiBhc3luYyBnZW5lcmF0b3IgeWllbGRpbmcgc3RyZWFtIHBhcnRzLlxuICAgICAqL1xuICAgIGFzeW5jICpqb2luU3RyZWFtKHRocmVhZElkLCBydW5JZCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHRzID0gdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIG9wdGlvbnMgIT0gbnVsbCAmJlxuICAgICAgICAgICAgb3B0aW9ucyBpbnN0YW5jZW9mIEFib3J0U2lnbmFsXG4gICAgICAgICAgICA/IHsgc2lnbmFsOiBvcHRpb25zIH1cbiAgICAgICAgICAgIDogb3B0aW9ucztcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFzeW5jQ2FsbGVyLmZldGNoKC4uLnRoaXMucHJlcGFyZUZldGNoT3B0aW9ucyhgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfS9zdHJlYW1gLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICB0aW1lb3V0TXM6IG51bGwsXG4gICAgICAgICAgICBzaWduYWw6IG9wdHM/LnNpZ25hbCxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIGNhbmNlbF9vbl9kaXNjb25uZWN0OiBvcHRzPy5jYW5jZWxPbkRpc2Nvbm5lY3QgPyBcIjFcIiA6IFwiMFwiLFxuICAgICAgICAgICAgICAgIHN0cmVhbV9tb2RlOiBvcHRzPy5zdHJlYW1Nb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBzdHJlYW0gPSAocmVzcG9uc2UuYm9keSB8fCBuZXcgUmVhZGFibGVTdHJlYW0oeyBzdGFydDogKGN0cmwpID0+IGN0cmwuY2xvc2UoKSB9KSlcbiAgICAgICAgICAgIC5waXBlVGhyb3VnaChuZXcgc3NlX2pzXzEuQnl0ZXNMaW5lRGVjb2RlcigpKVxuICAgICAgICAgICAgLnBpcGVUaHJvdWdoKG5ldyBzc2VfanNfMS5TU0VEZWNvZGVyKCkpO1xuICAgICAgICB5aWVsZCogc3RyZWFtX2pzXzEuSXRlcmFibGVSZWFkYWJsZVN0cmVhbS5mcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcnVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRocmVhZElkIFRoZSBJRCBvZiB0aGUgdGhyZWFkLlxuICAgICAqIEBwYXJhbSBydW5JZCBUaGUgSUQgb2YgdGhlIHJ1bi5cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZSh0aHJlYWRJZCwgcnVuSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH1gLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuc0NsaWVudCA9IFJ1bnNDbGllbnQ7XG5jbGFzcyBTdG9yZUNsaWVudCBleHRlbmRzIEJhc2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqIFN0b3JlIG9yIHVwZGF0ZSBhbiBpdGVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWVzcGFjZSBBIGxpc3Qgb2Ygc3RyaW5ncyByZXByZXNlbnRpbmcgdGhlIG5hbWVzcGFjZSBwYXRoLlxuICAgICAqIEBwYXJhbSBrZXkgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgaXRlbSB3aXRoaW4gdGhlIG5hbWVzcGFjZS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgQSBkaWN0aW9uYXJ5IGNvbnRhaW5pbmcgdGhlIGl0ZW0ncyBkYXRhLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmluZGV4IENvbnRyb2xzIHNlYXJjaCBpbmRleGluZyAtIG51bGwgKHVzZSBkZWZhdWx0cyksIGZhbHNlIChkaXNhYmxlKSwgb3IgbGlzdCBvZiBmaWVsZCBwYXRocyB0byBpbmRleC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy50dGwgT3B0aW9uYWwgdGltZS10by1saXZlIGluIG1pbnV0ZXMgZm9yIHRoZSBpdGVtLCBvciBudWxsIGZvciBubyBleHBpcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIFByb21pc2U8dm9pZD5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGF3YWl0IGNsaWVudC5zdG9yZS5wdXRJdGVtKFxuICAgICAqICAgW1wiZG9jdW1lbnRzXCIsIFwidXNlcjEyM1wiXSxcbiAgICAgKiAgIFwiaXRlbTQ1NlwiLFxuICAgICAqICAgeyB0aXRsZTogXCJNeSBEb2N1bWVudFwiLCBjb250ZW50OiBcIkhlbGxvIFdvcmxkXCIgfSxcbiAgICAgKiAgIHsgdHRsOiA2MCB9IC8vIGV4cGlyZXMgaW4gNjAgbWludXRlc1xuICAgICAqICk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgYXN5bmMgcHV0SXRlbShuYW1lc3BhY2UsIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgbmFtZXNwYWNlLmZvckVhY2goKGxhYmVsKSA9PiB7XG4gICAgICAgICAgICBpZiAobGFiZWwuaW5jbHVkZXMoXCIuXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG5hbWVzcGFjZSBsYWJlbCAnJHtsYWJlbH0nLiBOYW1lc3BhY2UgbGFiZWxzIGNhbm5vdCBjb250YWluIHBlcmlvZHMgKCcuJylgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGluZGV4OiBvcHRpb25zPy5pbmRleCxcbiAgICAgICAgICAgIHR0bDogb3B0aW9ucz8udHRsLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcIi9zdG9yZS9pdGVtc1wiLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgICAgICBqc29uOiBwYXlsb2FkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYSBzaW5nbGUgaXRlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lc3BhY2UgQSBsaXN0IG9mIHN0cmluZ3MgcmVwcmVzZW50aW5nIHRoZSBuYW1lc3BhY2UgcGF0aC5cbiAgICAgKiBAcGFyYW0ga2V5IFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGl0ZW0uXG4gICAgICogQHBhcmFtIG9wdGlvbnMucmVmcmVzaFR0bCBXaGV0aGVyIHRvIHJlZnJlc2ggdGhlIFRUTCBvbiB0aGlzIHJlYWQgb3BlcmF0aW9uLiBJZiBudWxsLCB1c2VzIHRoZSBzdG9yZSdzIGRlZmF1bHQgYmVoYXZpb3IuXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxJdGVtPlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgaXRlbSA9IGF3YWl0IGNsaWVudC5zdG9yZS5nZXRJdGVtKFxuICAgICAqICAgW1wiZG9jdW1lbnRzXCIsIFwidXNlcjEyM1wiXSxcbiAgICAgKiAgIFwiaXRlbTQ1NlwiLFxuICAgICAqICAgeyByZWZyZXNoVHRsOiB0cnVlIH1cbiAgICAgKiApO1xuICAgICAqIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgICAqIC8vIHtcbiAgICAgKiAvLyAgIG5hbWVzcGFjZTogW1wiZG9jdW1lbnRzXCIsIFwidXNlcjEyM1wiXSxcbiAgICAgKiAvLyAgIGtleTogXCJpdGVtNDU2XCIsXG4gICAgICogLy8gICB2YWx1ZTogeyB0aXRsZTogXCJNeSBEb2N1bWVudFwiLCBjb250ZW50OiBcIkhlbGxvIFdvcmxkXCIgfSxcbiAgICAgKiAvLyAgIGNyZWF0ZWRBdDogXCIyMDI0LTA3LTMwVDEyOjAwOjAwWlwiLFxuICAgICAqIC8vICAgdXBkYXRlZEF0OiBcIjIwMjQtMDctMzBUMTI6MDA6MDBaXCJcbiAgICAgKiAvLyB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgYXN5bmMgZ2V0SXRlbShuYW1lc3BhY2UsIGtleSwgb3B0aW9ucykge1xuICAgICAgICBuYW1lc3BhY2UuZm9yRWFjaCgobGFiZWwpID0+IHtcbiAgICAgICAgICAgIGlmIChsYWJlbC5pbmNsdWRlcyhcIi5cIikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbmFtZXNwYWNlIGxhYmVsICcke2xhYmVsfScuIE5hbWVzcGFjZSBsYWJlbHMgY2Fubm90IGNvbnRhaW4gcGVyaW9kcyAoJy4nKWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2Uuam9pbihcIi5cIiksXG4gICAgICAgICAgICBrZXksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zPy5yZWZyZXNoVHRsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcmFtcy5yZWZyZXNoX3R0bCA9IG9wdGlvbnMucmVmcmVzaFR0bDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2goXCIvc3RvcmUvaXRlbXNcIiwge1xuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAuLi5yZXNwb25zZSxcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHJlc3BvbnNlLmNyZWF0ZWRfYXQsXG4gICAgICAgICAgICAgICAgdXBkYXRlZEF0OiByZXNwb25zZS51cGRhdGVkX2F0LFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYW4gaXRlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lc3BhY2UgQSBsaXN0IG9mIHN0cmluZ3MgcmVwcmVzZW50aW5nIHRoZSBuYW1lc3BhY2UgcGF0aC5cbiAgICAgKiBAcGFyYW0ga2V5IFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGl0ZW0uXG4gICAgICogQHJldHVybnMgUHJvbWlzZTx2b2lkPlxuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZUl0ZW0obmFtZXNwYWNlLCBrZXkpIHtcbiAgICAgICAgbmFtZXNwYWNlLmZvckVhY2goKGxhYmVsKSA9PiB7XG4gICAgICAgICAgICBpZiAobGFiZWwuaW5jbHVkZXMoXCIuXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG5hbWVzcGFjZSBsYWJlbCAnJHtsYWJlbH0nLiBOYW1lc3BhY2UgbGFiZWxzIGNhbm5vdCBjb250YWluIHBlcmlvZHMgKCcuJylgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKFwiL3N0b3JlL2l0ZW1zXCIsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgICAgIGpzb246IHsgbmFtZXNwYWNlLCBrZXkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlYXJjaCBmb3IgaXRlbXMgd2l0aGluIGEgbmFtZXNwYWNlIHByZWZpeC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lc3BhY2VQcmVmaXggTGlzdCBvZiBzdHJpbmdzIHJlcHJlc2VudGluZyB0aGUgbmFtZXNwYWNlIHByZWZpeC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5maWx0ZXIgT3B0aW9uYWwgZGljdGlvbmFyeSBvZiBrZXktdmFsdWUgcGFpcnMgdG8gZmlsdGVyIHJlc3VsdHMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMubGltaXQgTWF4aW11bSBudW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIChkZWZhdWx0IGlzIDEwKS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vZmZzZXQgTnVtYmVyIG9mIGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZyByZXN1bHRzIChkZWZhdWx0IGlzIDApLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnF1ZXJ5IE9wdGlvbmFsIHNlYXJjaCBxdWVyeS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5yZWZyZXNoVHRsIFdoZXRoZXIgdG8gcmVmcmVzaCB0aGUgVFRMIG9uIGl0ZW1zIHJldHVybmVkIGJ5IHRoaXMgc2VhcmNoLiBJZiBudWxsLCB1c2VzIHRoZSBzdG9yZSdzIGRlZmF1bHQgYmVoYXZpb3IuXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxTZWFyY2hJdGVtc1Jlc3BvbnNlPlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgcmVzdWx0cyA9IGF3YWl0IGNsaWVudC5zdG9yZS5zZWFyY2hJdGVtcyhcbiAgICAgKiAgIFtcImRvY3VtZW50c1wiXSxcbiAgICAgKiAgIHtcbiAgICAgKiAgICAgZmlsdGVyOiB7IGF1dGhvcjogXCJKb2huIERvZVwiIH0sXG4gICAgICogICAgIGxpbWl0OiA1LFxuICAgICAqICAgICByZWZyZXNoVHRsOiB0cnVlXG4gICAgICogICB9XG4gICAgICogKTtcbiAgICAgKiBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAgICAgKiAvLyB7XG4gICAgICogLy8gICBpdGVtczogW1xuICAgICAqIC8vICAgICB7XG4gICAgICogLy8gICAgICAgbmFtZXNwYWNlOiBbXCJkb2N1bWVudHNcIiwgXCJ1c2VyMTIzXCJdLFxuICAgICAqIC8vICAgICAgIGtleTogXCJpdGVtNzg5XCIsXG4gICAgICogLy8gICAgICAgdmFsdWU6IHsgdGl0bGU6IFwiQW5vdGhlciBEb2N1bWVudFwiLCBhdXRob3I6IFwiSm9obiBEb2VcIiB9LFxuICAgICAqIC8vICAgICAgIGNyZWF0ZWRBdDogXCIyMDI0LTA3LTMwVDEyOjAwOjAwWlwiLFxuICAgICAqIC8vICAgICAgIHVwZGF0ZWRBdDogXCIyMDI0LTA3LTMwVDEyOjAwOjAwWlwiXG4gICAgICogLy8gICAgIH0sXG4gICAgICogLy8gICAgIC8vIC4uLiBhZGRpdGlvbmFsIGl0ZW1zIC4uLlxuICAgICAqIC8vICAgXVxuICAgICAqIC8vIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhc3luYyBzZWFyY2hJdGVtcyhuYW1lc3BhY2VQcmVmaXgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgIG5hbWVzcGFjZV9wcmVmaXg6IG5hbWVzcGFjZVByZWZpeCxcbiAgICAgICAgICAgIGZpbHRlcjogb3B0aW9ucz8uZmlsdGVyLFxuICAgICAgICAgICAgbGltaXQ6IG9wdGlvbnM/LmxpbWl0ID8/IDEwLFxuICAgICAgICAgICAgb2Zmc2V0OiBvcHRpb25zPy5vZmZzZXQgPz8gMCxcbiAgICAgICAgICAgIHF1ZXJ5OiBvcHRpb25zPy5xdWVyeSxcbiAgICAgICAgICAgIHJlZnJlc2hfdHRsOiBvcHRpb25zPy5yZWZyZXNoVHRsLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2goXCIvc3RvcmUvaXRlbXMvc2VhcmNoXCIsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBqc29uOiBwYXlsb2FkLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGl0ZW1zOiByZXNwb25zZS5pdGVtcy5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IGl0ZW0uY3JlYXRlZF9hdCxcbiAgICAgICAgICAgICAgICB1cGRhdGVkQXQ6IGl0ZW0udXBkYXRlZF9hdCxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCBuYW1lc3BhY2VzIHdpdGggb3B0aW9uYWwgbWF0Y2ggY29uZGl0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zLnByZWZpeCBPcHRpb25hbCBsaXN0IG9mIHN0cmluZ3MgcmVwcmVzZW50aW5nIHRoZSBwcmVmaXggdG8gZmlsdGVyIG5hbWVzcGFjZXMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc3VmZml4IE9wdGlvbmFsIGxpc3Qgb2Ygc3RyaW5ncyByZXByZXNlbnRpbmcgdGhlIHN1ZmZpeCB0byBmaWx0ZXIgbmFtZXNwYWNlcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5tYXhEZXB0aCBPcHRpb25hbCBpbnRlZ2VyIHNwZWNpZnlpbmcgdGhlIG1heGltdW0gZGVwdGggb2YgbmFtZXNwYWNlcyB0byByZXR1cm4uXG4gICAgICogQHBhcmFtIG9wdGlvbnMubGltaXQgTWF4aW11bSBudW1iZXIgb2YgbmFtZXNwYWNlcyB0byByZXR1cm4gKGRlZmF1bHQgaXMgMTAwKS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5vZmZzZXQgTnVtYmVyIG9mIG5hbWVzcGFjZXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nIHJlc3VsdHMgKGRlZmF1bHQgaXMgMCkuXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxMaXN0TmFtZXNwYWNlUmVzcG9uc2U+XG4gICAgICovXG4gICAgYXN5bmMgbGlzdE5hbWVzcGFjZXMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICAgICAgcHJlZml4OiBvcHRpb25zPy5wcmVmaXgsXG4gICAgICAgICAgICBzdWZmaXg6IG9wdGlvbnM/LnN1ZmZpeCxcbiAgICAgICAgICAgIG1heF9kZXB0aDogb3B0aW9ucz8ubWF4RGVwdGgsXG4gICAgICAgICAgICBsaW1pdDogb3B0aW9ucz8ubGltaXQgPz8gMTAwLFxuICAgICAgICAgICAgb2Zmc2V0OiBvcHRpb25zPy5vZmZzZXQgPz8gMCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goXCIvc3RvcmUvbmFtZXNwYWNlc1wiLCB7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAganNvbjogcGF5bG9hZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TdG9yZUNsaWVudCA9IFN0b3JlQ2xpZW50O1xuY2xhc3MgVWlDbGllbnQgZXh0ZW5kcyBCYXNlQ2xpZW50IHtcbiAgICBzdGF0aWMgZ2V0T3JDYWNoZWQoa2V5LCBmbikge1xuICAgICAgICBpZiAoVWlDbGllbnQucHJvbWlzZUNhY2hlW2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFVpQ2xpZW50LnByb21pc2VDYWNoZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBmbigpO1xuICAgICAgICBVaUNsaWVudC5wcm9taXNlQ2FjaGVba2V5XSA9IHByb21pc2U7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICBhc3luYyBnZXRDb21wb25lbnQoYXNzaXN0YW50SWQsIGFnZW50TmFtZSkge1xuICAgICAgICByZXR1cm4gVWlDbGllbnRbXCJnZXRPckNhY2hlZFwiXShgJHt0aGlzLmFwaVVybH0tJHthc3Npc3RhbnRJZH0tJHthZ2VudE5hbWV9YCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFzeW5jQ2FsbGVyLmZldGNoKC4uLnRoaXMucHJlcGFyZUZldGNoT3B0aW9ucyhgL3VpLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgQWNjZXB0OiBcInRleHQvaHRtbFwiLFxuICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAganNvbjogeyBuYW1lOiBhZ2VudE5hbWUgfSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVaUNsaWVudCwgXCJwcm9taXNlQ2FjaGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB7fVxufSk7XG5jbGFzcyBDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhc3Npc3RhbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXNzaXN0YW50c1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aHJlYWRzLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGhyZWFkc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBydW5zLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicnVuc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBjcm9uIHJ1bnMuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjcm9uc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgS1Ygc3RvcmUuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdG9yZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgVUkuXG4gICAgICAgICAqIEBpbnRlcm5hbCBVc2VkIGJ5IExvYWRFeHRlcm5hbENvbXBvbmVudCBhbmQgdGhlIEFQSSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIn51aVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFzc2lzdGFudHMgPSBuZXcgQXNzaXN0YW50c0NsaWVudChjb25maWcpO1xuICAgICAgICB0aGlzLnRocmVhZHMgPSBuZXcgVGhyZWFkc0NsaWVudChjb25maWcpO1xuICAgICAgICB0aGlzLnJ1bnMgPSBuZXcgUnVuc0NsaWVudChjb25maWcpO1xuICAgICAgICB0aGlzLmNyb25zID0gbmV3IENyb25zQ2xpZW50KGNvbmZpZyk7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBuZXcgU3RvcmVDbGllbnQoY29uZmlnKTtcbiAgICAgICAgdGhpc1tcIn51aVwiXSA9IG5ldyBVaUNsaWVudChjb25maWcpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50ID0gQ2xpZW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/client.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/index.cjs":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/index.cjs ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.overrideFetchImplementation = exports.Client = void 0;\nvar client_js_1 = __webpack_require__(/*! ./client.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/client.cjs\");\nObject.defineProperty(exports, \"Client\", ({ enumerable: true, get: function () { return client_js_1.Client; } }));\nvar fetch_js_1 = __webpack_require__(/*! ./singletons/fetch.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.cjs\");\nObject.defineProperty(exports, \"overrideFetchImplementation\", ({ enumerable: true, get: function () { return fetch_js_1.overrideFetchImplementation; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvaW5kZXguY2pzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQyxHQUFHLGNBQWM7QUFDcEQsa0JBQWtCLG1CQUFPLENBQUMsbUZBQWM7QUFDeEMsMENBQXlDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQy9HLGlCQUFpQixtQkFBTyxDQUFDLHVHQUF3QjtBQUNqRCwrREFBOEQsRUFBRSxxQ0FBcUMsa0RBQWtELEVBQUMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbGFuZ2dyYXBoLXNkay9kaXN0L2luZGV4LmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3ZlcnJpZGVGZXRjaEltcGxlbWVudGF0aW9uID0gZXhwb3J0cy5DbGllbnQgPSB2b2lkIDA7XG52YXIgY2xpZW50X2pzXzEgPSByZXF1aXJlKFwiLi9jbGllbnQuY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnRfanNfMS5DbGllbnQ7IH0gfSk7XG52YXIgZmV0Y2hfanNfMSA9IHJlcXVpcmUoXCIuL3NpbmdsZXRvbnMvZmV0Y2guY2pzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib3ZlcnJpZGVGZXRjaEltcGxlbWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZXRjaF9qc18xLm92ZXJyaWRlRmV0Y2hJbXBsZW1lbnRhdGlvbjsgfSB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.cjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.cjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._getFetchImplementation = exports.overrideFetchImplementation = void 0;\n// Wrap the default fetch call due to issues with illegal invocations\n// in some environments:\n// https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n// @ts-expect-error Broad typing to support a range of fetch implementations\nconst DEFAULT_FETCH_IMPLEMENTATION = (...args) => fetch(...args);\nconst LANGSMITH_FETCH_IMPLEMENTATION_KEY = Symbol.for(\"lg:fetch_implementation\");\n/**\n * Overrides the fetch implementation used for LangSmith calls.\n * You should use this if you need to use an implementation of fetch\n * other than the default global (e.g. for dealing with proxies).\n * @param fetch The new fetch function to use.\n */\nconst overrideFetchImplementation = (fetch) => {\n    globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] = fetch;\n};\nexports.overrideFetchImplementation = overrideFetchImplementation;\n/**\n * @internal\n */\nconst _getFetchImplementation = () => {\n    return (globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] ??\n        DEFAULT_FETCH_IMPLEMENTATION);\n};\nexports._getFetchImplementation = _getFetchImplementation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3Qvc2luZ2xldG9ucy9mZXRjaC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcsbUNBQW1DO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiIsInNvdXJjZXMiOlsiL2hvbWUvY2V0ZWMvTm9kZVByb2plY3RzL2FndWlfdGVzdC9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3Qvc2luZ2xldG9ucy9mZXRjaC5janMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9nZXRGZXRjaEltcGxlbWVudGF0aW9uID0gZXhwb3J0cy5vdmVycmlkZUZldGNoSW1wbGVtZW50YXRpb24gPSB2b2lkIDA7XG4vLyBXcmFwIHRoZSBkZWZhdWx0IGZldGNoIGNhbGwgZHVlIHRvIGlzc3VlcyB3aXRoIGlsbGVnYWwgaW52b2NhdGlvbnNcbi8vIGluIHNvbWUgZW52aXJvbm1lbnRzOlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjk4NzY4NTkvd2h5LWRvZXMtYmluZC1maXgtZmFpbGVkLXRvLWV4ZWN1dGUtZmV0Y2gtb24td2luZG93LWlsbGVnYWwtaW52b2NhdGlvbi1lcnJcbi8vIEB0cy1leHBlY3QtZXJyb3IgQnJvYWQgdHlwaW5nIHRvIHN1cHBvcnQgYSByYW5nZSBvZiBmZXRjaCBpbXBsZW1lbnRhdGlvbnNcbmNvbnN0IERFRkFVTFRfRkVUQ0hfSU1QTEVNRU5UQVRJT04gPSAoLi4uYXJncykgPT4gZmV0Y2goLi4uYXJncyk7XG5jb25zdCBMQU5HU01JVEhfRkVUQ0hfSU1QTEVNRU5UQVRJT05fS0VZID0gU3ltYm9sLmZvcihcImxnOmZldGNoX2ltcGxlbWVudGF0aW9uXCIpO1xuLyoqXG4gKiBPdmVycmlkZXMgdGhlIGZldGNoIGltcGxlbWVudGF0aW9uIHVzZWQgZm9yIExhbmdTbWl0aCBjYWxscy5cbiAqIFlvdSBzaG91bGQgdXNlIHRoaXMgaWYgeW91IG5lZWQgdG8gdXNlIGFuIGltcGxlbWVudGF0aW9uIG9mIGZldGNoXG4gKiBvdGhlciB0aGFuIHRoZSBkZWZhdWx0IGdsb2JhbCAoZS5nLiBmb3IgZGVhbGluZyB3aXRoIHByb3hpZXMpLlxuICogQHBhcmFtIGZldGNoIFRoZSBuZXcgZmV0Y2ggZnVuY3Rpb24gdG8gdXNlLlxuICovXG5jb25zdCBvdmVycmlkZUZldGNoSW1wbGVtZW50YXRpb24gPSAoZmV0Y2gpID0+IHtcbiAgICBnbG9iYWxUaGlzW0xBTkdTTUlUSF9GRVRDSF9JTVBMRU1FTlRBVElPTl9LRVldID0gZmV0Y2g7XG59O1xuZXhwb3J0cy5vdmVycmlkZUZldGNoSW1wbGVtZW50YXRpb24gPSBvdmVycmlkZUZldGNoSW1wbGVtZW50YXRpb247XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBfZ2V0RmV0Y2hJbXBsZW1lbnRhdGlvbiA9ICgpID0+IHtcbiAgICByZXR1cm4gKGdsb2JhbFRoaXNbTEFOR1NNSVRIX0ZFVENIX0lNUExFTUVOVEFUSU9OX0tFWV0gPz9cbiAgICAgICAgREVGQVVMVF9GRVRDSF9JTVBMRU1FTlRBVElPTik7XG59O1xuZXhwb3J0cy5fZ2V0RmV0Y2hJbXBsZW1lbnRhdGlvbiA9IF9nZXRGZXRjaEltcGxlbWVudGF0aW9uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.cjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.cjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsyncCaller = void 0;\nconst p_retry_1 = __importDefault(__webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\"));\nconst p_queue_1 = __importDefault(__webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\"));\nconst fetch_js_1 = __webpack_require__(/*! ../singletons/fetch.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/singletons/fetch.cjs\");\nconst STATUS_NO_RETRY = [\n    400, // Bad Request\n    401, // Unauthorized\n    402, // Payment required\n    403, // Forbidden\n    404, // Not Found\n    405, // Method Not Allowed\n    406, // Not Acceptable\n    407, // Proxy Authentication Required\n    408, // Request Timeout\n    409, // Conflict\n    422, // Unprocessable Entity\n];\n/**\n * Do not rely on globalThis.Response, rather just\n * do duck typing\n */\nfunction isResponse(x) {\n    if (x == null || typeof x !== \"object\")\n        return false;\n    return \"status\" in x && \"statusText\" in x && \"text\" in x;\n}\n/**\n * Utility error to properly handle failed requests\n */\nclass HTTPError extends Error {\n    constructor(status, message, response) {\n        super(`HTTP ${status}: ${message}`);\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.status = status;\n        this.text = message;\n        this.response = response;\n    }\n    static async fromResponse(response, options) {\n        try {\n            return new HTTPError(response.status, await response.text(), options?.includeResponse ? response : undefined);\n        }\n        catch {\n            return new HTTPError(response.status, response.statusText, options?.includeResponse ? response : undefined);\n        }\n    }\n}\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 5. This\n * means that by default, each call will be retried up to 5 times, with an\n * exponential backoff between each attempt.\n */\nclass AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedResponseHook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"customFetch\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 4;\n        if (\"default\" in p_queue_1.default) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new p_queue_1.default.default({\n                concurrency: this.maxConcurrency,\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new p_queue_1.default({ concurrency: this.maxConcurrency });\n        }\n        this.onFailedResponseHook = params?.onFailedResponseHook;\n        this.customFetch = params.fetch;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        const onFailedResponseHook = this.onFailedResponseHook;\n        return this.queue.add(() => (0, p_retry_1.default)(() => callable(...args).catch(async (error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else if (isResponse(error)) {\n                throw await HTTPError.fromResponse(error, {\n                    includeResponse: !!onFailedResponseHook,\n                });\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            async onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.message.startsWith(\"AbortError\")) {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                if (error instanceof HTTPError) {\n                    if (STATUS_NO_RETRY.includes(error.status)) {\n                        throw error;\n                    }\n                    if (onFailedResponseHook && error.response) {\n                        await onFailedResponseHook(error.response);\n                    }\n                }\n            },\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n            retries: this.maxRetries,\n            randomize: true,\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        const fetchFn = this.customFetch ?? (0, fetch_js_1._getFetchImplementation)();\n        return this.call(() => fetchFn(...args).then((res) => (res.ok ? res : Promise.reject(res))));\n    }\n}\nexports.AsyncCaller = AsyncCaller;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/env.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/utils/env.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getEnvironmentVariable = void 0;\nfunction getEnvironmentVariable(name) {\n    // Certain setups (Deno, frontend) will throw an error if you try to access environment variables\n    try {\n        return typeof process !== \"undefined\"\n            ? // eslint-disable-next-line no-process-env\n                process.env?.[name]\n            : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\nexports.getEnvironmentVariable = getEnvironmentVariable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvdXRpbHMvZW52LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2xhbmdncmFwaC1zZGsvZGlzdC91dGlscy9lbnYuY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFbnZpcm9ubWVudFZhcmlhYmxlID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShuYW1lKSB7XG4gICAgLy8gQ2VydGFpbiBzZXR1cHMgKERlbm8sIGZyb250ZW5kKSB3aWxsIHRocm93IGFuIGVycm9yIGlmIHlvdSB0cnkgdG8gYWNjZXNzIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1lbnZcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudj8uW25hbWVdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLmdldEVudmlyb25tZW50VmFyaWFibGUgPSBnZXRFbnZpcm9ubWVudFZhcmlhYmxlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/env.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/signals.cjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/utils/signals.cjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeSignals = void 0;\nfunction mergeSignals(...signals) {\n    const nonZeroSignals = signals.filter((signal) => signal != null);\n    if (nonZeroSignals.length === 0)\n        return undefined;\n    if (nonZeroSignals.length === 1)\n        return nonZeroSignals[0];\n    const controller = new AbortController();\n    for (const signal of signals) {\n        if (signal?.aborted) {\n            controller.abort(signal.reason);\n            return controller.signal;\n        }\n        signal?.addEventListener(\"abort\", () => controller.abort(signal.reason), {\n            once: true,\n        });\n    }\n    return controller.signal;\n}\nexports.mergeSignals = mergeSignals;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvdXRpbHMvc2lnbmFscy5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2xhbmdncmFwaC1zZGsvZGlzdC91dGlscy9zaWduYWxzLmNqcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VTaWduYWxzID0gdm9pZCAwO1xuZnVuY3Rpb24gbWVyZ2VTaWduYWxzKC4uLnNpZ25hbHMpIHtcbiAgICBjb25zdCBub25aZXJvU2lnbmFscyA9IHNpZ25hbHMuZmlsdGVyKChzaWduYWwpID0+IHNpZ25hbCAhPSBudWxsKTtcbiAgICBpZiAobm9uWmVyb1NpZ25hbHMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmIChub25aZXJvU2lnbmFscy5sZW5ndGggPT09IDEpXG4gICAgICAgIHJldHVybiBub25aZXJvU2lnbmFsc1swXTtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGZvciAoY29uc3Qgc2lnbmFsIG9mIHNpZ25hbHMpIHtcbiAgICAgICAgaWYgKHNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydChzaWduYWwucmVhc29uKTtcbiAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyLnNpZ25hbDtcbiAgICAgICAgfVxuICAgICAgICBzaWduYWw/LmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCAoKSA9PiBjb250cm9sbGVyLmFib3J0KHNpZ25hbC5yZWFzb24pLCB7XG4gICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2xsZXIuc2lnbmFsO1xufVxuZXhwb3J0cy5tZXJnZVNpZ25hbHMgPSBtZXJnZVNpZ25hbHM7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/signals.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/sse.cjs":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/utils/sse.cjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SSEDecoder = exports.BytesLineDecoder = void 0;\nconst CR = \"\\r\".charCodeAt(0);\nconst LF = \"\\n\".charCodeAt(0);\nconst NULL = \"\\0\".charCodeAt(0);\nconst COLON = \":\".charCodeAt(0);\nconst SPACE = \" \".charCodeAt(0);\nconst TRAILING_NEWLINE = [CR, LF];\nclass BytesLineDecoder extends TransformStream {\n    constructor() {\n        let buffer = [];\n        let trailingCr = false;\n        super({\n            start() {\n                buffer = [];\n                trailingCr = false;\n            },\n            transform(chunk, controller) {\n                // See https://docs.python.org/3/glossary.html#term-universal-newlines\n                let text = chunk;\n                // Handle trailing CR from previous chunk\n                if (trailingCr) {\n                    text = joinArrays([[CR], text]);\n                    trailingCr = false;\n                }\n                // Check for trailing CR in current chunk\n                if (text.length > 0 && text.at(-1) === CR) {\n                    trailingCr = true;\n                    text = text.subarray(0, -1);\n                }\n                if (!text.length)\n                    return;\n                const trailingNewline = TRAILING_NEWLINE.includes(text.at(-1));\n                const lastIdx = text.length - 1;\n                const { lines } = text.reduce((acc, cur, idx) => {\n                    if (acc.from > idx)\n                        return acc;\n                    if (cur === CR || cur === LF) {\n                        acc.lines.push(text.subarray(acc.from, idx));\n                        if (cur === CR && text[idx + 1] === LF) {\n                            acc.from = idx + 2;\n                        }\n                        else {\n                            acc.from = idx + 1;\n                        }\n                    }\n                    if (idx === lastIdx && acc.from <= lastIdx) {\n                        acc.lines.push(text.subarray(acc.from));\n                    }\n                    return acc;\n                }, { lines: [], from: 0 });\n                if (lines.length === 1 && !trailingNewline) {\n                    buffer.push(lines[0]);\n                    return;\n                }\n                if (buffer.length) {\n                    // Include existing buffer in first line\n                    buffer.push(lines[0]);\n                    lines[0] = joinArrays(buffer);\n                    buffer = [];\n                }\n                if (!trailingNewline) {\n                    // If the last segment is not newline terminated,\n                    // buffer it for the next chunk\n                    if (lines.length)\n                        buffer = [lines.pop()];\n                }\n                // Enqueue complete lines\n                for (const line of lines) {\n                    controller.enqueue(line);\n                }\n            },\n            flush(controller) {\n                if (buffer.length) {\n                    controller.enqueue(joinArrays(buffer));\n                }\n            },\n        });\n    }\n}\nexports.BytesLineDecoder = BytesLineDecoder;\nclass SSEDecoder extends TransformStream {\n    constructor() {\n        let event = \"\";\n        let data = [];\n        let lastEventId = \"\";\n        let retry = null;\n        const decoder = new TextDecoder();\n        super({\n            transform(chunk, controller) {\n                // Handle empty line case\n                if (!chunk.length) {\n                    if (!event && !data.length && !lastEventId && retry == null)\n                        return;\n                    const sse = {\n                        event,\n                        data: data.length ? decodeArraysToJson(decoder, data) : null,\n                    };\n                    // NOTE: as per the SSE spec, do not reset lastEventId\n                    event = \"\";\n                    data = [];\n                    retry = null;\n                    controller.enqueue(sse);\n                    return;\n                }\n                // Ignore comments\n                if (chunk[0] === COLON)\n                    return;\n                const sepIdx = chunk.indexOf(COLON);\n                if (sepIdx === -1)\n                    return;\n                const fieldName = decoder.decode(chunk.subarray(0, sepIdx));\n                let value = chunk.subarray(sepIdx + 1);\n                if (value[0] === SPACE)\n                    value = value.subarray(1);\n                if (fieldName === \"event\") {\n                    event = decoder.decode(value);\n                }\n                else if (fieldName === \"data\") {\n                    data.push(value);\n                }\n                else if (fieldName === \"id\") {\n                    if (value.indexOf(NULL) === -1)\n                        lastEventId = decoder.decode(value);\n                }\n                else if (fieldName === \"retry\") {\n                    const retryNum = Number.parseInt(decoder.decode(value));\n                    if (!Number.isNaN(retryNum))\n                        retry = retryNum;\n                }\n            },\n            flush(controller) {\n                if (event) {\n                    controller.enqueue({\n                        event,\n                        data: data.length ? decodeArraysToJson(decoder, data) : null,\n                    });\n                }\n            },\n        });\n    }\n}\nexports.SSEDecoder = SSEDecoder;\nfunction joinArrays(data) {\n    const totalLength = data.reduce((acc, curr) => acc + curr.length, 0);\n    let merged = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const c of data) {\n        merged.set(c, offset);\n        offset += c.length;\n    }\n    return merged;\n}\nfunction decodeArraysToJson(decoder, data) {\n    return JSON.parse(decoder.decode(joinArrays(data)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/sse.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/stream.cjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/dist/utils/stream.cjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IterableReadableStream = void 0;\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nclass IterableReadableStream extends ReadableStream {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined,\n                };\n            }\n            else {\n                return {\n                    done: false,\n                    value: result.value,\n                };\n            }\n        }\n        catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return { done: true, value: undefined };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start(controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value }) => {\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel() {\n                reader.releaseLock();\n            },\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull(controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel(reason) {\n                await generator.return(reason);\n            },\n        });\n    }\n}\nexports.IterableReadableStream = IterableReadableStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2Rpc3QvdXRpbHMvc3RyZWFtLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQsdUNBQXVDO0FBQ3ZDLGlDQUFpQztBQUNqQztBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hELHVDQUF1QztBQUN2QyxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGFBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixjQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsOEJBQThCIiwic291cmNlcyI6WyIvaG9tZS9jZXRlYy9Ob2RlUHJvamVjdHMvYWd1aV90ZXN0L25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2xhbmdncmFwaC1zZGsvZGlzdC91dGlscy9zdHJlYW0uY2pzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JdGVyYWJsZVJlYWRhYmxlU3RyZWFtID0gdm9pZCAwO1xuLypcbiAqIFN1cHBvcnQgYXN5bmMgaXRlcmF0b3Igc3ludGF4IGZvciBSZWFkYWJsZVN0cmVhbXMgaW4gYWxsIGVudmlyb25tZW50cy5cbiAqIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL01hdHRpYXNCdWVsZW5zL3dlYi1zdHJlYW1zLXBvbHlmaWxsL3B1bGwvMTIyI2lzc3VlY29tbWVudC0xNjI3MzU0NDkwXG4gKi9cbmNsYXNzIEl0ZXJhYmxlUmVhZGFibGVTdHJlYW0gZXh0ZW5kcyBSZWFkYWJsZVN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlYWRlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbnN1cmVSZWFkZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5yZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZGVyID0gdGhpcy5nZXRSZWFkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBuZXh0KCkge1xuICAgICAgICB0aGlzLmVuc3VyZVJlYWRlcigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5yZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgY2xvc2VkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgZXJyb3JlZFxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZXR1cm4oKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlUmVhZGVyKCk7XG4gICAgICAgIC8vIElmIHdyYXBwZWQgaW4gYSBOb2RlIHN0cmVhbSwgY2FuY2VsIGlzIGFscmVhZHkgY2FsbGVkLlxuICAgICAgICBpZiAodGhpcy5sb2NrZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSB0aGlzLnJlYWRlci5jYW5jZWwoKTsgLy8gY2FuY2VsIGZpcnN0LCBidXQgZG9uJ3QgYXdhaXQgeWV0XG4gICAgICAgICAgICB0aGlzLnJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgZmlyc3RcbiAgICAgICAgICAgIGF3YWl0IGNhbmNlbFByb21pc2U7IC8vIG5vdyBhd2FpdCBpdFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhc3luYyB0aHJvdyhlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlUmVhZGVyKCk7XG4gICAgICAgIGlmICh0aGlzLmxvY2tlZCkge1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IHRoaXMucmVhZGVyLmNhbmNlbCgpOyAvLyBjYW5jZWwgZmlyc3QsIGJ1dCBkb24ndCBhd2FpdCB5ZXRcbiAgICAgICAgICAgIHRoaXMucmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayBmaXJzdFxuICAgICAgICAgICAgYXdhaXQgY2FuY2VsUHJvbWlzZTsgLy8gbm93IGF3YWl0IGl0XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmUgTm90IHByZXNlbnQgaW4gTm9kZSAxOCB0eXBlcywgcmVxdWlyZWQgaW4gbGF0ZXN0IE5vZGUgMjJcbiAgICBhc3luYyBbU3ltYm9sLmFzeW5jRGlzcG9zZV0oKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmV0dXJuKCk7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkge1xuICAgICAgICAvLyBGcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TdHJlYW1zX0FQSS9Vc2luZ19yZWFkYWJsZV9zdHJlYW1zI3JlYWRpbmdfdGhlX3N0cmVhbVxuICAgICAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmFibGVSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHB1bXAoKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwdW1wKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWQoKS50aGVuKCh7IGRvbmUsIHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gbm8gbW9yZSBkYXRhIG5lZWRzIHRvIGJlIGNvbnN1bWVkLCBjbG9zZSB0aGUgc3RyZWFtXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnF1ZXVlIHRoZSBuZXh0IGRhdGEgY2h1bmsgaW50byBvdXIgdGFyZ2V0IHN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwdW1wKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWwoKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Bc3luY0dlbmVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJdGVyYWJsZVJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IGdlbmVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBubyBtb3JlIGRhdGEgbmVlZHMgdG8gYmUgY29uc3VtZWQsIGNsb3NlIHRoZSBzdHJlYW1cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEZpeDogYGVsc2UgaWYgKHZhbHVlKWAgd2lsbCBoYW5nIHRoZSBzdHJlYW1pbmcgd2hlbiBudWxsaXNoIHZhbHVlIChlLmcuIGVtcHR5IHN0cmluZykgaXMgcHVsbGVkXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZ2VuZXJhdG9yLnJldHVybihyZWFzb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5JdGVyYWJsZVJlYWRhYmxlU3RyZWFtID0gSXRlcmFibGVSZWFkYWJsZVN0cmVhbTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/dist/utils/stream.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/langgraph-sdk/index.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/langgraph-sdk/index.cjs ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/index.cjs */ \"(rsc)/./node_modules/@langchain/langgraph-sdk/dist/index.cjs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9sYW5nZ3JhcGgtc2RrL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBQSw0SEFBNEMiLCJzb3VyY2VzIjpbIi9ob21lL2NldGVjL05vZGVQcm9qZWN0cy9hZ3VpX3Rlc3Qvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vbGFuZ2dyYXBoLXNkay9pbmRleC5janMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvaW5kZXguY2pzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/langgraph-sdk/index.cjs\n");

/***/ })

};
;